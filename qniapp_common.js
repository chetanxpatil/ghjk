var QNIAPP = {
  IN: {
    "Qt": {
      "qtdtls": {
        "rider": [],
        "product": "SANCHPV9",
        "prodcat": "Savings",
        "prodcat_cd": "SVNG",
        "plan": "Guaranteed Maturity", //UPDATE
        "sumAssured": 411000,
        "incpDt": "18/08/2023", //UPDATE
        "qtDt": "18/08/2023", //UPDATE
        "dob": "18/08/2005",
        "ageRange": "Age1", //UPDATE
        "age": 18,
        "gender": "M",
        "tobstatus": "0", //UPDATE
        "suboption": "",
        "term": "10",
        "ppt": "5", //UPDATE
        "pptOption": "Limited", //UPDATE
        "pptopt": "Limited",
        "freq": "Annual",
        "freq_cd": "FREQ_1",
        "KTAX": "0",
        "jnk": "0",
        "paymethod": "Online Payment",
        "v9flg": true,
        "is3dLifeExtraLifeOption": "Y",
        "isExCustomer": "0",
        "npsFlag": "N",
        "option_cd": "Guaranteed Maturity", //UPDATE
        "option": "Guaranteed Maturity", //UPDATE
        "rop": "Yes",
        "wop": "No",
        "adb": "No",
        "term_type": "Fixed Term",
        "SurvPyOpt": "lumpsum",
        "elBaseSumAssured": "5000000",
        "premium": "30000", //UPDATE
        "NDNC_flg": "Y",
        "urlPassedFlag": "",
        "sumassured": "411000",
        "productoptions": "Life & CI Rebalance_RP",
        "nextPremDDt": "18-Aug-2024",
        "tottax": "1350",
        "spl": "-",
        "ctg": "T",
        "touchpoint": "OPS",
        "prodname": "HDFC Life Sanchay Plus",
        "inscat": "APP_TYP_LIFE",
        "ST_RT": "1350",
        "EC_RT": "0",
        "GST_RT": "0",
        "totPremium": "31350",
        "totAnnPremium": "31350",
        "MagnumBenefit": "Life",
        "qniproduct": "SANCHP",
        "combo_journey": "",
        "income_term": null,
        "deathSA": 411000
      },
      "tbaccostatus": "N",
      "ptoption": "Limited",
      "trm": "10",
      "pt": "5",
      "db": "23/07/2005",
      "pemium": "0",
      "smassured": "5000000",
      "poduct": "P1C2PL",
      "tuchpoint": "OPS",
      "lfeassuredname": "undefined undefined",
      "usellsaveflag": "SAVE",
      "dcisionid": "",
      "sboption": "Fixed Term",
      "iscat": "APP_TYP_LIFE",
      "pymethod": "Online Payment",
      "podcat": "Protection",
      "qiproduct": "P1C2PL",
      "feq": "Annual",
      "tobaccostatus": "N",
      "pptoption": "Limited",
      "term": "10",
      "ppt": "5",
      "dob": "18/08/2005",
      "premium": "0",
      "sumassured": "411000",
      "product": "SANCHPV9",
      "touchpoint": "OPS",
      "lifeassuredname": "undefined undefined",
      "upsellsaveflag": "SAVE",
      "decisionid": "",
      "inscat": "APP_TYP_LIFE",
      "paymethod": "Online Payment",
      "prodcat": "Savings",
      "qniproduct": "SANCHP",
      "freq": "Annual"
    },
    "touchpoint": "OPS",
    "chnl": "HDFC Bank",
    "channel": "HDFC Bank",
    "chnlptnr": "HDFC Bank",
    "id": "SANCHP",
    "spl": "-"
  },




  OUT: {},
  ERR: [],
  CONSTS: {},
  upsell: {
    Q1: {
      IN: {},
    },
    Q2: {
      IN: {},
    },
    Q3: {
      IN: {},
    },
  },
  PROP_MAP: {},
};


window.$ = window.jQuery;
var remoteURL = '';
var GFWK_APP_ID = 'ops';

var GQNI_PRODCAT = {
  CHLD: ['Children', 'Children', 1, 1, []],
  COMB: ['Combi', 'Combi', 1, 2, []],
  COMBO: ['Combo', 'Combo', 1, 3, []],
  HLTH: ['Health', 'Health', 1, 4, []],
  INVT: ['Investment', 'Investment', 1, 5, []],
  MYMIX_COMBO: ['Mymix Combo', 'Mymix Combo', 1, 6, []],
  PENS: ['Pension', 'Pension', 1, 7, []],
  PROT: ['Protection', 'Protection', 1, 8, []],
  SVNG: ['Savings', 'Savings', 1, 9, []],
};
var GQNI_FREQ = {
  FREQ_1: ['Annual', 'Annual', 1, 1, []],
  FREQ_2: ['Half Yearly', 'Half Yearly', 1, 2, []],
  FREQ_3: ['Quarterly', 'Quarterly', 1, 3, []],
  FREQ_4: ['Monthly', 'Monthly', 1, 4, []],
  FREQ_5: ['Single', 'Single', 1, 5, []],
};
var GQNI_FUND_OPT = {
  'Balanced Fund': ['BALANCED_FUND', 'Balanced Fund', 1, 1, []],
  'Blue Chip Fund': ['BLUE_CHIP_FUND', 'Blue Chip Fund', 1, 2, []],
  'Bond Fund': ['BOND_FUND', 'Bond Fund', 1, 3, []],
  'Bond Plus Fund': ['BOND_PLUS_FUND', 'Bond Plus Fund', 1, 4, []],
  'Capital Growth Fund': [
    'CAPITAL_GROWTH_FUND',
    'Capital Growth Fund',
    1,
    5,
    [],
  ],
  'Capital Secure Fund': [
    'CAPITAL_SECURE_FUND',
    'Capital Secure Fund',
    1,
    6,
    [],
  ],
  'Conservative Fund': ['CONSERVATIVE_FUND', 'Conservative Fund', 1, 7, []],
  'Discovery Fund': ['DISCOVERY_FUND', 'Discovery Fund', 1, 8, []],
  'Diversified Equity Fund': [
    'DIVERSIFIED_EQUITY_FUND',
    'Diversified Equity Fund',
    1,
    9,
    [],
  ],
  'Entrust Fund': ['ENTRUST_FUND', 'Entrust Fund', 1, 10, []],
  'Equity Advantage Fund': [
    'EQUITY_ADVANTAGE_FUND',
    'Equity Advantage Fund',
    1,
    11,
    [],
  ],
  'Equity Plus Fund': ['EQUITY_PLUS_FUND', 'Equity Plus Fund', 1, 12, []],
  'Income Fund': ['INCOME_FUND', 'Income Fund', 1, 13, []],
  'Liquid Fund': ['LIQUID_FUND', 'Liquid Fund', 1, 14, []],
  'Opportunities Fund': ['OPPORTUNITIES_FUND', 'Opportunities Fund', 1, 15, []],
  'Pension Conservative Fund': [
    'PENSION_CONSERVATIVE_FUND',
    'Pension Conservative Fund',
    1,
    16,
    [],
  ],
  'Pension Equity Plus Fund': [
    'PENSION_EQUITY_PLUS_FUND',
    'Pension Equity Plus Fund',
    1,
    17,
    [],
  ],
  'Pension Income Fund': [
    'PENSION_INCOME_FUND',
    'Pension Income Fund',
    1,
    18,
    [],
  ],
  'Pension Super Plus 2012': [
    'PENSION_SUPER_PLUS_2012',
    'Pension Super Plus 2012',
    1,
    19,
    [],
  ],
  'Secure Advantage Fund': [
    'SECURE_ADVANTAGE_FUND',
    'Secure Advantage Fund',
    1,
    20,
    [],
  ],
  'Secure Managed Fund': [
    'SECURE_MANAGED_FUND',
    'Secure Managed Fund',
    1,
    21,
    [],
  ],
  'Individual Preserver Pension Fund': [
    'PRESERVER_PENSION_FUND',
    'Individual Preserver Pension Fund',
    1,
    22,
    []
  ],
  'Large Cap - Pension Fund': [
    'LARGECAP_PENSION_FUND',
    'Large Cap - Pension Fund',
    1,
    23,
    []
  ],
  'Individual Prime Equity Pension Fund': [
    'PRIME_EQUITY_PENSION_FUND',
    'Individual Prime Equity Pension Fund',
    1,
    24,
    []
  ],

};
var GQNI_RIDER = {
  'Accidental Death & Cancer Cover': [
    'RIDER_ACCIDENTAL_DEATH_CANCER_COVER',
    'Accidental Death & Cancer Cover',
    1,
    1,
    [],
  ],
  'Accidental Death Cover': [
    'RIDER_ACCIDENTAL_DEATH_COVER',
    'Accidental Death Cover',
    1,
    2,
    [],
  ],
  'Cancer Cover': ['RIDER_CANCER_COVER', 'Cancer Cover', 1, 3, []],
  'HDFC Life Critical Illness Plus Rider': [
    'RIDER_CRITICAL_ILLNESS',
    'HDFC Life Critical Illness Plus Rider',
    1,
    4,
    [],
  ],
  'Extra Disability': ['RIDER_EXTRA_DISABLE', 'Extra Disability', 1, 5, []],
  'Extra Health': ['RIDER_EXTRA_HEALTH', 'Extra Health', 1, 6, []],
  'Extra Life': ['RIDER_EXTRA_LIFE', 'Extra Life', 1, 7, []],
  'Extra Life & Disability': [
    'RIDER_EXTRA_LIFE_DISABILITY',
    'Extra Life & Disability',
    1,
    8,
    [],
  ],
  'Extra Life & Health ': [
    'RIDER_EXTRA_LIFE_HEALTH',
    'Extra Life & Health ',
    1,
    9,
    [],
  ],
  'Extra Life & Health & Disability': [
    'RIDER_EXTRA_LIFE_HEALTH_DISABILITY',
    'Extra Life & Health & Disability',
    1,
    10,
    [],
  ],
  'Extra Life Income': [
    'RIDER_EXTRA_LIFE_INCOME',
    'Extra Life Income',
    1,
    11,
    [],
  ],
  'Income Benefit on Accidental Disability Rider': [
    'RIDER_INCOME_BENEFIT',
    'Income Benefit on Accidental Disability Rider',
    1,
    12,
    [],
  ],
  'Income Benefit & Critical Illness': [
    'RIDER_INCOME_BENEFIT_CRITICAL_ILLNESS',
    'Income Benefit & Critical Illness',
    1,
    13,
    [],
  ],
  Life: ['RIDER_LIFE', 'Life', 1, 14, []],
  'Life & Disability': [
    'RIDER_LIFE_DISABILITY',
    'Life & Disability',
    1,
    15,
    [],
  ],
  'Life & Health': ['RIDER_LIFE_HEALTH', 'Life & Health', 1, 16, []],
  'Life & Health & Disability  ': [
    'RIDER_LIFE_HEALTH_DISABILITY',
    'Life & Health & Disability  ',
    1,
    17,
    [],
  ],
  'Pension Plus Policy fee': [
    'RIDER_PENSION_PLUS_POLICY_FEE',
    'Pension Plus Policy fee',
    1,
    18,
    [],
  ],
  'Personal Accident & Cancer Cover': [
    'RIDER_PERSONAL_ACCIDENT_CANCER_COVER',
    'Personal Accident & Cancer Cover',
    1,
    19,
    [],
  ],
  'Personal Accident Cover': [
    'RIDER_PERSONAL_ACCIDENT_COVER',
    'Personal Accident Cover',
    1,
    20,
    [],
  ],
  'Policy Fee': ['RIDER_POLICY_FEE', 'Policy Fee', 1, 21, []],
  'Restore Benefit': ['RIDER_RESTORE_BENEFIT', 'Restore Benefit', 1, 22, []],
  'Room Rent Enhancement': [
    'RIDER_ROOM_RENT_ENHANCEMENT',
    'Room Rent Enhancement',
    1,
    23,
    [],
  ],
  'HDFC Life Sanchay': ['RIDER_SANCHAY', 'HDFC Life Sanchay', 1, 24, []],
};
var GQNI_BEN_OPT = {
  '3D Life': ['3D Life', '3D Life', 1, 1, []],
  '3D Life Long Protection': [
    '3D Life Long Protection',
    '3D Life Long Protection',
    1,
    2,
    [],
  ],
  A: ['DHCB', 'DHCB', 1, 3, []],
  B: ['SB', 'SB', 1, 4, []],
  C: ['CIB', 'CIB', 1, 5, []],
  Classic: ['Classic', 'Classic', 1, 6, []],
  'Classic Plus': ['Classic Plus', 'Classic Plus', 1, 7, []],
  'Classic Waiver': ['Classic Waiver', 'Classic Waiver', 1, 8, []],
  D: ['DHCB + SB', 'DHCB + SB', 1, 9, []],
  DEFERRED_INCOME: ['Deferred Income', 'Deferred Income', 1, 10, []],
  E: ['SB + CIB', 'SB + CIB', 1, 11, []],
  ELITE: ['Elite', 'Elite', 1, 12, []],
  Endowment: ['Endowment', 'Endowment', 1, 13, []],
  'Endowment with Whole Life': [
    'Endowment with Whole Life',
    'Endowment with Whole Life',
    1,
    14,
    [],
  ],
  'Extra Life': ['Extra Life', 'Extra Life', 1, 15, []],
  'Extra Life Income': ['Extra Life Income', 'Extra Life Income', 1, 16, []],
  F: ['DHCB + CIB', 'DHCB + CIB', 1, 17, []],
  FAMILY_FLOATER: ['Family Floater', 'Family Floater', 1, 18, []],
  G: ['DHCB + SB + CIB', 'DHCB + SB + CIB', 1, 19, []],
  GOLDEN_YEARS_BENEFIT_OPTION: [
    'Golden Years Benefit Option',
    'Golden Years Benefit Option',
    1,
    20,
    [],
  ],
  GUARANTEED_INCOME: ['Guaranteed Income', 'Guaranteed Income', 1, 21, []],
  GUARANTEED_MATURITY: [
    'Guaranteed Maturity',
    'Guaranteed Maturity',
    1,
    22,
    [],
  ],
  IAFD: [
    'Lifetime Annuity with return of purchase price in parts',
    'Lifetime Annuity with return of purchase price in parts',
    1,
    23,
    [],
  ],
  IAGC: [
    'Life Annuity with Return of Purchase Price on diagnosis of Critical Illness',
    'Life Annuity with Return of Purchase Price on diagnosis of Critical Illness',
    1,
    24,
    [],
  ],
  IAGD: ['Life Annuity ROPP on Death', 'Life Annuity ROPP on Death', 1, 25, []],
  IAHD: [
    'Joint Life 100% to secondary with ROPP',
    'Joint Life 100% to secondary with ROPP',
    1,
    26,
    [],
  ],
  IMMEDIATE_INCOME: ['Immediate Income', 'Immediate Income', 1, 27, []],
  INVEST_PLUS_OPTION: ['Invest Plus Option', 'Invest Plus Option', 1, 28, []],
  'Income Option': ['Income Option', 'Income Option', 1, 29, []],
  'Income Plus Option - Increasing Income': [
    'Income Plus Option - Increasing Income',
    'Income Plus Option - Increasing Income',
    1,
    30,
    [],
  ],
  'Income Plus Option - Level Income': [
    'Income Plus Option - Level Income',
    'Income Plus Option - Level Income',
    1,
    31,
    [],
  ],
  'Income Replacement': ['Income Replacement', 'Income Replacement', 1, 32, []],
  Income_Plus_Fixed_Term_LP: [
    'Income Plus-Fixed Term_LP',
    'Income Plus-Fixed Term_LP',
    1,
    33,
    [],
  ],
  Income_Plus_Fixed_Term_RP: [
    'Income Plus-Fixed Term_RP',
    'Income Plus-Fixed Term_RP',
    1,
    34,
    [],
  ],
  Income_Plus_Fixed_Term_SP: [
    'Income Plus-Fixed Term_SP',
    'Income Plus-Fixed Term_SP',
    1,
    35,
    [],
  ],
  Income_Plus_Whole_Life_LP: [
    'Income Plus-Whole Life_LP',
    'Income Plus-Whole Life_LP',
    1,
    36,
    [],
  ],
  Income_Plus_Whole_Life_SP: [
    'Income Plus-Whole Life_SP',
    'Income Plus-Whole Life_SP',
    1,
    37,
    [],
  ],
  Insta_Protect_LP: ['Insta Protect_LP', 'Insta Protect_LP', 1, 38, []],
  Insta_Protect_RP: ['Insta Protect_RP', 'Insta Protect_RP', 1, 39, []],
  Insta_Protect_SP: ['Insta Protect_SP', 'Insta Protect_SP', 1, 40, []],
  LIFE_LONG_INCOME: ['Life Long Income', 'Life Long Income', 1, 41, []],
  LIMITED: ['Limited', 'Limited', 1, 42, []],
  LONG_TERM_INCOME: ['Long Term Income', 'Long Term Income', 1, 43, []],
  Life: ['Life', 'Life', 1, 44, []],
  'Life Annuity': ['Lifetime Annuity', 'Lifetime Annuity', 1, 45, []],
  'Life Annuity ROPP on Death ENH': [
    'Life Annuity ROPP on Death ENH',
    'Life Annuity ROPP on Death ENH',
    1,
    46,
    [],
  ],
  'Life Long Protection': [
    'Life Long Protection',
    'Life Long Protection',
    1,
    47,
    [],
  ],
  'Life ROP': [
    'Lifetime Annuity with return of 100% of the purchase price',
    'Lifetime Annuity with return of 100% of the purchase price',
    1,
    48,
    [],
  ],
  Life_CI_Rebalance_LP: [
    'Life & CI Rebalance_LP',
    'Life & CI Rebalance_LP',
    1,
    49,
    [],
  ],
  Life_CI_Rebalance_RP: [
    'Life & CI Rebalance_RP',
    'Life & CI Rebalance_RP',
    1,
    50,
    [],
  ],
  Life_CI_Rebalance_SP: [
    'Life & CI Rebalance_SP',
    'Life & CI Rebalance_SP',
    1,
    51,
    [],
  ],
  Life_Protect_Fixed_Term_LP: [
    'Life Protect-Fixed Term_LP',
    'Life Protect-Fixed Term_LP',
    1,
    52,
    [],
  ],
  Life_Protect_Fixed_Term_RP: [
    'Life Protect-Fixed Term_RP',
    'Life Protect-Fixed Term_RP',
    1,
    53,
    [],
  ],
  Life_Protect_Fixed_Term_SP: [
    'Life Protect-Fixed Term_SP',
    'Life Protect-Fixed Term_SP',
    1,
    54,
    [],
  ],
  Life_Protect_Whole_Life_LP: [
    'Life Protect-Whole Life_LP',
    'Life Protect-Whole Life_LP',
    1,
    55,
    [],
  ],
  PREMIER: ['Premier', 'Premier', 1, 56, []],
  PREMIUM_WAIVER_OPTION: [
    'Premium Waiver Option',
    'Premium Waiver Option',
    1,
    57,
    [],
  ],
  REGULAR: ['Regular', 'Regular', 1, 58, []],
  'Return of Premium': ['Return of Premium', 'Return of Premium', 1, 59, []],
  SAVE: ['Save', 'Save', 1, 60, []],
  'SAVE-N-GAIN': ['Save-n-Gain', 'Save-n-Gain', 1, 61, []],
  SINGLE: ['Single', 'Single', 1, 62, []],
  SINGLE_LIFE: ['Single Life', 'Single Life', 1, 63, []],
};
var GPOS_MODEOFPAYMENT = {
  ENACH: ['ENACH', 'ENACH', 1, 1, []],
  ESI_NETBANKING: ['ESI_NETBANKING', 'ESI Netbanking', 1, 2, []],
  MOP_BULKCC: ['MOP_BULKCC', 'Bulk Credit', 1, 3, []],
  MOP_CASH: ['MOP_CASH', 'Cash', 1, 4, []],
  MOP_CHQ: ['MOP_CHQ', 'Cheque', 1, 5, []],
  MOP_CHQPICK: ['MOP_CHQPICK', 'Cheque Pickup', 1, 6, []],
  MOP_CRDTCRD: ['MOP_CRDTCRD', 'Credit Card', 1, 7, []],
  MOP_DEBTCRD: ['MOP_DEBTCRD', 'Debit Card', 1, 8, []],
  MOP_DRFT: ['MOP_DRFT', 'Draft', 1, 9, []],
  MOP_FUNDTNFR: ['MOP_FUNDTNFR', 'Fund Transfer', 1, 10, []],
  MOP_INTBNKG: ['MOP_INTBNKG', 'Internet Banking', 1, 11, []],
  MOP_IVR: ['MOP_IVR', 'IVR', 1, 12, []],
  MOP_ONLINE: ['MOP_ONLINE', 'Online Payment', 1, 13, []],
  MOP_OTHER: ['MOP_OTHER', 'Other', 1, 14, []],
  MOP_SIECS: ['MOP_SIECS', 'SI/ECS', 1, 15, []],
  MOP_TOPUPLOAN: ['MOP_TOPUPLOAN', 'Topup Loan Funding', 1, 16, []],
  ONLINE_SI_ON_CC: ['ONLINE_SI_ON_CC', 'OnlineSIOnCC', 1, 17, []],
  ONLINE_SI_ON_DC: ['ONLINE_SI_ON_DC', 'OnlineSIOnDC', 1, 18, []],
};
var GPOS_GENDER = {
  GEN_F: ['GEN_F', 'Female', 1, 1, []],
  GEN_M: ['GEN_M', 'Male', 1, 2, []],
  GEN_O: ['GEN_O', 'Others', 1, 3, []],
};
var GPOS_EDUQUAL = {
  EDU_QUAL_BA: ['EDU_QUAL_BA', 'B A', 1, 1, []],
  EDU_QUAL_BAMS: ['EDU_QUAL_BAMS', 'BAMS', 1, 2, []],
  EDU_QUAL_BARCH: ['EDU_QUAL_BARCH', 'BAC', 1, 3, []],
  EDU_QUAL_BBA: ['EDU_QUAL_BBA', 'B B A', 1, 4, []],
  EDU_QUAL_BCA: ['EDU_QUAL_BCA', 'BCA', 1, 5, []],
  EDU_QUAL_BCOM: ['EDU_QUAL_BCOM', 'B Com', 1, 6, []],
  EDU_QUAL_BDS: ['EDU_QUAL_BDS', 'BDS', 1, 7, []],
  EDU_QUAL_BE: ['EDU_QUAL_BE', 'B E', 1, 8, []],
  EDU_QUAL_BED: ['EDU_QUAL_BED', 'B Ed', 1, 9, []],
  EDU_QUAL_BHMS: ['EDU_QUAL_BHMS', 'BHMS', 1, 10, []],
  EDU_QUAL_BMLT: ['EDU_QUAL_BMLT', 'BMLT', 1, 11, []],
  EDU_QUAL_BMS: ['EDU_QUAL_BMS', 'B M S', 1, 12, []],
  EDU_QUAL_BPHARM: ['EDU_QUAL_BPHARM', 'B Pharm', 1, 13, []],
  EDU_QUAL_BPT: ['EDU_QUAL_BPT', 'BPY', 1, 14, []],
  EDU_QUAL_BSC: ['EDU_QUAL_BSC', 'B Sc', 1, 15, []],
  EDU_QUAL_BTECH: ['EDU_QUAL_BTECH', 'B Tech', 1, 16, []],
  EDU_QUAL_BUMS: ['EDU_QUAL_BUMS', 'BUMS', 1, 17, []],
  EDU_QUAL_BVS: ['EDU_QUAL_BVS', 'Bachelor of Veterinary Science', 1, 18, []],
  EDU_QUAL_CA: ['EDU_QUAL_CA', 'CA', 1, 19, []],
  EDU_QUAL_CFA: ['EDU_QUAL_CFA', 'CFA', 1, 20, []],
  EDU_QUAL_CS: ['EDU_QUAL_CS', 'CSC', 1, 21, []],
  EDU_QUAL_DCE: ['EDU_QUAL_DCE', 'DCE', 1, 22, []],
  EDU_QUAL_DCIVILE: [
    'EDU_QUAL_DCIVILE',
    'Diploma in Civil Engineering',
    1,
    23,
    [],
  ],
  EDU_QUAL_DED: ['EDU_QUAL_DED', 'D Ed', 1, 24, []],
  EDU_QUAL_DEE: [
    'EDU_QUAL_DEE',
    'Diploma in Electrical Engineering',
    1,
    25,
    [],
  ],
  EDU_QUAL_DFD: ['EDU_QUAL_DFD', 'Diploma in Fashion designing', 1, 26, []],
  EDU_QUAL_DGN: ['EDU_QUAL_DGN', 'Diploma in General Nursing', 1, 27, []],
  EDU_QUAL_DID: ['EDU_QUAL_DID', 'Diploma in Interior Designing', 1, 28, []],
  EDU_QUAL_DIE: [
    'EDU_QUAL_DIE',
    'Diploma in Instrumentation Engineering',
    1,
    29,
    [],
  ],
  EDU_QUAL_DIPLOMA: ['EDU_QUAL_DIPLOMA', 'Diploma', 1, 30, []],
  EDU_QUAL_DME: [
    'EDU_QUAL_DME',
    'Diploma in Mechanical Engineering',
    1,
    31,
    [],
  ],
  EDU_QUAL_DMLT: ['EDU_QUAL_DMLT', 'DMLT', 1, 32, []],
  EDU_QUAL_DPHARM: ['EDU_QUAL_DPHARM', 'Diploma in Pharmacy', 1, 33, []],
  EDU_QUAL_DTE: ['EDU_QUAL_DTE', 'DTE', 1, 34, []],
  EDU_QUAL_GRAD: ['EDU_QUAL_GRAD', 'Graduation', 1, 35, []],
  EDU_QUAL_HSC: ['EDU_QUAL_HSC', 'H S C', 1, 36, []],
  EDU_QUAL_ICWA: ['EDU_QUAL_ICWA', 'ICWA', 1, 37, []],
  EDU_QUAL_ILLITERATE: ['EDU_QUAL_ILLITERATE', 'Illiterate', 1, 38, []],
  EDU_QUAL_ITI: ['EDU_QUAL_ITI', 'ITI', 1, 39, []],
  EDU_QUAL_LLB: ['EDU_QUAL_LLB', 'LLB', 1, 40, []],
  EDU_QUAL_LLM: ['EDU_QUAL_LLM', 'Master of Law', 1, 41, []],
  EDU_QUAL_MA: ['EDU_QUAL_MA', 'M A', 1, 42, []],
  EDU_QUAL_MARCH: ['EDU_QUAL_MARCH', 'M. Arch.', 1, 43, []],
  EDU_QUAL_MBA: ['EDU_QUAL_MBA', 'MBA', 1, 44, []],
  EDU_QUAL_MBBS: ['EDU_QUAL_MBBS', 'MBBS', 1, 45, []],
  EDU_QUAL_MCA: ['EDU_QUAL_MCA', 'MCA', 1, 46, []],
  EDU_QUAL_MCH: ['EDU_QUAL_MCH', 'M.Ch', 1, 47, []],
  EDU_QUAL_MCOM: ['EDU_QUAL_MCOM', 'MCM', 1, 48, []],
  EDU_QUAL_MD: ['EDU_QUAL_MD', 'M D', 1, 49, []],
  EDU_QUAL_ME: ['EDU_QUAL_ME', 'M E', 1, 50, []],
  EDU_QUAL_MED: ['EDU_QUAL_MED', 'MED', 1, 51, []],
  EDU_QUAL_MMS: ['EDU_QUAL_MMS', 'MMS', 1, 52, []],
  EDU_QUAL_MPHARM: ['EDU_QUAL_MPHARM', 'M Pharm', 1, 53, []],
  EDU_QUAL_MPHIL: ['EDU_QUAL_MPHIL', 'M. Phil', 1, 54, []],
  EDU_QUAL_MPT: ['EDU_QUAL_MPT', 'MPY', 1, 55, []],
  EDU_QUAL_MS: ['EDU_QUAL_MS', 'M S', 1, 56, []],
  EDU_QUAL_MSC: ['EDU_QUAL_MSC', 'M Sc', 1, 57, []],
  EDU_QUAL_MTECH: ['EDU_QUAL_MTECH', 'M Tech', 1, 58, []],
  EDU_QUAL_OTHERS: ['EDU_QUAL_OTHERS', 'Others', 1, 59, []],
  EDU_QUAL_PG: ['EDU_QUAL_PG', 'Post Graduation', 1, 60, []],
  EDU_QUAL_PGDBA: ['EDU_QUAL_PGDBA', 'PG Diploma  Business Admin', 1, 61, []],
  EDU_QUAL_PGDBM: ['EDU_QUAL_PGDBM', 'PBM', 1, 62, []],
  EDU_QUAL_PGDMM: [
    'EDU_QUAL_PGDMM',
    'PG Diploma Marketing management',
    1,
    63,
    [],
  ],
  EDU_QUAL_PHARMD: ['EDU_QUAL_PHARMD', 'PharmD', 1, 64, []],
  EDU_QUAL_PHD: ['EDU_QUAL_PHD', 'Ph.D.', 1, 65, []],
  EDU_QUAL_SSC: ['EDU_QUAL_SSC', 'S S C', 1, 66, []],
  EDU_QUAL_UNDERMATRIC: [
    'EDU_QUAL_UNDERMATRIC',
    'Under Matric (Class l to lX)',
    1,
    67,
    [],
  ],
};
var GPOS_OCCUPATIONTYPE = {
  OCCT_SALR: ['OCCT_SALR', 'Salaried', 1, 1, []],
  OCCT_SEBS: ['OCCT_SEBS', 'Self employed/ Business', 1, 2, []],
  OCCT_AGCT: ['OCCT_AGCT', 'Agriculture', 1, 3, []],
  OCCT_STUD: ['OCCT_STUD', 'Student', 1, 4, []],
  OCCT_UEMP: ['OCCT_UEMP', 'Unemployed', 1, 5, []],
  OCCT_HOWF: ['OCCT_HOWF', 'Housewife', 1, 6, []],
  OCCT_RETD: ['OCCT_RETD', 'Retired', 1, 7, []],
  OCCT_OTHR: ['OCCT_OTHR', 'Others', 1, 8, []],
};
var GPOS_HEIGHT_INS_CMS = {
  HIC_001: ['HIC_001', '1ft 0ins = 30cms', 1, 1, []],
  HIC_002: ['HIC_002', '1ft 1ins = 33cms', 1, 2, []],
  HIC_003: ['HIC_003', '1ft 2ins = 36cms', 1, 3, []],
  HIC_004: ['HIC_004', '1ft 3ins = 38cms', 1, 4, []],
  HIC_005: ['HIC_005', '1ft 4ins = 41cms', 1, 5, []],
  HIC_006: ['HIC_006', '1ft 5ins = 43cms', 1, 6, []],
  HIC_007: ['HIC_007', '1ft 6ins = 46cms', 1, 7, []],
  HIC_008: ['HIC_008', '1ft 7ins = 48cms', 1, 8, []],
  HIC_009: ['HIC_009', '1ft 8ins = 51cms', 1, 9, []],
  HIC_010: ['HIC_010', '1ft 9ins = 53cms', 1, 10, []],
  HIC_011: ['HIC_011', '1ft 10ins = 56cms', 1, 11, []],
  HIC_012: ['HIC_012', '1ft 11ins = 58cms', 1, 12, []],
  HIC_013: ['HIC_013', '2ft 0ins = 61cms', 1, 13, []],
  HIC_014: ['HIC_014', '2ft 1ins = 64cms', 1, 14, []],
  HIC_015: ['HIC_015', '2ft 2ins = 66cms', 1, 15, []],
  HIC_016: ['HIC_016', '2ft 3ins = 69cms', 1, 16, []],
  HIC_017: ['HIC_017', '2ft 4ins = 71cms', 1, 17, []],
  HIC_018: ['HIC_018', '2ft 5ins = 74cms', 1, 18, []],
  HIC_019: ['HIC_019', '2ft 6ins = 76cms', 1, 19, []],
  HIC_020: ['HIC_020', '2ft 7ins = 79cms', 1, 20, []],
  HIC_021: ['HIC_021', '2ft 8ins = 81cms', 1, 21, []],
  HIC_022: ['HIC_022', '2ft 9ins = 84cms', 1, 22, []],
  HIC_023: ['HIC_023', '2ft 10ins = 86cms', 1, 23, []],
  HIC_024: ['HIC_024', '2ft 11ins = 89cms', 1, 24, []],
  HIC_025: ['HIC_025', '3ft 0ins = 91cms', 1, 25, []],
  HIC_026: ['HIC_026', '3ft 1ins = 94cms', 1, 26, []],
  HIC_027: ['HIC_027', '3ft 2ins = 97cms', 1, 27, []],
  HIC_028: ['HIC_028', '3ft 3ins = 99cms', 1, 28, []],
  HIC_029: ['HIC_029', '3ft 4ins = 102cms', 1, 29, []],
  HIC_030: ['HIC_030', '3ft 5ins = 104cms', 1, 30, []],
  HIC_031: ['HIC_031', '3ft 6ins = 107cms', 1, 31, []],
  HIC_032: ['HIC_032', '3ft 7ins = 109cms', 1, 32, []],
  HIC_033: ['HIC_033', '3ft 8ins = 112cms', 1, 33, []],
  HIC_034: ['HIC_034', '3ft 9ins = 114cms', 1, 34, []],
  HIC_035: ['HIC_035', '3ft 10ins = 117cms', 1, 35, []],
  HIC_036: ['HIC_036', '3ft 11ins = 119cms', 1, 36, []],
  HIC_037: ['HIC_037', '4ft 0ins = 122cms', 1, 37, []],
  HIC_038: ['HIC_038', '4ft 1ins = 124cms', 1, 38, []],
  HIC_039: ['HIC_039', '4ft 2ins = 127cms', 1, 39, []],
  HIC_040: ['HIC_040', '4ft 3ins = 130cms', 1, 40, []],
  HIC_041: ['HIC_041', '4ft 4ins = 132cms', 1, 41, []],
  HIC_042: ['HIC_042', '4ft 5ins = 135cms', 1, 42, []],
  HIC_043: ['HIC_043', '4ft 6ins = 137cms', 1, 43, []],
  HIC_044: ['HIC_044', '4ft 7ins = 140cms', 1, 44, []],
  HIC_045: ['HIC_045', '4ft 8ins = 142cms', 1, 45, []],
  HIC_046: ['HIC_046', '4ft 9ins = 145cms', 1, 46, []],
  HIC_047: ['HIC_047', '4ft 10ins = 147cms', 1, 47, []],
  HIC_048: ['HIC_048', '4ft 11ins = 150cms', 1, 48, []],
  HIC_049: ['HIC_049', '5ft 0ins = 152cms', 1, 49, []],
  HIC_050: ['HIC_050', '5ft 1ins = 155cms', 1, 50, []],
  HIC_051: ['HIC_051', '5ft 2ins = 157cms', 1, 51, []],
  HIC_052: ['HIC_052', '5ft 3ins = 160cms', 1, 52, []],
  HIC_053: ['HIC_053', '5ft 4ins = 163cms', 1, 53, []],
  HIC_054: ['HIC_054', '5ft 5ins = 165cms', 1, 54, []],
  HIC_055: ['HIC_055', '5ft 6ins = 168cms', 1, 55, []],
  HIC_056: ['HIC_056', '5ft 7ins = 170cms', 1, 56, []],
  HIC_057: ['HIC_057', '5ft 8ins = 173cms', 1, 57, []],
  HIC_058: ['HIC_058', '5ft 9ins = 175cms', 1, 58, []],
  HIC_059: ['HIC_059', '5ft 10ins = 178cms', 1, 59, []],
  HIC_060: ['HIC_060', '5ft 11ins = 180cms', 1, 60, []],
  HIC_061: ['HIC_061', '6ft 0ins = 183cms', 1, 61, []],
  HIC_062: ['HIC_062', '6ft 1ins = 185cms', 1, 62, []],
  HIC_063: ['HIC_063', '6ft 2ins = 188cms', 1, 63, []],
  HIC_064: ['HIC_064', '6ft 3ins = 191cms', 1, 64, []],
  HIC_065: ['HIC_065', '6ft 4ins = 193cms', 1, 65, []],
  HIC_066: ['HIC_066', '6ft 5ins = 196cms', 1, 66, []],
  HIC_067: ['HIC_067', '6ft 6ins = 198cms', 1, 67, []],
};
var GPOS_WEIGHT_KG = {
  WT_2: ['WT_2', '02', 1, 1, []],
  WT_3: ['WT_3', '03', 1, 2, []],
  WT_4: ['WT_4', '04', 1, 3, []],
  WT_5: ['WT_5', '05', 1, 4, []],
  WT_6: ['WT_6', '06', 1, 5, []],
  WT_7: ['WT_7', '07', 1, 6, []],
  WT_8: ['WT_8', '08', 1, 7, []],
  WT_9: ['WT_9', '09', 1, 8, []],
  WT_10: ['WT_10', '10', 1, 9, []],
  WT_11: ['WT_11', '11', 1, 10, []],
  WT_12: ['WT_12', '12', 1, 11, []],
  WT_13: ['WT_13', '13', 1, 12, []],
  WT_14: ['WT_14', '14', 1, 13, []],
  WT_15: ['WT_15', '15', 1, 14, []],
  WT_16: ['WT_16', '16', 1, 15, []],
  WT_17: ['WT_17', '17', 1, 16, []],
  WT_18: ['WT_18', '18', 1, 17, []],
  WT_19: ['WT_19', '19', 1, 18, []],
  WT_20: ['WT_20', '20', 1, 19, []],
  WT_21: ['WT_21', '21', 1, 20, []],
  WT_22: ['WT_22', '22', 1, 21, []],
  WT_23: ['WT_23', '23', 1, 22, []],
  WT_24: ['WT_24', '24', 1, 23, []],
  WT_25: ['WT_25', '25', 1, 24, []],
  WT_26: ['WT_26', '26', 1, 25, []],
  WT_27: ['WT_27', '27', 1, 26, []],
  WT_28: ['WT_28', '28', 1, 27, []],
  WT_29: ['WT_29', '29', 1, 28, []],
  WT_30: ['WT_30', '30', 1, 29, []],
  WT_31: ['WT_31', '31', 1, 30, []],
  WT_32: ['WT_32', '32', 1, 31, []],
  WT_33: ['WT_33', '33', 1, 32, []],
  WT_34: ['WT_34', '34', 1, 33, []],
  WT_35: ['WT_35', '35', 1, 34, []],
  WT_36: ['WT_36', '36', 1, 35, []],
  WT_37: ['WT_37', '37', 1, 36, []],
  WT_38: ['WT_38', '38', 1, 37, []],
  WT_39: ['WT_39', '39', 1, 38, []],
  WT_40: ['WT_40', '40', 1, 39, []],
  WT_41: ['WT_41', '41', 1, 40, []],
  WT_42: ['WT_42', '42', 1, 41, []],
  WT_43: ['WT_43', '43', 1, 42, []],
  WT_44: ['WT_44', '44', 1, 43, []],
  WT_45: ['WT_45', '45', 1, 44, []],
  WT_46: ['WT_46', '46', 1, 45, []],
  WT_47: ['WT_47', '47', 1, 46, []],
  WT_48: ['WT_48', '48', 1, 47, []],
  WT_49: ['WT_49', '49', 1, 48, []],
  WT_50: ['WT_50', '50', 1, 49, []],
  WT_51: ['WT_51', '51', 1, 50, []],
  WT_52: ['WT_52', '52', 1, 51, []],
  WT_53: ['WT_53', '53', 1, 52, []],
  WT_54: ['WT_54', '54', 1, 53, []],
  WT_55: ['WT_55', '55', 1, 54, []],
  WT_56: ['WT_56', '56', 1, 55, []],
  WT_57: ['WT_57', '57', 1, 56, []],
  WT_58: ['WT_58', '58', 1, 57, []],
  WT_59: ['WT_59', '59', 1, 58, []],
  WT_60: ['WT_60', '60', 1, 59, []],
  WT_61: ['WT_61', '61', 1, 60, []],
  WT_62: ['WT_62', '62', 1, 61, []],
  WT_63: ['WT_63', '63', 1, 62, []],
  WT_64: ['WT_64', '64', 1, 63, []],
  WT_65: ['WT_65', '65', 1, 64, []],
  WT_66: ['WT_66', '66', 1, 65, []],
  WT_67: ['WT_67', '67', 1, 66, []],
  WT_68: ['WT_68', '68', 1, 67, []],
  WT_69: ['WT_69', '69', 1, 68, []],
  WT_70: ['WT_70', '70', 1, 69, []],
  WT_71: ['WT_71', '71', 1, 70, []],
  WT_72: ['WT_72', '72', 1, 71, []],
  WT_73: ['WT_73', '73', 1, 72, []],
  WT_74: ['WT_74', '74', 1, 73, []],
  WT_75: ['WT_75', '75', 1, 74, []],
  WT_76: ['WT_76', '76', 1, 75, []],
  WT_77: ['WT_77', '77', 1, 76, []],
  WT_78: ['WT_78', '78', 1, 77, []],
  WT_79: ['WT_79', '79', 1, 78, []],
  WT_80: ['WT_80', '80', 1, 79, []],
  WT_81: ['WT_81', '81', 1, 80, []],
  WT_82: ['WT_82', '82', 1, 81, []],
  WT_83: ['WT_83', '83', 1, 82, []],
  WT_84: ['WT_84', '84', 1, 83, []],
  WT_85: ['WT_85', '85', 1, 84, []],
  WT_86: ['WT_86', '86', 1, 85, []],
  WT_87: ['WT_87', '87', 1, 86, []],
  WT_88: ['WT_88', '88', 1, 87, []],
  WT_89: ['WT_89', '89', 1, 88, []],
  WT_90: ['WT_90', '90', 1, 89, []],
  WT_91: ['WT_91', '91', 1, 90, []],
  WT_92: ['WT_92', '92', 1, 91, []],
  WT_93: ['WT_93', '93', 1, 92, []],
  WT_94: ['WT_94', '94', 1, 93, []],
  WT_95: ['WT_95', '95', 1, 94, []],
  WT_96: ['WT_96', '96', 1, 95, []],
  WT_97: ['WT_97', '97', 1, 96, []],
  WT_98: ['WT_98', '98', 1, 97, []],
  WT_99: ['WT_99', '99', 1, 98, []],
  WT_100: ['WT_100', '100', 1, 99, []],
  WT_101: ['WT_101', '101', 1, 100, []],
  WT_102: ['WT_102', '102', 1, 101, []],
  WT_103: ['WT_103', '103', 1, 102, []],
  WT_104: ['WT_104', '104', 1, 103, []],
  WT_105: ['WT_105', '105', 1, 104, []],
  WT_106: ['WT_106', '106', 1, 105, []],
  WT_107: ['WT_107', '107', 1, 106, []],
  WT_108: ['WT_108', '108', 1, 107, []],
  WT_109: ['WT_109', '109', 1, 108, []],
  WT_110: ['WT_110', '110', 1, 109, []],
  WT_111: ['WT_111', '111', 1, 110, []],
  WT_112: ['WT_112', '112', 1, 111, []],
  WT_113: ['WT_113', '113', 1, 112, []],
  WT_114: ['WT_114', '114', 1, 113, []],
  WT_115: ['WT_115', '115', 1, 114, []],
  WT_116: ['WT_116', '116', 1, 115, []],
  WT_117: ['WT_117', '117', 1, 116, []],
  WT_118: ['WT_118', '118', 1, 117, []],
  WT_119: ['WT_119', '119', 1, 118, []],
  WT_120: ['WT_120', '120', 1, 119, []],
  WT_121: ['WT_121', '121', 1, 120, []],
  WT_122: ['WT_122', '122', 1, 121, []],
  WT_123: ['WT_123', '123', 1, 122, []],
  WT_124: ['WT_124', '124', 1, 123, []],
  WT_125: ['WT_125', '125', 1, 124, []],
  WT_126: ['WT_126', '126', 1, 125, []],
  WT_127: ['WT_127', '127', 1, 126, []],
  WT_128: ['WT_128', '128', 1, 127, []],
  WT_129: ['WT_129', '129', 1, 128, []],
  WT_130: ['WT_130', '130', 1, 129, []],
  WT_131: ['WT_131', '131', 1, 130, []],
  WT_132: ['WT_132', '132', 1, 131, []],
  WT_133: ['WT_133', '133', 1, 132, []],
  WT_134: ['WT_134', '134', 1, 133, []],
  WT_135: ['WT_135', '135', 1, 134, []],
  WT_136: ['WT_136', '136', 1, 135, []],
  WT_137: ['WT_137', '137', 1, 136, []],
  WT_138: ['WT_138', '138', 1, 137, []],
  WT_139: ['WT_139', '139', 1, 138, []],
  WT_140: ['WT_140', '140', 1, 139, []],
  WT_141: ['WT_141', '141', 1, 140, []],
  WT_142: ['WT_142', '142', 1, 141, []],
  WT_143: ['WT_143', '143', 1, 142, []],
  WT_144: ['WT_144', '144', 1, 143, []],
  WT_145: ['WT_145', '145', 1, 144, []],
  WT_146: ['WT_146', '146', 1, 145, []],
  WT_147: ['WT_147', '147', 1, 146, []],
  WT_148: ['WT_148', '148', 1, 147, []],
  WT_149: ['WT_149', '149', 1, 148, []],
  WT_150: ['WT_150', '150', 1, 149, []],
  WT_151: ['WT_151', '151', 1, 150, []],
  WT_152: ['WT_152', '152', 1, 151, []],
  WT_153: ['WT_153', '153', 1, 152, []],
  WT_154: ['WT_154', '154', 1, 153, []],
  WT_155: ['WT_155', '155', 1, 154, []],
  WT_156: ['WT_156', '156', 1, 155, []],
  WT_157: ['WT_157', '157', 1, 156, []],
  WT_158: ['WT_158', '158', 1, 157, []],
  WT_159: ['WT_159', '159', 1, 158, []],
  WT_160: ['WT_160', '160', 1, 159, []],
  WT_161: ['WT_161', '161', 1, 160, []],
  WT_162: ['WT_162', '162', 1, 161, []],
  WT_163: ['WT_163', '163', 1, 162, []],
  WT_164: ['WT_164', '164', 1, 163, []],
  WT_165: ['WT_165', '165', 1, 164, []],
  WT_166: ['WT_166', '166', 1, 165, []],
  WT_167: ['WT_167', '167', 1, 166, []],
  WT_168: ['WT_168', '168', 1, 167, []],
  WT_169: ['WT_169', '169', 1, 168, []],
  WT_170: ['WT_170', '170', 1, 169, []],
  WT_171: ['WT_171', '171', 1, 170, []],
  WT_172: ['WT_172', '172', 1, 171, []],
  WT_173: ['WT_173', '173', 1, 172, []],
  WT_174: ['WT_174', '174', 1, 173, []],
  WT_175: ['WT_175', '175', 1, 174, []],
  WT_176: ['WT_176', '176', 1, 175, []],
  WT_177: ['WT_177', '177', 1, 176, []],
  WT_178: ['WT_178', '178', 1, 177, []],
  WT_179: ['WT_179', '179', 1, 178, []],
  WT_180: ['WT_180', '180', 1, 179, []],
  WT_181: ['WT_181', '181', 1, 180, []],
  WT_182: ['WT_182', '182', 1, 181, []],
  WT_183: ['WT_183', '183', 1, 182, []],
  WT_184: ['WT_184', '184', 1, 183, []],
  WT_185: ['WT_185', '185', 1, 184, []],
  WT_186: ['WT_186', '186', 1, 185, []],
  WT_187: ['WT_187', '187', 1, 186, []],
  WT_188: ['WT_188', '188', 1, 187, []],
  WT_189: ['WT_189', '189', 1, 188, []],
  WT_190: ['WT_190', '190', 1, 189, []],
  WT_191: ['WT_191', '191', 1, 190, []],
  WT_192: ['WT_192', '192', 1, 191, []],
  WT_193: ['WT_193', '193', 1, 192, []],
  WT_194: ['WT_194', '194', 1, 193, []],
  WT_195: ['WT_195', '195', 1, 194, []],
  WT_196: ['WT_196', '196', 1, 195, []],
  WT_197: ['WT_197', '197', 1, 196, []],
  WT_198: ['WT_198', '198', 1, 197, []],
  WT_199: ['WT_199', '199', 1, 198, []],
  WT_200: ['WT_200', '200', 1, 199, []],
};
var GPOS_INDUSTRY_TYPE = {
  INDT_AACY: ['INDT_AACY', 'Auto Ancillary', 1, 1, []],
  INDT_ABRS: ['INDT_ABRS', 'Auto - Batteries', 1, 2, []],
  INDT_ACC: ['INDT_ACC', 'Accounts', 1, 3, []],
  INDT_ADAC: ['INDT_ADAC', 'Audit And Accounts', 1, 4, []],
  INDT_ADAG: ['INDT_ADAG', 'Ad Agency', 1, 5, []],
  INDT_ADVT: ['INDT_ADVT', 'Advertising', 1, 6, []],
  INDT_AGCL: ['INDT_AGCL', 'Agrochemicals', 1, 7, []],
  INDT_AGCT: ['INDT_AGCT', 'Agriculture', 1, 8, []],
  INDT_ALMN: ['INDT_ALMN', 'Aluminium', 1, 9, []],
  INDT_ANHB: ['INDT_ANHB', 'Animal Husbandry', 1, 10, []],
  INDT_ANTD: ['INDT_ANTD', 'Antique Dealer', 1, 11, []],
  INDT_APRL: ['INDT_APRL', 'Apparels', 1, 12, []],
  INDT_AQCT: ['INDT_AQCT', 'Aquaculture', 1, 13, []],
  INDT_ARCN: ['INDT_ARCN', 'Air Condition', 1, 14, []],
  INDT_ARCT: ['INDT_ARCT', 'Art And Culture', 1, 15, []],
  INDT_ARDS: ['INDT_ARDS', 'Arms Dealers', 1, 16, []],
  INDT_ARFC: ['INDT_ARFC', 'Airforce', 1, 17, []],
  INDT_ARFS: ['INDT_ARFS', 'Armed Forces', 1, 18, []],
  INDT_ARLN: ['INDT_ARLN', 'Air Lines', 1, 19, []],
  INDT_ARLNS: ['INDT_ARLNS', 'Airlines', 1, 20, []],
  INDT_ARM: ['INDT_ARM', 'Army', 1, 21, []],
  INDT_ARNT: ['INDT_ARNT', 'Aeronautics', 1, 22, []],
  INDT_ASBT: ['INDT_ASBT', 'Asbestos', 1, 23, []],
  INDT_ASRF: ['INDT_ASRF', 'Assam Rifles', 1, 24, []],
  INDT_ASTG: ['INDT_ASTG', 'Astrology', 1, 25, []],
  INDT_ATEG: ['INDT_ATEG', 'Atomic Energy', 1, 26, []],
  INDT_ATMB: ['INDT_ATMB', 'Automobile', 1, 27, []],
  INDT_ATMS: ['INDT_ATMS', 'Automobiles', 1, 28, []],
  INDT_AVAT: ['INDT_AVAT', 'Aviation', 1, 29, []],
  INDT_AYVC: ['INDT_AYVC', 'Ayurvedic', 1, 30, []],
  INDT_B2B: ['INDT_B2B', 'B2B', 1, 31, []],
  INDT_B2C: ['INDT_B2C', 'B2C', 1, 32, []],
  INDT_BDFS: ['INDT_BDFS', 'Border Security Force', 1, 33, []],
  INDT_BDMT: ['INDT_BDMT', 'Building Materials', 1, 34, []],
  INDT_BERG: ['INDT_BERG', 'Bearings', 1, 35, []],
  INDT_BITH: ['INDT_BITH', 'Biotech', 1, 36, []],
  INDT_BMFT: ['INDT_BMFT', 'Brick Manufacturing', 1, 37, []],
  INDT_BNFC: ['INDT_BNFC', 'Banking & Finance', 1, 38, []],
  INDT_BNFI: ['INDT_BNFI', 'Banking Finance And Investment', 1, 39, []],
  INDT_BNKG: ['INDT_BNKG', 'Banking', 1, 40, []],
  INDT_BPO: ['INDT_BPO', 'BPO', 1, 41, []],
  INDT_BSN: ['INDT_BSN', 'Business', 1, 42, []],
  INDT_BTCS: ['INDT_BTCS', 'Beauty & Cosmetics', 1, 43, []],
  INDT_BVGS: ['INDT_BVGS', 'Beverages', 1, 44, []],
  INDT_BWDT: ['INDT_BWDT', 'Breweries & Distilleries', 1, 45, []],
  INDT_CABL: ['INDT_CABL', 'Cable', 1, 46, []],
  INDT_CBST: ['INDT_CBST', 'Cable & Satellite TV', 1, 47, []],
  INDT_CEL: ['INDT_CEL', 'Cell', 1, 48, []],
  INDT_CHML: ['INDT_CHML', 'Chemical', 1, 49, []],
  INDT_CID: ['INDT_CID', 'Cid', 1, 50, []],
  INDT_CINM: ['INDT_CINM', 'Cinema', 1, 51, []],
  INDT_CIVL: ['INDT_CIVL', 'Civil', 1, 52, []],
  INDT_CLCT: ['INDT_CLCT', 'Call Center', 1, 53, []],
  INDT_CLMG: ['INDT_CLMG', 'Coal Mining', 1, 54, []],
  INDT_CLT: ['INDT_CLT', 'Cloth', 1, 55, []],
  INDT_CLTS: ['INDT_CLTS', 'Clothes', 1, 56, []],
  INDT_CMID: ['INDT_CMID', 'Comodity Industry', 1, 57, []],
  INDT_CMP: ['INDT_CMP', 'Computers', 1, 58, []],
  INDT_CMT: ['INDT_CMT', 'Cement', 1, 59, []],
  INDT_CNEM: ['INDT_CNEM', 'Construction Equipment Mfg.', 1, 60, []],
  INDT_CNS: ['INDT_CNS', 'Construction', 1, 61, []],
  INDT_CNST: ['INDT_CNST', 'Consultant', 1, 62, []],
  INDT_CPMF: ['INDT_CPMF', 'Cement Pipe Manufacturing', 1, 63, []],
  INDT_CPPF: ['INDT_CPPF', 'Computer Professional', 1, 64, []],
  INDT_CPR: ['INDT_CPR', 'Copper', 1, 65, []],
  INDT_CPWD: ['INDT_CPWD', 'CPWD', 1, 66, []],
  INDT_CRCS: ['INDT_CRCS', 'Circus', 1, 67, []],
  INDT_CRDH: ['INDT_CRDH', 'Courier And Despatch', 1, 68, []],
  INDT_CRER: ['INDT_CRER', 'Courier', 1, 69, []],
  INDT_CRFD: ['INDT_CRFD', 'Clearing And Forwarding', 1, 70, []],
  INDT_CRM: ['INDT_CRM', 'Ceramics', 1, 71, []],
  INDT_CRPF: ['INDT_CRPF', 'Central Reserve Police Force', 1, 72, []],
  INDT_CSDB: ['INDT_CSDB', 'Consumer Durables', 1, 73, []],
  INDT_CSEC: ['INDT_CSEC', 'Customs And Excise', 1, 74, []],
  INDT_CSMT: ['INDT_CSMT', 'Cosmetics', 1, 75, []],
  INDT_CSPD: ['INDT_CSPD', 'Consumer Products', 1, 76, []],
  INDT_CTEC: ['INDT_CTEC', 'Central Excise', 1, 77, []],
  INDT_CTGV: ['INDT_CTGV', 'Central Government', 1, 78, []],
  INDT_CTIS: ['INDT_CTIS', 'Central Industrial Security Force', 1, 79, []],
  INDT_CTMD: ['INDT_CTMD', 'Content & Media', 1, 80, []],
  INDT_CTR: ['INDT_CTR', 'Catering', 1, 81, []],
  INDT_CYC: ['INDT_CYC', 'Cycle', 1, 82, []],
  INDT_DFNC: ['INDT_DFNC', 'Defence', 1, 83, []],
  INDT_DIMD: ['INDT_DIMD', 'Diamond', 1, 84, []],
  INDT_DNTL: ['INDT_DNTL', 'Dental', 1, 85, []],
  INDT_DOCR: ['INDT_DOCR', 'Doctor', 1, 86, []],
  INDT_DOCS: ['INDT_DOCS', 'Docks', 1, 87, []],
  INDT_DOPT: ['INDT_DOPT', 'Docks And Port', 1, 88, []],
  INDT_DRVG: ['INDT_DRVG', 'Driving', 1, 89, []],
  INDT_DRY: ['INDT_DRY', 'Dairy', 1, 90, []],
  INDT_DSTR: ['INDT_DSTR', 'Distribution', 1, 91, []],
  INDT_DTIV: ['INDT_DTIV', 'Detective', 1, 92, []],
  INDT_EBNK: ['INDT_EBNK', 'e-banking', 1, 93, []],
  INDT_EBRK: ['INDT_EBRK', 'e-broking', 1, 94, []],
  INDT_ECMC: ['INDT_ECMC', 'e-Commerce', 1, 95, []],
  INDT_ECTC: ['INDT_ECTC', 'Electronics And Telecommunication', 1, 96, []],
  INDT_ECTS: ['INDT_ECTS', 'Electronics', 1, 97, []],
  INDT_ECTY: ['INDT_ECTY', 'Electricity', 1, 98, []],
  INDT_EDU: ['INDT_EDU', 'Education', 1, 99, []],
  INDT_EFN: ['INDT_EFN', 'e-finance', 1, 100, []],
  INDT_ELCT: ['INDT_ELCT', 'Electricals', 1, 101, []],
  INDT_EMGT: ['INDT_EMGT', 'Event Management', 1, 102, []],
  INDT_ENGG: ['INDT_ENGG', 'Engineering', 1, 103, []],
  INDT_ENGS: ['INDT_ENGS', 'Engines & Gensets', 1, 104, []],
  INDT_ENT: ['INDT_ENT', 'Entertainment', 1, 105, []],
  INDT_EPHS: ['INDT_EPHS', 'Export House', 1, 106, []],
  INDT_ESLE: ['INDT_ESLE', 'Emergency Serv./Law Enforcemnt', 1, 107, []],
  INDT_EXP: ['INDT_EXP', 'Export', 1, 108, []],
  INDT_EXPS: ['INDT_EXPS', 'Explosives', 1, 109, []],
  INDT_FBID: ['INDT_FBID', 'Fabrication Industry', 1, 110, []],
  INDT_FBMF: ['INDT_FBMF', 'Fibre Manufacturing', 1, 111, []],
  INDT_FDPD: ['INDT_FDPD', 'Food & Dairy Products', 1, 112, []],
  INDT_FFTG: ['INDT_FFTG', 'Fire Fighting', 1, 113, []],
  INDT_FINC: ['INDT_FINC', 'Finance', 1, 114, []],
  INDT_FISH: ['INDT_FISH', 'Fishing', 1, 115, []],
  INDT_FITN: ['INDT_FITN', 'Fitness', 1, 116, []],
  INDT_FLM: ['INDT_FLM', 'Film', 1, 117, []],
  INDT_FMCG: ['INDT_FMCG', 'Fmcg', 1, 118, []],
  INDT_FMID: ['INDT_FMID', 'Film Industry', 1, 119, []],
  INDT_FOBV: ['INDT_FOBV', 'Food & beverages (F&B)', 1, 120, []],
  INDT_FOD: ['INDT_FOD', 'Food', 1, 121, []],
  INDT_FRBG: ['INDT_FRBG', 'Fire Brigade', 1, 122, []],
  INDT_FRGG: ['INDT_FRGG', 'Forgings', 1, 123, []],
  INDT_FRM: ['INDT_FRM', 'Farming', 1, 124, []],
  INDT_FRNT: ['INDT_FRNT', 'Furniture', 1, 125, []],
  INDT_FRST: ['INDT_FRST', 'Forestry', 1, 126, []],
  INDT_FRZ: ['INDT_FRZ', 'Fertilizer', 1, 127, []],
  INDT_GASP: ['INDT_GASP', 'Gas Supply', 1, 128, []],
  INDT_GLD: ['INDT_GLD', 'Gold', 1, 129, []],
  INDT_GLS: ['INDT_GLS', 'Glass', 1, 130, []],
  INDT_GNSY: ['INDT_GNSY', 'General Physician', 1, 131, []],
  INDT_GOVF: ['INDT_GOVF', 'Government Officer', 1, 132, []],
  INDT_GOVS: ['INDT_GOVS', 'Government Sector', 1, 133, []],
  INDT_GPH: ['INDT_GPH', 'Graphic', 1, 134, []],
  INDT_GRCY: ['INDT_GRCY', 'Grocery', 1, 135, []],
  INDT_GRMT: ['INDT_GRMT', 'Garments', 1, 136, []],
  INDT_GTC: ['INDT_GTC', 'Greeting Cards / Gifts', 1, 137, []],
  INDT_HCR: ['INDT_HCR', 'Healthcare', 1, 138, []],
  INDT_HCTY: ['INDT_HCTY', 'H.R.Consultancy', 1, 139, []],
  INDT_HDCF: ['INDT_HDCF', 'Handicrafts', 1, 140, []],
  INDT_HDCT: ['INDT_HDCT', 'Handicraft', 1, 141, []],
  INDT_HDLM: ['INDT_HDLM', 'Handloom', 1, 142, []],
  INDT_HDW: ['INDT_HDW', 'Hardware', 1, 143, []],
  INDT_HGW: ['INDT_HGW', 'Highways', 1, 144, []],
  INDT_HHAP: ['INDT_HHAP', 'Household Appliances / Utensils', 1, 145, []],
  INDT_HHPD: ['INDT_HHPD', 'Household Products', 1, 146, []],
  INDT_HLT: ['INDT_HLT', 'Health', 1, 147, []],
  INDT_HMLN: ['INDT_HMLN', 'Home Loans', 1, 148, []],
  INDT_HMPY: ['INDT_HMPY', 'Homeopathy', 1, 149, []],
  INDT_HSFN: ['INDT_HSFN', 'Housing Finance', 1, 150, []],
  INDT_HSPL: ['INDT_HSPL', 'Hospital', 1, 151, []],
  INDT_HSPY: ['INDT_HSPY', 'Hospitality', 1, 152, []],
  INDT_HSRY: ['INDT_HSRY', 'Hoisery', 1, 153, []],
  INDT_HSY: ['INDT_HSY', 'Hosiery', 1, 154, []],
  INDT_HTCT: ['INDT_HTCT', 'Horticulture', 1, 155, []],
  INDT_HTL: ['INDT_HTL', 'Hotel', 1, 156, []],
  INDT_HWF: ['INDT_HWF', 'Housewife', 1, 157, []],
  INDT_ICT: ['INDT_ICT', 'Income Tax', 1, 158, []],
  INDT_IMP: ['INDT_IMP', 'Import', 1, 159, []],
  INDT_INB: ['INDT_INB', 'Investment Banking', 1, 160, []],
  INDT_INC: ['INDT_INC', 'Info Communication', 1, 161, []],
  INDT_INFT: ['INDT_INFT', 'Information Technology', 1, 162, []],
  INDT_INK: ['INDT_INK', 'Inks', 1, 163, []],
  INDT_INS: ['INDT_INS', 'Insurance', 1, 164, []],
  INDT_INT: ['INDT_INT', 'Interiors', 1, 165, []],
  INDT_INTM: ['INDT_INTM', 'Instrumentation', 1, 166, []],
  INDT_IPRP: ['INDT_IPRP', 'IT - Peripherals', 1, 167, []],
  INDT_IPXP: ['INDT_IPXP', 'Import And Export', 1, 168, []],
  INDT_IRG: ['INDT_IRG', 'Irrigation', 1, 169, []],
  INDT_IRN: ['INDT_IRN', 'Iron', 1, 170, []],
  INDT_ITBP: ['INDT_ITBP', 'Indo - Tibetan Border Police', 1, 171, []],
  INDT_ITDG: ['INDT_ITDG', 'Interior Design', 1, 172, []],
  INDT_ITH: ['INDT_ITH', 'IT - Hardware', 1, 173, []],
  INDT_ITID: ['INDT_ITID', 'IT Industry', 1, 174, []],
  INDT_ITN: ['INDT_ITN', 'Internet', 1, 175, []],
  INDT_JURN: ['INDT_JURN', 'Journalism', 1, 176, []],
  INDT_JWL: ['INDT_JWL', 'Jewellery', 1, 177, []],
  INDT_KITW: ['INDT_KITW', 'Knitwears', 1, 178, []],
  INDT_KRN: ['INDT_KRN', 'Kirana', 1, 179, []],
  INDT_LATR: ['INDT_LATR', 'Leather', 1, 180, []],
  INDT_LBCT: ['INDT_LBCT', 'Lubricants', 1, 181, []],
  INDT_LBR: ['INDT_LBR', 'Labour', 1, 182, []],
  INDT_LDGH: ['INDT_LDGH', 'Lodge & Guest House', 1, 183, []],
  INDT_LGJS: ['INDT_LGJS', 'Legal And Justice', 1, 184, []],
  INDT_LGTS: ['INDT_LGTS', 'Logistics', 1, 185, []],
  INDT_LQR: ['INDT_LQR', 'Liquor', 1, 186, []],
  INDT_LUGG: ['INDT_LUGG', 'Luggage', 1, 187, []],
  INDT_MACH: ['INDT_MACH', 'Machinery', 1, 188, []],
  INDT_MB: ['INDT_MB', 'Mobile', 1, 189, []],
  INDT_MBID: ['INDT_MBID', 'Marble Industry', 1, 190, []],
  INDT_MCHC: ['INDT_MCHC', 'Mechanical', 1, 191, []],
  INDT_MDC: ['INDT_MDC', 'Medicine', 1, 192, []],
  INDT_MDCL: ['INDT_MDCL', 'Medical', 1, 193, []],
  INDT_MDET: ['INDT_MDET', 'Media And Entertainment', 1, 194, []],
  INDT_MDOF: ['INDT_MDOF', 'Medical Officer', 1, 195, []],
  INDT_MDPC: ['INDT_MDPC', 'Medical Practitioner', 1, 196, []],
  INDT_MEDA: ['INDT_MEDA', 'Media', 1, 197, []],
  INDT_MHMR: ['INDT_MHMR', 'Merchant Marine', 1, 198, []],
  INDT_MHNV: ['INDT_MHNV', 'Merchant Navy', 1, 199, []],
  INDT_MNFT: ['INDT_MNFT', 'Manufacturing', 1, 200, []],
  INDT_MNG: ['INDT_MNG', 'Mining', 1, 201, []],
  INDT_MNQR: ['INDT_MNQR', 'Mining And Quarrying', 1, 202, []],
  INDT_MOEX: ['INDT_MOEX', 'Money Exchanger', 1, 203, []],
  INDT_MPT: ['INDT_MPT', 'Milk Plant', 1, 204, []],
  INDT_MRBK: ['INDT_MRBK', 'Merchant Banking', 1, 205, []],
  INDT_MRN: ['INDT_MRN', 'Marine', 1, 206, []],
  INDT_MTL: ['INDT_MTL', 'Metals', 1, 207, []],
  INDT_MTPT: ['INDT_MTPT', 'Motor Parts', 1, 208, []],
  INDT_MTVH: ['INDT_MTVH', 'Motor Vehicles', 1, 209, []],
  INDT_MUS: ['INDT_MUS', 'Music', 1, 210, []],
  INDT_NAV: ['INDT_NAV', 'Navy', 1, 211, []],
  INDT_NEW: ['INDT_NEW', 'News', 1, 212, []],
  INDT_NFMT: ['INDT_NFMT', 'Non-ferrous Metals', 1, 213, []],
  INDT_NGO: ['INDT_NGO', 'NGO', 1, 214, []],
  INDT_NON: ['INDT_NON', 'None', 1, 215, []],
  INDT_NSGD: ['INDT_NSGD', 'National Security Guard', 1, 216, []],
  INDT_OFAT: ['INDT_OFAT', 'Office Automation', 1, 217, []],
  INDT_OIL: ['INDT_OIL', 'Oil', 1, 218, []],
  INDT_OLCT: ['INDT_OLCT', 'Oil And Lubricants', 1, 219, []],
  INDT_ONG: ['INDT_ONG', 'ONGC', 1, 220, []],
  INDT_ONGC: ['INDT_ONGC', 'Oil And Natural Gas', 1, 221, []],
  INDT_OPTL: ['INDT_OPTL', 'Optical', 1, 222, []],
  INDT_ORDN: ['INDT_ORDN', 'Ordnance', 1, 223, []],
  INDT_ORF: ['INDT_ORF', 'Oil Refining', 1, 224, []],
  INDT_ORFY: ['INDT_ORFY', 'Oil Refinery', 1, 225, []],
  INDT_ORG: ['INDT_ORG', 'Oil Rig', 1, 226, []],
  INDT_OSCN: ['INDT_OSCN', 'Outsourcing', 1, 227, []],
  INDT_OTHR: ['INDT_OTHR', 'Other', 1, 228, []],
  INDT_PCAB: ['INDT_PCAB', 'Power Cables', 1, 229, []],
  INDT_PCTL: ['INDT_PCTL', 'Pharmaceutical', 1, 230, []],
  INDT_PEQT: ['INDT_PEQT', 'Power Equipment', 1, 231, []],
  INDT_PEST: ['INDT_PEST', 'Pesticides', 1, 232, []],
  INDT_PFMG: ['INDT_PFMG', 'Poultry Farming', 1, 233, []],
  INDT_PFSL: ['INDT_PFSL', 'Professional', 1, 234, []],
  INDT_PGHB: ['INDT_PGHB', 'Paying Hobbies', 1, 235, []],
  INDT_PGLG: ['INDT_PGLG', 'Property Dealing', 1, 236, []],
  INDT_PIP: ['INDT_PIP', 'Pipe', 1, 237, []],
  INDT_PLCT: ['INDT_PLCT', 'Placement', 1, 238, []],
  INDT_PLST: ['INDT_PLST', 'Plastics', 1, 239, []],
  INDT_PLTC: ['INDT_PLTC', 'Politics', 1, 240, []],
  INDT_PLTN: ['INDT_PLTN', 'Plantation', 1, 241, []],
  INDT_PMCT: ['INDT_PMCT', 'Pharmaceutials', 1, 242, []],
  INDT_PMNG: ['INDT_PMNG', 'Paper Manufacturing', 1, 243, []],
  INDT_PMRY: ['INDT_PMRY', 'Petroleum Refinery', 1, 244, []],
  INDT_PNST: ['INDT_PNST', 'Printing and Stationery', 1, 245, []],
  INDT_PNT: ['INDT_PNT', 'Paint', 1, 246, []],
  INDT_PNTG: ['INDT_PNTG', 'Painting', 1, 247, []],
  INDT_POLC: ['INDT_POLC', 'Police', 1, 248, []],
  INDT_PORT: ['INDT_PORT', 'Port', 1, 249, []],
  INDT_PRLT: ['INDT_PRLT', 'Public relations', 1, 250, []],
  INDT_PRST: ['INDT_PRST', 'Priest', 1, 251, []],
  INDT_PRTN: ['INDT_PRTN', 'Partnership', 1, 252, []],
  INDT_PSUP: ['INDT_PSUP', 'Power Supply', 1, 253, []],
  INDT_PTRL: ['INDT_PTRL', 'Petroleum', 1, 254, []],
  INDT_PUBL: ['INDT_PUBL', 'Publishing', 1, 255, []],
  INDT_PWD: ['INDT_PWD', 'PWD', 1, 256, []],
  INDT_PWR: ['INDT_PWR', 'Power', 1, 257, []],
  INDT_PYRN: ['INDT_PYRN', 'Polyester Yarn', 1, 258, []],
  INDT_PYSY: ['INDT_PYSY', 'Physiotherapy', 1, 259, []],
  INDT_QUAR: ['INDT_QUAR', 'Quarrying', 1, 260, []],
  INDT_RDAF: ['INDT_RDAF', 'Radio AM & FM', 1, 261, []],
  INDT_RDCT: ['INDT_RDCT', 'Roads And Construction', 1, 262, []],
  INDT_RDIO: ['INDT_RDIO', 'Radio', 1, 263, []],
  INDT_RDWY: ['INDT_RDWY', 'Roadways', 1, 264, []],
  INDT_REST: ['INDT_REST', 'Real Estate', 1, 265, []],
  INDT_RFNY: ['INDT_RFNY', 'Refinery', 1, 266, []],
  INDT_RLWY: ['INDT_RLWY', 'Railways', 1, 267, []],
  INDT_RSCH: ['INDT_RSCH', 'Research', 1, 268, []],
  INDT_RTAP: ['INDT_RTAP', 'Retired Army Personal', 1, 269, []],
  INDT_RTL: ['INDT_RTL', 'Retail', 1, 270, []],
  INDT_RTRD: ['INDT_RTRD', 'Retired', 1, 271, []],
  INDT_RUBB: ['INDT_RUBB', 'Rubber', 1, 272, []],
  INDT_SALS: ['INDT_SALS', 'Sales', 1, 273, []],
  INDT_SCHL: ['INDT_SCHL', 'School', 1, 274, []],
  INDT_SCTY: ['INDT_SCTY', 'Security', 1, 275, []],
  INDT_SCWF: ['INDT_SCWF', 'Social Welfare', 1, 276, []],
  INDT_SDGN: ['INDT_SDGN', 'Sand & Granite', 1, 277, []],
  INDT_SERV: ['INDT_SERV', 'Service', 1, 278, []],
  INDT_SFDK: ['INDT_SFDK', 'Soft Drinks', 1, 279, []],
  INDT_SFTW: ['INDT_SFTW', 'Software', 1, 280, []],
  INDT_SGR: ['INDT_SGR', 'Sugar', 1, 281, []],
  INDT_SHPP: ['INDT_SHPP', 'Shipping', 1, 282, []],
  INDT_SHRS: ['INDT_SHRS', 'Shares', 1, 283, []],
  INDT_SHSB: ['INDT_SHSB', 'Sashastra Seema Bal', 1, 284, []],
  INDT_SLK: ['INDT_SLK', 'Silk', 1, 285, []],
  INDT_SLMK: ['INDT_SLMK', 'Sales And Marketing', 1, 286, []],
  INDT_SLMN: ['INDT_SLMN', 'Salesman', 1, 287, []],
  INDT_SNTY: ['INDT_SNTY', 'Sanitary', 1, 288, []],
  INDT_SPBD: ['INDT_SPBD', 'Ship Building', 1, 289, []],
  INDT_SPDT: ['INDT_SPDT', 'Soaps & Detergents', 1, 290, []],
  INDT_SPFF: ['INDT_SPFF', 'Special Frontier Force', 1, 291, []],
  INDT_SPGM: ['INDT_SPGM', 'Sports And Games', 1, 292, []],
  INDT_SPRT: ['INDT_SPRT', 'Sports', 1, 293, []],
  INDT_SRCT: ['INDT_SRCT', 'Sericulture', 1, 294, []],
  INDT_SRGN: ['INDT_SRGN', 'Surgeon', 1, 295, []],
  INDT_STBR: ['INDT_STBR', 'Stock Broking', 1, 296, []],
  INDT_STD: ['INDT_STD', 'Student', 1, 297, []],
  INDT_STEL: ['INDT_STEL', 'Steel', 1, 298, []],
  INDT_STGV: ['INDT_STGV', 'State Government', 1, 299, []],
  INDT_STNY: ['INDT_STNY', 'Stationary', 1, 300, []],
  INDT_TATR: ['INDT_TATR', 'Travel And Tour', 1, 301, []],
  INDT_TAXN: ['INDT_TAXN', 'Taxation', 1, 302, []],
  INDT_TBCO: ['INDT_TBCO', 'Tobacco & Cigarettes', 1, 303, []],
  INDT_TCNG: ['INDT_TCNG', 'Teaching', 1, 304, []],
  INDT_TCOMM: ['INDT_TCOMM', 'Telecommunications', 1, 305, []],
  INDT_TECH: ['INDT_TECH', 'Technology', 1, 306, []],
  INDT_TELE: ['INDT_TELE', 'Telecom', 1, 307, []],
  INDT_THTR: ['INDT_THTR', 'Theatre', 1, 308, []],
  INDT_TIND: ['INDT_TIND', 'Travel Industry', 1, 309, []],
  INDT_TLES: ['INDT_TLES', 'Tiles', 1, 310, []],
  INDT_TRDG: ['INDT_TRDG', 'Trading', 1, 311, []],
  INDT_TRDR: ['INDT_TRDR', 'Trader', 1, 312, []],
  INDT_TRSM: ['INDT_TRSM', 'Tourism', 1, 313, []],
  INDT_TRSP: ['INDT_TRSP', 'Transport', 1, 314, []],
  INDT_TRST: ['INDT_TRST', 'Trustee', 1, 315, []],
  INDT_TRUM: ['INDT_TRUM', 'Tourisum', 1, 316, []],
  INDT_TUTN: ['INDT_TUTN', 'Tuition', 1, 317, []],
  INDT_TV: ['INDT_TV', 'TV', 1, 318, []],
  INDT_TVBG: ['INDT_TVBG', 'TV Broadcasting', 1, 319, []],
  INDT_TVPN: ['INDT_TVPN', 'Television Production', 1, 320, []],
  INDT_TVSN: ['INDT_TVSN', 'Television', 1, 321, []],
  INDT_TXAF: ['INDT_TXAF', 'Tax And Finance', 1, 322, []],
  INDT_TXTL: ['INDT_TXTL', 'Textile', 1, 323, []],
  INDT_UNEM: ['INDT_UNEM', 'Unemployed', 1, 324, []],
  INDT_UNIN: ['INDT_UNIN', 'Unearned Income', 1, 325, []],
  INDT_VETR: ['INDT_VETR', 'Veterenary', 1, 326, []],
  INDT_WATR: ['INDT_WATR', 'Water', 1, 327, []],
  INDT_WGDS: ['INDT_WGDS', 'White Goods', 1, 328, []],
  INDT_WOOL: ['INDT_WOOL', 'Wool', 1, 329, []],
  INDT_WTCH: ['INDT_WTCH', 'Watch', 1, 330, []],
  INDT_WTRT: ['INDT_WTRT', 'Water Treatment', 1, 331, []],
  INDT_WVNG: ['INDT_WVNG', 'Weaving', 1, 332, []],
  INDT_YARN: ['INDT_YARN', 'Yarn', 1, 333, []],
};
var GPOS_SMOKER_FLAG = {
  SMOKER_FLAG0: ['SMOKER_FLAG0', '0', 1, 1, []],
  SMOKER_FLAG1: ['SMOKER_FLAG1', '1-5', 1, 2, []],
  SMOKER_FLAG2: ['SMOKER_FLAG2', '6-10', 1, 3, []],
  SMOKER_FLAG3: ['SMOKER_FLAG3', '11-15', 1, 4, []],
  SMOKER_FLAG4: ['SMOKER_FLAG4', '16-20', 1, 5, []],
  SMOKER_FLAG5: ['SMOKER_FLAG5', '20+', 1, 6, []],
};
var GPOS_LARELWITHPROPOSER = {
  RLAP_DGTR_CD: ['RLAP_DGTR_CD', 'Daughter', 1, 1, []],
  RLAP_FATH_CD: ['RLAP_FATH_CD', 'Father', 1, 2, []],
  RLAP_FTHLAW_CD: ['RLAP_FTHLAW_CD', 'Father-in-law', 1, 3, []],
  RLAP_HU_CD: ['RLAP_HU_CD', 'Husband', 1, 4, []],
  RLAP_MOTH_CD: ['RLAP_MOTH_CD', 'Mother', 1, 5, []],
  RLAP_MTHLAW_CD: ['RLAP_MTHLAW_CD', 'Mother-in-law', 1, 6, []],
  RLAP_SELF_CD: ['RLAP_SELF_CD', 'Self', 1, 7, []],
  RLAP_SON_CD: ['RLAP_SON_CD', 'Son', 1, 8, []],
  RLAP_SPOU_CD: ['RLAP_SPOU_CD', 'Spouse', 1, 9, []],
  RLAP_WI_CD: ['RLAP_WI_CD', 'Wife', 1, 10, []],
};
var GPOS_RELPROPOSORLA = {
  RPRPLA_COMP_CD: ['RPRPLA_COMP_CD', 'Company (If Keyman Insurance)', 1, 1, []],
  RPRPLA_EMP_CD: ['RPRPLA_EMP_CD', 'Employer', 1, 2, []],
  RPRPLA_FATH_CD: ['RPRPLA_FATH_CD', 'Father', 1, 3, []],
  RPRPLA_GRFTH_CD: ['RPRPLA_GRFTH_CD', 'Grandfather', 1, 4, []],
  RPRPLA_GRMTH_CD: ['RPRPLA_GRMTH_CD', 'Grandmother', 1, 5, []],
  RPRPLA_HUF_CD: ['RPRPLA_HUF_CD', 'HUF (Karta)', 1, 6, []],
  RPRPLA_HUSB_CD: ['RPRPLA_HUSB_CD', 'Husband', 1, 7, []],
  RPRPLA_MOTH_CD: ['RPRPLA_MOTH_CD', 'Mother', 1, 8, []],
  RPRPLA_PRTR_CD: ['RPRPLA_PRTR_CD', 'PR', 1, 9, []],
  RPRPLA_SPOU_CD: ['RPRPLA_SPOU_CD', 'Spouse', 1, 10, []],
};
var GOPS_DESIGNATION = {
  OCCUP_AVVP_CD_OPS: ['OCCUP_AVVP_CD_OPS', 'AVP', 1, 1, []],
  OCCUP_AGAO_CD_OPS: ['OCCUP_AGAO_CD_OPS', 'Agriculture Farmer', 1, 2, []],
  OCCUP_AUDI_CD_OPS: ['OCCUP_AUDI_CD_OPS', 'Auditor', 1, 3, []],
  OCCUP_ADAA_CD_OPS: ['OCCUP_ADAA_CD_OPS', 'Business analyst', 1, 4, []],
  OCCUP_CEOF_CD_OPS: ['OCCUP_CEOF_CD_OPS', 'CEO', 1, 5, []],
  OCCUP_PRON_CD_OPS: ['OCCUP_PRON_CD_OPS', 'Chartered Accountant', 1, 6, []],
  OCCUP_DIR_CD_OPS: ['OCCUP_DIR_CD_OPS', 'Director', 1, 7, []],
  OCCUP_DOCT_CD_OPS: ['OCCUP_DOCT_CD_OPS', 'Doctor', 1, 8, []],
  OCCUP_ENGR_CD_OPS: ['OCCUP_ENGR_CD_OPS', 'Engineer', 1, 9, []],
  OCCUP_ADMV_CD_OPS: ['OCCUP_ADMV_CD_OPS', 'General manager', 1, 10, []],
  OCCUP_HEAY_CD_OPS: ['OCCUP_HEAY_CD_OPS', 'Head Of Department', 1, 11, []],
  OCCUP_MGR_CD_OPS: ['OCCUP_MGR_CD_OPS', 'Manager', 1, 12, []],
  OCCUP_MGRD_CD_OPS: ['OCCUP_MGRD_CD_OPS', 'Managing director', 1, 13, []],
  OCCUP_OTHR_CD_OPS: ['OCCUP_OTHR_CD_OPS', 'Other Occupation', 1, 14, []],
  OCCUP_BOND_CD_OPS: ['OCCUP_BOND_CD_OPS', 'Properietor', 1, 15, []],
  OCCUP_SENT_CD_OPS: ['OCCUP_SENT_CD_OPS', 'Senior Accountant', 1, 16, []],
  OCCUP_SRMR_CD_OPS: ['OCCUP_SRMR_CD_OPS', 'Senior Manager', 1, 17, []],
  OCCUP_SOFE_CD_OPS: ['OCCUP_SOFE_CD_OPS', 'Software Engineer', 1, 18, []],
  OCCUP_SWPR_CD_OPS: ['OCCUP_SWPR_CD_OPS', 'Software Professional', 1, 19, []],
  OCCUP_STDN_CD_OPS: ['OCCUP_STDN_CD_OPS', 'Student', 1, 20, []],
  OCCUP_SYAN_CD_OPS: ['OCCUP_SYAN_CD_OPS', 'System Analyst', 1, 21, []],
  OCCUP_ADM1_CD_OPS: ['OCCUP_ADM1_CD_OPS', 'Vice president', 1, 22, []],
};
var GOPS_DESIGNATION_NEW = {
  OCCUP_ADVO_CD: ['OCCUP_ADVO_CD', 'Advocate', 1, 1, []],
  OCCUP_AGAO_CD_OPS: ['OCCUP_AGAO_CD_OPS', 'Agriculture Farmer', 1, 2, []],
  OCCUP_ARCH_CD: ['OCCUP_ARCH_CD', 'Architect', 1, 3, []],
  OCCUP_ASTR_CD: ['OCCUP_ASTR_CD', 'Astrologer', 1, 4, []],
  OCCUP_BUTO_CD: ['OCCUP_BUTO_CD', 'Beauty parlour owner', 1, 5, []],
  OCCUP_BOAD_CD: ['OCCUP_BOAD_CD', 'Boutique Owner', 1, 6, []],
  OCCUP_BUSI_CD: ['OCCUP_BUSI_CD', 'Business', 1, 7, []],
  OCCUP_DRTC_CD: ['OCCUP_DRTC_CD', 'Cab driver', 1, 8, []],
  OCCUP_SEMF_CD: ['OCCUP_SEMF_CD', 'Caterer', 1, 9, []],
  OCCUP_PRON_CD_OPS: ['OCCUP_PRON_CD_OPS', 'Chartered Accountant', 1, 10, []],
  OCCUP_BOSX_CD: ['OCCUP_BOSX_CD', 'Commision agent', 1, 11, []],
  OCCUP_CONU_CD: ['OCCUP_CONU_CD', 'Consultant', 1, 12, []],
  OCCUP_CONC_CD: ['OCCUP_CONC_CD', 'Contractor', 1, 13, []],
  OCCUP_DIR_CD_OPS: ['OCCUP_DIR_CD_OPS', 'Director', 1, 14, []],
  OCCUP_DOCT_CD_OPS: ['OCCUP_DOCT_CD_OPS', 'Doctor', 1, 15, []],
  OCCUP_ENGR_CD_OPS: ['OCCUP_ENGR_CD_OPS', 'Engineer', 1, 16, []],
  OCCUP_MDNJ_CD: ['OCCUP_MDNJ_CD', 'Event manager', 1, 17, []],
  OCCUP_FOAF_CD: ['OCCUP_FOAF_CD', 'Founder Director', 1, 18, []],
  OCCUP_FRAE_CD: ['OCCUP_FRAE_CD', 'Freelancer', 1, 19, []],
  OCCUP_AGET_CD: ['OCCUP_AGET_CD', 'Insurance Agent', 1, 20, []],
  OCCUP_UNEE_CD: ['OCCUP_UNEE_CD', 'Investor', 1, 21, []],
  OCCUP_LAWY_CD: ['OCCUP_LAWY_CD', 'Lawyer', 1, 22, []],
  OCCUP_MGRD_CD_OPS: ['OCCUP_MGRD_CD_OPS', 'Managing director', 1, 23, []],
  OCCUP_OTHR_CD_OPS: ['OCCUP_OTHR_CD_OPS', 'Other Occupation', 1, 24, []],
  OCCUP_BONB_CD: ['OCCUP_BONB_CD', 'Owner', 1, 25, []],
  OCCUP_PAER_CD: ['OCCUP_PAER_CD', 'Partner', 1, 26, []],
  OCCUP_PRIL_CD: ['OCCUP_PRIL_CD', 'Poojari', 1, 27, []],
  OCCUP_PRST_CD: ['OCCUP_PRST_CD', 'Priest', 1, 28, []],
  OCCUP_BOND_CD_OPS: ['OCCUP_BOND_CD_OPS', 'Properietor', 1, 29, []],
  OCCUP_REAE_CD: ['OCCUP_REAE_CD', 'Real Estate Broker', 1, 30, []],
  OCCUP_SENT_CD_OPS: ['OCCUP_SENT_CD_OPS', 'Senior Accountant', 1, 31, []],
  OCCUP_SOFE_CD_OPS: ['OCCUP_SOFE_CD_OPS', 'Software Engineer', 1, 32, []],
  OCCUP_SWPR_CD_OPS: ['OCCUP_SWPR_CD_OPS', 'Software Professional', 1, 33, []],
  OCCUP_TODE_CD: ['OCCUP_TODE_CD', 'Tourist Guide', 1, 34, []],
  OCCUP_TUTE_CD: ['OCCUP_TUTE_CD', 'Tuition teacher', 1, 35, []],
  OCCUP_FITC_CD: ['OCCUP_FITC_CD', 'Yoga teacher', 1, 36, []],
};

var GCOM_CITY = {
  CTY_AMBG: ['8273', 'AMBAJOGAI', 1, 1, ['322', '']],
  CTY_AMBC: ['8274', 'AMBALA CANTT', 1, 2, ['320', '']],
  CTY_ABOH: ['5134', 'Abohar', 1, 3, ['320', 'N']],
  CTY_ABUDHABI: ['4', 'Abu Dhabi', 1, 4, ['5', 'N']],
  CTY_ABUR_NB: ['5453', 'Abu Road', 1, 5, ['345', 'N']],
  CTY_AHB: ['7363', 'Achabal', 1, 6, ['339', 'N']],
  CTY_ACHA_NB: ['5454', 'Achalpur', 1, 7, ['322', 'N']],
  CTY_ADJ: ['7451', 'Adajan', 1, 8, ['338', 'N']],
  CTY_ADAL_NB: ['5455', 'Adalaj', 1, 9, ['338', 'N']],
  CTY_ADAM_NB4: ['7209', 'Adampur', 1, 10, ['320', 'N']],
  CTY_ADAM_NB1: ['5457', 'Adampur', 1, 11, ['320', 'N']],
  CTY_ADAM_NB: ['5456', 'Adampur', 1, 12, ['337', 'N']],
  CTY_ADAM_NB3: ['7208', 'Adampur', 1, 13, ['337', 'N']],
  CTY_ADAM_NB2: ['5458', 'Adamwal', 1, 14, ['320', 'N']],
  CTY_ADDA_NB: ['5459', 'Addanki', 1, 15, ['332', 'N']],
  CTY_ADHA5306: ['5306', 'Adhartal', 1, 16, ['340', 'N']],
  CTY_ADHE_NB: ['5460', 'Adhewada', 1, 17, ['338', 'N']],
  CTY_Adil_6994: ['8333', 'Adilabad', 1, 18, ['332', 'N']],
  CITY_Adil_8147: ['8336', 'Adilabad', 1, 19, ['332', '']],
  CTY_ADIL79: ['3857', 'Adilabad', 1, 20, ['352', 'N']],
  CTY_ADIM: ['4802', 'Adimali', 1, 21, ['341', 'N']],
  CTY_ADIP: ['4674', 'Adipur', 1, 22, ['338', 'N']],
  CTY_ADIT_NB: ['5461', 'Adityapur', 1, 23, ['318', 'N']],
  CTY_ADON: ['5154', 'Adoni', 1, 24, ['332', 'N']],
  CTY_ADOO_NB: ['5462', 'Adoor', 1, 25, ['341', 'N']],
  CTY_AFZLPR: ['7542', 'Afzalpur', 1, 26, ['349', 'N']],
  CTY_AGAR_NB: ['5463', 'Agar', 1, 27, ['340', 'N']],
  CTY_AGAR: ['4939', 'Agartala', 1, 28, ['330', 'N']],
  CTY_AGAS_NB: ['5464', 'Agashi', 1, 29, ['322', 'Y']],
  CTY_AGNOOR: ['7672', 'Agnoor', 1, 30, ['352', 'N']],
  CTY_AGON_NB: ['5465', 'Agonda', 1, 31, ['348', 'N']],
  CTY_AGON_NB1: ['5466', 'Agondh', 1, 32, ['337', 'N']],
  CTY_AGRA80: ['3858', 'Agra', 1, 33, ['326', 'N']],
  CTY_AGRO_NB: ['5467', 'Agroha', 1, 34, ['337', 'N']],
  CTY_AHMA_NB: ['5468', 'Ahmadpur', 1, 35, ['322', 'N']],
  CTY_AHME81: ['3859', 'Ahmed Nagar', 1, 36, ['322', 'Y']],
  CTY_AHME82: ['3860', 'Ahmedabad', 1, 37, ['338', '2']],
  CTY_AHME160: ['5135', 'Ahmedgarh', 1, 38, ['320', 'N']],
  CTY_AHME133: ['5048', 'Ahmednagar', 1, 39, ['322', 'Y']],
  CTY_AHME134: ['5049', 'Ahmedpur', 1, 40, ['322', 'N']],
  CTY_AHRW_NB: ['5469', 'Ahrwan', 1, 41, ['337', 'N']],
  CTY_AINPUR: ['7673', 'Ainapur', 1, 42, ['352', 'N']],
  CTY_AIRO_NB: ['5470', 'Airoli', 1, 43, ['322', 'Y']],
  CTY_AIZA83: ['3861', 'Aizawl', 1, 44, ['343', 'N']],
  CTY_AJEE_NB: ['5471', 'Ajeetgarh', 1, 45, ['345', 'N']],
  CTY_AJGA_NB: ['5472', 'Ajgain', 1, 46, ['326', 'N']],
  CTY_AJIT_NB: ['5473', 'Ajit Wal', 1, 47, ['320', 'N']],
  CTY_AJJADA: ['7593', 'Ajjada', 1, 48, ['332', 'N']],
  CTY_AJME84: ['3862', 'Ajmer', 1, 49, ['345', 'N']],
  CTY_AJNA: ['5136', 'Ajnala', 1, 50, ['320', 'N']],
  CTY_AJOD_NB: ['5474', 'Ajod', 1, 51, ['338', 'N']],
  CTY_AJOL_NB: ['5475', 'Ajol', 1, 52, ['338', 'N']],
  CTY_AKAL_NB: ['5476', 'Akaltara', 1, 53, ['347', 'N']],
  CTY_AKBA: ['4940', 'Akbarpur', 1, 54, ['326', 'N']],
  CTY_AKCH_NB: ['5477', 'Akcha', 1, 55, ['334', 'N']],
  CTY_AKHN_NB: ['5478', 'Akhnoor', 1, 56, ['339', 'N']],
  CTY_AKIV_NB: ['5479', 'Akividu', 1, 57, ['332', 'N']],
  CTY_AKKA_NB: ['5480', 'Akkalkuwa', 1, 58, ['322', 'N']],
  CTY_AKLU: ['5050', 'Akluj', 1, 59, ['322', 'N']],
  CTY_AKOL85: ['3863', 'Akola', 1, 60, ['322', 'N']],
  CTY_AKOT5325: ['5325', 'Akot', 1, 61, ['322', 'N']],
  CITY_Alam_8222: ['8408', 'Alampur', 1, 62, ['332', '']],
  CTY_ALAM_NB: ['5481', 'Alampur', 1, 63, ['352', 'N']],
  CTY_ALAM_NB1: ['5482', 'Alampur', 1, 64, ['326', 'N']],
  CTY_ALAND: ['7507', 'Aland', 1, 65, ['349', 'N']],
  CTY_ALAP86: ['3864', 'Alappuzha', 1, 66, ['341', 'N']],
  CTY_ALAS_NB: ['5483', 'Alas', 1, 67, ['322', 'N']],
  CTY_ALAT: ['4803', 'Alathur', 1, 68, ['341', 'N']],
  CTY_ALDO_NB: ['5484', 'Aldona', 1, 69, ['348', 'N']],
  CTY_ALHA_NB: ['5485', 'Alhadpura', 1, 70, ['338', 'N']],
  CTY_ALIPR: ['7893', 'Ali Pur', 1, 71, ['321', 'Y']],
  CTY_ALIB: ['5051', 'Alibag', 1, 72, ['322', 'N']],
  CTY_ALIG: ['7455', 'Aliganj', 1, 73, ['326', 'N']],
  CTY_ALIG87: ['3865', 'Aligarh', 1, 74, ['326', 'N']],
  CTY_ALIPRE: ['7669', 'Alipore', 1, 75, ['334', 'N']],
  CTY_ALIP_NB: ['5486', 'Alipur', 1, 76, ['320', 'N']],
  CTY_ALIP_NB1: ['5487', 'Alipurduar', 1, 77, ['334', 'N']],
  CTY_ALIR5273: ['5273', 'Alirajpur', 1, 78, ['340', 'N']],
  CTY_ALLA_NB: ['5488', 'Allagadda', 1, 79, ['332', 'N']],
  CTY_ALLA88: ['3866', 'Allahabad', 1, 80, ['326', 'N']],
  CTY_ALPY: ['7417', 'Alleppey', 1, 81, ['341', 'N']],
  CTY_ALMO89: ['3867', 'Almora', 1, 82, ['316', 'N']],
  CTY_APV: ['7361', 'Alto Porvorim', 1, 83, ['348', 'N']],
  CTY_ALUR: ['7510', 'Alur', 1, 84, ['349', 'N']],
  CTY_ALUV: ['4804', 'Aluva', 1, 85, ['341', 'N']],
  CTY_ALWA90: ['3868', 'Alwar', 1, 86, ['345', 'N']],
  CTY_ALWA5369: ['5369', 'Alwaye', 1, 87, ['341', 'N']],
  CTY_AMAL164: ['5155', 'Amalapuram', 1, 88, ['332', 'N']],
  CTY_AMAL135: ['5052', 'Amalner', 1, 89, ['322', 'N']],
  CTY_AMAL_NB: ['5489', 'Amalsad', 1, 90, ['338', 'N']],
  CTY_AMAR_NB: ['5490', 'Amargarh', 1, 91, ['320', 'N']],
  CTY_AMAR_NB1: ['5491', 'Amarkot', 1, 92, ['320', 'N']],
  CTY_AMB_NB: ['5492', 'Amb', 1, 93, ['331', 'N']],
  CTY_AMBA: ['4675', 'Ambaji', 1, 94, ['338', 'N']],
  CTY_AMBA91: ['3869', 'Ambala', 1, 95, ['337', 'N']],
  CTY_AMBA_NB: ['5493', 'Ambala Cantt', 1, 96, ['337', 'N']],
  CTY_AMBA_NB1: ['5494', 'Ambala City', 1, 97, ['337', 'N']],
  CTY_AMBRTH: ['7968', 'Ambarnath', 1, 98, ['322', 'Y']],
  CTY_AMBE92: ['3870', 'Ambedkar Nagar', 1, 99, ['326', 'N']],
  CTY_AMBE136: ['5053', 'Ambejogai', 1, 100, ['322', 'N']],
  CTY_AMBE_NB: ['5495', 'Ambelim', 1, 101, ['348', 'N']],
  CTY_AMBE137: ['5054', 'Ambernath', 1, 102, ['322', 'Y']],
  CTY_AMBI: ['4650', 'Ambikapur', 1, 103, ['347', 'N']],
  CTY_AMBU_NB: ['5496', 'Ambur', 1, 104, ['323', 'N']],
  CTY_AMDA_NB: ['5497', 'Amdada', 1, 105, ['338', 'N']],
  CTY_AMET_NB: ['5498', 'Amethi', 1, 106, ['326', 'N']],
  CTY_AMET_5450: ['7198', 'Amethi', 1, 107, ['326', 'N']],
  CTY_AMIN_SARAI: ['7607', 'Aminagar Sarai', 1, 108, ['326', 'N']],
  CTY_AMNA_NB: ['5499', 'Amnan', 1, 109, ['334', 'N']],
  CTY_AMPT: ['8077', 'Ampati', 1, 110, ['350', 'N']],
  CTY_AMRA_NB: ['5500', 'Amrapur', 1, 111, ['338', 'N']],
  CTY_AMRA93: ['3871', 'Amravati', 1, 112, ['322', 'N']],
  CTY_AMRE94: ['3872', 'Amreli', 1, 113, ['338', 'N']],
  CTY_AMRI95: ['3873', 'Amritsar', 1, 114, ['320', 'N']],
  CTY_AMRO: ['4941', 'Amroha', 1, 115, ['326', 'N']],
  CTY_AMRO_NB: ['5501', 'Amroli', 1, 116, ['338', 'N']],
  CTY_AMTA_NB: ['5502', 'Amtala', 1, 117, ['334', 'N']],
  CTY_AN_YUR: ['7633', 'Anaiyur', 1, 118, ['323', 'N']],
  CTY_ANAK: ['5156', 'Anakapalle', 1, 119, ['332', 'N']],
  CTY_ANAN96: ['3874', 'Anand', 1, 120, ['338', 'N']],
  CTY_ANAN_NB: ['5503', 'Anand Nagar', 1, 121, ['326', 'N']],
  CTY_ANAD: ['8693', 'Anandapur', 1, 122, ['333', 'N']],
  CTY_ANAN_NB1: ['5504', 'Anandpur', 1, 123, ['333', 'N']],
  CTY_ANAN5408: ['5408', 'Anandpur Sahib', 1, 124, ['320', 'N']],
  CTY_ANAN: ['5157', 'Anantapur', 1, 125, ['332', 'N']],
  CTY_ANAN11: ['3875', 'Ananthapur', 1, 126, ['332', 'N']],
  CTY_ANAN97: ['3876', 'Ananthnag', 1, 127, ['339', 'N']],
  CTY_ANAN5407: ['5407', 'Anantnag', 1, 128, ['339', 'N']],
  CTY_ANAS_NB: ['5505', 'Anasarapur', 1, 129, ['333', 'N']],
  CTY_ANDA: ['7490', 'Andada', 1, 130, ['338', 'N']],
  CTY_ANDA_NB: ['5506', 'Andal Gram', 1, 131, ['334', 'N']],
  CTY_AANIC: ['7483', 'Andaman & Nicobar Islands', 1, 132, ['325', 'N']],
  CTY_ANDRI: ['8253', 'Andheri', 1, 133, ['322', 'Y']],
  CTY_ANDU_NB: ['5507', 'Andul', 1, 134, ['334', 'N']],
  CTY_ANEKAL: ['7531', 'Anekal', 1, 135, ['349', 'N']],
  CTY_ANGA: ['4805', 'Angamaly', 1, 136, ['341', 'N']],
  CTY_ANGU98: ['3877', 'Angul', 1, 137, ['333', 'N']],
  CTY_ANJAD: ['8095', 'Anjad', 1, 138, ['340', 'N']],
  CTY_ANJA: ['4676', 'Anjar', 1, 139, ['338', 'N']],
  CTY_ANJU_NB: ['5508', 'Anjuna', 1, 140, ['348', 'N']],
  CTY_ANKL: ['4677', 'Ankleshwar', 1, 141, ['338', 'N']],
  CTY_ANTA_NB: ['5509', 'Antarjar', 1, 142, ['338', 'N']],
  CTY_ANTP_NB: ['5510', 'Antpara', 1, 143, ['334', 'N']],
  CTY_ANUG_NB: ['5511', 'Anugul', 1, 144, ['333', 'N']],
  CTY_ANUP: ['4884', 'Anupgarh', 1, 145, ['345', 'N']],
  CTY_ANUP99: ['3878', 'Anuppur', 1, 146, ['340', 'N']],
  CTY_ANUP_NB: ['5512', 'Anupshahr', 1, 147, ['326', 'N']],
  CTY_AONL_NB: ['5513', 'Aonla', 1, 148, ['326', 'N']],
  CTY_APRA_NB: ['5514', 'Apra', 1, 149, ['320', 'N']],
  CTY_ARA5327: ['5327', 'Ara', 1, 150, ['327', 'N']],
  CTY_ARAK_NB: ['5515', 'Arakonam', 1, 151, ['323', 'N']],
  CTY_ARAM: ['4968', 'Arambagh', 1, 152, ['334', 'N']],
  CTY_ARAN5428: ['5428', 'Aranthangi', 1, 153, ['323', 'N']],
  CTY_ARAR11: ['3879', 'Araria', 1, 154, ['327', 'N']],
  CTY_ARAS_NB: ['5516', 'Arasikere', 1, 155, ['349', 'N']],
  CTY_ARCO: ['4915', 'Arcot', 1, 156, ['323', 'N']],
  CTY_ARIY12: ['3880', 'Ariyalur', 1, 157, ['323', 'N']],
  CTY_ARKLGD: ['7504', 'Arkalgud', 1, 158, ['349', 'N']],
  CTY_ARM_ESTE: ['7597', 'Armapur Estate', 1, 159, ['326', 'N']],
  CTY_ARMO: ['5158', 'Armoor', 1, 160, ['352', 'N']],
  CITY_Armo_8157: ['8344', 'Armoor', 1, 161, ['332', '']],
  CTY_ARNI_NB: ['5517', 'Arni', 1, 162, ['322', 'N']],
  CTY_ARNI: ['7114', 'Arniwala Sheikh Subha', 1, 163, ['320', 'N']],
  CTY_ARNI_NB2: ['5519', 'Arniwala Waziran', 1, 164, ['320', 'N']],
  CTY_ARNI_NB1: ['5518', 'Arniwala sheikh subha', 1, 165, ['320', 'N']],
  CTY_ARPO_NB: ['5520', 'Arpora', 1, 166, ['348', 'N']],
  CTY_ARRA_NB: ['5521', 'Arrah', 1, 167, ['327', 'N']],
  CTY_ARSI5373: ['5373', 'Arsikere', 1, 168, ['349', 'N']],
  CTY_ARUP_NB: ['5522', 'Aruppukkottai', 1, 169, ['323', 'N']],
  CTY_ARVI: ['5055', 'Arvi', 1, 170, ['322', 'N']],
  CTY_ARWA5275: ['5275', 'Arwal', 1, 171, ['327', 'N']],
  CTY_ASAF_NB: ['5523', 'Asafpur', 1, 172, ['326', 'N']],
  CTY_ASAN: ['4969', 'Asansol', 1, 173, ['334', 'N']],
  CTY_ASHO5253: ['5253', 'Ashok Nagar', 1, 174, ['340', 'N']],
  CTY_ASHO13: ['3881', 'Ashok Nagar', 1, 175, ['326', 'N']],
  CTY_ASHO: ['5027', 'Ashoknagar', 1, 176, ['340', 'N']],
  CTY_ASHT: ['5028', 'Ashta', 1, 177, ['340', 'N']],
  CTY_ASKA: ['5116', 'Aska', 1, 178, ['333', 'N']],
  CTY_ASLA: ['7894', 'Asola', 1, 179, ['321', 'Y']],
  CTY_ASSA_NB: ['5524', 'Assandh', 1, 180, ['337', 'N']],
  CTY_ASSO_NB: ['5525', 'Assonora', 1, 181, ['348', 'N']],
  CTY_ASTA_NB: ['5526', 'Asta', 1, 182, ['338', 'N']],
  CTY_ATEL_NB: ['5527', 'Ateli', 1, 183, ['337', 'N']],
  CTY_ATHA57: ['4806', 'Athani', 1, 184, ['341', 'N']],
  CTY_ATHA46: ['4767', 'Athani', 1, 185, ['349', 'N']],
  CTY_ATHG_NB: ['5528', 'Athgarh', 1, 186, ['333', 'N']],
  CTY_ATHN_NB: ['5529', 'Athni', 1, 187, ['349', 'N']],
  CTY_ATMA_NB: ['5530', 'Atmakur', 1, 188, ['332', 'N']],
  CTY_ATPR: ['8266', 'Attapur', 1, 189, ['352', '']],
  CTY_ATTA_NB: ['5531', 'Attari', 1, 190, ['320', 'N']],
  CTY_ATNG: ['8275', 'Attingal', 1, 191, ['341', '']],
  CTY_ATTU: ['4807', 'Attungal', 1, 192, ['341', 'N']],
  CTY_ATTU5349: ['5349', 'Attur', 1, 193, ['323', 'N']],
  CTY_AUNDH: ['8255', 'Aundh', 1, 194, ['322', '']],
  CTY_AUR_NB: ['5532', 'Aur', 1, 195, ['320', 'N']],
  CTY_AURAD: ['7552', 'Aurad', 1, 196, ['349', 'N']],
  CTY_AURA14: ['3882', 'Auraiya', 1, 197, ['326', 'N']],
  CTY_AURA_NB1: ['7204', 'Aurangabad', 1, 198, ['327', 'N']],
  CTY_AURA12: ['3883', 'Aurangabad', 1, 199, ['322', 'N']],
  CTY_AURA_NB: ['5533', 'Aurangabad', 1, 200, ['322', 'N']],
  CTY_AURA15: ['3884', 'Aurangabad(Bh)', 1, 201, ['327', 'N']],
  CTY_AVAD: ['4916', 'Avadi', 1, 202, ['323', 'N']],
  CTY_AVAN_NB: ['5534', 'Avanashi', 1, 203, ['323', 'N']],
  CTY_AWAN_NB: ['5535', 'Awantipora', 1, 204, ['339', 'N']],
  CTY_AYYA_NB: ['5536', 'Ayyappanthangal', 1, 205, ['323', 'N']],
  CTY_ADN: ['7441', 'Azad Nagar', 1, 206, ['318', 'N']],
  CTY_AZAM16: ['3885', 'Azamgarh', 1, 207, ['326', 'N']],
  CTY_AZHI_NB: ['5537', 'Azhiyannur', 1, 208, ['341', 'N']],
  CTY_BSRT: ['7424', 'BASIRHAT', 1, 209, ['334', 'N']],
  CTY_BEDI_NB: ['5626', 'BEDI-APMC', 1, 210, ['338', 'N']],
  CTY_BHUS_NB: ['5678', 'BHUSAWAL', 1, 211, ['322', 'N']],
  CTY_BSNP: ['7436', 'BISHNUPUR', 1, 212, ['334', 'N']],
  CTY_BABA_NB: ['5538', 'Baba Bakala', 1, 213, ['320', 'N']],
  CTY_BBPUR: ['7895', 'Babar Pur', 1, 214, ['321', 'Y']],
  CTY_BABH_NB: ['5539', 'Babhanan', 1, 215, ['326', 'N']],
  CTY_BABI_NB: ['5540', 'Babina', 1, 216, ['326', 'N']],
  CTY_BABR_NB: ['5541', 'Babra', 1, 217, ['338', 'N']],
  CTY_BABU_NB: ['5542', 'Babuganj', 1, 218, ['326', 'N']],
  CTY_BACH_NB: ['5543', 'Bachhrawan', 1, 219, ['326', 'N']],
  CTY_BADA_NB: ['5544', 'Badakera', 1, 220, ['333', 'N']],
  CTY_BADA_NB1: ['5545', 'Badal', 1, 221, ['320', 'N']],
  CTY_BADA_NB2: ['5546', 'Badali Ala Singh', 1, 222, ['320', 'N']],
  CTY_BADAMI: ['7551', 'Badami', 1, 223, ['349', 'N']],
  CTY_BADA_NB3: ['5547', 'Badauli', 1, 224, ['337', 'N']],
  CTY_BDU: ['7380', 'Badaun', 1, 225, ['326', 'N']],
  CTY_BADD: ['4751', 'Baddi', 1, 226, ['331', 'N']],
  CTY_BADG_NB: ['5548', 'Badgam', 1, 227, ['339', 'N']],
  CTY_BDI: ['7426', 'Badhaiu', 1, 228, ['326', 'N']],
  CTY_BADH: ['5137', 'Badhni Kalan', 1, 229, ['320', 'N']],
  CTY_BDH: ['7353', 'Badhoi', 1, 230, ['326', 'N']],
  CTY_BADL_NB: ['5549', 'Badlapur', 1, 231, ['322', 'Y']],
  CTY_BADN_NB: ['5550', 'Badnagar', 1, 232, ['340', 'N']],
  CTY_BADN_NB1: ['5551', 'Badnawar', 1, 233, ['340', 'N']],
  CTY_BADU_NB: ['5552', 'Badud', 1, 234, ['340', 'N']],
  CTY_BADV_NB: ['5553', 'Badvel', 1, 235, ['332', 'N']],
  CTY_BGH: ['8457', 'Bagaha-i', 1, 236, ['327', '']],
  CTY_BAGA17: ['3886', 'Bagalkot', 1, 237, ['349', 'N']],
  CTY_BAGA_NB: ['5554', 'Bagalkote', 1, 238, ['349', 'N']],
  CTY_BGS: ['7397', 'Bagasara', 1, 239, ['338', 'N']],
  CTY_BAGD_NB: ['5555', 'Bagdehi', 1, 240, ['333', 'N']],
  CTY_BAGPLLI: ['7502', 'Bagepalli', 1, 241, ['349', 'N']],
  CTY_BAGE18: ['3887', 'Bageshwar', 1, 242, ['316', 'N']],
  CTY_BAGH_NB: ['5556', 'Bagha', 1, 243, ['327', 'N']],
  CTY_BAGH161: ['5138', 'Bagha Purana', 1, 244, ['320', 'N']],
  CTY_BAGH101: ['4942', 'Baghpat', 1, 245, ['326', 'N']],
  CTY_BAGN_NB: ['5557', 'Bagnan', 1, 246, ['334', 'N']],
  CTY_BAGP19: ['3888', 'Bagpat', 1, 247, ['326', 'N']],
  CTY_BAGP_NB: ['5558', 'Bagpur', 1, 248, ['320', 'N']],
  CTY_BAGR: ['4885', 'Bagru', 1, 249, ['345', 'N']],
  CTY_BAHA13: ['3889', 'Bahadurgarh', 1, 250, ['337', 'N']],
  CTY_BAHA_NB: ['5559', 'Bahadurpur', 1, 251, ['320', 'N']],
  CTY_BAHE_NB: ['5560', 'Baheri', 1, 252, ['326', 'N']],
  CTY_BAHR20: ['3890', 'Bahraich', 1, 253, ['326', 'N']],
  CTY_BAHRAIN: ['1', 'Bahrain', 1, 254, ['1', 'N']],
  CTY_BAHU_NB: ['5561', 'Bahu Jamalpur', 1, 255, ['337', 'N']],
  CTY_BAID_NB: ['5562', 'Baidpura', 1, 256, ['326', 'N']],
  CTY_BAIJ_NB: ['5563', 'Baijnath', 1, 257, ['331', 'N']],
  CTY_BAIK_NB: ['5564', 'Baikunthpur', 1, 258, ['347', 'N']],
  CTY_BAIN5413: ['5413', 'Baina', 1, 259, ['348', 'N']],
  CTY_BAIR: ['5029', 'Bairagarh', 1, 260, ['340', 'N']],
  CTY_BAKA_NB: ['5565', 'Bakarpur', 1, 261, ['320', 'N']],
  CTY_BAKH_NB: ['5566', 'Bakhtiarpur', 1, 262, ['327', 'N']],
  CTY_BAKS_5446: ['7196', 'Baksa', 1, 263, ['328', 'N']],
  CTY_BALA162: ['5139', 'Balachaur', 1, 264, ['320', 'N']],
  CTY_BALA21: ['3891', 'Balaghat', 1, 265, ['340', 'N']],
  CTY_BLGND: ['7293', 'Balagunda (Belagula)', 1, 266, ['349', 'N']],
  CTY_BALA_NB: ['5567', 'Balana', 1, 267, ['337', 'N']],
  CTY_BALA22: ['3892', 'Balangir', 1, 268, ['333', 'N']],
  CTY_BALA23: ['4678', 'Balasinor', 1, 269, ['338', 'N']],
  CTY_BALA151: ['5117', 'Balasore', 1, 270, ['333', 'N']],
  CTY_BALE20: ['3893', 'Baleswar', 1, 271, ['333', 'N']],
  CTY_BLB: ['7433', 'Balibat', 1, 272, ['328', 'N']],
  CTY_BALL_NB: ['5568', 'Balla', 1, 273, ['337', 'N']],
  CTY_BALL_NB1: ['5569', 'Ballabhgarh', 1, 274, ['337', 'Y']],
  CTY_BLDEST: ['7969', 'Ballard Estate', 1, 275, ['322', 'Y']],
  CTY_BALL: ['5056', 'Ballarpur', 1, 276, ['322', 'N']],
  CTY_BALL_NB2: ['5570', 'Ballary', 1, 277, ['349', 'N']],
  CTY_BALL188: ['5213', 'Ballia', 1, 278, ['326', 'N']],
  CTY_BALL21: ['3894', 'Ballia', 1, 279, ['327', 'N']],
  CTY_BALM: ['7321', 'Balmatta', 1, 280, ['332', 'N']],
  CTY_BALO_NB: ['5571', 'Balod', 1, 281, ['347', 'N']],
  CTY_BALO_NB1: ['5572', 'Baloda', 1, 282, ['347', 'N']],
  CTY_BALO14: ['4651', 'Baloda Bazar', 1, 283, ['347', 'N']],
  CTY_BALO79: ['4886', 'Balotra', 1, 284, ['345', 'N']],
  CTY_BALR22: ['3895', 'Balrampur', 1, 285, ['347', 'N']],
  CTY_BALR5259: ['5259', 'Balrampur', 1, 286, ['326', 'N']],
  CTY_BALU_NB: ['5573', 'Balugaon', 1, 287, ['333', 'N']],
  CTY_BALU_NB1: ['5574', 'Balurghat', 1, 288, ['334', 'N']],
  CTY_BALUSPADU: ['7591', 'Balusupadu', 1, 289, ['332', 'N']],
  CTY_BAMA_NB: ['5575', 'Bamaila', 1, 290, ['326', 'N']],
  CTY_BAMO_NB: ['5576', 'Bamosana', 1, 291, ['338', 'N']],
  CTY_BAMR_NB: ['5577', 'Bamrauli Katara', 1, 292, ['326', 'N']],
  CTY_BAMU_NB: ['5578', 'Bamunara', 1, 293, ['334', 'N']],
  CTY_BANA_NB: ['5579', 'Banaganapalle', 1, 294, ['332', 'N']],
  CTY_BANA5336: ['5336', 'Banapura', 1, 295, ['340', 'N']],
  CTY_BANA_NB1: ['5580', 'Banas Kantha', 1, 296, ['338', 'N']],
  CTY_BANA_NB2: ['5581', 'Banasinga', 1, 297, ['333', 'N']],
  CTY_BANA23: ['3896', 'Banaskantha', 1, 298, ['338', 'N']],
  CTY_BAND24: ['3897', 'Banda', 1, 299, ['326', 'N']],
  CTY_BANDKL: ['7675', 'Bandankal', 1, 300, ['352', 'N']],
  CTY_BND: ['7408', 'Bandel', 1, 301, ['334', 'N']],
  CTY_BAND_NB: ['5582', 'Bandikui', 1, 302, ['345', 'N']],
  CTY_BAND_5440: ['7185', 'Bandipora', 1, 303, ['339', 'N']],
  CTY_BAND_NB1: ['5583', 'Bandipore', 1, 304, ['339', 'N']],
  CTY_BAND5246: ['5246', 'Bandipur', 1, 305, ['339', 'N']],
  CTY_BANDRA: ['7970', 'Bandra', 1, 306, ['322', 'Y']],
  CTY_BANG: ['5140', 'Banga', 1, 307, ['320', 'N']],
  CTY_BANG25: ['3898', 'Bangalore', 1, 308, ['349', 'N']],
  CTY_BANG_NORTH: ['7518', 'Bangalore North', 1, 309, ['349', 'N']],
  CTY_BANG26: ['3899', 'Bangalore Rural', 1, 310, ['349', 'N']],
  CTY_BANG_SOUTH: ['7523', 'Bangalore South', 1, 311, ['349', 'N']],
  CTY_BANG_NB: ['5584', 'Bangarapet', 1, 312, ['349', 'N']],
  CTY_BANG_NB1: ['5585', 'Bangarmau', 1, 313, ['326', 'N']],
  CTY_BANK27: ['3900', 'Banka', 1, 314, ['327', 'N']],
  CTY_BAKNR: ['7896', 'Bankner', 1, 315, ['321', 'Y']],
  CTY_BANK28: ['3901', 'Bankura', 1, 316, ['334', 'N']],
  CTY_BANN_NB: ['5586', 'Bannur', 1, 317, ['320', 'N']],
  CTY_BANS: ['7115', 'Bans Kheri', 1, 318, ['326', 'N']],
  CTY_BANS_NB: ['5587', 'Bans kheri', 1, 319, ['326', 'N']],
  CTY_BANH: ['8654', 'Banshihari', 1, 320, ['334', 'N']],
  CTY_BANS_NB1: ['5588', 'Bansi', 1, 321, ['326', 'N']],
  CTY_BANS1: ['7116', 'Bansur Alwar', 1, 322, ['345', 'N']],
  CTY_BANS_NB2: ['5589', 'Bansur-Alwar', 1, 323, ['345', 'N']],
  CTY_BANS_NB3: ['5590', 'Banswada', 1, 324, ['352', 'N']],
  CITY_Bans_8228: ['8414', 'Banswada', 1, 325, ['332', '']],
  CTY_BANS29: ['3902', 'Banswara', 1, 326, ['345', 'N']],
  CTY_BANT_NB: ['5591', 'Bantval', 1, 327, ['349', 'N']],
  CTY_BANT: ['4768', 'Bantwal', 1, 328, ['349', 'N']],
  CTY_BANU: ['5141', 'Banur', 1, 329, ['320', 'N']],
  CTY_BAPA: ['5159', 'Bapatla', 1, 330, ['332', 'N']],
  CTY_BAPU_NB: ['5592', 'Bapurasapuram', 1, 331, ['323', 'N']],
  CTY_BARA30: ['3903', 'Barabanki', 1, 332, ['326', 'N']],
  CTY_BARIYA: ['7613', 'Barahiya', 1, 333, ['327', 'N']],
  CTY_BARA5316: ['5316', 'Barakar', 1, 334, ['334', 'N']],
  CTY_BARA_NB: ['5593', 'Barama', 1, 335, ['328', 'N']],
  CTY_BARA138: ['5057', 'Baramati', 1, 336, ['322', 'N']],
  CTY_BARA31: ['3904', 'Baramulla', 1, 337, ['339', 'N']],
  CTY_BARA32: ['3905', 'Baran', 1, 338, ['345', 'N']],
  CTY_BARA_NB1: ['5594', 'Barana', 1, 339, ['337', 'N']],
  CTY_BARA_NB2: ['5595', 'Barara', 1, 340, ['337', 'N']],
  CTY_BARA113: ['4970', 'Barasat', 1, 341, ['334', 'N']],
  CTY_BARA_NB3: ['5596', 'Barauli', 1, 342, ['326', 'N']],
  CTY_BARA_NB4: ['5597', 'Baraut', 1, 343, ['326', 'N']],
  CTY_BARB: ['5118', 'Barbil', 1, 344, ['333', 'N']],
  CTY_BARD19: ['4663', 'Bardez', 1, 345, ['348', 'N']],
  CTY_BARD33: ['3906', 'Bardhaman', 1, 346, ['334', 'N']],
  CTY_BRDPUR: ['7674', 'Bardipur', 1, 347, ['352', 'N']],
  CTY_BARD23: ['4679', 'Bardoli', 1, 348, ['338', 'N']],
  CTY_BARE34: ['3907', 'Bareilly', 1, 349, ['326', 'N']],
  CTY_BRJA: ['8264', 'Bareja', 1, 350, ['338', '']],
  CTY_BARE_NB: ['5598', 'Barethi', 1, 351, ['340', 'N']],
  CTY_BARE_NB1: ['5599', 'Barewal Awanna', 1, 352, ['320', 'N']],
  CTY_BARF_NB: ['5600', 'Barfung', 1, 353, ['351', 'N']],
  CTY_BARG35: ['3908', 'Bargarh', 1, 354, ['333', 'N']],
  CTY_BARG_NB: ['5601', 'Bargari', 1, 355, ['320', 'N']],
  CTY_BARH_NB: ['5602', 'Barh', 1, 356, ['327', 'N']],
  CTY_BARH_NB1: ['5603', 'Barhaj', 1, 357, ['326', 'N']],
  CTY_BARH_NB2: ['5604', 'Barhalganj', 1, 358, ['326', 'N']],
  CTY_BARH_NB3: ['5605', 'Barheri Badi', 1, 359, ['337', 'N']],
  CTY_BARHI: ['7588', 'Barhi', 1, 360, ['340', 'N']],
  CTY_BARH_NB4: ['5606', 'Barhi', 1, 361, ['318', 'N']],
  CTY_BARI_NB: ['5607', 'Bari Brahmana', 1, 362, ['339', 'N']],
  CTY_BARI_NB1: ['5608', 'Barian Kalan', 1, 363, ['320', 'N']],
  CTY_BRK: ['7452', 'Barik', 1, 364, ['350', 'N']],
  CTY_BARI: ['5119', 'Baripada', 1, 365, ['333', 'N']],
  CTY_BARI_NB2: ['5609', 'Bariwala', 1, 366, ['320', 'N']],
  CTY_BARK_NB: ['5610', 'Barkatabad', 1, 367, ['337', 'N']],
  CTY_BARM36: ['3909', 'Barmer', 1, 368, ['345', 'N']],
  CTY_BARN: ['5142', 'Barnala', 1, 369, ['320', 'N']],
  CTY_BARO5339: ['5339', 'Baroda', 1, 370, ['338', 'N']],
  CTY_BARP37: ['3910', 'Barpeta', 1, 371, ['328', 'N']],
  CTY_BARR: ['4971', 'Barrackpore', 1, 372, ['334', 'N']],
  CTY_BARS: ['5058', 'Barshi', 1, 373, ['322', 'Y']],
  CTY_BARW5393: ['5393', 'Barwaha', 1, 374, ['340', 'N']],
  CTY_BARW: ['4736', 'Barwala', 1, 375, ['337', 'N']],
  CTY_BARW_NB: ['5611', 'Barwala', 1, 376, ['321', 'Y']],
  CTY_BARW38: ['3911', 'Barwani', 1, 377, ['340', 'N']],
  CTY_BASA: ['4625', 'Basar', 1, 378, ['335', 'N']],
  CTY_BASA_NB: ['5612', 'Basavakalyan', 1, 379, ['349', 'N']],
  CTY_BASVNA_BAGVDI: ['7577', 'Basavana Bagevadi', 1, 380, ['349', 'N']],
  CTY_BASK_NB: ['5613', 'Baskhari', 1, 381, ['326', 'N']],
  CTY_BASK_NB1: ['5614', 'Baskushla', 1, 382, ['337', 'N']],
  CTY_BASN_NB: ['5615', 'Basna', 1, 383, ['347', 'N']],
  CTY_BASN_NB1: ['5616', 'Basni Silawantan', 1, 384, ['345', 'N']],
  CTY_BASO_NB: ['5617', 'Basoda', 1, 385, ['340', 'N']],
  CTY_BPT: ['7355', 'Bassi Pathtana', 1, 386, ['320', 'N']],
  CTY_BAST39: ['3912', 'Bastar', 1, 387, ['347', 'N']],
  CTY_BAST40: ['3913', 'Basti', 1, 388, ['326', 'N']],
  CTY_BATA: ['5143', 'Batala', 1, 389, ['320', 'N']],
  CTY_BATH41: ['3914', 'Bathinda', 1, 390, ['320', 'N']],
  CTY_BATL_NB: ['5618', 'Batlagundu', 1, 391, ['323', 'N']],
  CTY_BAUD: ['7482', 'Baudh', 1, 392, ['333', 'N']],
  CTY_BAUD_NB: ['5619', 'Baudhgarh', 1, 393, ['333', 'N']],
  CTY_BAVL: ['4680', 'Bavla', 1, 394, ['338', 'N']],
  CTY_BAWA_NB: ['5620', 'Bawal', 1, 395, ['337', 'N']],
  CTY_BWNA: ['7897', 'Bawana', 1, 396, ['321', 'Y']],
  CTY_BAWA_NB1: ['5621', 'Bawani Khera', 1, 397, ['337', 'N']],
  CTY_BAZP_NB: ['5622', 'Bazpur', 1, 398, ['316', 'N']],
  CTY_BEAS_NB: ['5623', 'Beas', 1, 399, ['320', 'N']],
  CTY_BEAW: ['4887', 'Beawar', 1, 400, ['345', 'N']],
  CTY_BEBA_NB: ['5624', 'Bebad Ohol', 1, 401, ['322', 'N']],
  CTY_BECH_NB: ['5625', 'Becharaji', 1, 402, ['338', 'N']],
  CTY_BEDI: ['7117', 'Bedi Apmc', 1, 403, ['338', 'N']],
  CTY_BEED42: ['3915', 'Beed', 1, 404, ['322', 'N']],
  CTY_BEGO: ['5144', 'Begowal', 1, 405, ['320', 'N']],
  CTY_BEGPUR: ['7898', 'Begum Pur', 1, 406, ['321', 'Y']],
  CTY_BGMBD_BDHNA: ['8012', 'Begumabad Budhana', 1, 407, ['326', 'Y']],
  CTY_BEGU_NB: ['5627', 'Begun', 1, 408, ['345', 'N']],
  CTY_BEGU43: ['3916', 'Begusarai', 1, 409, ['327', 'N']],
  CTY_BEHA_NB: ['5628', 'Behat', 1, 410, ['326', 'N']],
  CTY_BEHR5419: ['5419', 'Behraich', 1, 411, ['326', 'N']],
  CTY_BEHR_NB: ['5629', 'Behram', 1, 412, ['320', 'N']],
  CTY_BEHR_NB1: ['7205', 'Behrampur', 1, 413, ['337', 'N']],
  CTY_BEHR152: ['5120', 'Behrampur', 1, 414, ['333', 'N']],
  CTY_BEHR81: ['4888', 'Behror', 1, 415, ['345', 'N']],
  CTY_BHTHJPR: ['8013', 'Behta Hajipur', 1, 416, ['326', 'Y']],
  CTY_BELG44: ['3917', 'Belgaum', 1, 417, ['349', 'N']],
  CITY_Bell_8229: ['8415', 'Bellampalle', 1, 418, ['332', '']],
  CTY_BELL_NB: ['5630', 'Bellampalle', 1, 419, ['352', 'N']],
  CTY_BELL45: ['3918', 'Bellary', 1, 420, ['349', 'N']],
  CTY_BELT: ['4769', 'Belthangady', 1, 421, ['349', 'N']],
  CTY_BELT_NB: ['5631', 'Belthara Road', 1, 422, ['326', 'N']],
  CTY_BELT_NB1: ['5632', 'Beltola', 1, 423, ['328', 'N']],
  CTY_BELUR: ['7517', 'Belur', 1, 424, ['349', 'N']],
  CTY_BEME_NB: ['5633', 'Bemetara', 1, 425, ['347', 'N']],
  CTY_BEN_NB: ['5634', 'Ben', 1, 426, ['327', 'N']],
  CTY_BENA_NB: ['5635', 'Benapur', 1, 427, ['334', 'N']],
  CTY_BENA_NB1: ['5636', 'Benaulim', 1, 428, ['348', 'N']],
  CTY_BENG_NB: ['5637', 'Bengaluru', 1, 429, ['349', 'N']],
  CTY_BERH: ['4972', 'Berhampore', 1, 430, ['334', 'N']],
  CTY_BRHM: ['8276', 'Berhampur', 1, 431, ['333', '']],
  CTY_BERMO: ['7586', 'Bermo', 1, 432, ['318', 'N']],
  CTY_BTSNG: ['8082', 'Betasing', 1, 433, ['350', 'N']],
  CTY_BETI_NB: ['5638', 'Betiah', 1, 434, ['327', 'N']],
  CTY_BETT5287: ['5287', 'Bettiah', 1, 435, ['327', 'N']],
  CTY_BETU46: ['3919', 'Betul', 1, 436, ['340', 'N']],
  CTY_BHAC_NB: ['5639', 'Bhachau', 1, 437, ['338', 'N']],
  CTY_BHAD_NB: ['5640', 'Bhadaur', 1, 438, ['320', 'N']],
  CTY_BHAD_NB1: ['5641', 'Bhaderwah', 1, 439, ['339', 'N']],
  CTY_BHAD_NB2: ['5642', 'Bhadkodra', 1, 440, ['338', 'N']],
  CTY_BHAD103: ['4943', 'Bhadohi', 1, 441, ['326', 'N']],
  CTY_BHA: ['7402', 'Bhadra', 1, 442, ['338', 'N']],
  CTY_BHAD165: ['5160', 'Bhadrachalam', 1, 443, ['352', 'N']],
  CITY_Bhad_8165: ['8352', 'Bhadrachalam', 1, 444, ['332', '']],
  CTY_BHAD47: ['3920', 'Bhadrak', 1, 445, ['333', 'N']],
  CTY_BHAD48: ['4770', 'Bhadravati', 1, 446, ['349', 'N']],
  CTY_BHAD_NB3: ['5643', 'Bhadrawati', 1, 447, ['322', 'N']],
  CTY_BHAD_NB4: ['5644', 'Bhadson', 1, 448, ['320', 'N']],
  CTY_BHAG48: ['3921', 'Bhagalpur', 1, 449, ['327', 'N']],
  CTY_BHAG_NB: ['5645', 'Bhagan', 1, 450, ['337', 'N']],
  CTY_BHAG_NB1: ['5646', 'Bhago Majra', 1, 451, ['320', 'N']],
  CTY_BHAG_NB2: ['5647', 'Bhagoke', 1, 452, ['320', 'N']],
  CTY_BHAG_NB3: ['5648', 'Bhagrana', 1, 453, ['320', 'N']],
  CTY_BHAG_NB4: ['5649', 'Bhagta', 1, 454, ['320', 'N']],
  CTY_BHAI5432: ['5432', 'Bhainsa', 1, 455, ['352', 'N']],
  CITY_Bhai_8179: ['8365', 'Bhainsa', 1, 456, ['332', '']],
  CTY_BHGMDA: ['8076', 'Bhalgamda', 1, 457, ['338', 'N']],
  CTY_BHAL_NB: ['5650', 'Bhaliabholkateni', 1, 458, ['333', 'N']],
  CTY_BHAL_NB1: ['5651', 'Bhalki', 1, 459, ['349', 'N']],
  CTY_BLW_JHGR_PUR: ['7899', 'Bhalswa Jahangir Pur', 1, 460, ['321', 'Y']],
  CTY_BHAM_NB: ['5652', 'Bhamarsi', 1, 461, ['320', 'N']],
  CTY_BHAM_NB1: ['5653', 'Bhamboli', 1, 462, ['322', 'N']],
  CTY_BHAN49: ['3922', 'Bhandara', 1, 463, ['322', 'N']],
  CTY_BHNDUP: ['7971', 'Bhandup', 1, 464, ['322', 'Y']],
  CTY_BHAN_NB: ['5654', 'Bhangala', 1, 465, ['320', 'N']],
  CTY_BHAN_NB1: ['5655', 'Bhanjanagar', 1, 466, ['333', 'N']],
  CTY_BHAN_NB2: ['5656', 'Bhanpuri', 1, 467, ['347', 'N']],
  CTY_BHAN_5448: ['7199', 'Bhanvad', 1, 468, ['338', 'N']],
  CTY_BHAN_NB3: ['5657', 'Bhanvad', 1, 469, ['338', 'N']],
  CTY_BHAR50: ['3923', 'Bharatpur', 1, 470, ['345', 'N']],
  CTY_BHAR_NB: ['5658', 'Bharmour', 1, 471, ['331', 'N']],
  CTY_BHAR_NB1: ['5659', 'Bharni', 1, 472, ['347', 'N']],
  CTY_BHAR_NB2: ['5660', 'Bharthana', 1, 473, ['326', 'N']],
  CTY_BHAR51: ['3924', 'Bharuch', 1, 474, ['338', 'N']],
  CTY_BHAT15: ['4652', 'Bhatapara', 1, 475, ['347', 'N']],
  CTY_BHTI: ['7900', 'Bhati', 1, 476, ['321', 'Y']],
  CTY_BHAT163: ['5145', 'Bhatinda', 1, 477, ['320', 'N']],
  CTY_BHAT48: ['4771', 'Bhatkal', 1, 478, ['349', 'N']],
  CTY_BHAT114: ['4973', 'Bhatpara', 1, 479, ['334', 'N']],
  CTY_BHAT_NB: ['5661', 'Bhatramarenahalli', 1, 480, ['349', 'N']],
  CTY_BHAT_NB1: ['5662', 'Bhattian', 1, 481, ['320', 'N']],
  CTY_BHAT_NB2: ['5663', 'Bhattu Kalan', 1, 482, ['337', 'N']],
  CTY_BHAV5399: ['5399', 'Bhavanagar', 1, 483, ['338', 'N']],
  CTY_BHAV52: ['3925', 'Bhavnagar', 1, 484, ['338', 'N']],
  CTY_BHAW: ['5146', 'Bhawanigarh', 1, 485, ['320', 'N']],
  CTY_BHAW5400: ['5400', 'Bhawanipatna', 1, 486, ['333', 'N']],
  CTY_BHAY: ['5059', 'Bhayander', 1, 487, ['322', 'Y']],
  CTY_BHEDGHT: ['7589', 'Bhedaghat', 1, 488, ['340', 'N']],
  CTY_BHIK_NB: ['5664', 'Bhikhi', 1, 489, ['320', 'N']],
  CTY_BHIK: ['5147', 'Bhikhiwind', 1, 490, ['320', 'N']],
  CTY_BHIL: ['4653', 'Bhilai', 1, 491, ['347', 'N']],
  CTY_BHIL_NB: ['5665', 'Bhilai Charoda', 1, 492, ['347', 'N']],
  CTY_BLD: ['7398', 'Bhiloda', 1, 493, ['338', 'N']],
  CTY_BHIL53: ['3926', 'Bhilwara', 1, 494, ['345', 'N']],
  CTY_BHIM: ['5161', 'Bhimavaram', 1, 495, ['332', 'N']],
  CTY_BHIN54: ['3927', 'Bhind', 1, 496, ['340', 'N']],
  CTY_BHIN_NB: ['5666', 'Bhinga', 1, 497, ['326', 'N']],
  CTY_BHIN_NB1: ['5667', 'Bhinmal', 1, 498, ['345', 'N']],
  CTY_BHIW: ['4889', 'Bhiwadi', 1, 499, ['345', 'N']],
  CTY_BWD: ['7383', 'Bhiwandi', 1, 500, ['322', 'Y']],
  CTY_BHIW55: ['3928', 'Bhiwani', 1, 501, ['337', 'N']],
  CTY_BHOD_NB: ['5668', 'Bhodipura', 1, 502, ['320', 'N']],
  CTY_BHOG_NB: ['5669', 'Bhoga Samudram', 1, 503, ['332', 'N']],
  CTY_BHOG: ['5148', 'Bhogpur', 1, 504, ['320', 'N']],
  CTY_BHOJ56: ['3929', 'Bhojpur', 1, 505, ['327', 'N']],
  CTY_BHOK_NB: ['5670', 'Bhokhra', 1, 506, ['320', 'N']],
  CTY_BHOL: ['5149', 'Bholath', 1, 507, ['320', 'N']],
  CTY_BHON: ['5162', 'Bhongir', 1, 508, ['352', 'N']],
  CITY_Bhon_8155: ['8342', 'Bhongir', 1, 509, ['332', '']],
  CTY_BHOP57: ['3930', 'Bhopal', 1, 510, ['340', 'N']],
  CTY_BHOP_NB: ['5671', 'Bhopani', 1, 511, ['337', 'Y']],
  CTY_BHOR_NB: ['5672', 'Bhoring', 1, 512, ['347', 'N']],
  CTY_BHS: ['7459', 'Bhosari', 1, 513, ['322', 'N']],
  CTY_BWP: ['7438', 'Bhowanipore', 1, 514, ['334', 'N']],
  CTY_BHUB: ['5121', 'Bhubaneshwar', 1, 515, ['333', 'N']],
  CTY_BHUBA: ['7118', 'Bhubaneswar', 1, 516, ['333', 'N']],
  CTY_BHUC_NB: ['5673', 'Bhucho Mandi', 1, 517, ['320', 'N']],
  CTY_BHUJ: ['4681', 'Bhuj', 1, 518, ['338', 'N']],
  CTY_BHUJ_NB: ['5674', 'Bhujodi', 1, 519, ['338', 'N']],
  CTY_BHUL_NB: ['5675', 'Bhulath', 1, 520, ['320', 'N']],
  CTY_BHUN_NB: ['5676', 'Bhundri', 1, 521, ['320', 'N']],
  CTY_BHUN_NB1: ['5677', 'Bhuntar', 1, 522, ['331', 'N']],
  CTY_BHUS: ['5060', 'Bhusawal', 1, 523, ['322', 'N']],
  CTY_BIAO: ['5030', 'Biaora', 1, 524, ['340', 'N']],
  CTY_BICH: ['4664', 'Bicholim', 1, 525, ['348', 'N']],
  CTY_BID_NB: ['5679', 'Bid', 1, 526, ['322', 'N']],
  CTY_BIDA: ['4772', 'Bidadi', 1, 527, ['349', 'N']],
  CTY_BIDA58: ['3931', 'Bidar', 1, 528, ['349', 'N']],
  CTY_BIDA5352: ['5352', 'Bidar', 1, 529, ['323', 'N']],
  CTY_BIDH_NB: ['5680', 'Bidhan Nagar', 1, 530, ['334', 'N']],
  CTY_BIDH_NB1: ['5681', 'Bidhuna', 1, 531, ['326', 'N']],
  CTY_BIHA5353: ['5353', 'Bihar', 1, 532, ['327', 'N']],
  CTY_BHRS: ['8277', 'Bihar Sharif', 1, 533, ['327', '']],
  CTY_BIHA_SHRF: ['7612', 'Bihar Sharif', 1, 534, ['327', 'N']],
  CTY_BHSR: ['7462', 'Biharsharif', 1, 535, ['327', 'N']],
  CTY_BIHA_NB: ['5682', 'Bihat Biram', 1, 536, ['326', 'N']],
  CTY_BIJA_NB: ['5683', 'Bija', 1, 537, ['320', 'N']],
  CTY_BIJA: ['4890', 'Bijainagar', 1, 538, ['345', 'N']],
  CTY_BIJA182: ['5204', 'Bijapur', 1, 539, ['349', 'N']],
  CTY_BIJA59: ['3932', 'Bijapur', 1, 540, ['347', 'N']],
  CTY_BIJA5245: ['5245', 'Bijapur(Cgh)', 1, 541, ['347', 'N']],
  CTY_BIJA5252: ['5252', 'Bijapur(Kar)', 1, 542, ['349', 'N']],
  CTY_BIJB_NB: ['5684', 'Bijbehara', 1, 543, ['339', 'N']],
  CTY_BIJJ_NB: ['5685', 'Bijjawara', 1, 544, ['349', 'N']],
  CTY_BJNR: ['8278', 'Bijnaur', 1, 545, ['326', '']],
  CTY_BIJN60: ['3933', 'Bijnor', 1, 546, ['326', 'N']],
  CTY_BIJO_NB: ['5686', 'Bijoynagar', 1, 547, ['328', 'N']],
  CTY_BIKA61: ['3934', 'Bikaner', 1, 548, ['345', 'N']],
  CTY_BIKR_NB: ['5687', 'Bikramganj', 1, 549, ['327', 'N']],
  CTY_BILA5415: ['5415', 'Bilara', 1, 550, ['345', 'N']],
  CTY_BILA_NB: ['5688', 'Bilari', 1, 551, ['326', 'N']],
  CTY_BILA5374: ['5374', 'Bilaspur', 1, 552, ['331', 'N']],
  CTY_BILA_NB2: ['7207', 'Bilaspur', 1, 553, ['337', 'N']],
  CTY_BILA62: ['3935', 'Bilaspur', 1, 554, ['347', 'N']],
  CTY_BILA_NB1: ['7206', 'Bilaspur', 1, 555, ['331', 'N']],
  CTY_BILA63: ['3936', 'Bilaspur (Hp)', 1, 556, ['331', 'N']],
  CTY_BILA5281: ['5281', 'Bilaspur(Cgh)', 1, 557, ['347', 'N']],
  CTY_BILG_NB: ['5689', 'Bilga', 1, 558, ['320', 'N']],
  CTY_BILG_NB1: ['5690', 'Bilgi', 1, 559, ['349', 'N']],
  CTY_BILH_NB: ['5691', 'Bilha', 1, 560, ['347', 'N']],
  CTY_BILI: ['4682', 'Bilimora', 1, 561, ['338', 'N']],
  CTY_BWR: ['7366', 'Billawar', 1, 562, ['339', 'N']],
  CTY_BILL_NB: ['5692', 'Billimora', 1, 563, ['338', 'N']],
  CTY_BINA: ['5031', 'Bina', 1, 564, ['340', 'N']],
  CTY_BIND_5435: ['7183', 'Bindki', 1, 565, ['326', 'N']],
  CTY_BIND_NB: ['5693', 'Bindki', 1, 566, ['326', 'N']],
  CTY_BINO_NB: ['5694', 'Binola', 1, 567, ['337', 'Y']],
  CTY_BINO_5436: ['7184', 'Binovanagar', 1, 568, ['328', 'N']],
  CTY_BIRA_NB: ['5695', 'Biramitrapur', 1, 569, ['333', 'N']],
  CTY_BIRB64: ['3937', 'Birbhum', 1, 570, ['334', 'N']],
  CTY_BIRK_NB: ['5696', 'Birkona', 1, 571, ['347', 'N']],
  CTY_BIRM5366: ['5366', 'Birmitrapur', 1, 572, ['333', 'N']],
  CTY_BISA_NB: ['5697', 'Bisalpur', 1, 573, ['326', 'N']],
  CTY_BISUL: ['7603', 'Bisauli', 1, 574, ['326', 'N']],
  CTY_BSG: ['7414', 'Bishalgarh', 1, 575, ['330', 'N']],
  CTY_BISH_NB: ['5698', 'Bishna', 1, 576, ['339', 'N']],
  CTY_BSPR: ['8456', 'Bishnupur', 1, 577, ['327', '']],
  CTY_BISH65: ['3938', 'Bishnupur', 1, 578, ['330', 'N']],
  CTY_BISH5264: ['5264', 'Bishnupur', 1, 579, ['329', 'N']],
  CTY_BSKHR: ['8014', 'Bisokhar', 1, 580, ['326', 'Y']],
  CTY_BIST_NB: ['5699', 'Bistauli Khurd', 1, 581, ['326', 'N']],
  CTY_BISW_NB: ['5700', 'Biswanath Chariali', 1, 582, ['328', 'N']],
  CTY_BOB: ['7324', 'Bobbili', 1, 583, ['332', 'N']],
  CTY_BODA_NB: ['5701', 'Bodakdev', 1, 584, ['338', 'N']],
  CTY_BODE: ['4683', 'Bodeli', 1, 585, ['338', 'N']],
  CITY_Bodh_8232: ['8418', 'Bodhan', 1, 586, ['332', '']],
  CTY_BODH_NB: ['5702', 'Bodhan', 1, 587, ['352', 'N']],
  CTY_BODH_NB1: ['5703', 'Bodhgaya', 1, 588, ['327', 'N']],
  CTY_BODI_NB: ['5704', 'Bodinayakkannur', 1, 589, ['323', 'N']],
  CTY_BOHA_NB: ['5705', 'Boha', 1, 590, ['320', 'N']],
  CTY_BOIS: ['5061', 'Boisar', 1, 591, ['322', 'Y']],
  CTY_BOISAR: ['7119', 'Boisar II Chitralaya', 1, 592, ['322', 'N']],
  CTY_BOIS_NB: ['5706', 'Boisar II, Chitralaya', 1, 593, ['322', 'N']],
  CTY_BOKKHT: ['8083', 'Bokakhat', 1, 594, ['328', 'N']],
  CTY_BOKA66: ['3939', 'Bokaro', 1, 595, ['318', 'N']],
  CTY_BOL_NB: ['5707', 'Bol', 1, 596, ['338', 'N']],
  CTY_BOLA_NB: ['5708', 'Bolagarh', 1, 597, ['333', 'N']],
  CTY_BOLA5416: ['5416', 'Bolangir', 1, 598, ['333', 'N']],
  CTY_BOLP: ['4974', 'Bolpur', 1, 599, ['334', 'N']],
  CTY_BOMD: ['4626', 'Bomdila', 1, 600, ['335', 'N']],
  CITY_Bomm_8233: ['8419', 'Bommakal', 1, 601, ['332', '']],
  CTY_BOMM_NB: ['5709', 'Bommakal', 1, 602, ['352', 'N']],
  CTY_BONG67: ['3940', 'Bongaigaon', 1, 603, ['328', 'N']],
  CTY_BOPA_NB: ['5710', 'Bopal', 1, 604, ['338', 'N']],
  CTY_BORB_NB: ['5711', 'Borbhatha Bet', 1, 605, ['338', 'N']],
  CTY_BOAVI: ['7491', 'Boriavi', 1, 606, ['338', 'N']],
  CTY_BORV: ['7447', 'Borivali (W)', 1, 607, ['322', 'N']],
  CTY_BORO_NB: ['5712', 'Boronilpur', 1, 608, ['334', 'N']],
  CTY_BORS_NB: ['5713', 'Borsad', 1, 609, ['338', 'N']],
  CTY_BOTA: ['4684', 'Botad', 1, 610, ['338', 'N']],
  CTY_BOUD68: ['3941', 'Boudh', 1, 611, ['333', 'N']],
  CTY_BOYT_NB: ['5714', 'Boytawala', 1, 612, ['345', 'N']],
  CTY_BRAH_NB: ['5715', 'Brahmapore', 1, 613, ['333', 'N']],
  CTY_BRAH_NB1: ['5716', 'Brahmapur', 1, 614, ['333', 'N']],
  CTY_BRJN: ['8458', 'Brajraj nagar', 1, 615, ['333', '']],
  CTY_BRAM_NB: ['5717', 'Bramhapuri', 1, 616, ['322', 'N']],
  CTY_BUDA69: ['3942', 'Budaun', 1, 617, ['326', 'N']],
  CTY_BUDG70: ['3943', 'Budgam', 1, 618, ['339', 'N']],
  CTY_BUDG_NB: ['5718', 'Budge Budge', 1, 619, ['334', 'N']],
  CTY_BUDH_NB: ['5719', 'Budhalda', 1, 620, ['320', 'N']],
  CTY_BUDH_NB1: ['5720', 'Budhana', 1, 621, ['322', 'N']],
  CTY_BUDH_NB2: ['5721', 'Budhera', 1, 622, ['337', 'N']],
  CTY_BUDH: ['5150', 'Budhlada', 1, 623, ['320', 'N']],
  CTY_BDW: ['7379', 'Budhwaria', 1, 624, ['340', 'N']],
  CTY_BULA5301: ['5301', 'Bulandshahar', 1, 625, ['326', 'N']],
  CTY_BULA71: ['3944', 'Bulandshahr', 1, 626, ['326', 'Y']],
  CTY_BULA5283: ['5283', 'Bulandshare', 1, 627, ['326', 'N']],
  CTY_BULD: ['5062', 'Buldana', 1, 628, ['322', 'N']],
  CTY_BULD72: ['3945', 'Buldhana', 1, 629, ['322', 'N']],
  CTY_BULH_NB: ['5722', 'Bulhowal', 1, 630, ['320', 'N']],
  CTY_BUND73: ['3946', 'Bundi', 1, 631, ['345', 'N']],
  CTY_BRRI: ['7901', 'Burari', 1, 632, ['321', 'Y']],
  CTY_BURD: ['4975', 'Burdwan', 1, 633, ['334', 'N']],
  CTY_BURH74: ['3947', 'Burhanpur', 1, 634, ['340', 'N']],
  CTY_BURH: ['5032', 'Burhar', 1, 635, ['340', 'N']],
  CTY_BURL_NB: ['5723', 'Burla', 1, 636, ['333', 'N']],
  CTY_BURN_NB: ['5724', 'Burnihat', 1, 637, ['350', 'N']],
  CTY_BURN5396: ['5396', 'Burnpur', 1, 638, ['334', 'N']],
  CTY_BUTA_NB: ['5725', 'Butala', 1, 639, ['320', 'N']],
  CTY_BUTI_NB: ['5726', 'Butibori', 1, 640, ['322', 'N']],
  CTY_BUXA75: ['3948', 'Buxar', 1, 641, ['327', 'N']],
  CTY_BYADGI: ['7554', 'Byadgi', 1, 642, ['349', 'N']],
  CTY_BYRN_5445: ['7190', 'Byrnihat', 1, 643, ['350', 'N']],
  CTY_BYRN_5444: ['7189', 'Byrnihat', 1, 644, ['328', 'N']],
  CTY_CBDLPR: ['7972', 'CBD Belapur', 1, 645, ['322', 'Y']],
  CTY_CHAKN: ['7432', 'CHAKAN', 1, 646, ['322', 'N']],
  CTY_CHNGRI: ['8086', 'CHANNAGIRI', 1, 647, ['349', 'N']],
  CTY_CHHANI: ['8034', 'CHHANI', 1, 648, ['338', 'N']],
  CTY_CHHI_NB: ['5778', 'CHHIBRAMAU', 1, 649, ['326', 'N']],
  CTY_CHHO_NB: ['5779', 'CHHOTA UDAIPUR', 1, 650, ['338', 'N']],
  CTY_CACH76: ['3949', 'Cachar', 1, 651, ['328', 'N']],
  CTY_CALA_NB: ['5727', 'Calangute', 1, 652, ['348', 'N']],
  CTY_CALI: ['7422', 'Calicut', 1, 653, ['341', 'N']],
  CTY_CANA_NB: ['5728', 'Canacona', 1, 654, ['348', 'N']],
  CTY_CNDLM: ['8091', 'Candolim', 1, 655, ['348', 'N']],
  CTY_CANN: ['4808', 'Cannanore', 1, 656, ['341', 'N']],
  CTY_CANS_NB: ['5729', 'Cansaulim', 1, 657, ['348', 'N']],
  CTY_CARA_NB: ['5730', 'Carambolim', 1, 658, ['348', 'N']],
  CTY_CTRPUR: ['7960', 'Carterpuri', 1, 659, ['337', 'N']],
  CTY_CAVE_NB: ['5731', 'Cavelosim', 1, 660, ['348', 'N']],
  CTY_CENT77: ['3950', 'Central Delhi', 1, 661, ['321', '1']],
  CTY_CHAB_NB: ['5732', 'Chabal Kalan', 1, 662, ['320', 'N']],
  CTY_CHAB_NB1: ['5733', 'Chabewal', 1, 663, ['320', 'N']],
  CTY_CHAD_NB: ['5734', 'Chadura', 1, 664, ['339', 'N']],
  CTY_CHAI_NB: ['5735', 'Chaibasa', 1, 665, ['318', 'N']],
  CTY_CHNP: ['8613', 'Chainpur', 1, 666, ['327', 'N']],
  CTY_CHAK_NB: ['5736', 'Chak Kalan', 1, 667, ['320', 'N']],
  CTY_CHAK_NB1: ['5737', 'Chak Pakhi', 1, 668, ['320', 'N']],
  CTY_CHAK_NB2: ['5738', 'Chakarbhatha', 1, 669, ['347', 'N']],
  CTY_CHKDHA: ['7667', 'Chakdaha', 1, 670, ['334', 'N']],
  CTY_CHAK_NB3: ['5739', 'Chakdana', 1, 671, ['320', 'N']],
  CTY_CHAK_NB4: ['5740', 'Chakradharpur', 1, 672, ['318', 'N']],
  CTY_CHAK: ['4891', 'Chaksu', 1, 673, ['345', 'N']],
  CTY_CHAL58: ['4809', 'Chalakudy', 1, 674, ['341', 'N']],
  CTY_CHLA: ['7492', 'Chalala', 1, 675, ['338', 'N']],
  CTY_CHAL59: ['4810', 'Chalikkavattom', 1, 676, ['341', 'N']],
  CTY_CHAL139: ['5063', 'Chalisgaon', 1, 677, ['322', 'N']],
  CTY_CHAL49: ['4773', 'Challakere', 1, 678, ['349', 'N']],
  CTY_CHAM_NB: ['5741', 'Chamarajanagar', 1, 679, ['349', 'N']],
  CTY_CHAM78: ['3951', 'Chamba', 1, 680, ['331', 'N']],
  CTY_CHAM_NB1: ['5742', 'Chamkaur Sahib', 1, 681, ['320', 'N']],
  CTY_CHAM11: ['3952', 'Chamoli', 1, 682, ['316', 'N']],
  CTY_CHAM: ['4654', 'Champa', 1, 683, ['347', 'N']],
  CTY_CHAM5314: ['5314', 'Champadanga', 1, 684, ['334', 'N']],
  CTY_CHAM12: ['3953', 'Champawat', 1, 685, ['316', 'N']],
  CTY_CHAM5257: ['5257', 'Champhai', 1, 686, ['343', 'N']],
  CTY_CHAM_NB2: ['5743', 'Champrajpur', 1, 687, ['338', 'N']],
  CTY_CHAM13: ['3954', 'Chamrajnagar', 1, 688, ['349', 'N']],
  CTY_CHAM_NB3: ['5744', 'Chamyari', 1, 689, ['320', 'N']],
  CITY_Chan_8234: ['8420', 'Chandanagar', 1, 690, ['332', '']],
  CTY_CHAN_NB: ['5745', 'Chandanagar', 1, 691, ['352', 'N']],
  CTY_CHAN_NB1: ['5746', 'Chandannagar', 1, 692, ['334', 'N']],
  CTY_CHAN14: ['3955', 'Chandauli', 1, 693, ['326', 'N']],
  CTY_CHAN5312: ['5312', 'Chandausi', 1, 694, ['326', 'N']],
  CTY_CHAN15: ['3956', 'Chandel', 1, 695, ['329', 'N']],
  CTY_CHAN_NB2: ['5747', 'Chander Nagar', 1, 696, ['326', 'N']],
  CTY_CHAN_NB3: ['5748', 'Chandgad', 1, 697, ['322', 'N']],
  CTY_CHAN5417: ['5417', 'Chandigarh', 1, 698, ['320', 'N']],
  CTY_CHAN16: ['3957', 'Chandigarh', 1, 699, ['344', 'N']],
  CTY_CHAN5394: ['5394', 'Chandigarh', 1, 700, ['337', 'N']],
  CTY_CHAN_NB4: ['5749', 'Chandikhol', 1, 701, ['333', 'N']],
  CTY_CHAN_NB5: ['5750', 'Chandimandir', 1, 702, ['337', 'N']],
  CTY_CHAN_NB6: ['5751', 'Chandor', 1, 703, ['348', 'N']],
  CTY_CHAN_NB7: ['5752', 'Chandpur', 1, 704, ['326', 'N']],
  CTY_CHAN_NB8: ['5753', 'Chandranagar', 1, 705, ['341', 'N']],
  CTY_CHAN17: ['3958', 'Chandrapur', 1, 706, ['347', 'N']],
  CTY_CHAN185: ['5205', 'Chandrapur', 1, 707, ['322', 'N']],
  CTY_CHDR: ['7444', 'Chandrasekharpur', 1, 708, ['333', 'N']],
  CTY_CHAN_NB9: ['5754', 'Chandvad', 1, 709, ['322', 'N']],
  CTY_CHAN: ['4811', 'Changanacherry', 1, 710, ['341', 'N']],
  CTY_CGSR: ['8279', 'Changanassery', 1, 711, ['341', '']],
  CTY_CHAN18: ['3959', 'Changlang', 1, 712, ['335', 'N']],
  CTY_CHAN_NB10: ['5755', 'Changodar', 1, 713, ['338', 'N']],
  CTY_CHANGIRI: ['7548', 'Channagiri', 1, 714, ['349', 'N']],
  CTY_CNPT: ['7419', 'Channapatna', 1, 715, ['349', 'N']],
  CTY_CHANRAYPTNA: ['7520', 'Channarayapatna', 1, 716, ['349', 'N']],
  CTY_CHAP_NB: ['5756', 'Chapad', 1, 717, ['338', 'N']],
  CTY_CHAP: ['4647', 'Chapra', 1, 718, ['327', 'N']],
  CTY_CHAR5319: ['5319', 'Charkhi Dadri', 1, 719, ['337', 'N']],
  CTY_CHAR5345: ['5345', 'Charkhi Dadri', 1, 720, ['320', 'N']],
  CTY_CHAT_NB: ['5757', 'Chatarsal', 1, 721, ['349', 'N']],
  CTY_CHAT19: ['3960', 'Chatra', 1, 722, ['318', 'N']],
  CTY_CHAT_NB1: ['5758', 'Chattarpur', 1, 723, ['340', 'N']],
  CTY_CHAU_NB: ['5759', 'Chaupal', 1, 724, ['331', 'N']],
  CTY_CHAV_NB: ['5760', 'Chavakkad', 1, 725, ['341', 'N']],
  CTY_CHAW_NB: ['5761', 'Chawinda Devi', 1, 726, ['320', 'N']],
  CTY_CHEE_NB: ['5762', 'Cheeka', 1, 727, ['337', 'N']],
  CTY_CHEE_NB1: ['5763', 'Cheema', 1, 728, ['320', 'N']],
  CTY_CHMBR: ['7973', 'Chembur', 1, 729, ['322', 'Y']],
  CTY_CHEM_NB: ['5764', 'Chemmad', 1, 730, ['341', 'N']],
  CTY_CHEN_NB: ['5765', 'Chendrappinni', 1, 731, ['341', 'N']],
  CTY_CHEN87: ['4917', 'Chengalpattu', 1, 732, ['323', 'N']],
  CTY_CHNGM: ['8088', 'Chengam', 1, 733, ['323', 'N']],
  CTY_CHEN60: ['4812', 'Chengannur', 1, 734, ['341', 'N']],
  CTY_CHEN20: ['3961', 'Chennai', 1, 735, ['323', 'N']],
  CTY_CHANSMUDRM: ['7653', 'Chennasamudram', 1, 736, ['323', 'N']],
  CTY_CHEP_NB: ['5766', 'Cheppad', 1, 737, ['341', 'N']],
  CTY_CHER_NB: ['5767', 'Cherai', 1, 738, ['341', 'N']],
  CTY_CHER_NB1: ['5768', 'Cherpalachery', 1, 739, ['341', 'N']],
  CTY_CHER_NB2: ['5769', 'Cherthala', 1, 740, ['341', 'N']],
  CTY_CHER_NB3: ['5770', 'Cherukunnu', 1, 741, ['341', 'N']],
  CTY_CHET_NB: ['5771', 'Chettikulangara', 1, 742, ['341', 'N']],
  CTY_CHHA_NB: ['5772', 'Chhabra', 1, 743, ['345', 'N']],
  CTY_CHHA_NB1: ['5773', 'Chhachharauli', 1, 744, ['337', 'N']],
  CTY_CHHA_NB2: ['5774', 'Chhat', 1, 745, ['320', 'N']],
  CTY_CHHA21: ['3962', 'Chhatarpur', 1, 746, ['340', 'N']],
  CTY_CHHA_NB3: ['5775', 'Chhatral', 1, 747, ['338', 'N']],
  CTY_CHHA_NB4: ['5776', 'Chhatrapur', 1, 748, ['333', 'N']],
  CTY_CHHWL: ['7902', 'Chhawla', 1, 749, ['321', 'Y']],
  CTY_CHHE_NB: ['5777', 'Chhendipada', 1, 750, ['333', 'N']],
  CTY_CHHI: ['7120', 'Chhibramau', 1, 751, ['326', 'N']],
  CTY_CHHI22: ['3963', 'Chhindwara', 1, 752, ['340', 'N']],
  CTY_CHHO: ['7121', 'Chhota Udaipur', 1, 753, ['338', 'N']],
  CTY_CHHU_NB: ['5780', 'Chhutmalpur', 1, 754, ['326', 'N']],
  CTY_CHIC23: ['3964', 'Chickmagalur', 1, 755, ['349', 'N']],
  CTY_CHID89: ['4918', 'Chidambaram', 1, 756, ['323', 'N']],
  CTY_CHIK20: ['4665', 'Chikalim', 1, 757, ['348', 'N']],
  CTY_CHIK_NB: ['5781', 'Chikballapura', 1, 758, ['349', 'N']],
  CTY_CHIK_NB3: ['7211', 'Chikhil', 1, 759, ['322', 'N']],
  CTY_CHIK_NB2: ['7210', 'Chikhil', 1, 760, ['347', 'N']],
  CTY_CHIK24: ['4685', 'Chikhli', 1, 761, ['338', 'N']],
  CTY_CHIK5364: ['5364', 'Chikhli', 1, 762, ['322', 'N']],
  CTY_CHIK5247: ['5247', 'Chikkaballapur', 1, 763, ['349', 'N']],
  CTY_CHIK_NB1: ['5782', 'Chikmagalur', 1, 764, ['349', 'N']],
  CTY_CHIK50: ['4775', 'Chikodi', 1, 765, ['349', 'N']],
  CTY_CHIL: ['5163', 'Chilakaluripet', 1, 766, ['332', 'N']],
  CTY_CHSRDBGR: ['7903', 'Chilla Saroda Bangar', 1, 767, ['321', 'Y']],
  CITY_Chim_8240: ['8426', 'Chimrajpalle', 1, 768, ['332', '']],
  CTY_CHIM_NB: ['5783', 'Chimrajpalle', 1, 769, ['352', 'N']],
  CTY_CHIN_NB: ['5784', 'Chinchavali', 1, 770, ['322', 'N']],
  CTY_CHIN_NB1: ['5785', 'Chinchinim', 1, 771, ['348', 'N']],
  CTY_CHWD: ['7425', 'Chinchwad', 1, 772, ['322', 'N']],
  CTY_CHI_MUR: ['7635', 'Chinnamanur', 1, 773, ['323', 'N']],
  CTY_CHIN_NB2: ['5786', 'Chinnamiram', 1, 774, ['332', 'N']],
  CTY_CHINSRH: ['7663', 'Chinsurah', 1, 775, ['334', 'N']],
  CTY_CISH: ['8280', 'Chinsurah', 1, 776, ['334', '']],
  CTY_CHIN: ['4976', 'Chinsurah R S', 1, 777, ['334', 'N']],
  CTY_CHINT: ['7316', 'Chintamani', 1, 778, ['349', 'N']],
  CTY_CHIP_NB: ['5787', 'Chipari', 1, 779, ['322', 'N']],
  CTY_CHIP: ['5064', 'Chiplun', 1, 780, ['322', 'N']],
  CTY_CHIR: ['5164', 'Chirala', 1, 781, ['332', 'N']],
  CTY_Chi_8867: ['8493', 'Chirang', 1, 782, ['328', '']],
  CTY_CHIR_NB: ['5788', 'Chirawa', 1, 783, ['345', 'N']],
  CTY_CHIR_NB1: ['5789', 'Chirgaon', 1, 784, ['326', 'N']],
  CTY_CHITPR: ['7562', 'Chitapur', 1, 785, ['349', 'N']],
  CTY_CHIT: ['7122', 'Chithara', 1, 786, ['326', 'N']],
  CTY_CHIT_NB: [
    '5790',
    'Chithara -Shiv Nadar University',
    1,
    787,
    ['326', 'N'],
  ],
  CTY_CHIT24: ['3965', 'Chitradurga', 1, 788, ['349', 'N']],
  CTY_CHIT25: ['3966', 'Chitrakoot', 1, 789, ['326', 'N']],
  'CTY_CHRNJ ': ['8473', 'Chittaranjon', 1, 790, ['334', '']],
  CTY_CHIT26: ['3967', 'Chittoor', 1, 791, ['332', 'N']],
  CTY_CHIT27: ['3968', 'Chittorgarh', 1, 792, ['345', 'N']],
  CTY_CHOC_NB: ['5791', 'Chochra', 1, 793, ['337', 'N']],
  CTY_CHOG_NB: ['5792', 'Chogawan', 1, 794, ['320', 'N']],
  CTY_CHOL_NB: ['5793', 'Chola Sahib', 1, 795, ['320', 'N']],
  CTY_CHOM: ['4892', 'Chomu', 1, 796, ['345', 'N']],
  CTY_CHOP_NB: ['5794', 'Chopda', 1, 797, ['322', 'N']],
  CITY_Chou_8241: ['8427', 'Choutuppal', 1, 798, ['332', '']],
  CTY_CHOU_NB: ['5795', 'Choutuppal', 1, 799, ['352', 'N']],
  CTY_CHRA_NB: ['5796', 'Chrari Sharief', 1, 800, ['339', 'N']],
  CTY_CHUKITNG: ['7582', 'Chukitong', 1, 801, ['342', 'N']],
  CTY_CHUN_NB: ['5797', 'Chunar', 1, 802, ['326', 'N']],
  CTY_CHUN_NB1: ['5798', 'Chunati Gada', 1, 803, ['326', 'N']],
  CTY_CHUN_NB2: ['5799', 'Chunni Kalan', 1, 804, ['320', 'N']],
  CTY_CHUR28: ['3969', 'Churachandpur', 1, 805, ['329', 'N']],
  CTY_CHUR_NB: ['5800', 'Chureb', 1, 806, ['326', 'N']],
  CTY_CHUR29: ['3970', 'Churu', 1, 807, ['345', 'N']],
  CTY_CHWA_NB: ['5801', 'Chwadi', 1, 808, ['339', 'N']],
  CTY_COCH_NB: ['5802', 'Cochin', 1, 809, ['341', 'N']],
  CTY_COCH_NB1: ['5803', 'Cochin', 1, 810, ['341', 'N']],
  CTY_COIM30: ['3971', 'Coimbatore', 1, 811, ['323', 'N']],
  CTY_CLBA: ['8254', 'Colaba', 1, 812, ['322', 'Y']],
  CTY_CLH: ['7431', 'Colachel', 1, 813, ['323', 'N']],
  CTY_COLO_NB: ['5804', 'Colonelganj', 1, 814, ['326', 'N']],
  CTY_COLV_NB: ['5805', 'Colva', 1, 815, ['348', 'N']],
  CTY_COLV_NB1: ['5806', 'Colvale', 1, 816, ['348', 'N']],
  CTY_CONT: ['4977', 'Contai', 1, 817, ['334', 'N']],
  CTY_COOC31: ['3972', 'Cooch Behar', 1, 818, ['334', 'N']],
  CTY_COON_NB: ['5807', 'Coonoor', 1, 819, ['323', 'N']],
  CTY_CUDD32: ['3973', 'Cuddalore', 1, 820, ['323', 'N']],
  CTY_CUDD33: ['3974', 'Cuddapah', 1, 821, ['332', 'N']],
  CTY_CMB: ['7427', 'Cumbum', 1, 822, ['323', 'N']],
  CTY_CUNC_NB: ['5808', 'Cuncolim', 1, 823, ['348', 'N']],
  CTY_CURC: ['4666', 'Curchorem', 1, 824, ['348', 'N']],
  CTY_CURT_NB: ['5809', 'Curtorim', 1, 825, ['348', 'N']],
  CTY_CUTT34: ['3975', 'Cuttack', 1, 826, ['333', 'N']],
  CTY_DRS: ['8283', 'DARSI', 1, 827, ['332', '']],
  CTY_DEUL_NB: ['5843', 'DEULGAON RAJA', 1, 828, ['322', 'N']],
  CTY_DABB_NB: ['5810', 'Dabbaspet', 1, 829, ['349', 'N']],
  CTY_DABH_NB: ['5811', 'Dabhel', 1, 830, ['346', 'N']],
  CTY_DABH: ['4686', 'Dabhoi', 1, 831, ['338', 'N']],
  CTY_DABR: ['5033', 'Dabra', 1, 832, ['340', 'N']],
  CTY_DABW5334: ['5334', 'Dabwali', 1, 833, ['337', 'N']],
  CTY_DADA_NB: ['5812', 'Dadahur', 1, 834, ['320', 'N']],
  CTY_DADR35: ['3976', 'Dadra & Nagar Haveli', 1, 835, ['317', 'N']],
  CTY_DADR_NB: ['5813', 'Dadri', 1, 836, ['326', 'N']],
  CTY_DAGA_NB: ['5814', 'Dagavadiya', 1, 837, ['338', 'N']],
  CTY_DAHANU: ['7123', 'Dahanu', 1, 838, ['322', 'N']],
  CTY_DAHA: ['5065', 'Dahanu Road', 1, 839, ['322', 'N']],
  CTY_DHGM: ['8281', 'Dahegam', 1, 840, ['338', '']],
  CTY_DAHE_NB: ['5815', 'Dahej', 1, 841, ['338', 'N']],
  CTY_DHS: ['7440', 'Dahisar(W)', 1, 842, ['322', 'N']],
  CTY_DAHI_NB: ['5816', 'Dahivali', 1, 843, ['322', 'N']],
  CTY_DAHO36: ['3977', 'Dahod', 1, 844, ['338', 'N']],
  CTY_DAKO: ['4687', 'Dakor', 1, 845, ['338', 'N']],
  CTY_DAKS37: ['3978', 'Dakshina Kannada', 1, 846, ['349', 'N']],
  CTY_DALA_NB: ['5817', 'Dalam', 1, 847, ['320', 'N']],
  CTY_DALH: ['4752', 'Dalhousie', 1, 848, ['331', 'N']],
  CTY_DALL5404: ['5404', 'Dalli Rajhara', 1, 849, ['347', 'N']],
  CTY_DLOPUR: ['7904', 'Dallo Pura', 1, 850, ['321', 'Y']],
  CTY_DALS_NB: ['5818', 'Dalsinghsarai', 1, 851, ['327', 'N']],
  CTY_DALT: ['4762', 'Daltonganj', 1, 852, ['318', 'N']],
  CTY_DALT_NB: ['5819', 'Daltongunj', 1, 853, ['318', 'N']],
  CTY_DMN: ['8282', 'Daman', 1, 854, ['338', '']],
  CTY_DAMA: ['5200', 'Daman', 1, 855, ['317', 'N']],
  CTY_DAMA38: ['3979', 'Daman', 1, 856, ['346', 'N']],
  CTY_DAMNGR: ['7493', 'Damnagar', 1, 857, ['338', 'N']],
  CTY_DAMO39: ['3980', 'Damoh', 1, 858, ['340', 'N']],
  CTY_DANK_NB: ['5820', 'Dankuni', 1, 859, ['334', 'N']],
  CTY_DANT40: ['3981', 'Dantewada', 1, 860, ['347', 'N']],
  CTY_DAPO_NB: ['5821', 'Dapoli', 1, 861, ['322', 'N']],
  CTY_DAPO: ['4627', 'Daporijo', 1, 862, ['335', 'N']],
  CTY_DARA_NB: ['5822', 'Dara', 1, 863, ['339', 'N']],
  CTY_DARB_NB: ['5823', 'Darbaribur', 1, 864, ['337', 'Y']],
  CTY_DARB41: ['3982', 'Darbhanga', 1, 865, ['327', 'N']],
  CTY_DARE_NB: ['5824', 'Dared', 1, 866, ['338', 'N']],
  CTY_DARJ: ['4978', 'Darjeeling', 1, 867, ['334', 'N']],
  CTY_DARJ42: ['3983', 'Darjiling', 1, 868, ['334', 'N']],
  CTY_DARL_NB: ['5825', 'Darla', 1, 869, ['331', 'N']],
  CTY_DARR43: ['3984', 'Darrang', 1, 870, ['328', 'N']],
  CTY_DARY_NB: ['5826', 'Daryapur', 1, 871, ['322', 'N']],
  CTY_DASC_NB: ['5827', 'Dascroi', 1, 872, ['338', 'N']],
  CTY_DASRTHPUR: ['7905', 'Dashrath puri', 1, 873, ['321', 'Y']],
  CTY_DASNA: ['8015', 'Dasna', 1, 874, ['326', 'Y']],
  CTY_DASU: ['5151', 'Dasuya', 1, 875, ['320', 'N']],
  CTY_DATA_NB: ['5828', 'Datarpur', 1, 876, ['320', 'N']],
  CTY_DATI44: ['3985', 'Datia', 1, 877, ['340', 'N']],
  CTY_DATT_NB: ['5829', 'Dattawadi', 1, 878, ['322', 'N']],
  CTY_DAUN_NB: ['5830', 'Daund', 1, 879, ['322', 'N']],
  CTY_DAUS45: ['3986', 'Dausa', 1, 880, ['345', 'N']],
  CTY_DVNG: ['8284', 'Davanagere', 1, 881, ['349', '']],
  CTY_DAVA46: ['3987', 'Davangare', 1, 882, ['349', 'N']],
  CTY_DAVA: ['4776', 'Davangere', 1, 883, ['349', 'N']],
  CTY_DAVO_NB: ['5831', 'Davorlim', 1, 884, ['348', 'N']],
  CTY_DYPUR: ['7906', 'Dayal Pur', 1, 885, ['321', 'Y']],
  CTY_DAYA_NB: ['5832', 'Dayalpura Mirza', 1, 886, ['320', 'N']],
  CTY_DEBA47: ['3988', 'Debagarh', 1, 887, ['333', 'N']],
  CTY_DEBPUR: ['7668', 'Debipur', 1, 888, ['334', 'N']],
  CTY_DEES: ['4688', 'Deesa', 1, 889, ['338', 'N']],
  CTY_DEG: ['7378', 'Degloor', 1, 890, ['322', 'N']],
  CTY_DEHG: ['4689', 'Dehgam', 1, 891, ['338', 'N']],
  CTY_DEHL_NB: ['5833', 'Dehlon', 1, 892, ['320', 'N']],
  CTY_DEHR_NB: ['5834', 'Dehra', 1, 893, ['331', 'N']],
  CTY_DEHR48: ['3989', 'Dehradun', 1, 894, ['316', 'N']],
  CTY_DEHR_NB1: ['5835', 'Dehri', 1, 895, ['327', 'N']],
  CTY_DELA_NB: ['5836', 'Dela', 1, 896, ['338', 'N']],
  CTY_DELA_NB1: ['5837', 'Delad', 1, 897, ['338', 'N']],
  CTY_DELH: ['4662', 'Delhi', 1, 898, ['321', 'Y']],
  CTY_DCTNMENT: ['7907', 'Delhi Cantonment', 1, 899, ['321', 'Y']],
  CTY_DEOB_NB: ['5838', 'Deoband', 1, 900, ['326', 'N']],
  CTY_DEOG_NB: ['7212', 'Deogar', 1, 901, ['333', 'N']],
  CTY_DEOG5412: ['5412', 'Deogarh', 1, 902, ['333', 'N']],
  CTY_DEOG49: ['3990', 'Deoghar', 1, 903, ['318', 'N']],
  CTY_DEOL_NB: ['5839', 'Deola', 1, 904, ['322', 'N']],
  CTY_DEOL_NB1: ['5840', 'Deolali', 1, 905, ['322', 'N']],
  CTY_DEOL5410: ['5410', 'Deoli', 1, 906, ['345', 'N']],
  CTY_DELI: ['7908', 'Deoli', 1, 907, ['321', 'Y']],
  CTY_DEOR50: ['3991', 'Deoria', 1, 908, ['326', 'N']],
  CTY_DERA_NB: ['5841', 'Dera Baba Nanak', 1, 909, ['320', 'N']],
  CTY_DERA5333: ['5333', 'Dera Bassi', 1, 910, ['320', 'N']],
  CTY_DRBS: ['8285', 'Derabassi', 1, 911, ['320', '']],
  CTY_DERO_NB: ['5842', 'Derol', 1, 912, ['338', 'N']],
  CTY_DEUL: ['7124', 'Deulgaon Raja', 1, 913, ['322', 'N']],
  CTY_DEV_RJKL: ['7473', 'Dev Rajkhal', 1, 914, ['316', 'N']],
  CTY_DEVDA_PTI: ['7643', 'Devadanapatti', 1, 915, ['323', 'N']],
  CTY_DEVDRGA: ['7519', 'Devadurga', 1, 916, ['349', 'N']],
  CTY_DEVA_NB: ['5844', 'Devakottai', 1, 917, ['323', 'N']],
  CTY_DEVA_NB1: ['5845', 'Devanahalli', 1, 918, ['349', 'N']],
  CTY_DVGR: ['8286', 'Devgarh', 1, 919, ['322', '']],
  CTY_DEVI_NB: ['5846', 'Devigarh', 1, 920, ['320', 'N']],
  CTY_DEWA51: ['3992', 'Dewas', 1, 921, ['337', 'N']],
  CTY_DEVA: ['5206', 'Dewas', 1, 922, ['340', 'N']],
  CTY_DHAD_NB: ['5847', 'Dhad', 1, 923, ['322', 'N']],
  CTY_DHAL52: ['3993', 'Dhalai', 1, 924, ['330', 'N']],
  CTY_DHAM_NB: ['5848', 'Dhamangaon Railway', 1, 925, ['322', 'N']],
  CTY_DHAM_NB1: ['5849', 'Dhamnod', 1, 926, ['340', 'N']],
  CTY_DHAM125: ['5034', 'Dhamond', 1, 927, ['340', 'N']],
  CTY_DHAM104: ['4944', 'Dhampur', 1, 928, ['326', 'N']],
  CTY_DHAM53: ['3994', 'Dhamtari', 1, 929, ['347', 'N']],
  CTY_DHAN_NB: ['5850', 'Dhanaula', 1, 930, ['320', 'N']],
  CTY_DHANA: ['7125', 'Dhanauri', 1, 931, ['320', 'N']],
  CTY_DHAN54: ['3995', 'Dhanbad', 1, 932, ['318', 'N']],
  CTY_DHAN_NB1: ['5851', 'Dhand', 1, 933, ['337', 'N']],
  CTY_DHND: ['7400', 'Dhandhuka', 1, 934, ['338', 'N']],
  CTY_DHAN: ['4690', 'Dhanera', 1, 935, ['338', 'N']],
  CTY_DHAN_NB2: ['5852', 'Dhankot', 1, 936, ['337', 'Y']],
  CTY_DHAN_NB3: ['5853', 'Dhanyavi', 1, 937, ['338', 'N']],
  CTY_DHAR55: ['3996', 'Dhar', 1, 938, ['340', 'N']],
  CTY_DHAR5344: ['5344', 'Dharamkot', 1, 939, ['320', 'N']],
  CTY_DHAR_NB4: ['7214', 'Dharampur', 1, 940, ['331', 'N']],
  CTY_DHAR_NB3: ['7213', 'Dharampur', 1, 941, ['338', 'N']],
  CTY_DHAR5291: ['5291', 'Dharampur', 1, 942, ['338', 'N']],
  CTY_DHAR39: ['4753', 'Dharamshala', 1, 943, ['331', 'N']],
  CTY_DHAR5423: ['5423', 'Dharapuram', 1, 944, ['323', 'N']],
  CTY_DHAR25: ['4691', 'Dhari', 1, 945, ['338', 'N']],
  CTY_DHAR5431: ['5431', 'Dhariwal', 1, 946, ['320', 'N']],
  CTY_DHAR_NB: ['5854', 'Dharmaj', 1, 947, ['338', 'N']],
  CTY_DHAR_NB1: ['5855', 'Dharmanagar', 1, 948, ['330', 'N']],
  CTY_DHAR: ['5211', 'Dharmapuri', 1, 949, ['323', 'N']],
  CTY_DHAR56: ['3997', 'Dharmapuri', 1, 950, ['332', 'N']],
  CTY_DHARMAVRM: ['7592', 'Dharmavaram', 1, 951, ['332', 'N']],
  CTY_DHRTKHRD: ['8016', 'Dharoti Khurd', 1, 952, ['326', 'Y']],
  CTY_DHAR_NB2: ['5856', 'Dharpur', 1, 953, ['338', 'N']],
  CTY_DHAR57: ['3998', 'Dharuhera', 1, 954, ['337', 'N']],
  CTY_DHAR51: ['4777', 'Dharwad', 1, 955, ['349', 'N']],
  CTY_DHAR58: ['3999', 'Dharward', 1, 956, ['349', 'N']],
  CTY_DHAU_NB: ['5857', 'Dhaulimunha', 1, 957, ['333', 'N']],
  CTY_DHAU_NB1: ['5858', 'Dhaurra Mafi', 1, 958, ['326', 'N']],
  CTY_DHEM59: ['4000', 'Dhemaji', 1, 959, ['328', 'N']],
  CTY_DHEN60: ['4001', 'Dhenkanal', 1, 960, ['333', 'N']],
  CTY_DHIA_NB: ['5859', 'Dhianpur', 1, 961, ['320', 'N']],
  CTY_DHIL_NB: ['5860', 'Dhilwan', 1, 962, ['320', 'N']],
  CTY_DHIL_NB1: ['5861', 'Dhilwan', 1, 963, ['320', 'N']],
  CTY_DHOK_NB: ['5862', 'Dhokata', 1, 964, ['333', 'N']],
  CTY_DHOL_NB: ['5863', 'Dholasan', 1, 965, ['338', 'N']],
  CTY_DHOL_NB1: ['5864', 'Dholka', 1, 966, ['338', 'N']],
  CTY_DHOL61: ['4002', 'Dholpur', 1, 967, ['345', 'N']],
  CTY_DHON_NB: ['5865', 'Dhone', 1, 968, ['332', 'N']],
  CTY_DHOR_NB: ['5866', 'Dhoraji', 1, 969, ['338', 'N']],
  CTY_DHOT_NB: ['5867', 'Dhotian', 1, 970, ['320', 'N']],
  CTY_DHRA: ['4692', 'Dhrangadhra', 1, 971, ['338', 'N']],
  CTY_DHRO_NB: ['5868', 'Dhrol', 1, 972, ['338', 'N']],
  CTY_DHUB62: ['4003', 'Dhubri', 1, 973, ['328', 'N']],
  CTY_DHUL63: ['4004', 'Dhule', 1, 974, ['322', 'N']],
  CTY_DHUN_NB: ['5869', 'Dhunela', 1, 975, ['337', 'Y']],
  CTY_DHUP_NB: ['5870', 'Dhupguri', 1, 976, ['334', 'N']],
  CTY_DHUR: ['5152', 'Dhuri', 1, 977, ['320', 'N']],
  CTY_DIAM_NB: ['5871', 'Diamond Harbour', 1, 978, ['334', 'N']],
  CTY_DIBA64: ['4005', 'Dibang Valley', 1, 979, ['335', 'N']],
  CTY_DIBI_NB: ['5872', 'Dibiyapur', 1, 980, ['326', 'N']],
  CTY_DIBR65: ['4006', 'Dibrugarh', 1, 981, ['328', 'N']],
  CTY_DIGB_NB: ['5873', 'Digboi', 1, 982, ['328', 'N']],
  CTY_DIHI_NB: ['5874', 'Dihibatpur Panchanantala', 1, 983, ['334', 'N']],
  CTY_DILD_NB: ['5875', 'Dildar Nagar', 1, 984, ['326', 'N']],
  CTY_DILSHGRDEN: ['7909', 'Dilshad Garden', 1, 985, ['321', 'Y']],
  CTY_DLSKNR: ['8265', 'Dilsukhnagar', 1, 986, ['352', '']],
  CTY_DIMA66: ['4007', 'Dimapur', 1, 987, ['342', 'N']],
  CTY_DINA: ['5153', 'Dinanagar', 1, 988, ['320', 'N']],
  CTY_DINA_NB: ['5876', 'Dinapur', 1, 989, ['327', 'N']],
  CTY_DIND67: ['4008', 'Dindigul', 1, 990, ['323', 'N']],
  CTY_DIND5254: ['5254', 'Dindori', 1, 991, ['340', 'N']],
  CTY_DIND68: ['4009', 'Dindori', 1, 992, ['322', 'N']],
  CTY_DING_NB: ['5877', 'Ding', 1, 993, ['337', 'N']],
  CTY_DING_NB1: ['5878', 'Dingrian', 1, 994, ['320', 'N']],
  CTY_DING_NB2: ['5879', 'Dingucha', 1, 995, ['338', 'N']],
  CTY_DINH_NB: ['5880', 'Dinhata', 1, 996, ['334', 'N']],
  CTY_DIPH_NB: ['5881', 'Diphu', 1, 997, ['328', 'N']],
  CTY_DIRB_NB: ['5882', 'Dirba', 1, 998, ['320', 'N']],
  CTY_DISP: ['4640', 'Dispur', 1, 999, ['328', 'N']],
  CTY_DIST5288: ['5288', 'Dist Ahamadnagar', 1, 1000, ['322', 'N']],
  'CTY_DIU 69': ['4010', 'Diu', 1, 1001, ['346', 'N']],
  CTY_DIU69: ['7173', 'Diu', 1, 1002, ['346', 'N']],
  CTY_DODA70: ['4011', 'Doda', 1, 1003, ['339', 'N']],
  CTY_DODD_NB: ['5883', 'Doddaballapur', 1, 1004, ['349', 'N']],
  CTY_DOGA_NB: ['5884', 'Dogachia', 1, 1005, ['334', 'N']],
  CTY_DOHA: ['3', 'Doha', 1, 1006, ['4', 'N']],
  CTY_DOMA_NB: ['5885', 'Domaraiganj', 1, 1007, ['326', 'N']],
  CTY_DOMB: ['5066', 'Dombivali', 1, 1008, ['322', 'Y']],
  CTY_DOMB_NB: ['5886', 'Dombivli', 1, 1009, ['322', 'Y']],
  CTY_DOMJ_NB: ['5887', 'Domjur', 1, 1010, ['334', 'N']],
  CTY_DOMMERU: ['7594', 'Dommeru', 1, 1011, ['332', 'N']],
  CTY_DONA: ['4667', 'Dona Paula', 1, 1012, ['348', 'N']],
  CTY_DONA_NB: ['5888', 'Donar', 1, 1013, ['347', 'N']],
  CTY_DONDA: ['8633', 'Dondaicha', 1, 1014, ['322', 'N']],
  CTY_DOOM_NB: ['5889', 'DoomDooma', 1, 1015, ['328', 'N']],
  CTY_DOOM: ['7126', 'Doomdooma', 1, 1016, ['328', 'N']],
  CTY_DOI: ['7401', 'Dooni', 1, 1017, ['345', 'N']],
  CTY_DOOR_NB: ['5890', 'Dooru Shahbad', 1, 1018, ['339', 'N']],
  CTY_DORA_NB: ['5891', 'Doraha', 1, 1019, ['320', 'N']],
  CTY_DRAM_NB: ['5892', 'Dramman', 1, 1020, ['331', 'N']],
  CTY_DUBA24: ['4483', 'Dubai', 1, 1021, ['5', 'N']],
  CTY_DUBR: ['7412', 'Dubrajpur', 1, 1022, ['334', 'N']],
  CTY_DUBU_NB: ['5893', 'Duburi', 1, 1023, ['333', 'N']],
  CTY_DULI_NB: ['5894', 'Duliajan', 1, 1024, ['328', 'N']],
  CTY_DUMD_NB: ['5895', 'Dum Dum', 1, 1025, ['334', 'N']],
  CTY_DUMA_NB: ['5896', 'Dumad', 1, 1026, ['338', 'N']],
  CTY_DUMK71: ['4012', 'Dumka', 1, 1027, ['318', 'N']],
  CTY_DUNA_NB: ['5897', 'Dunavada', 1, 1028, ['338', 'N']],
  CTY_DUNDHR: ['7961', 'Dundahera', 1, 1029, ['337', 'N']],
  CTY_DUNG_NB: ['5898', 'Dungari', 1, 1030, ['338', 'N']],
  CTY_DUNG72: ['4013', 'Dungarpur', 1, 1031, ['345', 'N']],
  CTY_DURG73: ['4014', 'Durg', 1, 1032, ['347', 'N']],
  CTY_DURG: ['4979', 'Durgapur', 1, 1033, ['334', 'N']],
  CTY_DURU74: ['4015', 'Duruhera', 1, 1034, ['337', 'N']],
  CTY_DUSI: ['7651', 'Dusi', 1, 1035, ['323', 'N']],
  CTY_DWAR5359: ['5359', 'Dwarka', 1, 1036, ['321', 'Y']],
  CTY_DWAR: ['4693', 'Dwarka', 1, 1037, ['338', 'N']],
  CITY_DWRKSBCTY: ['7910', 'Dwarka Sub City', 1, 1038, ['321', 'Y']],
  CTY_EAST75: ['4016', 'East Champaran', 1, 1039, ['327', 'N']],
  CTY_EAST76: ['4017', 'East Delhi', 1, 1040, ['321', '1']],
  CTY_EAST77: ['4018', 'East Garo Hills', 1, 1041, ['350', 'N']],
  CTY_EAST78: ['4019', 'East Godavari', 1, 1042, ['332', '0']],
  CTY_EAST79: ['4020', 'East Kameng', 1, 1043, ['335', 'N']],
  CTY_EAST80: ['4021', 'East Khasi Hills', 1, 1044, ['350', 'N']],
  CTY_EAST5289: ['5289', 'East Khasihill', 1, 1045, ['350', 'N']],
  CTY_EAST87: ['4022', 'East Midnapore', 1, 1046, ['334', 'N']],
  CTY_EAST5261: ['5261', 'East Nimar', 1, 1047, ['340', 'N']],
  CTY_EAST81: ['4023', 'East Siang', 1, 1048, ['335', 'N']],
  CTY_EAST82: ['4024', 'East Sikkim', 1, 1049, ['351', 'N']],
  CTY_EAST83: ['4025', 'East Singhbhum', 1, 1050, ['318', 'N']],
  CTY_EDAP: ['4813', 'Edappal', 1, 1051, ['341', 'N']],
  CTY_EGRA_NB: ['5899', 'Egra', 1, 1052, ['334', 'N']],
  CTY_EKLI_NB: ['5900', 'Eklingpura', 1, 1053, ['345', 'N']],
  CTY_ELLE: ['4737', 'Ellenabad', 1, 1054, ['337', 'N']],
  CTY_ELUR: ['5165', 'Eluru', 1, 1055, ['332', 'N']],
  CTY_ENG_BAZR: ['7665', 'English Bazar', 1, 1056, ['334', 'N']],
  CTY_ERAM_NB: ['5901', 'Eramalloor', 1, 1057, ['341', 'N']],
  CTY_ERNA84: ['4026', 'Ernakulam', 1, 1058, ['341', 'N']],
  CTY_EROD85: ['4027', 'Erode', 1, 1059, ['323', 'N']],
  CTY_ERU_NB: ['5902', 'Eru', 1, 1060, ['338', 'N']],
  CTY_ETAH86: ['4028', 'Etah', 1, 1061, ['326', 'N']],
  CTY_ETAW87: ['4029', 'Etawah', 1, 1062, ['326', 'N']],
  CTY_ETMA_NB: ['5903', 'Etmadpur', 1, 1063, ['326', 'N']],
  CTY_ETTU: ['4814', 'Ettumanoor', 1, 1064, ['341', 'N']],
  CTY_FAIZ88: ['4030', 'Faizabad', 1, 1065, ['326', 'N']],
  CTY_FALN_NB: ['5904', 'Falna', 1, 1066, ['345', 'N']],
  CTY_FARI88: ['4031', 'Faridabad', 1, 1067, ['337', 'Y']],
  CTY_FRDB: ['8287', 'Faridabad', 1, 1068, ['326', '']],
  CTY_FARI89: ['4032', 'Faridkot', 1, 1069, ['320', 'N']],
  CTY_FRDNGR: ['8017', 'Faridnagar', 1, 1070, ['326', 'Y']],
  CTY_FARI_NB: ['5905', 'Faridpur', 1, 1071, ['326', 'N']],
  CTY_FARR90: ['4033', 'Farrukhabad', 1, 1072, ['326', 'N']],
  CTY_FARR_NB: ['5906', 'Farrukhnagar', 1, 1073, ['337', 'Y']],
  CTY_FATE: ['4826', 'Fateghgarh Churian', 1, 1074, ['320', 'N']],
  CTY_FATE91: ['4034', 'Fatehabad', 1, 1075, ['337', 'N']],
  CTY_FATE181: ['5198', 'Fatehabad', 1, 1076, ['320', 'N']],
  CTY_FATEH: ['7127', 'Fatehgarh', 1, 1077, ['326', 'N']],
  CTY_FATE_NB: ['5907', 'Fatehgarh - UP', 1, 1078, ['326', 'N']],
  CTY_FATE5355: ['5355', 'Fatehgarh Churian', 1, 1079, ['320', 'N']],
  CTY_FATE_NB2: ['5909', 'Fatehgarh Punjtur', 1, 1080, ['320', 'N']],
  CTY_FATE_NB3: ['5910', 'Fatehgarh Sabrah', 1, 1081, ['320', 'N']],
  CTY_FATE92: ['4035', 'Fatehgarh Sahib', 1, 1082, ['320', 'N']],
  CTY_FATE_NB1: ['5908', 'Fatehgarh churian', 1, 1083, ['320', 'N']],
  CTY_FATE_NB4: ['5911', 'Fatehnagar', 1, 1084, ['345', 'N']],
  CTY_FATE5265: ['5265', 'Fatehpur', 1, 1085, ['326', 'N']],
  CTY_FATE89: ['4036', 'Fatehpur', 1, 1086, ['326', 'N']],
  CTY_FATE_NB5: ['7215', 'Fatehpur', 1, 1087, ['345', 'N']],
  CTY_FATE_NB6: ['7216', 'Fatehpur', 1, 1088, ['320', 'N']],
  CTY_FATE5434: ['5434', 'Fatehpur Shekhawati', 1, 1089, ['345', 'N']],
  CTY_FATH_NB: ['5912', 'Fathegarh Shukarchak', 1, 1090, ['320', 'N']],
  CTY_FATH: ['4946', 'Fathepur', 1, 1091, ['326', 'N']],
  CTY_FATO_NB: ['5913', 'Fatorda', 1, 1092, ['348', 'N']],
  CTY_FAZA_NB: ['5914', 'Fazalwas', 1, 1093, ['337', 'Y']],
  CTY_FAZI: ['4827', 'Fazilka', 1, 1094, ['320', 'N']],
  CTY_FER: ['7328', 'Feroke', 1, 1095, ['341', 'N']],
  CTY_FRZ: ['7373', 'Ferozabad', 1, 1096, ['326', 'N']],
  CTY_FERO93: ['4037', 'Ferozepur', 1, 1097, ['337', 'Y']],
  CTY_FERO94: ['4038', 'Ferozepur Jhirka', 1, 1098, ['337', 'Y']],
  CTY_FERO: ['4828', 'Ferozpur', 1, 1099, ['320', 'N']],
  CTY_FERO_NB: ['5915', 'Ferozpur Cantt', 1, 1100, ['320', 'N']],
  CITY_Film_8242: ['8428', 'Film Nagar', 1, 1101, ['332', '']],
  CTY_FILM_NB: ['5916', 'Film Nagar', 1, 1102, ['352', 'N']],
  CTY_FIRO95: ['4039', 'Firozabad', 1, 1103, ['326', 'N']],
  CTY_FIRO96: ['4040', 'Firozpur', 1, 1104, ['320', 'N']],
  CTY_FORB5426: ['5426', 'Forbesganj', 1, 1105, ['327', 'N']],
  CTY_FUJAIRAH: ['5', 'Fujairah', 1, 1106, ['5', 'N']],
  CTY_FUL: ['8573', 'Fulia', 1, 1107, ['334', 'N']],
  CTY_GOAV_NB: ['5953', 'GOA Velha', 1, 1108, ['348', 'N']],
  CTY_GJRT: ['7478', 'GUJARAT', 1, 1109, ['338', 'N']],
  CTY_GADA97: ['4041', 'Gadag', 1, 1110, ['349', 'N']],
  CTY_GADA_NB: ['5917', 'Gadarpur', 1, 1111, ['316', 'N']],
  CTY_GADA5379: ['5379', 'Gadarwara', 1, 1112, ['340', 'N']],
  CTY_GADC90: ['4042', 'Gadchiroli', 1, 1113, ['322', 'N']],
  CTY_GADD_NB: ['5918', 'Gaddan Doab', 1, 1114, ['320', 'N']],
  CTY_GDH: ['7375', 'Gadhada', 1, 1115, ['338', 'N']],
  CTY_GADH: ['5067', 'Gadhinglaj', 1, 1116, ['322', 'N']],
  CTY_GADM: ['7128', 'Gadmudshingi', 1, 1117, ['322', 'N']],
  CITY_Gadw_8175: ['8361', 'Gadwal', 1, 1118, ['332', '']],
  CTY_GADW: ['5166', 'Gadwal', 1, 1119, ['352', 'N']],
  CTY_GAGG_NB: ['5919', 'Gaggo Mahal', 1, 1120, ['320', 'N']],
  CTY_GAGR_NB: ['5920', 'Gagret', 1, 1121, ['331', 'N']],
  CTY_GAHA_NB: ['5921', 'Gaham', 1, 1122, ['333', 'N']],
  CTY_GAHA_NB1: ['5922', 'Gahaur', 1, 1123, ['320', 'N']],
  CTY_GAJA98: ['4043', 'Gajapati', 1, 1124, ['333', 'N']],
  CTY_GAJR_NB: ['5923', 'Gajraula', 1, 1125, ['326', 'N']],
  CTY_GAJU_NB: ['5924', 'Gajuwaka', 1, 1126, ['332', 'N']],
  CTY_GANA_NB: ['5925', 'Ganaur', 1, 1127, ['337', 'N']],
  CTY_GAND44: ['4760', 'Ganderbal', 1, 1128, ['339', 'N']],
  CTY_GAND_NB: ['5926', 'Gandevi', 1, 1129, ['338', 'N']],
  CTY_GAND99: ['4044', 'Gandhi Nagar', 1, 1130, ['338', 'N']],
  CTY_GPD: ['7457', 'Gandhi Padia', 1, 1131, ['333', 'N']],
  CTY_GAND26: ['4694', 'Gandhidham', 1, 1132, ['338', 'N']],
  CTY_GAND27: ['4695', 'Gandhinagar', 1, 1133, ['338', 'N']],
  CTY_GANE_NB: ['5927', 'Ganeswarpur', 1, 1134, ['333', 'N']],
  CTY_GANG_NB: ['5928', 'Gangakhed', 1, 1135, ['322', 'N']],
  CTY_GANG11: ['4045', 'Ganganagar', 1, 1136, ['345', 'N']],
  CTY_GANG_NB1: ['5929', 'Gangapur City', 1, 1137, ['345', 'N']],
  CTY_GNGP: ['7410', 'Gangarampur', 1, 1138, ['334', 'N']],
  CTY_GANG52: ['4778', 'Gangavati', 1, 1139, ['349', 'N']],
  CTY_GANG_NB2: ['5930', 'Gangawati', 1, 1140, ['349', 'N']],
  CTY_GANG_NB3: ['5931', 'Gangoh', 1, 1141, ['326', 'N']],
  CTY_GANG86: ['4914', 'Gangtok', 1, 1142, ['351', 'N']],
  CTY_GANJ: ['5035', 'Ganj Basoda', 1, 1143, ['340', 'N']],
  CTY_GANJ12: ['4046', 'Ganjam', 1, 1144, ['333', 'N']],
  CTY_GANN_NB: ['5932', 'Gannavaram', 1, 1145, ['332', 'N']],
  CTY_GARD_NB: ['5933', 'Gardhiwal', 1, 1146, ['320', 'N']],
  CTY_GARG_NB: ['5934', 'Gargoti', 1, 1147, ['322', 'N']],
  CTY_GARH: ['4829', 'Garhshankar', 1, 1148, ['320', 'N']],
  CTY_GARH13: ['4047', 'Garhwa', 1, 1149, ['318', 'N']],
  CTY_GHW: ['7359', 'Garhwal', 1, 1150, ['316', 'N']],
  CTY_GARI5280: ['5280', 'Gariaband', 1, 1151, ['347', 'N']],
  CTY_GRY: ['7374', 'Gariyadhar', 1, 1152, ['338', 'N']],
  CTY_GRODHA: ['8078', 'Garobadha', 1, 1153, ['350', 'N']],
  CTY_GAUR_NB: ['5935', 'Gauribidanur', 1, 1154, ['349', 'N']],
  CTY_GAUT14: ['4048', 'Gautam Buddha Nagar', 1, 1155, ['326', 'Y']],
  CTY_GAYA15: ['4049', 'Gaya', 1, 1156, ['327', 'N']],
  CITY_Geno_8243: ['8429', 'Genome Valley', 1, 1157, ['332', '']],
  CTY_GENO_NB: ['5936', 'Genome Valley', 1, 1158, ['352', 'N']],
  CTY_GHAL_NB: ['5937', 'Ghallkhurd', 1, 1159, ['320', 'N']],
  CTY_GHAM_NB: ['5938', 'Ghamroz', 1, 1160, ['337', 'Y']],
  CTY_GHAN_NB: ['5939', 'Ghanaur', 1, 1161, ['320', 'N']],
  CTY_GHAUDA: ['7484', 'Gharaunda', 1, 1162, ['337', 'N']],
  CTY_GHRLI: ['7911', 'Gharoli', 1, 1163, ['321', 'Y']],
  CTY_GHRD_NEMBANGR: ['7912', 'Gharonda Neemka Bangar', 1, 1164, ['321', 'Y']],
  CTY_GHT: ['7413', 'Ghatal', 1, 1165, ['334', 'N']],
  CTY_GHAT_NB: ['5940', 'Ghatampur', 1, 1166, ['326', 'N']],
  CTY_GHAT_NB1: ['5941', 'Ghatshila', 1, 1167, ['318', 'N']],
  CTY_GHAZ16: ['4050', 'Ghaziabad', 1, 1168, ['326', 'Y']],
  CTY_GHAZ5286: ['5286', 'Ghaziabad Up', 1, 1169, ['326', 'Y']],
  CTY_GHAZ17: ['4051', 'Ghazipur', 1, 1170, ['326', 'Y']],
  CTY_GHRA: ['7913', 'Gheora', 1, 1171, ['321', 'Y']],
  CTY_GHIL_NB: ['5942', 'Ghilor Kalan', 1, 1172, ['337', 'N']],
  CTY_GHTRNI: ['7914', 'Ghitorni', 1, 1173, ['321', 'Y']],
  CTY_GHOD_NB: ['5943', 'Ghodiyal', 1, 1174, ['338', 'N']],
  CTY_GHOG: ['7449', 'Ghoghla', 1, 1175, ['338', 'N']],
  CTY_GHOG_NB: ['5944', 'Ghogra', 1, 1176, ['320', 'N']],
  CTY_GHOS_NB: ['5945', 'Ghosi', 1, 1177, ['326', 'N']],
  CTY_GHOT_NB: ['5946', 'Ghoti Budruk', 1, 1178, ['322', 'N']],
  CTY_GHUD_NB: ['5947', 'Ghudda', 1, 1179, ['320', 'N']],
  CTY_GHUM_NB: ['5948', 'Ghuman', 1, 1180, ['320', 'N']],
  CTY_GIDD_NB: ['5949', 'Giddalur', 1, 1181, ['332', 'N']],
  CTY_GIDD: ['4830', 'Giddarbaha', 1, 1182, ['320', 'N']],
  CTY_GIDD_NB1: ['5950', 'Gidderbaha', 1, 1183, ['320', 'N']],
  CTY_GILJ_NB: ['5951', 'Giljewala', 1, 1184, ['320', 'N']],
  CTY_GILL_NB: ['5952', 'Gill', 1, 1185, ['320', 'N']],
  CTY_GILL: ['4831', 'Gill Road', 1, 1186, ['320', 'N']],
  CTY_GIRI18: ['4052', 'Giridh', 1, 1187, ['318', 'N']],
  CTY_GIRI: ['4763', 'Giridih', 1, 1188, ['318', 'N']],
  CTY_GOGO_NB: ['5958', 'GoGOAni', 1, 1189, ['320', 'N']],
  CTY_GOA5338: ['5338', 'Goa', 1, 1190, ['348', 'N']],
  CTY_GOAV: ['7129', 'Goa Velha', 1, 1191, ['348', 'N']],
  CTY_GOAL19: ['4053', 'Goalpara', 1, 1192, ['328', 'N']],
  CTY_GOBI5342: ['5342', 'Gobi', 1, 1193, ['323', 'N']],
  CTY_GOBI_NB: ['5954', 'Gobichettipalayam', 1, 1194, ['323', 'N']],
  CTY_GOBI_NB1: ['5955', 'Gobindgarh', 1, 1195, ['320', 'N']],
  CTY_GOBO_NB: ['5956', 'Gobordanga', 1, 1196, ['334', 'N']],
  CITY_Goda_8246: ['8432', 'Godavarikhani', 1, 1197, ['332', '']],
  CTY_GODA: ['7327', 'Godavarikhani', 1, 1198, ['352', 'N']],
  CTY_GODB: ['7322', 'Godbolemala', 1, 1199, ['349', 'N']],
  CTY_GODD20: ['4054', 'Godda', 1, 1200, ['318', 'N']],
  CTY_GODH_NB: ['5957', 'Godhavi', 1, 1201, ['338', 'N']],
  CTY_GODH: ['4696', 'Godhra', 1, 1202, ['338', 'N']],
  CTY_GOGO: ['7130', 'Gogoani', 1, 1203, ['320', 'N']],
  CTY_GOHA21: ['4055', 'Gohana', 1, 1204, ['337', 'N']],
  CTY_GOIN_NB: ['5959', 'Goindwal', 1, 1205, ['320', 'N']],
  CTY_GOKA_NB: ['5960', 'Gokak', 1, 1206, ['349', 'N']],
  CTY_GKLPUR: ['7915', 'Gokal Pur', 1, 1207, ['321', 'Y']],
  CTY_GOKNGR: ['7476', 'Gokulnagar', 1, 1208, ['316', 'N']],
  CTY_GOLA_NB1: ['5962', 'Gola', 1, 1209, ['318', 'N']],
  CTY_GOLA_NB: ['5961', 'Gola Gokaran Nath', 1, 1210, ['326', 'N']],
  CTY_GOLA22: ['4056', 'Golaghat', 1, 1211, ['328', 'N']],
  CTY_GOLE_NB: ['5963', 'Golewala', 1, 1212, ['320', 'N']],
  CTY_GMT: ['8455', 'Gomti nagar', 1, 1213, ['326', '']],
  CTY_GOND23: ['4057', 'Gonda', 1, 1214, ['326', 'N']],
  CTY_GOND: ['4697', 'Gondal', 1, 1215, ['338', 'N']],
  CTY_GOND24: ['4058', 'Gondia', 1, 1216, ['322', 'N']],
  CTY_GONI_NB: ['5964', 'Goniana', 1, 1217, ['320', 'N']],
  CTY_GONI: ['4832', 'Goniana Mandi', 1, 1218, ['320', 'N']],
  CTY_GONI_NB1: ['5965', 'Gonikoppal', 1, 1219, ['349', 'N']],
  CTY_GOPA25: ['4059', 'Gopalganj', 1, 1220, ['327', 'N']],
  CTY_GOPA_NB: ['5966', 'Gopanapalle', 1, 1221, ['352', 'N']],
  CITY_Gopa_8244: ['8430', 'Gopanapalle', 1, 1222, ['332', '']],
  CTY_GPSWR: ['7474', 'Gopeshwar', 1, 1223, ['316', 'N']],
  CTY_GOPI_NB: ['5967', 'Gopinagar', 1, 1224, ['334', 'N']],
  CTY_GOP_NTPUR: ['7664', 'Gopinathpur', 1, 1225, ['334', 'N']],
  CTY_GORA26: ['4060', 'Gorakhpur', 1, 1226, ['326', 'N']],
  CTY_GORA_NB: ['5968', 'Goraknath', 1, 1227, ['326', 'N']],
  CTY_GORA: ['4833', 'Goraya', 1, 1228, ['320', 'N']],
  CTY_GORGN: ['7974', 'Goregaon', 1, 1229, ['322', 'Y']],
  CTY_GOUD_NB: ['5969', 'Goudgop', 1, 1230, ['333', 'N']],
  CTY_GOVE_NB: ['5970', 'Goverdhan', 1, 1231, ['326', 'N']],
  CITY_Govi_8245: ['8431', 'Govindpet', 1, 1232, ['332', '']],
  CTY_GOVI_NB: ['5971', 'Govindpet', 1, 1233, ['352', 'N']],
  CTY_CAYMAN: ['10', 'Grand Cayman', 1, 1234, ['6', 'N']],
  CTY_GREA_NB: ['5972', 'Greater Noida', 1, 1235, ['326', 'Y']],
  CTY_GUBBI: ['7516', 'Gubbi', 1, 1236, ['349', 'N']],
  CTY_GUDA_NB: ['5973', 'Gudah', 1, 1237, ['337', 'N']],
  CTY_GUDI: ['5167', 'Gudivada', 1, 1238, ['332', 'N']],
  CTY_GUD: ['7314', 'Gudiyatham', 1, 1239, ['323', 'N']],
  CTY_GUDL_NB: ['5974', 'Gudli', 1, 1240, ['345', 'N']],
  CTY_GUDU: ['5168', 'Gudur', 1, 1241, ['332', 'N']],
  CTY_GUDUR: ['7676', 'Gudur', 1, 1242, ['352', 'N']],
  CTY_GULBPRA: ['7498', 'Gulabpura', 1, 1243, ['345', 'N']],
  CTY_GULA_NB: ['5975', 'Gulaothi', 1, 1244, ['326', 'N']],
  CTY_GULB27: ['4061', 'Gulbarga', 1, 1245, ['349', 'N']],
  CTY_GUMA_NB: ['5976', 'Gumarwin', 1, 1246, ['331', 'N']],
  CTY_GUMI_NB: ['5977', 'Gumia', 1, 1247, ['318', 'N']],
  CTY_GUML28: ['4062', 'Gumla', 1, 1248, ['318', 'N']],
  CTY_GUNA29: ['4063', 'Guna', 1, 1249, ['340', 'N']],
  CTY_GUNDLPT: ['7505', 'Gundlupet', 1, 1250, ['349', 'N']],
  CTY_GUN_ML: ['7677', 'Gundmal', 1, 1251, ['352', 'N']],
  CTY_GUDUPPALA: ['7590', 'Gundupapala', 1, 1252, ['332', 'N']],
  CTY_GUNT: ['5169', 'Guntakal', 1, 1253, ['332', 'N']],
  CTY_GUNT30: ['4064', 'Guntur', 1, 1254, ['332', '0']],
  CTY_GURD31: ['4065', 'Gurdaspur', 1, 1255, ['320', 'N']],
  CTY_GURG32: ['4066', 'Gurgaon', 1, 1256, ['337', 'Y']],
  CTY_GURG5380: ['5380', 'Gurgaon', 1, 1257, ['321', 'Y']],
  CTY_GURN_NB: ['5978', 'Gurne Kalan', 1, 1258, ['320', 'N']],
  CTY_GURS_NB: ['5979', 'Gursarai', 1, 1259, ['326', 'N']],
  CTY_GURU63: ['4834', 'Guruharsahai', 1, 1260, ['320', 'N']],
  CTY_GURU_NB: ['5980', 'Guruvayoor', 1, 1261, ['341', 'N']],
  CTY_GURU61: ['4815', 'Guruvayur', 1, 1262, ['341', 'N']],
  CTY_GUSK: ['7131', 'Guskara', 1, 1263, ['334', 'N']],
  CTY_GUSK_NB: ['5981', 'Guskara', 1, 1264, ['334', 'N']],
  CTY_GUWA: ['4641', 'Guwahati', 1, 1265, ['328', 'N']],
  CTY_GWAL33: ['4067', 'Gwalior', 1, 1266, ['340', 'N']],
  CTY_GYSHNG: ['7489', 'Gyalshing', 1, 1267, ['351', 'N']],
  CTY_HABR_NB: ['5982', 'Habra', 1, 1268, ['334', 'N']],
  CTY_HADAGLI: ['7573', 'Hadagali', 1, 1269, ['349', 'N']],
  CTY_HADA_NB: ['5983', 'Hadamtala', 1, 1270, ['338', 'N']],
  CTY_HADG_NB: ['5984', 'Hadgood', 1, 1271, ['338', 'N']],
  CTY_HADI_NB: ['5985', 'Hadiyol', 1, 1272, ['338', 'N']],
  CTY_HAGBOMHALLI: ['7536', 'Hagaribommanahalli', 1, 1273, ['349', 'N']],
  CTY_HAIB: ['4835', 'Haibowal Kalan', 1, 1274, ['320', 'N']],
  CTY_HAID_NB: ['5986', 'Haidergarh', 1, 1275, ['326', 'N']],
  CTY_HAIL34: ['4068', 'Hailakandi', 1, 1276, ['328', 'N']],
  CTY_HLYMND: ['7962', 'Haileymandi', 1, 1277, ['337', 'N']],
  CTY_HAJAN: ['7583', 'Hajan', 1, 1278, ['339', 'N']],
  CTY_HAJI_NB3: ['7218', 'Hajipur', 1, 1279, ['320', 'N']],
  CTY_HAJI_NB2: ['7217', 'Hajipur', 1, 1280, ['327', 'N']],
  CTY_HAJI_NB: ['5987', 'Hajipur', 1, 1281, ['327', 'N']],
  CTY_HAJI_NB1: ['5988', 'Hajira', 1, 1282, ['338', 'N']],
  CTY_HALD115: ['4980', 'Haldia', 1, 1283, ['334', 'N']],
  CTY_HALD112: ['4963', 'Haldwani', 1, 1284, ['316', 'N']],
  CTY_HALL_NB: ['5989', 'Hally Mandi', 1, 1285, ['337', 'N']],
  CTY_HALO: ['4698', 'Halol', 1, 1286, ['338', 'N']],
  CTY_HALV: ['4699', 'Halvad', 1, 1287, ['338', 'N']],
  CTY_HAMB_NB: ['5990', 'Hambran', 1, 1288, ['320', 'N']],
  CTY_HAMI35: ['4069', 'Hamirpur', 1, 1289, ['331', 'N']],
  CTY_HAMI5266: ['5266', 'Hamirpur', 1, 1290, ['326', 'N']],
  CTY_HAMI36: ['4070', 'Hamirpur(Hp)', 1, 1291, ['331', 'N']],
  CTY_HAND_NB: ['5991', 'Handia', 1, 1292, ['326', 'N']],
  CTY_HAND_NB1: ['5992', 'Handwara', 1, 1293, ['339', 'N']],
  CTY_HANGAL: ['7547', 'Hangal', 1, 1294, ['349', 'N']],
  CTY_HANS: ['4738', 'Hansi', 1, 1295, ['337', 'N']],
  CITY_Hanu_8247: ['8433', 'Hanumakonda', 1, 1296, ['332', '']],
  CTY_HAN: ['7329', 'Hanumakonda', 1, 1297, ['352', 'N']],
  CTY_HANU_NB: ['5993', 'Hanuman Junction', 1, 1298, ['332', 'N']],
  CTY_HANU37: ['4071', 'Hanumangarh', 1, 1299, ['345', 'N']],
  CTY_HANU: ['4893', 'Hanumangarh Town', 1, 1300, ['345', 'N']],
  CTY_HAPU: ['4947', 'Hapur', 1, 1301, ['326', 'Y']],
  CTY_HARC_NB: ['5994', 'Harchowal', 1, 1302, ['320', 'N']],
  CTY_HARD38: ['4072', 'Harda', 1, 1303, ['340', 'N']],
  CTY_HARD39: ['4073', 'Hardoi', 1, 1304, ['326', 'N']],
  CTY_HARDGANJ: ['7600', 'Harduaganj', 1, 1305, ['326', 'N']],
  CTY_HARI_NB: ['5995', 'Hari Ke Pattan', 1, 1306, ['320', 'N']],
  CTY_HARI_NB1: ['5996', 'Hariana', 1, 1307, ['320', 'N']],
  CTY_HARI40: ['4074', 'Haridwar', 1, 1308, ['316', 'N']],
  CTY_HARI: ['5214', 'Haridwar', 1, 1309, ['326', 'N']],
  CTY_HARIHAR: ['7549', 'Harihar', 1, 1310, ['349', 'N']],
  CTY_HARI_NB2: ['5997', 'Harij', 1, 1311, ['338', 'N']],
  CTY_HRPD: ['7421', 'Haripad', 1, 1312, ['341', 'N']],
  CTY_HARI_NB3: ['5998', 'Haripar Pal', 1, 1313, ['338', 'N']],
  CTY_HRS: ['7454', 'Harishnagar', 1, 1314, ['328', 'N']],
  CTY_HARPNHALLI: ['7570', 'Harpanahalli', 1, 1315, ['349', 'N']],
  CTY_HAR_IYA: ['7608', 'Harraiya', 1, 1316, ['326', 'N']],
  CTY_HARY_NB: ['5999', 'Haryau', 1, 1317, ['320', 'N']],
  CTY_HASA_NB: ['6000', 'Hasanpur', 1, 1318, ['326', 'N']],
  CTY_HASS41: ['4075', 'Hassan', 1, 1319, ['349', 'N']],
  CTY_HASS_NB: ['6001', 'Hassanpur', 1, 1320, ['337', 'N']],
  CTY_HATSL: ['7916', 'Hastsal', 1, 1321, ['321', 'Y']],
  CTY_HATA_NB: ['6002', 'Hata', 1, 1322, ['326', 'N']],
  CTY_HATA_NB1: ['6003', 'Hatabuzurg', 1, 1323, ['326', 'N']],
  CTY_HATH_NB: ['6004', 'Hathin', 1, 1324, ['337', 'N']],
  CTY_HATH42: ['4076', 'Hathras', 1, 1325, ['326', 'N']],
  CTY_HAVE43: ['4077', 'Haveri', 1, 1326, ['349', 'N']],
  CTY_HAYA_NB: ['6005', 'Hayatnagar', 1, 1327, ['352', 'N']],
  CITY_Haya_8184: ['8370', 'Hayatnagar', 1, 1328, ['332', '']],
  CTY_HAYA_NB1: ['6006', 'Hayatpur', 1, 1329, ['337', 'N']],
  CTY_HAZA44: ['4078', 'Hazaribag', 1, 1330, ['318', 'N']],
  CTY_HAZA_NB: ['6007', 'Hazaribagh', 1, 1331, ['318', 'N']],
  CTY_HEBLL: ['7527', 'Hebbalu', 1, 1332, ['349', 'N']],
  CTY_HGGDVKTE: ['7506', 'Heggadadevankote', 1, 1333, ['349', 'N']],
  CTY_HERB_5452: ['7200', 'Herbertpur', 1, 1334, ['316', 'N']],
  CTY_HGH_WYS: ['7636', 'Highways', 1, 1335, ['323', 'N']],
  CTY_HILS_NB: ['6008', 'Hilsa', 1, 1336, ['327', 'N']],
  CTY_HIMA_NB: ['6009', 'Himatnagar', 1, 1337, ['338', 'N']],
  CTY_HIMM: ['4700', 'Himmatnagar', 1, 1338, ['338', 'N']],
  CTY_HIND_NB: ['6010', 'Hindaun', 1, 1339, ['345', 'N']],
  CTY_HINM: ['7409', 'Hindmotor', 1, 1340, ['334', 'N']],
  CTY_HIND: ['5170', 'Hindupur', 1, 1341, ['332', 'N']],
  CTY_HING: ['5068', 'Hinganghat', 1, 1342, ['322', 'N']],
  CTY_HING_NB: ['6011', 'Hingna', 1, 1343, ['322', 'N']],
  CTY_HING45: ['4079', 'Hingoli', 1, 1344, ['322', 'N']],
  CTY_HRN: ['7368', 'Hiranagar', 1, 1345, ['339', 'N']],
  CTY_HIREKRUR: ['7553', 'Hirekerur', 1, 1346, ['349', 'N']],
  CTY_HIRI_NB: ['6012', 'Hiriyur', 1, 1347, ['349', 'N']],
  CTY_HIRP_NB: ['6013', 'Hirpura', 1, 1348, ['338', 'N']],
  CTY_HISA46: ['4080', 'Hisar', 1, 1349, ['337', 'N']],
  CTY_HISS: ['4739', 'Hissar', 1, 1350, ['337', 'N']],
  CTY_HODA_NB: ['6014', 'Hodal', 1, 1351, ['337', 'N']],
  CTY_HOJA: ['4642', 'Hojai', 1, 1352, ['328', 'N']],
  CTY_HOLAKERE: ['7550', 'Holalkere', 1, 1353, ['349', 'N']],
  CTY_HOMN_NB: ['6015', 'Homnabad', 1, 1354, ['349', 'N']],
  CTY_HONA5343: ['5343', 'Honavar', 1, 1355, ['349', 'N']],
  CTY_HONLI: ['7540', 'Honnali', 1, 1356, ['349', 'N']],
  CTY_HOOG47: ['4081', 'Hooghly', 1, 1357, ['334', 'N']],
  CTY_HOSADRGA: ['7544', 'Hosadurga', 1, 1358, ['349', 'N']],
  CTY_HOSANAGRA: ['7545', 'Hosanagara', 1, 1359, ['349', 'N']],
  CTY_HOSH48: ['4082', 'Hoshangabad', 1, 1360, ['340', 'N']],
  CTY_HOSH49: ['4083', 'Hoshiarpur', 1, 1361, ['320', 'N']],
  CTY_HOSKTE: ['7525', 'Hoskote', 1, 1362, ['349', 'N']],
  CTY_HOSP: ['4779', 'Hospet', 1, 1363, ['349', 'N']],
  CTY_HOSU: ['4920', 'Hosur', 1, 1364, ['323', 'N']],
  CTY_HOWR50: ['4084', 'Howrah', 1, 1365, ['334', 'N']],
  CTY_HUBL: ['4780', 'Hubli', 1, 1366, ['349', 'N']],
  CTY_HUGL_NB: ['6016', 'Hugli', 1, 1367, ['334', 'N']],
  CTY_HUNGUNDA: ['7580', 'Hunagunda', 1, 1368, ['349', 'N']],
  CTY_HUNA_NB: ['6017', 'Hunasamaranahalli', 1, 1369, ['349', 'N']],
  CTY_HUNS_NB: ['6018', 'Hunsa', 1, 1370, ['352', 'N']],
  CITY_Huns_8185: ['8371', 'Hunsa', 1, 1371, ['332', '']],
  CTY_HUNS_NB1: ['6019', 'Hunsur', 1, 1372, ['349', 'N']],
  CTY_HUPA_NB: ['6020', 'Hupari', 1, 1373, ['322', 'N']],
  CTY_HUSN_NB: ['6021', 'Husnabad', 1, 1374, ['352', 'N']],
  CITY_Husn_8186: ['8372', 'Husnabad', 1, 1375, ['332', '']],
  CTY_HUSS: ['7132', 'Hussainpur', 1, 1376, ['320', 'N']],
  CTY_HUSS_NB: ['6022', 'Hussainpur (Ct)', 1, 1377, ['320', 'N']],
  CTY_HUZU_NB: ['6023', 'Huzurabad', 1, 1378, ['352', 'N']],
  CITY_Huzu_8187: ['8373', 'Huzurabad', 1, 1379, ['332', '']],
  CTY_HYDE51: ['4085', 'Hyderabad', 1, 1380, ['352', '3']],
  CTY_IDPD: ['8288', 'IDAPPADI', 1, 1381, ['323', '']],
  CTY_IBBA_NB: ['6024', 'Ibban', 1, 1382, ['320', 'N']],
  CTY_ICHA: ['5069', 'Ichalkaranji', 1, 1383, ['322', 'N']],
  CTY_IDAR: ['4701', 'Idar', 1, 1384, ['338', 'N']],
  CTY_IDUK52: ['4086', 'Idukki', 1, 1385, ['341', 'N']],
  CTY_IGAT_NB: ['6025', 'Igatpuri', 1, 1386, ['322', 'N']],
  CTY_IKAU_NB: ['6026', 'Ikauna', 1, 1387, ['326', 'N']],
  CTY_ILAM_NB: ['6027', 'Ilampillai', 1, 1388, ['323', 'N']],
  CTY_IMAL_NB: ['6028', 'Imalyaka', 1, 1389, ['326', 'Y']],
  CTY_IMPH: ['5112', 'Imphal', 1, 1390, ['329', 'N']],
  CTY_IMPH53: ['4087', 'Imphal East', 1, 1391, ['329', 'N']],
  CTY_IMPH_7147: ['7241', 'Imphal East', 1, 1392, ['329', 'N']],
  CTY_IMPH54: ['4088', 'Imphal West', 1, 1393, ['329', 'N']],
  CTY_INDA_NB: ['6029', 'Indapur', 1, 1394, ['322', 'N']],
  CTY_INDI: ['7555', 'Indi', 1, 1395, ['349', 'N']],
  CTY_INDRPRM: ['8007', 'Indirapuram', 1, 1396, ['326', 'Y']],
  CTY_INDO55: ['4089', 'Indore', 1, 1397, ['340', 'N']],
  CTY_INDR_NB: ['6030', 'Indrad', 1, 1398, ['338', 'N']],
  CTY_INDR_NB1: ['6031', 'Indrapura', 1, 1399, ['338', 'N']],
  CTY_INDR_NB2: ['6032', 'Indri', 1, 1400, ['337', 'N']],
  CTY_INDU_NB: ['6033', 'Indupur', 1, 1401, ['333', 'N']],
  CTY_IRIN_NB: ['6034', 'Irinjalaguda', 1, 1402, ['341', 'N']],
  CTY_IRIN5414: ['5414', 'Irinjalakuda', 1, 1403, ['341', 'N']],
  CTY_ISLA_NB: ['6035', 'Islampur', 1, 1404, ['334', 'N']],
  CTY_ILM: ['7362', 'Islampur', 1, 1405, ['322', 'N']],
  CTY_ISMA56: ['4090', 'Ismailabad', 1, 1406, ['337', 'N']],
  CTY_ISPU_NB: ['6036', 'Ispur', 1, 1407, ['320', 'N']],
  CTY_ISRA_NB: ['6037', 'Israna', 1, 1408, ['337', 'N']],
  CTY_ITAN: ['4628', 'Itanagar', 1, 1409, ['335', 'N']],
  CTY_ITAR: ['5036', 'Itarsi', 1, 1410, ['340', 'N']],
  CTY_ITAW_NB: ['6038', 'Itawa Kalan', 1, 1411, ['340', 'N']],
  CTY_JABA57: ['4091', 'Jabalpur', 1, 1412, ['340', 'N']],
  CTY_JABB_NB: ['6039', 'Jabbowal', 1, 1413, ['320', 'N']],
  CITY_Jadc_8183: ['8369', 'Jadcherla', 1, 1414, ['332', '']],
  CTY_JADC_NB: ['6040', 'Jadcherla', 1, 1415, ['352', 'N']],
  CTY_JADL_NB: ['6041', 'Jadla', 1, 1416, ['320', 'N']],
  CTY_JFRBAD: ['7917', 'Jaffrabad (Delhi)', 1, 1417, ['321', 'Y']],
  CTY_JFBAD: ['7494', 'Jafrabad', 1, 1418, ['338', 'N']],
  CTY_JAGA58: ['4092', 'Jagadhari', 1, 1419, ['337', 'N']],
  CTY_JAGA36: ['4740', 'Jagadhri', 1, 1420, ['337', 'N']],
  CTY_JAGA_NB: ['6042', 'Jagadishpur', 1, 1421, ['326', 'N']],
  CTY_JAGA_THLA: ['7661', 'Jagathala', 1, 1422, ['323', 'N']],
  CTY_JAGA_NB1: ['6043', 'Jagatpur', 1, 1423, ['333', 'N']],
  CTY_JAGA59: ['4093', 'Jagatsinghapur', 1, 1424, ['333', 'N']],
  CTY_JAGA154: ['5123', 'Jagatsinghpur', 1, 1425, ['333', 'N']],
  CTY_JAGD: ['4655', 'Jagdalpur', 1, 1426, ['347', 'N']],
  CTY_JAGG_NB: ['6044', 'Jaggayapet', 1, 1427, ['332', 'N']],
  CTY_JAGG: ['5171', 'Jaggayyapet', 1, 1428, ['332', 'N']],
  CTY_JAGI_NB: ['6045', 'Jagiroad', 1, 1429, ['328', 'N']],
  CITY_Jagi_8182: ['8368', 'Jagityala', 1, 1430, ['332', '']],
  CTY_JAGI_NB1: ['6046', 'Jagityala', 1, 1431, ['352', 'N']],
  CTY_JAGR: ['4836', 'Jagraon', 1, 1432, ['320', 'N']],
  CTY_JAHA_NB: ['6047', 'Jahangirabad', 1, 1433, ['326', 'N']],
  CTY_JAHA_NB1: ['6048', 'Jahanpur', 1, 1434, ['333', 'N']],
  CTY_JHZPR: ['7497', 'Jahazpur', 1, 1435, ['345', 'N']],
  CTY_JAIN60: ['4094', 'Jaintia Hills', 1, 1436, ['350', 'N']],
  CTY_JAIP61: ['4095', 'Jaipur', 1, 1437, ['345', 'N']],
  CTY_JAIR: ['4629', 'Jairampur', 1, 1438, ['335', 'N']],
  CTY_JAIS_NB: ['6049', 'Jais', 1, 1439, ['326', 'N']],
  CTY_JAIS_NB1: ['6050', 'Jaisalemer', 1, 1440, ['345', 'N']],
  CTY_JAIS62: ['4096', 'Jaisalmer', 1, 1441, ['345', 'N']],
  CTY_JAIS_NB2: ['6051', 'Jaisinghpur', 1, 1442, ['326', 'N']],
  CTY_JTR: ['7461', 'Jaitaran', 1, 1443, ['345', 'N']],
  CTY_JAIT: ['4837', 'Jaitu', 1, 1444, ['320', 'N']],
  CTY_JAJA63: ['4097', 'Jajapur', 1, 1445, ['333', 'N']],
  CTY_JAJP_NB: ['6052', 'Jajpur', 1, 1446, ['333', 'N']],
  CTY_JAJP155: ['5124', 'Jajpur Road', 1, 1447, ['333', 'N']],
  CTY_JAJP5376: ['5376', 'Jajpur Town', 1, 1448, ['333', 'N']],
  CTY_JAKH_NB: ['6053', 'Jakhal', 1, 1449, ['337', 'N']],
  CTY_JAKH_MND: ['7485', 'Jakhal Mandi', 1, 1450, ['337', 'N']],
  CTY_JALA: ['4838', 'Jalalabad', 1, 1451, ['320', 'N']],
  CTY_JALA_NB: ['6054', 'Jalalpur', 1, 1452, ['326', 'N']],
  CTY_JALA64: ['4098', 'Jalandhar', 1, 1453, ['320', 'N']],
  CTY_JALA_NB1: ['6055', 'Jalandhar Cantt', 1, 1454, ['320', 'N']],
  CTY_JALA65: ['4099', 'Jalaun', 1, 1455, ['326', 'N']],
  CTY_JALG66: ['4100', 'Jalgaon', 1, 1456, ['322', 'N']],
  CTY_JALM_NB: ['6056', 'Jalmana', 1, 1457, ['337', 'N']],
  CTY_JALN67: ['4101', 'Jalna', 1, 1458, ['322', 'N']],
  CTY_JALO_NB: ['6057', 'Jalochi', 1, 1459, ['322', 'N']],
  CTY_JALO68: ['4102', 'Jalor', 1, 1460, ['345', 'N']],
  CTY_JALO: ['4894', 'Jalore', 1, 1461, ['345', 'N']],
  CTY_JALP69: ['4103', 'Jalpaiguri', 1, 1462, ['334', 'N']],
  CTY_JAM5348: ['7182', 'Jam Jodhpur', 1, 1463, ['338', 'N']],
  'CTY_JAM 5348': ['5348', 'Jam Jodhpur', 1, 1464, ['338', 'N']],
  CTY_JKMB: ['8289', 'Jam Khambhalia', 1, 1465, ['338', '']],
  CTY_JAMA_NB3: ['7221', 'Jamalpur', 1, 1466, ['334', 'N']],
  CTY_JAMA_NB: ['6058', 'Jamalpur', 1, 1467, ['337', 'N']],
  CTY_JAMA_NB2: ['7220', 'Jamalpur', 1, 1468, ['327', 'N']],
  CTY_JAMA_NB1: ['7219', 'Jamalpur', 1, 1469, ['337', 'N']],
  CTY_JAMB: ['4702', 'Jambusar', 1, 1470, ['338', 'N']],
  CTY_JAMG_NB: ['6059', 'Jamgaon', 1, 1471, ['347', 'N']],
  CTY_JAMI_NB: ['6060', 'Jamiyatpura', 1, 1472, ['338', 'N']],
  CTY_JAMJ_NB: ['6061', 'Jamjodhpur', 1, 1473, ['338', 'N']],
  CTY_JAMK: ['4703', 'Jamkhambhalia', 1, 1474, ['338', 'N']],
  CTY_JAMK_NB: ['6062', 'Jamkhandi', 1, 1475, ['349', 'N']],
  CTY_JAM: ['7370', 'Jamkhed', 1, 1476, ['322', 'N']],
  CTY_JAMM5368: ['5368', 'Jammikunta', 1, 1477, ['352', 'N']],
  CITY_Jamm_8171: ['8357', 'Jammikunta', 1, 1478, ['332', '']],
  CTY_JAMM70: ['4104', 'Jammu', 1, 1479, ['339', 'N']],
  CTY_JAMN71: ['4105', 'Jamnagar', 1, 1480, ['338', 'N']],
  CTY_JAMN_NB: ['6063', 'Jamner', 1, 1481, ['322', 'N']],
  CTY_JAMS: ['4764', 'Jamshedpur', 1, 1482, ['318', 'N']],
  CTY_JAMS_NB: ['6064', 'Jamsher', 1, 1483, ['320', 'N']],
  CTY_JAMT72: ['4106', 'Jamtara', 1, 1484, ['318', 'N']],
  CTY_JAMU73: ['4107', 'Jamui', 1, 1485, ['327', 'N']],
  CTY_JAMU_NB: ['6065', 'Jamuria', 1, 1486, ['334', 'N']],
  CTY_JNKPRI: ['7918', 'Janakpuri', 1, 1487, ['321', 'Y']],
  CTY_JAND_NB: ['6066', 'Jandiala', 1, 1488, ['320', 'N']],
  CTY_JAND: ['4839', 'Jandiala Guru', 1, 1489, ['320', 'N']],
  CTY_JAND_NB1: ['6067', 'Jandoli', 1, 1490, ['320', 'N']],
  CTY_JAND_NB2: ['6068', 'Jandpur', 1, 1491, ['320', 'N']],
  CTY_JAND_NB3: ['6069', 'Jandu Singha', 1, 1492, ['320', 'N']],
  CTY_JANG5320: ['5320', 'Jangaon', 1, 1493, ['352', 'N']],
  CITY_Jang_8172: ['8358', 'Jangaon', 1, 1494, ['332', '']],
  CTY_JANG_NB: ['6070', 'Jangareddygudem', 1, 1495, ['332', 'N']],
  CTY_JANG_NB1: ['6071', 'Jangipur', 1, 1496, ['334', 'N']],
  CTY_JANI_NB: ['6072', 'Janial', 1, 1497, ['320', 'N']],
  CITY_Janj_8178: ['8364', 'Janjaon', 1, 1498, ['332', '']],
  CTY_JANJ: ['5172', 'Janjaon', 1, 1499, ['352', 'N']],
  CTY_JANJ5398: ['5398', 'Janjgir', 1, 1500, ['347', 'N']],
  CTY_JANJ74: ['4108', 'Janjgir-Champa', 1, 1501, ['347', 'N']],
  CTY_JANK_NB: ['6073', 'Jankampet', 1, 1502, ['352', 'N']],
  CITY_Jank_8188: ['8374', 'Jankampet', 1, 1503, ['332', '']],
  CTY_JANS_NB: ['6074', 'Jansui', 1, 1504, ['337', 'N']],
  CTY_JAOR: ['5037', 'Jaora', 1, 1505, ['340', 'N']],
  CTY_JARG_NB: ['6075', 'Jarg', 1, 1506, ['320', 'N']],
  CTY_JASD: ['4704', 'Jasdan', 1, 1507, ['338', 'N']],
  CTY_JASH75: ['4109', 'Jashpur', 1, 1508, ['347', 'N']],
  CTY_JSPR: ['7477', 'Jaspur', 1, 1509, ['316', 'N']],
  CTY_JASR_NB: ['6076', 'Jasra', 1, 1510, ['326', 'N']],
  CTY_JASRNA: ['7596', 'Jasrana', 1, 1511, ['326', 'N']],
  CTY_JASS_NB: ['6077', 'Jassur', 1, 1512, ['331', 'N']],
  CTY_JASW_NB: ['6078', 'Jaswant Nagar', 1, 1513, ['326', 'N']],
  CTY_JATA_NB: ['6079', 'Jatani', 1, 1514, ['333', 'N']],
  CTY_JATH_NB: ['6080', 'Jath', 1, 1515, ['322', 'N']],
  CTY_JATH_NB1: ['6081', 'Jatheri', 1, 1516, ['337', 'N']],
  CTY_JATP_NB: ['6082', 'Jatpar', 1, 1517, ['338', 'N']],
  CTY_JAUN76: ['4110', 'Jaunpur', 1, 1518, ['326', 'N']],
  CTY_JAUR_NB: ['6083', 'Jaura Chittran', 1, 1519, ['320', 'N']],
  CTY_JAWA_NB: ['6084', 'Jawahar', 1, 1520, ['322', 'N']],
  CTY_JWLM: ['7418', 'Jawalamukhi', 1, 1521, ['331', 'N']],
  CTY_JAYG_NB: ['6085', 'Jaygaon', 1, 1522, ['334', 'N']],
  CTY_JAYS: ['5070', 'Jaysingpur', 1, 1523, ['322', 'N']],
  CTY_JEEL_NB: ['6086', 'Jeelgul', 1, 1524, ['352', 'N']],
  CITY_Jeel_8189: ['8375', 'Jeelgul', 1, 1525, ['332', '']],
  CTY_JEGR: ['8553', 'Jegurupadu', 1, 1526, ['332', 'N']],
  CTY_JEHA77: ['4111', 'Jehanabad', 1, 1527, ['327', 'N']],
  CTY_JEON_NB: ['6087', 'Jeondan', 1, 1528, ['320', 'N']],
  CTY_JETP: ['4705', 'Jetpur', 1, 1529, ['338', 'N']],
  CTY_JEVRGI: ['7559', 'Jevargi', 1, 1530, ['349', 'N']],
  CTY_JEWA_NB: ['6088', 'Jewar', 1, 1531, ['326', 'N']],
  CTY_JEYP5328: ['5328', 'Jeypore', 1, 1532, ['333', 'N']],
  CTY_JHAB78: ['4112', 'Jhabua', 1, 1533, ['340', 'N']],
  CTY_JHAJ5425: ['5425', 'Jhajha', 1, 1534, ['327', 'N']],
  CTY_JHAJ79: ['4113', 'Jhajjar', 1, 1535, ['337', 'N']],
  CTY_JHAL80: ['4114', 'Jhalawar', 1, 1536, ['345', 'N']],
  CTY_JHAL: ['4895', 'Jhalrapatan', 1, 1537, ['345', 'N']],
  CTY_JHAN_NB: ['6089', 'Jhanjharpur', 1, 1538, ['327', 'N']],
  CTY_JHAN_NB1: ['6090', 'Jhanjheri', 1, 1539, ['320', 'N']],
  CTY_JHAN81: ['4115', 'Jhansi', 1, 1540, ['326', 'N']],
  CTY_JHAR5304: ['5304', 'Jharia', 1, 1541, ['318', 'N']],
  CTY_JHR_MJRBRI: ['7919', 'Jharoda Majra Burari', 1, 1542, ['321', 'Y']],
  CTY_JHAR82: ['4116', 'Jharsuguda', 1, 1543, ['333', 'N']],
  CTY_JHN_JHK: ['7598', 'Jhinjhak', 1, 1544, ['326', 'N']],
  CTY_JHUJ83: ['4117', 'Jhujhunu', 1, 1545, ['345', 'N']],
  CTY_JHUM_NB: ['6091', 'Jhumila', 1, 1546, ['326', 'N']],
  CTY_JHUM: ['4765', 'Jhumri Telaiya', 1, 1547, ['318', 'N']],
  CTY_JHUM_NB1: ['6092', 'Jhumri Tilaiya', 1, 1548, ['318', 'N']],
  CTY_JHUN: ['4896', 'Jhunjhunu', 1, 1549, ['345', 'N']],
  CTY_JHUSI: ['7601', 'Jhusi', 1, 1550, ['326', 'N']],
  CTY_JIB_NB: ['6093', 'Jib', 1, 1551, ['339', 'N']],
  CTY_JIGA_NB: ['6094', 'Jigani', 1, 1552, ['349', 'N']],
  CTY_JIND84: ['4118', 'Jind', 1, 1553, ['337', 'N']],
  CTY_JITW_NB: ['6095', 'Jitwarpur', 1, 1554, ['327', 'N']],
  CTY_JWNPUR: ['7920', 'Jiwan Pur', 1, 1555, ['321', 'Y']],
  CTY_JODA: ['5126', 'Joda', 1, 1556, ['333', 'N']],
  CTY_JODH: ['4840', 'Jodhan', 1, 1557, ['320', 'N']],
  CTY_JODH85: ['4119', 'Jodhpur', 1, 1558, ['345', 'Y']],
  CTY_JOGI_NB: ['6096', 'JogiNaka', 1, 1559, ['326', 'N']],
  CTY_JOGI: ['7133', 'Joginaka', 1, 1560, ['326', 'N']],
  CTY_JOGI_NB1: ['6097', 'Jogindarnagar', 1, 1561, ['331', 'N']],
  CTY_JOGI_NB2: ['6098', 'Jogipet', 1, 1562, ['352', 'N']],
  CITY_Jogi_8190: ['8376', 'Jogipet', 1, 1563, ['332', '']],
  CTY_JOLA5406: ['5406', 'Jolarpet', 1, 1564, ['323', 'N']],
  CTY_JNPUR: ['7921', 'Jona Pur', 1, 1565, ['321', 'Y']],
  CTY_JORE_NB: ['6099', 'Jorethang', 1, 1566, ['351', 'N']],
  CTY_JORH86: ['4120', 'Jorhat', 1, 1567, ['328', 'N']],
  CTY_JOWA: ['5113', 'Jowai', 1, 1568, ['350', 'N']],
  CTY_JOYA_NB: ['6100', 'Joya', 1, 1569, ['326', 'N']],
  CTY_JUGI_NB: ['6101', 'Jugial', 1, 1570, ['320', 'N']],
  CTY_JUGS_NB: ['6102', 'Jugsalai', 1, 1571, ['318', 'N']],
  CTY_JUI_NB: ['6103', 'Jui', 1, 1572, ['337', 'N']],
  CTY_JUJO_NB: ['6104', 'Jujomura', 1, 1573, ['333', 'N']],
  CTY_JULL_NB: ['6105', 'Jullana', 1, 1574, ['337', 'N']],
  CTY_JUNA87: ['4121', 'Junagadh', 1, 1575, ['338', 'N']],
  CTY_JUND_NB: ['6106', 'Jundla', 1, 1576, ['337', 'N']],
  CTY_JUNN_NB: ['6107', 'Junnar', 1, 1577, ['322', 'N']],
  CTY_JYOT91: ['4122', 'Jyotiba Phule Nagar', 1, 1578, ['326', 'N']],
  'CTY_K.V.88': ['4123', 'K.V.Rangareddy', 1, 1579, ['352', 'N']],
  'CITY_K.V.Ra_8148': ['8337', 'K.V.Rangareddy', 1, 1580, ['332', '']],
  CTY_KACH89: ['4124', 'Kachchh', 1, 1581, ['338', 'N']],
  CTY_KACH_NB: ['6108', 'Kachigam', 1, 1582, ['346', 'N']],
  CTY_KADA_NB: ['6109', 'Kadadhe', 1, 1583, ['322', 'N']],
  CTY_KADA5290: ['5290', 'Kadamgiri', 1, 1584, ['338', 'N']],
  CTY_KAD: ['7325', 'Kadapa', 1, 1585, ['332', 'N']],
  CTY_KADA_NB1: ['6110', 'Kadarpur', 1, 1586, ['337', 'Y']],
  CTY_KADA_NB2: ['6111', 'Kadayanallur', 1, 1587, ['323', 'N']],
  CTY_KADI: ['4706', 'Kadi', 1, 1588, ['338', 'N']],
  CTY_KADI_NB: ['6112', 'Kadiri', 1, 1589, ['332', 'N']],
  CTY_KADO_NB: ['6113', 'Kadodara', 1, 1590, ['338', 'N']],
  CTY_KADUR: ['7556', 'Kadur', 1, 1591, ['349', 'N']],
  CTY_KAGA_NB: ['6114', 'Kagal', 1, 1592, ['322', 'N']],
  CTY_KAHA_NB: ['6115', 'Kahalgaon', 1, 1593, ['327', 'N']],
  CTY_KAHA: ['7134', 'Kahalgaon', 1, 1594, ['327', 'N']],
  CTY_KAHN_NB: ['6116', 'Kahnuwan', 1, 1595, ['320', 'N']],
  CTY_KAIL_NB: ['6117', 'Kailash', 1, 1596, ['337', 'N']],
  CTY_KALSHAR: ['7487', 'Kailashahar', 1, 1597, ['330', 'N']],
  CTY_KAIM_NB: ['6118', 'Kaimla', 1, 1598, ['337', 'N']],
  CTY_KAIM90: ['4125', 'Kaimur (Bhabua)', 1, 1599, ['327', 'N']],
  CTY_KAIR_NB: ['6119', 'Kairon', 1, 1600, ['320', 'N']],
  CTY_KAIS_NB: ['6120', 'Kaiserganj', 1, 1601, ['326', 'N']],
  CTY_KAIT91: ['4126', 'Kaithal', 1, 1602, ['337', 'N']],
  CTY_KAIY_NB: ['6121', 'Kaiyal', 1, 1603, ['338', 'N']],
  CTY_KAKA_NB: ['6122', 'Kakadev', 1, 1604, ['326', 'N']],
  CTY_KKCHI: ['8092', 'Kakching', 1, 1605, ['329', 'N']],
  CTY_KAKI: ['5174', 'Kakinada', 1, 1606, ['332', 'N']],
  CTY_KAKK: ['4816', 'Kakkanad', 1, 1607, ['341', 'N']],
  CTY_KAKO_NB: ['6123', 'Kakod', 1, 1608, ['326', 'N']],
  CTY_KAKO_NB1: ['6124', 'Kakoda', 1, 1609, ['337', 'N']],
  CTY_KALA_NB: ['6125', 'Kala Afgana', 1, 1610, ['320', 'N']],
  CTY_KALA_NB1: ['6126', 'Kala Amb', 1, 1611, ['331', 'N']],
  CTY_KALA_NB2: ['6127', 'Kala Bakra', 1, 1612, ['320', 'N']],
  CTY_KALA_NB3: ['6128', 'Kala Sangian', 1, 1613, ['320', 'N']],
  CTY_KALA_NB4: ['6129', 'Kalady', 1, 1614, ['341', 'N']],
  CTY_KALGTAGI: ['7561', 'Kalaghatagi', 1, 1615, ['349', 'N']],
  CTY_KALA92: ['4127', 'Kalahandi', 1, 1616, ['333', 'N']],
  CTY_KALIGON: ['7500', 'Kalaigaon', 1, 1617, ['328', 'N']],
  CTY_KALA_NB5: ['6130', 'Kalambi', 1, 1618, ['322', 'N']],
  CTY_KALA_NB6: ['6131', 'Kalamboli', 1, 1619, ['322', 'Y']],
  CTY_KALA_NB7: ['6132', 'Kalamwadi', 1, 1620, ['322', 'N']],
  CTY_KALA_NB8: ['6133', 'Kalanaur', 1, 1621, ['337', 'N']],
  CTY_KALA_NB9: ['6134', 'Kalanwali', 1, 1622, ['337', 'N']],
  CTY_KAL_PTI: ['7657', 'Kalapatti', 1, 1623, ['323', 'N']],
  CTY_KAL: ['7319', 'Kalasa', 1, 1624, ['349', 'N']],
  CTY_KALA_NB10: ['6135', 'Kalaur', 1, 1625, ['320', 'N']],
  CTY_KALA_NB11: ['6136', 'Kalavad', 1, 1626, ['338', 'N']],
  CTY_KALA_NB12: ['6137', 'Kalavar', 1, 1627, ['349', 'N']],
  CTY_KALA: ['4741', 'Kalawali', 1, 1628, ['337', 'N']],
  CTY_KALA_NB13: ['6138', 'Kalayat', 1, 1629, ['337', 'N']],
  CTY_KALI_NB: ['6139', 'Kaliaganj', 1, 1630, ['334', 'N']],
  CITY_Kali_8191: ['8377', 'Kaligote', 1, 1631, ['332', '']],
  CTY_KALI_NB1: ['6140', 'Kaligote', 1, 1632, ['352', 'N']],
  CTY_KALI_NB2: ['6141', 'Kalimpong', 1, 1633, ['334', 'N']],
  CTY_KALK93: ['4128', 'Kalka', 1, 1634, ['337', 'N']],
  CTY_KALL_NB: ['6142', 'Kallakkurichi', 1, 1635, ['323', 'N']],
  CTY_KALL5424: ['5424', 'Kallakurichi', 1, 1636, ['323', 'N']],
  CTY_KALL_NB1: ['6143', 'Kalluthotti Junction', 1, 1637, ['323', 'N']],
  CTY_KALM: ['5071', 'Kalmeshwar', 1, 1638, ['322', 'N']],
  CTY_KALN_NB: ['6144', 'Kalna', 1, 1639, ['334', 'N']],
  CTY_KALO28: ['4707', 'Kalol', 1, 1640, ['338', 'N']],
  CTY_KALO62: ['4817', 'Kaloor', 1, 1641, ['341', 'N']],
  CTY_KALP: ['4818', 'Kalpetta', 1, 1642, ['341', 'N']],
  CTY_KAL_MALAI: ['7645', 'Kalugumalai', 1, 1643, ['323', 'N']],
  CITY_Kalw_8192: ['8378', 'Kalwakurthy', 1, 1644, ['332', '']],
  CTY_KALW_NB: ['6145', 'Kalwakurthy', 1, 1645, ['352', 'N']],
  CTY_KALW_NB1: ['6146', 'Kalwan Bk', 1, 1646, ['322', 'N']],
  CTY_KALY92: ['4129', 'Kalyan', 1, 1647, ['322', 'Y']],
  CTY_KALY_NB: ['6147', 'Kalyan - Dombivli', 1, 1648, ['322', 'Y']],
  CTY_KALY5293: ['5293', 'Kalyan East Thane', 1, 1649, ['322', 'Y']],
  CTY_KALY_NB1: ['6148', 'Kalyandurg', 1, 1650, ['332', 'N']],
  CTY_KALY: ['4981', 'Kalyani', 1, 1651, ['334', 'N']],
  CTY_KAMA_NB: ['6149', 'Kamali', 1, 1652, ['320', 'N']],
  CITY_Kama_8193: ['8379', 'Kamareddy', 1, 1653, ['332', '']],
  CTY_KAMA_NB1: ['6150', 'Kamareddy', 1, 1654, ['352', 'N']],
  CTY_KAMAY_PTI: ['7637', 'Kamayagoundanpatti', 1, 1655, ['323', 'N']],
  CTY_KAMB_NB: ['6151', 'Kambam', 1, 1656, ['323', 'N']],
  CTY_KAMB_NB1: ['6152', 'Kambil', 1, 1657, ['341', 'N']],
  CTY_KAMO_NB: ['6153', 'Kamothe', 1, 1658, ['322', 'Y']],
  CTY_KAMP: ['5072', 'Kamptee', 1, 1659, ['322', 'N']],
  CTY_KAMP_NB: ['6154', 'Kampur', 1, 1660, ['328', 'N']],
  CTY_KAMR_NB: ['6155', 'Kamrej', 1, 1661, ['338', 'N']],
  CTY_KAMR94: ['4130', 'Kamrup', 1, 1662, ['328', 'N']],
  CTY_KAMR_NB1: ['6156', 'Kamrup', 1, 1663, ['328', 'N']],
  CTY_KAMS_NB: ['6157', 'Kamshet', 1, 1664, ['322', 'N']],
  CTY_KANDKTHAN: ['7621', 'Kanadukathan', 1, 1665, ['323', 'N']],
  CTY_KANA: ['4781', 'Kanakapura', 1, 1666, ['349', 'N']],
  CTY_KANAM: ['7648', 'Kanam', 1, 1667, ['323', 'N']],
  CTY_KANC_NB: ['6158', 'Kanchapada', 1, 1668, ['333', 'N']],
  CTY_KANC95: ['4131', 'Kanchipuram', 1, 1669, ['323', 'N']],
  CTY_KANC_NB1: ['6159', 'Kanchrapara', 1, 1670, ['334', 'N']],
  CTY_KAND_NUR: ['7622', 'Kandanur', 1, 1671, ['323', 'N']],
  CTY_KAND96: ['4132', 'Kandhamal', 1, 1672, ['333', 'N']],
  CTY_KNDVLI: ['8258', 'Kandivali', 1, 1673, ['322', 'Y']],
  CTY_KAND_NB: ['6160', 'Kandla', 1, 1674, ['338', 'N']],
  CTY_KAND_NB1: ['6161', 'Kandukuru', 1, 1675, ['332', 'N']],
  CTY_KANG_NB: ['6162', 'Kangan', 1, 1676, ['339', 'N']],
  CTY_KANG_5441: ['7186', 'Kangan', 1, 1677, ['339', 'N']],
  CTY_KANG5324: ['5324', 'Kangayam', 1, 1678, ['323', 'N']],
  CTY_KANG_NB1: ['6163', 'Kangeyam', 1, 1679, ['323', 'N']],
  CTY_KANG97: ['4133', 'Kangra', 1, 1680, ['331', 'N']],
  CTY_KANH: ['4819', 'Kanhangad', 1, 1681, ['341', 'N']],
  CTY_KANI_NB: ['6164', 'Kanina', 1, 1682, ['337', 'N']],
  CTY_KANIYUR: ['7655', 'Kaniyur', 1, 1683, ['323', 'N']],
  CTY_KJHWLA: ['7922', 'Kanjhawala', 1, 1684, ['321', 'Y']],
  CTY_KANJ: ['4820', 'Kanjirapally', 1, 1685, ['341', 'N']],
  CTY_KANK_NB: ['6165', 'Kankabati', 1, 1686, ['334', 'N']],
  CTY_KANK140: ['5073', 'Kankavli', 1, 1687, ['322', 'N']],
  CTY_KANK_NB1: ['6166', 'Kankawli', 1, 1688, ['322', 'N']],
  CTY_KANK98: ['4134', 'Kanker', 1, 1689, ['347', 'N']],
  CTY_KANK82: ['4897', 'Kankroli', 1, 1690, ['345', 'N']],
  CTY_KANN_NB: ['6167', 'Kannad', 1, 1691, ['322', 'N']],
  CTY_KANNM_PALYM: ['7658', 'Kannampalayam', 1, 1692, ['323', 'N']],
  CTY_KANN99: ['4135', 'Kannauj', 1, 1693, ['326', 'N']],
  CTY_KARN_KAN: ['7528', 'Kannur', 1, 1694, ['349', 'N']],
  CTY_KANN93: ['4136', 'Kannur', 1, 1695, ['341', 'N']],
  CTY_KANP: ['4948', 'Kanpur', 1, 1696, ['326', 'N']],
  CTY_KANP11: ['4137', 'Kanpur Dehat', 1, 1697, ['326', 'N']],
  CTY_KANP12: ['4138', 'Kanpur Nagar', 1, 1698, ['326', 'N']],
  CTY_KANT_NB: ['6168', 'Kantabanji', 1, 1699, ['333', 'N']],
  CTY_KANTH: ['7595', 'Kanth', 1, 1700, ['326', 'N']],
  CTY_KANW_NB: ['6169', 'Kanwarsika', 1, 1701, ['337', 'Y']],
  CTY_KANY13: ['4139', 'Kanyakumari', 1, 1702, ['323', 'N']],
  CTY_KAPA5308: ['5308', 'Kapadvanj', 1, 1703, ['338', 'N']],
  CTY_KPSHRA: ['7923', 'Kapas Hera', 1, 1704, ['321', 'Y']],
  CTY_KAPA_NB: ['6170', 'Kapasan', 1, 1705, ['345', 'N']],
  CITY_Kapr_8194: ['8380', 'Kapra', 1, 1706, ['332', '']],
  CTY_KAPR_NB: ['6171', 'Kapra', 1, 1707, ['352', 'N']],
  CTY_KAPT_NB: ['6172', 'Kaptanganj', 1, 1708, ['326', 'N']],
  CTY_KAPU14: ['4140', 'Kapurthala', 1, 1709, ['320', 'N']],
  CTY_KARA141: ['5074', 'Karad', 1, 1710, ['322', 'N']],
  CTY_KARA_NB: ['6173', 'Karagounden Palayam', 1, 1711, ['323', 'N']],
  CTY_KARA17: ['4141', 'Karaikal', 1, 1712, ['324', 'N']],
  CTY_KRKL: ['7415', 'Karaikal', 1, 1713, ['323', 'N']],
  CTY_KARA92: ['4921', 'Karaikudi', 1, 1714, ['323', 'N']],
  CTY_Kara_8868: ['8513', 'Karakulam', 1, 1715, ['341', '']],
  CTY_KRMD: ['7429', 'Karamadai', 1, 1716, ['323', 'N']],
  CTY_KARA_NB1: ['6174', 'Karanja', 1, 1717, ['322', 'N']],
  CTY_KRNJ: ['8290', 'Karanja Lad', 1, 1718, ['322', '']],
  CTY_KARA5285: ['5285', 'Karanjia', 1, 1719, ['333', 'N']],
  CTY_KARNPR: ['7499', 'Karanpur', 1, 1720, ['345', 'N']],
  CTY_KARA_NB2: ['6175', 'Karapakkam', 1, 1721, ['323', 'N']],
  CTY_KARA18: ['4142', 'Karauli', 1, 1722, ['345', 'N']],
  CTY_KRWLNGR: ['7924', 'Karawal Nagar', 1, 1723, ['321', 'Y']],
  CTY_KARB19: ['4143', 'Karbi Anglong', 1, 1724, ['328', 'N']],
  CTY_KARD_NB: ['6176', 'Kardi', 1, 1725, ['322', 'N']],
  CTY_KARE_NB: ['6177', 'Karegaon', 1, 1726, ['322', 'N']],
  CTY_KARG20: ['4144', 'Kargil', 1, 1727, ['339', 'N']],
  CTY_KARI21: ['4145', 'Karim Nagar', 1, 1728, ['352', 'N']],
  CITY_Kari_8146: ['8335', 'Karim Nagar', 1, 1729, ['332', '']],
  CTY_KARI22: ['4146', 'Karimganj', 1, 1730, ['328', 'N']],
  CTY_KARI: ['5175', 'Karimnagar', 1, 1731, ['352', 'N']],
  CTY_KARIVALI: ['7975', 'Karivali', 1, 1732, ['322', 'Y']],
  CTY_KARJ: ['4708', 'Karjan', 1, 1733, ['338', 'N']],
  CTY_KARJ_NB: ['6178', 'Karjat', 1, 1734, ['322', 'N']],
  CTY_KARK_NB: ['6179', 'Karkal', 1, 1735, ['349', 'N']],
  CTY_KARK: ['4782', 'Karkala', 1, 1736, ['349', 'N']],
  CTY_KARN23: ['4147', 'Karnal', 1, 1737, ['337', 'N']],
  CTY_KART: ['4841', 'Kartarpur', 1, 1738, ['320', 'N']],
  CTY_KARU: ['4821', 'Karunagapally', 1, 1739, ['341', 'N']],
  CTY_KARU24: ['4148', 'Karur', 1, 1740, ['323', 'N']],
  CTY_KARU_NB: ['6180', 'Karuvannur', 1, 1741, ['341', 'N']],
  CTY_KARW: ['4783', 'Karwar', 1, 1742, ['349', 'N']],
  CTY_KARW_NB: ['6181', 'Karwi Mafi', 1, 1743, ['326', 'N']],
  CTY_KASARA: ['7976', 'Kasara', 1, 1744, ['322', 'Y']],
  CTY_KASA: ['4822', 'Kasaragod', 1, 1745, ['341', 'N']],
  CTY_KASA_NB: ['6182', 'Kasaramboli', 1, 1746, ['322', 'N']],
  CTY_KASA25: ['4149', 'Kasargod', 1, 1747, ['341', 'N']],
  CTY_KASB: ['7446', 'Kasba', 1, 1748, ['334', 'N']],
  CTY_KASG: ['4949', 'Kasganj', 1, 1749, ['326', 'N']],
  CTY_KASH: ['4964', 'Kashipur', 1, 1750, ['316', 'N']],
  CTY_KASM: ['7369', 'Kashmir', 1, 1751, ['339', 'N']],
  CTY_KASI_NB: ['6183', 'Kasia', 1, 1752, ['326', 'N']],
  CITY_Kasi_8173: ['8359', 'Kasibugga', 1, 1753, ['332', '']],
  CTY_KASI: ['5176', 'Kasibugga', 1, 1754, ['352', 'N']],
  CTY_KATAI: ['7977', 'Katai', 1, 1755, ['322', 'Y']],
  CTY_KATC5302: ['5302', 'Katch', 1, 1756, ['338', 'N']],
  CTY_KATG_NB: ['6184', 'Katgaon', 1, 1757, ['322', 'N']],
  CTY_KATH_NB: ['6185', 'Kathgarh', 1, 1758, ['320', 'N']],
  CTY_KATH_NB1: ['6186', 'Kathlal', 1, 1759, ['338', 'N']],
  CTY_KATH26: ['4150', 'Kathua', 1, 1760, ['339', 'N']],
  CTY_KATI27: ['4151', 'Katihar', 1, 1761, ['327', 'N']],
  CTY_KTKAR: ['7978', 'Katkar', 1, 1762, ['322', 'Y']],
  CTY_KATL_NB: ['6187', 'Katlaheri', 1, 1763, ['337', 'N']],
  CTY_KATN28: ['4152', 'Katni', 1, 1764, ['340', 'N']],
  CTY_KATO: ['5075', 'Katol', 1, 1765, ['322', 'N']],
  CTY_KATR5409: ['5409', 'Katra', 1, 1766, ['339', 'N']],
  CTY_KATR_NB: ['6188', 'Katro', 1, 1767, ['347', 'N']],
  CTY_KATT: ['4823', 'Kattappana', 1, 1768, ['341', 'N']],
  CTY_KTRI: ['8291', 'Kattathurai', 1, 1769, ['323', '']],
  CTY_KATT_NB: ['6189', 'Kattu', 1, 1770, ['320', 'N']],
  CTY_KATW_NB: ['6190', 'Katwa', 1, 1771, ['334', 'N']],
  CTY_KATW_NB1: ['6191', 'Katwad', 1, 1772, ['338', 'N']],
  CTY_KAUS29: ['4153', 'Kaushambi', 1, 1773, ['326', 'N']],
  CTY_KAVA: ['5177', 'Kavali', 1, 1774, ['332', 'N']],
  CTY_KAWA30: ['4154', 'Kawardha', 1, 1775, ['347', 'N']],
  CTY_KAYA: ['4824', 'Kayamkulam', 1, 1776, ['341', 'N']],
  CTY_KECH_NB: ['6192', 'Kechery', 1, 1777, ['341', 'N']],
  CTY_KEDA_NB: ['6193', 'Kedarkheda', 1, 1778, ['322', 'N']],
  CTY_KEEL_NB: ['6194', 'Keelakarai', 1, 1779, ['323', 'N']],
  CTY_KEKR: ['4898', 'Kekri', 1, 1780, ['345', 'N']],
  CTY_KELA_NB: ['6195', 'Kelambakkam', 1, 1781, ['323', 'N']],
  CTY_KELO_NB: ['6196', 'Kelomal', 1, 1782, ['334', 'N']],
  CTY_KEND31: ['4155', 'Kendrapara', 1, 1783, ['333', 'N']],
  CTY_KEND32: ['4156', 'Kendujhar', 1, 1784, ['333', 'N']],
  CTY_KENG: ['4784', 'Kengari', 1, 1785, ['349', 'N']],
  CTY_KENG_NB: ['6197', 'Kengeri Sattelite Town', 1, 1786, ['349', 'N']],
  CTY_KENJ_NB: ['6198', 'Kenjakura', 1, 1787, ['334', 'N']],
  CTY_KEON: ['5127', 'Keonjhar', 1, 1788, ['333', 'N']],
  CTY_KERA_NB: ['6199', 'Keranga', 1, 1789, ['333', 'N']],
  CTY_KERUR: ['7581', 'Kerur', 1, 1790, ['349', 'N']],
  CTY_KESA_NB: ['6200', 'Kesarpura', 1, 1791, ['345', 'N']],
  CTY_KESH: ['4709', 'Keshod', 1, 1792, ['338', 'N']],
  CTY_KESH_NB: ['6201', 'Keshpur', 1, 1793, ['333', 'N']],
  CTY_KESH_NB1: ['6202', 'Keshrisinghpur', 1, 1794, ['345', 'N']],
  CTY_KESI_NB: ['6203', 'Kesinga', 1, 1795, ['333', 'N']],
  CTY_KESO_NB: ['6204', 'Kesori', 1, 1796, ['322', 'N']],
  CTY_KEWA_NB: ['6205', 'Kewalpur', 1, 1797, ['326', 'N']],
  CTY_KHAD_NB: ['6206', 'Khadani', 1, 1798, ['326', 'N']],
  CTY_KHAD_NB1: ['6207', 'Khadaur Sahib', 1, 1799, ['320', 'N']],
  CTY_KHADDA: ['7609', 'Khadda', 1, 1800, ['326', 'N']],
  CTY_KHAD_NB2: ['6208', 'Khadial', 1, 1801, ['320', 'N']],
  CTY_KHAD_NB3: ['6209', 'Khadol', 1, 1802, ['338', 'N']],
  CTY_KHAD_NB4: ['6210', 'Khadsupa', 1, 1803, ['338', 'N']],
  CTY_KHAG33: ['4157', 'Khagaria', 1, 1804, ['327', 'N']],
  CTY_KHAI_NB: ['6211', 'Khailar', 1, 1805, ['326', 'N']],
  CTY_KHAI_NB1: ['6212', 'Khair', 1, 1806, ['326', 'N']],
  CTY_KHAI_NB2: ['6213', 'Khairagarh', 1, 1807, ['347', 'N']],
  CTY_KHAI_NB3: ['6214', 'Khairahniya Beerpur', 1, 1808, ['326', 'N']],
  CTY_KHAI_NB4: ['6215', 'Khairav', 1, 1809, ['322', 'N']],
  CTY_KHR: ['7404', 'Khairha', 1, 1810, ['340', 'N']],
  CTY_KHAI_NB5: ['6216', 'Khairtal', 1, 1811, ['345', 'N']],
  CTY_KHAI5397: ['5397', 'Khairthal', 1, 1812, ['345', 'N']],
  CTY_KHJRIKHS: ['7925', 'Khajoori Khas', 1, 1813, ['321', 'Y']],
  CTY_KHAJ_NB: ['6217', 'Khajuri', 1, 1814, ['326', 'N']],
  CTY_KHAL_NB: ['6218', 'Khalchian', 1, 1815, ['320', 'N']],
  CTY_KHAL_NB1: ['6219', 'Khalilabad', 1, 1816, ['326', 'N']],
  CTY_KHAL_NB2: ['6220', 'Khalra', 1, 1817, ['320', 'N']],
  CTY_KHAL_NB3: ['6221', 'Khalumbre', 1, 1818, ['322', 'N']],
  CTY_KHAM64: ['4842', 'Khamano', 1, 1819, ['320', 'N']],
  CTY_KHAM_NB: ['6222', 'Khamanon', 1, 1820, ['320', 'N']],
  CTY_KHAM_NB1: ['6223', 'Khambhalia', 1, 1821, ['338', 'N']],
  CTY_KHAM29: ['4710', 'Khambhat', 1, 1822, ['338', 'N']],
  CTY_KHAM142: ['5076', 'Khamgaon', 1, 1823, ['322', 'N']],
  CTY_KHAM_NB2: ['6224', 'Khamla', 1, 1824, ['322', 'N']],
  CTY_KHAM34: ['4158', 'Khammam', 1, 1825, ['352', '3']],
  CTY_KHAN_NB: ['6225', 'Khanapara', 1, 1826, ['328', 'N']],
  CTY_KHAN_NB1: ['6226', 'Khanauri', 1, 1827, ['320', 'N']],
  CTY_KHAN_NB2: ['6227', 'Khandauli', 1, 1828, ['326', 'N']],
  CTY_KHAN35: ['4159', 'Khandwa', 1, 1829, ['340', 'N']],
  CTY_KHAN: ['4843', 'Khanna', 1, 1830, ['320', 'N']],
  CTY_KHAN_NB3: ['6228', 'Khanoor', 1, 1831, ['320', 'N']],
  CTY_KHAN_NB4: ['6229', 'Khanpur', 1, 1832, ['320', 'N']],
  CTY_KHAR_NB: ['6230', 'Kharadaha', 1, 1833, ['334', 'N']],
  CTY_KHAR116: ['4982', 'Kharagpur', 1, 1834, ['334', 'N']],
  CTY_KHAR65: ['4844', 'Kharar', 1, 1835, ['320', 'N']],
  CTY_KHRGHR: ['7979', 'Kharghar', 1, 1836, ['322', 'Y']],
  CTY_KHAR36: ['4160', 'Khargone', 1, 1837, ['340', 'N']],
  CTY_KHAR37: ['4161', 'Kharkhoda', 1, 1838, ['337', 'N']],
  CTY_KHAR_NB1: ['6231', 'Kharkoda', 1, 1839, ['337', 'N']],
  CTY_KHAR17: ['4656', 'Kharsia', 1, 1840, ['347', 'N']],
  CTY_KHAR_NB2: ['6232', 'Khartuli', 1, 1841, ['347', 'N']],
  CTY_KHAT_NB: ['6233', 'Khatauli', 1, 1842, ['326', 'N']],
  CTY_KHAT_NB1: ['6234', 'Khategaon', 1, 1843, ['340', 'N']],
  CTY_KTMA: ['8260', 'Khatima', 1, 1844, ['316', '']],
  CTY_KHAT_NB2: ['6235', 'Khativali', 1, 1845, ['322', 'Y']],
  CTY_KHE: ['7372', 'Khed', 1, 1846, ['322', 'N']],
  CTY_KHED38: ['4162', 'Kheda', 1, 1847, ['338', 'N']],
  CTY_KHED_NB: ['6236', 'Khedbrahma', 1, 1848, ['338', 'N']],
  CTY_KHEM_NB: ['6237', 'Khemkaran', 1, 1849, ['320', 'N']],
  CTY_KHRKHRD: ['7926', 'Khera Khurd', 1, 1850, ['321', 'Y']],
  CTY_KHER_NB: ['6238', 'Khergam', 1, 1851, ['338', 'N']],
  CTY_KHER5250: ['5250', 'Kheri', 1, 1852, ['326', 'N']],
  CTY_KHER39: ['4163', 'Kheri', 1, 1853, ['337', 'N']],
  CTY_KHER_NB1: ['6239', 'Kheri Naudh Singh', 1, 1854, ['320', 'N']],
  CTY_KHIJ_NB: ['6240', 'Khijrabad', 1, 1855, ['337', 'N']],
  CTY_KHLI_NB: ['6241', 'Khliehriat', 1, 1856, ['350', 'N']],
  CTY_KHOK_NB: ['6242', 'Khokhariya', 1, 1857, ['345', 'N']],
  CTY_KHONI: ['7980', 'Khoni, Maharashtra', 1, 1858, ['322', 'Y']],
  CTY_KHON: ['4630', 'Khonsa', 1, 1859, ['335', 'N']],
  CTY_KHOP: ['5077', 'Khopoli', 1, 1860, ['322', 'N']],
  CTY_KHOR40: ['4164', 'Khorda', 1, 1861, ['333', 'N']],
  CTY_KHOR_NB: ['6243', 'Khordha', 1, 1862, ['333', 'N']],
  CTY_KHOR_NB1: ['6244', 'Khorhansa', 1, 1863, ['326', 'N']],
  CTY_KHUI_NB: ['6245', 'Khuian Sarwar', 1, 1864, ['320', 'N']],
  CTY_KHUN5282: ['5282', 'Khunti', 1, 1865, ['318', 'N']],
  CTY_KHUR128: ['5038', 'Khurai', 1, 1866, ['340', 'N']],
  CTY_KHUR157: ['5128', 'Khurda', 1, 1867, ['333', 'N']],
  CTY_KHUR105: ['4950', 'Khurja', 1, 1868, ['326', 'N']],
  CTY_KHUT_NB: ['6246', 'Khutar', 1, 1869, ['326', 'N']],
  CTY_KHUT_NB1: ['6247', 'Khutehna', 1, 1870, ['326', 'N']],
  CTY_KILA: ['8673', 'Kilapavur', 1, 1871, ['323', 'N']],
  CTY_KLMN: ['8292', 'Kilimanoor', 1, 1872, ['341', '']],
  CTY_KILL_NB: ['6248', 'Kille Machindra Gad', 1, 1873, ['322', 'N']],
  CTY_KILL_NB1: ['6249', 'Killon Wali', 1, 1874, ['320', 'N']],
  CTY_KIM: ['7381', 'Kim', 1, 1875, ['338', 'N']],
  CTY_KINN41: ['4165', 'Kinnaur', 1, 1876, ['331', 'N']],
  CTY_KINN_NB: ['6250', 'Kinnigoli', 1, 1877, ['349', 'N']],
  CTY_KIPH42: ['4166', 'Kiphire', 1, 1878, ['342', 'N']],
  CTY_KIRA_NB: ['6251', 'Kiraoli', 1, 1879, ['326', 'N']],
  CTY_KIR_SLMNGR: ['7927', 'Kirari Suleman Nagar', 1, 1880, ['321', 'Y']],
  CTY_KIRA_NB1: ['6252', 'Kiratpur Sahib', 1, 1881, ['320', 'N']],
  CTY_KISH_NB: ['6253', 'Kishan Garh', 1, 1882, ['320', 'N']],
  CTY_KISH_NB1: ['6254', 'Kishan Pura', 1, 1883, ['331', 'N']],
  CTY_KISH43: ['4167', 'Kishanganj', 1, 1884, ['327', 'N']],
  CTY_KISH_NB3: ['6256', 'Kishangarh', 1, 1885, ['345', 'N']],
  CTY_KISH_NB2: ['6255', 'Kishangarh Renwal', 1, 1886, ['345', 'N']],
  CTY_KISH: ['4899', 'Kishingarh', 1, 1887, ['345', 'N']],
  CTY_KISH_NB4: ['6257', 'Kishtwar', 1, 1888, ['339', 'N']],
  CTY_KITH_NB: ['6258', 'Kithana', 1, 1889, ['337', 'N']],
  CTY_KOCH: ['4825', 'Kochi', 1, 1890, ['341', 'N']],
  CTY_KODA_NB: ['6259', 'Kodad', 1, 1891, ['352', 'N']],
  CITY_Koda_8195: ['8381', 'Kodad', 1, 1892, ['332', '']],
  CITY_Koda_8163: ['8350', 'Kodada', 1, 1893, ['332', '']],
  CTY_KODA: ['5178', 'Kodada', 1, 1894, ['352', 'N']],
  CTY_KODA44: ['4168', 'Kodagu', 1, 1895, ['349', 'N']],
  CTY_KODA5307: ['5307', 'Kodaikanal', 1, 1896, ['323', 'N']],
  CTY_KODA_NB1: ['6260', 'Kodakara', 1, 1897, ['341', 'N']],
  CTY_KODE45: ['4169', 'Koderma', 1, 1898, ['318', 'N']],
  CTY_KODI_NB: ['6261', 'Kodikurichi', 1, 1899, ['323', 'N']],
  CTY_KODI_NB1: ['6262', 'Kodinar', 1, 1900, ['338', 'N']],
  CTY_KODU: ['4989', 'Kodungallur', 1, 1901, ['341', 'N']],
  CTY_KODU_NB: ['6263', 'Kodur', 1, 1902, ['332', 'N']],
  CTY_KODURU: ['7511', 'Koduru', 1, 1903, ['349', 'N']],
  CTY_KODU_NB1: ['6264', 'Koduvayoor', 1, 1904, ['341', 'N']],
  CTY_KOHA_NB: ['6265', 'Kohali', 1, 1905, ['320', 'N']],
  CTY_KOHA_NB1: ['6266', 'Kohara', 1, 1906, ['320', 'N']],
  CTY_KOHI46: ['4170', 'Kohima', 1, 1907, ['342', 'N']],
  CTY_KOKR47: ['4171', 'Kokrajhar', 1, 1908, ['328', 'N']],
  CTY_KOLA48: ['4172', 'Kolar', 1, 1909, ['349', 'N']],
  CTY_KOLA5276: ['5276', 'Kolasib', 1, 1910, ['343', 'N']],
  CTY_KOLA_NB: ['6267', 'Kolat', 1, 1911, ['338', 'N']],
  CTY_KOLE_NB: ['6268', 'Kolenchery', 1, 1912, ['341', 'N']],
  CTY_KOLH49: ['4173', 'Kolhapur', 1, 1913, ['322', 'N']],
  CTY_KOLK50: ['4174', 'Kolkata', 1, 1914, ['334', 'N']],
  CTY_KLM: ['8293', 'Kollam', 1, 1915, ['349', '']],
  CTY_KOLL51: ['4175', 'Kollam', 1, 1916, ['341', 'N']],
  CTY_KOLGAL: ['7521', 'Kollegal', 1, 1917, ['349', 'N']],
  CTY_KOM_LINGM: ['7656', 'Komaralingam', 1, 1918, ['323', 'N']],
  CTY_KOMA_NB: ['6269', 'Komaripalem', 1, 1919, ['332', 'N']],
  CTY_KOMBAI: ['7638', 'Kombai', 1, 1920, ['323', 'N']],
  CTY_KOMM_NB: ['6270', 'Kommaghatta', 1, 1921, ['349', 'N']],
  CTY_KOMP_NB: ['6271', 'Kompalle', 1, 1922, ['352', 'N']],
  CITY_Komp_8196: ['8382', 'Kompalle', 1, 1923, ['332', '']],
  CTY_KON: ['7981', 'Kon', 1, 1924, ['322', 'Y']],
  CTY_KOND_NB: ['6272', 'Konda GOAn', 1, 1925, ['347', 'N']],
  CTY_KOND: ['7135', 'Konda Goan', 1, 1926, ['', 'N']],
  CITY_Kond_8197: ['8383', 'Kondagattu', 1, 1927, ['332', '']],
  CTY_KOND_NB1: ['6273', 'Kondagattu', 1, 1928, ['352', 'N']],
  CITY_Kond_8198: ['8384', 'Kondapur', 1, 1929, ['332', '']],
  CTY_KOND_NB2: ['6274', 'Kondapur', 1, 1930, ['352', 'N']],
  CTY_KONDLI: ['7928', 'Kondli', 1, 1931, ['321', 'Y']],
  CTY_KOND_NB3: ['6275', 'Kondotty', 1, 1932, ['341', 'N']],
  CTY_KONN_NB: ['6276', 'Konnagar', 1, 1933, ['334', 'N']],
  CTY_KOOT_NB: ['6277', 'Koothanallur', 1, 1934, ['323', 'N']],
  CTY_KOOT: ['4990', 'Koothattukulam', 1, 1935, ['341', 'N']],
  CTY_KOOT_NB1: ['6278', 'Koothuparamba', 1, 1936, ['341', 'N']],
  CTY_KPRKHRN: ['7982', 'Kopar Khairane', 1, 1937, ['322', 'Y']],
  CTY_KPRG: ['8294', 'Kopargaon', 1, 1938, ['322', '']],
  CTY_KOPE_NB: ['6279', 'Kopergaon', 1, 1939, ['322', 'N']],
  CTY_KOPP: ['7317', 'Koppa', 1, 1940, ['349', 'N']],
  CTY_KOPP52: ['4176', 'Koppal', 1, 1941, ['349', 'N']],
  CTY_KOPRI: ['7983', 'Kopri', 1, 1942, ['322', 'Y']],
  CTY_KORA53: ['4177', 'Koraput', 1, 1943, ['333', 'N']],
  CITY_Kora_8199: ['8385', 'Koratla', 1, 1944, ['332', '']],
  CTY_KORA_NB: ['6280', 'Koratla', 1, 1945, ['352', 'N']],
  CTY_KORA_NB1: ['6281', 'Korattur', 1, 1946, ['323', 'N']],
  CTY_KORA_NB2: ['6282', 'Koratty', 1, 1947, ['341', 'N']],
  CTY_KORB54: ['4178', 'Korba', 1, 1948, ['347', 'N']],
  CTY_KORE_NB: ['6283', 'Koregaon', 1, 1949, ['322', 'N']],
  CTY_KORI55: ['4179', 'Koriya', 1, 1950, ['347', 'N']],
  CTY_KOSA5300: ['5300', 'Kosamba', 1, 1951, ['338', 'N']],
  CTY_KOSI_NB: ['6284', 'Kosikalan', 1, 1952, ['326', 'N']],
  CTY_KOSL_NB: ['6285', 'Kosli', 1, 1953, ['337', 'N']],
  CTY_KOTB_NB: ['6286', 'Kot Budha', 1, 1954, ['320', 'N']],
  CTY_KOTI_NB: ['6287', 'Kot Isa Khan', 1, 1955, ['320', 'N']],
  'CTY_KOT ': ['4845', 'Kot Ise Khan', 1, 1956, ['320', 'N']],
  CTY_KOT: ['7180', 'Kot Ise Khan', 1, 1957, ['320', 'N']],
  CTY_KOTF_NB: ['6289', 'KotFatuhi', 1, 1958, ['320', 'N']],
  CTY_KOTA56: ['4180', 'Kota', 1, 1959, ['345', 'N']],
  CTY_KOTD_NB: ['6288', 'Kotdwar', 1, 1960, ['316', 'N']],
  CTY_KOTD: ['4965', 'Kotdwara', 1, 1961, ['316', 'N']],
  CTY_KOTE: ['4785', 'Koteshwar', 1, 1962, ['349', 'N']],
  CTY_KOTF: ['7136', 'Kotfatuhi', 1, 1963, ['320', 'N']],
  CTY_KOTH: ['5179', 'Kothagudem', 1, 1964, ['352', 'N']],
  CITY_Koth_8174: ['8360', 'Kothagudem', 1, 1965, ['332', '']],
  CTY_KOTH5346: ['5346', 'Kothamangalam', 1, 1966, ['341', 'N']],
  CITY_Koth_8200: ['8386', 'Kothapalle', 1, 1967, ['332', '']],
  CTY_KOTH_NB: ['6290', 'Kothapalle', 1, 1968, ['352', 'N']],
  CTY_KOTK: ['4846', 'Kotkapura', 1, 1969, ['320', 'N']],
  CTY_KOTK_NB: ['6291', 'Kotkhai', 1, 1970, ['331', 'N']],
  CTY_KOTM: ['5039', 'Kotma', 1, 1971, ['340', 'N']],
  CTY_KOTP: ['4900', 'Kotputli', 1, 1972, ['345', 'N']],
  CTY_KOTR_NB: ['6292', 'Kotra', 1, 1973, ['334', 'N']],
  CTY_KOTS_NB: ['6293', 'Kotshamir', 1, 1974, ['320', 'N']],
  CTY_KOTT_YUR: ['7623', 'Kottaiyur', 1, 1975, ['323', 'N']],
  CTY_KOTT_NB: ['6294', 'Kottakal', 1, 1976, ['341', 'N']],
  CTY_KOTT5402: ['5402', 'Kottakkal', 1, 1977, ['341', 'N']],
  CTY_KOTT: ['4991', 'Kottarakara', 1, 1978, ['341', 'N']],
  CTY_KOTT_NB1: ['6295', 'Kottarakkara', 1, 1979, ['341', 'N']],
  CTY_KOTT57: ['4181', 'Kottayam', 1, 1980, ['341', 'N']],
  CTY_KOVI5422: ['5422', 'Kovilpatti', 1, 1981, ['323', 'N']],
  CTY_KOVU_NB: ['6296', 'Kovur', 1, 1982, ['332', 'N']],
  CTY_KOVV_NB: ['6297', 'Kovvur', 1, 1983, ['332', 'N']],
  CTY_KOYA_NB: ['6298', 'Koyali', 1, 1984, ['338', 'N']],
  CTY_KOYI_NB: ['6299', 'Koyilandy', 1, 1985, ['341', 'N']],
  CTY_KOZH: ['4992', 'Kozhencherry', 1, 1986, ['341', 'N']],
  CTY_KOZH_NB: ['6300', 'Kozhenchery', 1, 1987, ['341', 'N']],
  CTY_KOZH58: ['4182', 'Kozhikode', 1, 1988, ['341', 'N']],
  CTY_KRIS59: ['4183', 'Krishna', 1, 1989, ['332', '0']],
  CTY_KRIS: ['4983', 'Krishnagar', 1, 1990, ['334', 'N']],
  CTY_KRIS60: ['4184', 'Krishnagiri', 1, 1991, ['323', 'N']],
  CTY_KRSNRJPT: ['7513', 'Krishnarajpet', 1, 1992, ['349', 'N']],
  CTY_KUBA_NB: ['6301', 'Kuba', 1, 1993, ['320', 'N']],
  CTY_KUCH_NB: ['6302', 'Kuchaman City', 1, 1994, ['345', 'N']],
  CTY_KUCH_NB1: ['6303', 'Kuchinda', 1, 1995, ['333', 'N']],
  CTY_KUDA: ['5078', 'Kudal', 1, 1996, ['322', 'N']],
  CTY_KUDA_NB: ['6304', 'Kudamaloor', 1, 1997, ['341', 'N']],
  CTY_KUDI_NB: ['6305', 'Kudi Khera', 1, 1998, ['326', 'N']],
  CTY_KUDU_NB: ['6306', 'Kudu', 1, 1999, ['331', 'N']],
  CTY_KUDU_NB1: ['6307', 'Kudumuluguma', 1, 2000, ['333', 'N']],
  CTY_KUJA_NB: ['6308', 'Kujang', 1, 2001, ['333', 'N']],
  CTY_KUKA_NB: ['6309', 'Kukar Pind', 1, 2002, ['320', 'N']],
  CTY_KUKA_NB1: ['6310', 'Kukarwada', 1, 2003, ['338', 'N']],
  CTY_KUKA_NB2: ['6311', 'Kukatpally', 1, 2004, ['352', 'N']],
  CITY_Kuka_8201: ['8387', 'Kukatpally', 1, 2005, ['332', '']],
  CTY_KUKS: ['5040', 'Kukshi', 1, 2006, ['340', 'N']],
  CTY_KULSEK_PRM: ['7650', 'Kulasekarapuram', 1, 2007, ['323', 'N']],
  CTY_KULA_NB: ['6312', 'Kulathumuzhy', 1, 2008, ['341', 'N']],
  CTY_KULG5260: ['5260', 'Kulgam', 1, 2009, ['339', 'N']],
  CTY_KULI_NB: ['6313', 'Kulithalai', 1, 2010, ['323', 'N']],
  CTY_KULL61: ['4185', 'Kullu', 1, 2011, ['331', 'N']],
  CTY_KUMK_NB: ['6314', 'Kum Kalan', 1, 2012, ['320', 'N']],
  CTY_KUMB: ['4922', 'Kumbakonam', 1, 2013, ['323', 'N']],
  CTY_KUMT: ['4786', 'Kumta', 1, 2014, ['349', 'N']],
  CTY_KUND106: ['4951', 'Kunda', 1, 2015, ['326', 'N']],
  CTY_KUND_NB: ['6315', 'Kundapur', 1, 2016, ['349', 'N']],
  CTY_KUND53: ['4787', 'Kundapura', 1, 2017, ['349', 'N']],
  CTY_KUNDGOL: ['7571', 'Kundgol', 1, 2018, ['349', 'N']],
  CTY_KUND_NB1: ['6316', 'Kundli', 1, 2019, ['337', 'N']],
  CTY_KUNGL: ['7533', 'Kunigal', 1, 2020, ['349', 'N']],
  CTY_KUNN: ['4993', 'Kunnamkulam', 1, 2021, ['341', 'N']],
  CTY_KUPW62: ['4186', 'Kupwara', 1, 2022, ['339', 'N']],
  CTY_KURA_NB: ['6317', 'Kuradiha', 1, 2023, ['333', 'N']],
  CTY_KURA_NB1: ['6318', 'Kurali', 1, 2024, ['320', 'N']],
  CTY_KURI_NB: ['6319', 'Kurichithanam', 1, 2025, ['341', 'N']],
  CTY_KURN63: ['4187', 'Kurnool', 1, 2026, ['332', '0']],
  CTY_KURU_NB: ['6320', 'Kurud', 1, 2027, ['347', 'N']],
  CTY_KURU64: ['4188', 'Kurukshetra', 1, 2028, ['337', 'N']],
  CTY_KURU65: ['4189', 'Kurung Kumey', 1, 2029, ['335', 'N']],
  CTY_KUSH66: ['4190', 'Kushinagar', 1, 2030, ['326', 'N']],
  CTY_KUSTGI: ['7537', 'Kushtagi', 1, 2031, ['349', 'N']],
  CTY_KUTC5298: ['5298', 'Kutch', 1, 2032, ['338', 'N']],
  CTY_KUTC: ['7448', 'Kutchery Chowk', 1, 2033, ['347', 'N']],
  CTY_KUTC5337: ['5337', 'Kutchh', 1, 2034, ['338', 'N']],
  CTY_KUWA25: ['4484', 'Kuwait', 1, 2035, ['3', 'N']],
  CTY_LDN: ['7391', 'Ladnun', 1, 2036, ['345', 'N']],
  CTY_LADW_5442: ['7187', 'Ladwa', 1, 2037, ['337', 'N']],
  CTY_LAHU67: ['4191', 'Lahul & Spiti', 1, 2038, ['331', 'N']],
  CTY_LAKH_NB: ['6321', 'Lakhan Majra', 1, 2039, ['337', 'N']],
  CTY_LAKH68: ['4192', 'Lakhimpur', 1, 2040, ['328', 'N']],
  CTY_LAKH: ['5215', 'Lakhimpur', 1, 2041, ['326', 'N']],
  CTY_LKPR: ['8459', 'Lakhimpur kheri', 1, 2042, ['326', '']],
  CTY_LAKH69: ['4193', 'Lakhisarai', 1, 2043, ['327', 'N']],
  CTY_LKH: ['7360', 'Lakhpat', 1, 2044, ['338', 'N']],
  CTY_LAKS70: ['4194', 'Lakshadweep', 1, 2045, ['336', 'N']],
  CTY_LALK_NB: ['6322', 'Lal Kalan', 1, 2046, ['320', 'N']],
  CTY_LALG_NB: ['6323', 'Lalganj', 1, 2047, ['327', 'N']],
  CTY_LALG: ['7137', 'Lalganj Katghar', 1, 2048, ['326', 'N']],
  CTY_LALG_NB1: ['6324', 'Lalganj-Katghar', 1, 2049, ['326', 'N']],
  CTY_LALG5332: ['5332', 'Lalgudi', 1, 2050, ['323', 'N']],
  CTY_LALI71: ['4195', 'Lalitpur', 1, 2051, ['326', 'N']],
  CTY_LALP_NB: ['6325', 'Lalpur', 1, 2052, ['338', 'N']],
  CTY_LALR_NB: ['6326', 'Lalru', 1, 2053, ['320', 'N']],
  CTY_LALS5381: ['5381', 'Lalsot', 1, 2054, ['345', 'N']],
  CTY_LAMB_NB: ['6327', 'Lambi', 1, 2055, ['320', 'N']],
  CTY_LAMB_NB1: ['6328', 'Lambra', 1, 2056, ['320', 'N']],
  CTY_LAND_NB: ['6329', 'Landran', 1, 2057, ['320', 'N']],
  CTY_LAND: ['7138', 'Landran', 1, 2058, ['320', 'N']],
  CTY_LAPK_NB: ['6330', 'Lapkaman', 1, 2059, ['338', 'N']],
  CTY_LASA_NB: ['6331', 'Lasalgaon', 1, 2060, ['322', 'N']],
  CTY_LATE72: ['4196', 'Latehar', 1, 2061, ['318', 'N']],
  CTY_LATHI: ['7495', 'Lathi', 1, 2062, ['338', 'N']],
  CTY_LATU73: ['4197', 'Latur', 1, 2063, ['322', 'N']],
  CTY_LAWN5263: ['5263', 'Lawngtlai', 1, 2064, ['343', 'N']],
  CTY_LAXI_NB: ['6332', 'Laxittipet', 1, 2065, ['352', 'N']],
  CITY_Laxi_8202: ['8388', 'Laxittipet', 1, 2066, ['332', '']],
  CTY_LXM: ['7392', 'Laxmangarh', 1, 2067, ['345', 'N']],
  CTY_LEH74: ['7175', 'Leh', 1, 2068, ['339', 'N']],
  'CTY_LEH 74': ['4198', 'Leh', 1, 2069, ['339', 'N']],
  CTY_LEHA_NB: ['6333', 'Lehal', 1, 2070, ['320', 'N']],
  CTY_LEHR_NB: ['6334', 'Lehragaga', 1, 2071, ['320', 'N']],
  CTY_LBSPUR: ['7929', 'Libas Pur', 1, 2072, ['321', 'Y']],
  CTY_LIMB5331: ['5331', 'Limbdi', 1, 2073, ['338', 'N']],
  CTY_LINGSGUR: ['7574', 'Lingasugur', 1, 2074, ['349', 'N']],
  CTY_LOHA75: ['4199', 'Lohardaga', 1, 2075, ['318', 'N']],
  CTY_LOHA_NB: ['6335', 'Lohardih', 1, 2076, ['347', 'N']],
  CTY_LOHA_NB1: ['6336', 'Loharka', 1, 2077, ['320', 'N']],
  CTY_LOHA_NB2: ['6337', 'Loharsi', 1, 2078, ['347', 'N']],
  CTY_LOHA_NB3: ['6338', 'Loharu', 1, 2079, ['337', 'N']],
  CTY_LOHI: ['7139', 'Lohian Khas', 1, 2080, ['320', 'N']],
  CTY_LOHI_NB: ['6339', 'Lohian khas', 1, 2081, ['320', 'N']],
  CTY_LOHI76: ['4200', 'Lohit', 1, 2082, ['335', 'N']],
  CTY_LOHT_NB: ['6340', 'Lohta', 1, 2083, ['326', 'N']],
  CTY_LOIS_NB: ['6341', 'Loisinga', 1, 2084, ['333', 'N']],
  CTY_LOKA_NB: ['6342', 'Lokamaleswaram', 1, 2085, ['341', 'N']],
  CTY_LONA_NB: ['6343', 'Lonand', 1, 2086, ['322', 'N']],
  CTY_LONA: ['5079', 'Lonavala', 1, 2087, ['322', 'N']],
  CTY_LNVL: ['8295', 'Lonavla', 1, 2088, ['322', '']],
  CTY_LONG77: ['4201', 'Longleng', 1, 2089, ['342', 'N']],
  CTY_LONG: ['4847', 'Longowal', 1, 2090, ['320', 'N']],
  CTY_LONI_NB: ['6344', 'Loni', 1, 2091, ['322', 'Y']],
  CTY_LONI: ['8008', 'Loni', 1, 2092, ['326', 'Y']],
  CTY_LOPO_NB: ['6345', 'Lopoke', 1, 2093, ['320', 'N']],
  CTY_LOWE78: ['4202', 'Lower Dibang Valley', 1, 2094, ['335', 'N']],
  CTY_LOWE79: ['4203', 'Lower Subansiri', 1, 2095, ['335', 'N']],
  CTY_LUCK80: ['4204', 'Lucknow', 1, 2096, ['326', 'Y']],
  CTY_LUDH81: ['4205', 'Ludhiana', 1, 2097, ['320', 'N']],
  CTY_LUKH_NB: ['6346', 'Lukhi', 1, 2098, ['337', 'N']],
  CTY_LUNA_NB: ['6347', 'Lunawada', 1, 2099, ['338', 'N']],
  CTY_LUNG5262: ['5262', 'Lunglei', 1, 2100, ['343', 'N']],
  CTY_MRD: ['8302', 'MURUD', 1, 2101, ['322', '']],
  CTY_MACH167: ['5180', 'Machalipatnam', 1, 2102, ['332', 'N']],
  CTY_MACH_NB: ['6348', 'Macherla', 1, 2103, ['332', 'N']],
  CTY_MACH66: ['4848', 'Machhiwara', 1, 2104, ['320', 'N']],
  CTY_MACH_NB1: ['6349', 'Machilipatnam', 1, 2105, ['332', 'N']],
  CTY_MADA_NB: ['6350', 'Madambakkam', 1, 2106, ['323', 'N']],
  CTY_MADA_NB1: ['6351', 'Madanapalle', 1, 2107, ['332', 'N']],
  CTY_MADA: ['5181', 'Madanapalli', 1, 2108, ['332', 'N']],
  CTY_MDR: ['8476', 'Madaria', 1, 2109, ['345', '']],
  CTY_MADUR: ['7515', 'Maddur', 1, 2110, ['349', 'N']],
  CTY_MADH_NB: ['6352', 'Madhapar', 1, 2111, ['338', 'N']],
  CTY_MADH82: ['4206', 'Madhepura', 1, 2112, ['327', 'N']],
  CTY_MADH_NB1: ['6353', 'Madhi', 1, 2113, ['338', 'N']],
  CTY_MADH_NB2: ['6354', 'Madhopur', 1, 2114, ['320', 'N']],
  CTY_MADH83: ['4207', 'Madhubani', 1, 2115, ['327', 'N']],
  CTY_MDGR: ['8296', 'Madhugiri', 1, 2116, ['349', '']],
  CTY_MADGIRI: ['7530', 'Madhugiri', 1, 2117, ['349', 'N']],
  CTY_MADH_NB3: ['6355', 'Madhupur', 1, 2118, ['318', 'N']],
  CTY_MADH_NB4: ['6356', 'Madhyamgram', 1, 2119, ['334', 'N']],
  CTY_MADI_NB: ['6357', 'Madikeri', 1, 2120, ['349', 'N']],
  CTY_MADI_NB1: ['6358', 'Madippakkam', 1, 2121, ['323', 'N']],
  CTY_MADK: ['4788', 'Madkeri', 1, 2122, ['349', 'N']],
  CTY_MADL84: ['4208', 'Madlauda', 1, 2123, ['337', 'N']],
  CTY_MADL85: ['4209', 'Madloda', 1, 2124, ['337', 'N']],
  CTY_MADU86: ['4210', 'Madurai', 1, 2125, ['323', 'N']],
  CTY_MADVOYL: ['7615', 'Maduravoyal', 1, 2126, ['323', 'N']],
  CTY_MAGADI: ['7567', 'Magadi', 1, 2127, ['349', 'N']],
  CTY_MAGA_NB: ['6359', 'Magam', 1, 2128, ['339', 'N']],
  CTY_MAHA87: ['4211', 'Mahabub Nagar', 1, 2129, ['352', 'N']],
  CITY_Maha_8153: ['8340', 'Mahabub Nagar', 1, 2130, ['332', '']],
  CTY_MAHA_NB: ['6360', 'Mahabubabad', 1, 2131, ['352', 'N']],
  CITY_Maha_8203: ['8389', 'Mahabubabad', 1, 2132, ['332', '']],
  CITY_Maha_8158: ['8345', 'Mahabubnagar', 1, 2133, ['332', '']],
  CTY_MAHA168: ['5182', 'Mahabubnagar', 1, 2134, ['352', 'N']],
  CTY_MAHA143: ['5080', 'Mahad', 1, 2135, ['322', 'N']],
  CTY_MAHA_NB1: ['6361', 'Mahal Kalan', 1, 2136, ['320', 'N']],
  CTY_MAHA_NB2: ['6362', 'Maham', 1, 2137, ['337', 'N']],
  CTY_MAHA_5451: ['7192', 'Mahamaya Nagar', 1, 2138, ['326', 'N']],
  CTY_MAHA_NB3: ['6363', 'Mahammadpur', 1, 2139, ['333', 'N']],
  CTY_MAHA88: ['4212', 'Maharajganj', 1, 2140, ['326', 'N']],
  CTY_Maha_7543: ['7203', 'Maharajganj', 1, 2141, ['327', 'N']],
  CTY_MAHA99: ['7239', 'Maharajganj', 1, 2142, ['327', 'N']],
  CTY_MAHA89: ['4213', 'Mahasamund', 1, 2143, ['347', 'N']],
  CTY_MAHA_NB4: ['6364', 'Mahatpur', 1, 2144, ['320', 'N']],
  CTY_MAHE90: ['4214', 'Mahe', 1, 2145, ['341', 'N']],
  CTY_MAHE5272: ['5272', 'Mahe', 1, 2146, ['324', 'N']],
  CTY_MAHE_NB: ['6365', 'Mahendargarh', 1, 2147, ['337', 'N']],
  CTY_MAHNGANJ: ['8080', 'Mahendraganj', 1, 2148, ['350', 'N']],
  CTY_MAHE91: ['4215', 'Mahendragarh', 1, 2149, ['337', 'N']],
  CTY_MAHE_NB1: ['6366', 'Mahendranagar', 1, 2150, ['338', 'N']],
  CTY_MAHE_NB2: ['6367', 'Maheru', 1, 2151, ['320', 'N']],
  CTY_MAHE92: ['4216', 'Mahesana', 1, 2152, ['338', 'N']],
  CTY_MAHI_NB: ['6368', 'Mahidpur', 1, 2153, ['340', 'N']],
  CTY_MAHI_NB1: ['6369', 'Mahilpur', 1, 2154, ['320', 'N']],
  CTY_MAHI_8: ['8', 'Mahisagar', 1, 2155, ['338', 'N']],
  CTY_MAHI_NB2: ['6370', 'Mahiyawali', 1, 2156, ['345', 'N']],
  CTY_MAHO93: ['4217', 'Mahoba', 1, 2157, ['326', 'N']],
  CTY_MAHU: ['4711', 'Mahuva', 1, 2158, ['338', 'N']],
  CTY_MAIH_NB: ['6371', 'Maihar', 1, 2159, ['340', 'N']],
  CTY_MAIN97: ['4218', 'Mainpuri', 1, 2160, ['326', 'N']],
  CTY_MAIR_NB: ['6372', 'Mairang', 1, 2161, ['350', 'N']],
  CTY_MAJA_NB: ['6373', 'Majalgaon', 1, 2162, ['322', 'N']],
  CTY_MAJA_NB1: ['6374', 'Majari', 1, 2163, ['320', 'N']],
  CTY_MSID: ['8753', 'Majholi Sidhi', 1, 2164, ['340', 'N']],
  CTY_MAJI: ['4849', 'Majitha', 1, 2165, ['320', 'N']],
  CTY_MAJO_NB: ['6375', 'Majorda', 1, 2166, ['348', 'N']],
  CTY_MAJR_NB: ['6376', 'Majra', 1, 2167, ['338', 'N']],
  CTY_MAJR_NB1: ['6377', 'Majri', 1, 2168, ['337', 'N']],
  CTY_MAJW_NB: ['6378', 'Majwind', 1, 2169, ['320', 'N']],
  CTY_MAKH_NB: ['6379', 'Makhu', 1, 2170, ['320', 'N']],
  CTY_MAKR: ['4901', 'Makrana', 1, 2171, ['345', 'N']],
  CTY_MALA_NB: ['6380', 'Mala', 1, 2172, ['341', 'N']],
  CTY_MALA_NB1: ['6381', 'Malakpur', 1, 2173, ['320', 'N']],
  CTY_MALA94: ['4219', 'Malappuram', 1, 2174, ['341', 'N']],
  CTY_MALA_NB2: ['6382', 'Malapuram', 1, 2175, ['341', 'N']],
  CTY_MALVLLI: ['7503', 'Malavalli', 1, 2176, ['349', 'N']],
  CTY_MALD95: ['4220', 'Malda', 1, 2177, ['334', 'N']],
  CTY_MALE144: ['5081', 'Malegaon', 1, 2178, ['322', 'N']],
  CTY_MALE67: ['4850', 'Malerkotla', 1, 2179, ['320', 'N']],
  CTY_MALG_NB: ['6383', 'Malgaon', 1, 2180, ['340', 'N']],
  CTY_MLBTWN: ['7963', 'Malibu Towne', 1, 2181, ['337', 'N']],
  CTY_MALI_NB: ['6384', 'Maliyasan', 1, 2182, ['338', 'N']],
  CTY_MALK96: ['4221', 'Malkangiri', 1, 2183, ['333', 'N']],
  CTY_MALK5357: ['5357', 'Malkapur', 1, 2184, ['322', 'N']],
  CTY_MALK_NB: ['6385', 'Malkhed', 1, 2185, ['349', 'N']],
  CTY_MALL_NB: ['6386', 'Mallanwala', 1, 2186, ['320', 'N']],
  CTY_MALL_NB1: ['6387', 'Mallekan', 1, 2187, ['337', 'N']],
  CTY_MALO_NB: ['6388', 'Maloud', 1, 2188, ['320', 'N']],
  CTY_MALO: ['4851', 'Malout', 1, 2189, ['320', 'N']],
  CTY_MLP030: ['8533', 'Malpur', 1, 2190, ['338', 'N']],
  CTY_MALP_NB: ['6389', 'Malpura', 1, 2191, ['345', 'N']],
  CTY_MALR_NB: ['6390', 'Malru', 1, 2192, ['339', 'N']],
  CTY_MALS_NB: ['6391', 'Malsian', 1, 2193, ['320', 'N']],
  CTY_MALU_NB: ['6392', 'Maluka', 1, 2194, ['320', 'N']],
  CTY_MALU_NB1: ['6393', 'Malur', 1, 2195, ['349', 'N']],
  CTY_MALV: ['5082', 'Malvan', 1, 2196, ['322', 'N']],
  CTY_MAMD_NB: ['6394', 'Mamdot Uttar', 1, 2197, ['320', 'N']],
  CTY_MAMM5277: ['5277', 'Mammit', 1, 2198, ['343', 'N']],
  CTY_MANA_NB: ['6395', 'Manakkody', 1, 2199, ['341', 'N']],
  CTY_MANA40: ['4754', 'Manali', 1, 2200, ['331', 'N']],
  CTY_MANALI: ['7617', 'Manali', 1, 2201, ['323', 'N']],
  CTY_MANA117: ['4994', 'Mananthavady', 1, 2202, ['341', 'N']],
  CTY_MNRG: ['7437', 'Manargudi', 1, 2203, ['323', 'N']],
  CTY_MNS: ['8297', 'Manasa', 1, 2204, ['320', '']],
  CTY_MANA_NB1: ['6396', 'Manauli', 1, 2205, ['320', 'N']],
  CTY_MANA_NB2: ['6397', 'Manauri Bazar', 1, 2206, ['326', 'N']],
  CTY_MANA_5438: ['7194', 'Manavadar', 1, 2207, ['338', 'N']],
  CTY_MANA_NB3: ['6398', 'Manavadar', 1, 2208, ['338', 'N']],
  CTY_MANA_NB4: ['6399', 'Manawala', 1, 2209, ['320', 'N']],
  CITY_Manc_8156: ['8343', 'Mancherial', 1, 2210, ['332', '']],
  CTY_MANC: ['5183', 'Mancherial', 1, 2211, ['352', 'N']],
  CTY_MAND_NB: ['6400', 'Mand', 1, 2212, ['320', 'N']],
  CTY_MAND_NB1: ['6401', 'Mandai Bujurg', 1, 2213, ['340', 'N']],
  CTY_MAND_NB2: ['6402', 'Mandai Khurd', 1, 2214, ['340', 'N']],
  CTY_MAND169: ['5184', 'Mandapeta', 1, 2215, ['332', 'N']],
  CTY_MAND: ['5201', 'Mandi', 1, 2216, ['331', 'N']],
  CTY_MAND97: ['4222', 'Mandi', 1, 2217, ['337', 'N']],
  CTY_MAND37: ['4742', 'Mandi Dabwali', 1, 2218, ['337', 'N']],
  CTY_MAND68: ['4852', 'Mandi Gobindgarh', 1, 2219, ['320', 'N']],
  CTY_MAND5310: ['5310', 'Mandideep', 1, 2220, ['340', 'N']],
  CTY_MAND98: ['4223', 'Mandla', 1, 2221, ['340', 'N']],
  CTY_MAND99: ['4224', 'Mandsaur', 1, 2222, ['340', 'N']],
  CTY_MAND30: ['4712', 'Mandvi', 1, 2223, ['338', 'N']],
  '4225': ['4225', 'Mandya', 1, 2224, ['349', 'N']],
  CTY_MANE: ['4657', 'Manendragarh', 1, 2225, ['347', 'N']],
  CTY_MANE_NB: ['6403', 'Manesar', 1, 2226, ['337', 'N']],
  CTY_MANG_NB: ['6404', 'Mangalagiri', 1, 2227, ['332', 'N']],
  CTY_MANG13: ['4643', 'Mangaldoi', 1, 2228, ['328', 'N']],
  CTY_MANG55: ['4789', 'Mangalore', 1, 2229, ['349', 'N']],
  CTY_MANG: ['7140', 'Mangalore Urban', 1, 2230, ['349', 'N']],
  CTY_MANG_NB1: ['6405', 'Mangalore-Urban', 1, 2231, ['349', 'N']],
  CTY_MANG_NB2: ['6406', 'Mangaon', 1, 2232, ['322', 'N']],
  CTY_MANG_NB3: ['6407', 'Mangarh', 1, 2233, ['326', 'N']],
  CTY_MANG_NB4: ['6408', 'Manglia', 1, 2234, ['340', 'N']],
  CTY_MANG_5437: ['7193', 'Mangrol', 1, 2235, ['338', 'N']],
  CTY_MANG_NB5: ['6409', 'Mangrol', 1, 2236, ['338', 'N']],
  CTY_MANKPUR: ['7602', 'Manikpur', 1, 2237, ['326', 'N']],
  CTY_MNG: ['7442', 'Maninagar', 1, 2238, ['338', 'N']],
  CTY_MANI: ['4790', 'Manipal', 1, 2239, ['349', 'N']],
  CTY_MANJL: ['7450', 'Manjalpur', 1, 2240, ['338', 'N']],
  CTY_MANJ_NB: ['6410', 'Manjari', 1, 2241, ['322', 'N']],
  CTY_MANJ: ['4995', 'Manjeri', 1, 2242, ['341', 'N']],
  CTY_MANJ_NB1: ['6411', 'Manjusar', 1, 2243, ['338', 'N']],
  CTY_MANK_NB: ['6412', 'Mankapur', 1, 2244, ['326', 'N']],
  CTY_MANK_NB1: ['6413', 'Manko', 1, 2245, ['320', 'N']],
  CTY_MANM: ['5083', 'Manmad', 1, 2246, ['322', 'N']],
  CTY_MANN_NB: ['6414', 'Mannarkkad', 1, 2247, ['341', 'N']],
  CTY_MANOR: ['7984', 'Manor', 1, 2248, ['322', 'Y']],
  CTY_MANP_NB: ['6415', 'Manpur', 1, 2249, ['326', 'N']],
  CTY_MANS: ['5196', 'Mansa', 1, 2250, ['320', 'N']],
  CTY_MANS11: ['4226', 'Mansa', 1, 2251, ['338', 'N']],
  CTY_MANT_NB: ['6416', 'Manthani', 1, 2252, ['352', 'N']],
  CITY_Mant_8204: ['8390', 'Manthani', 1, 2253, ['332', '']],
  CTY_MANVI: ['7575', 'Manvi', 1, 2254, ['349', 'N']],
  CTY_MAPU: ['4668', 'Mapusa', 1, 2255, ['348', 'N']],
  CTY_MARG_NB: ['6421', 'MarGOA', 1, 2256, ['348', 'N']],
  CTY_MARA_NB: ['6417', 'Maraimalai', 1, 2257, ['323', 'N']],
  CTY_MARA: ['7323', 'Marathalli', 1, 2258, ['349', 'N']],
  CTY_MARC_NB: ['6418', 'Marcel', 1, 2259, ['348', 'N']],
  CTY_MARC_NB1: ['6419', 'Marcela', 1, 2260, ['348', 'N']],
  CTY_MARD_NB: ['6420', 'Mardanpur', 1, 2261, ['326', 'N']],
  CTY_MARG: ['4669', 'Margao', 1, 2262, ['348', 'N']],
  CTY_MARGOA: ['7141', 'Margoa', 1, 2263, ['348', 'N']],
  CTY_MARI12: ['4227', 'Marigaon', 1, 2264, ['328', 'N']],
  CTY_MARK_NB: ['6422', 'Markapur', 1, 2265, ['332', 'N']],
  CTY_MAR: ['7453', 'Marol', 1, 2266, ['322', 'N']],
  CTY_MARO_NB: ['6423', 'Maroli', 1, 2267, ['338', 'N']],
  CTY_MART5335: ['5335', 'Marthandam', 1, 2268, ['323', 'N']],
  CTY_MSLNDPR: ['8087', 'Maslandapur', 1, 2269, ['334', 'N']],
  CTY_MATA_NB: ['6424', 'Matanhail', 1, 2270, ['337', 'N']],
  CTY_MATH13: ['4228', 'Mathura', 1, 2271, ['326', 'Y']],
  CTY_MATI_NB: ['6425', 'Matigara', 1, 2272, ['334', 'N']],
  CTY_MATR: ['7406', 'Matra', 1, 2273, ['338', 'N']],
  CTY_MTN: ['7364', 'Mattan', 1, 2274, ['339', 'N']],
  CTY_MATT_NB: ['6426', 'Mattannur', 1, 2275, ['341', 'N']],
  CTY_MATT: ['4996', 'Mattanur', 1, 2276, ['341', 'N']],
  'CTY_MAU 14': ['4229', 'Mau', 1, 2277, ['326', 'N']],
  CTY_MAU14: ['7176', 'Mau', 1, 2278, ['326', 'N']],
  CTY_MAUD_NB: ['6427', 'Maudaha', 1, 2279, ['326', 'N']],
  CTY_MAUN_NB: ['6428', 'Maunath Bhanjan', 1, 2280, ['326', 'N']],
  CTY_MAUR_NB: ['6429', 'Maur', 1, 2281, ['320', 'N']],
  CTY_MAUR69: ['4853', 'Maur Mandi', 1, 2282, ['320', 'N']],
  CTY_MAUR107: ['4952', 'Mauranipur', 1, 2283, ['326', 'N']],
  CTY_MAUR_NB1: ['6430', 'Maurmandi', 1, 2284, ['320', 'N']],
  CTY_MVL: ['8298', 'Maval', 1, 2285, ['322', '']],
  CTY_MAVE: ['4997', 'Mavelikara', 1, 2286, ['341', 'N']],
  CTY_MAVE_NB: ['6431', 'Mavelikkara', 1, 2287, ['341', 'N']],
  CTY_MAWA_NB: ['6432', 'Mawana', 1, 2288, ['326', 'N']],
  CTY_MAYPUR: ['7930', 'Mayapuri', 1, 2289, ['321', 'Y']],
  CTY_MAYI: ['4923', 'Mayiladuthurai', 1, 2290, ['323', 'N']],
  CTY_MAYI_NB: ['6433', 'Mayiladuthurai Town', 1, 2291, ['323', 'N']],
  CTY_MAYU15: ['4230', 'Mayurbhanj', 1, 2292, ['333', 'N']],
  CITY_Meda_8150: ['8338', 'Medak', 1, 2293, ['332', '']],
  CTY_MEDA16: ['4231', 'Medak', 1, 2294, ['352', '3']],
  CITY_Medc_8170: ['8356', 'Medchal', 1, 2295, ['332', '']],
  CTY_MEDC: ['5185', 'Medchal', 1, 2296, ['352', 'N']],
  CTY_MDKR: ['8299', 'Medikeri', 1, 2297, ['349', '']],
  CTY_MEDI5274: ['5274', 'Medinipur', 1, 2298, ['334', 'N']],
  CTY_MEER17: ['4232', 'Meerut', 1, 2299, ['326', 'N']],
  CTY_MEGH_NB: ['6434', 'Megh Chappar', 1, 2300, ['326', 'N']],
  CTY_MGN: ['7460', 'Meghnagar', 1, 2301, ['340', 'N']],
  CTY_MEHA99: ['4233', 'Meham', 1, 2302, ['337', 'N']],
  CTY_MEHA5383: ['5383', 'Mehatpur', 1, 2303, ['331', 'N']],
  CTY_MHTP: ['8300', 'Mehatpur', 1, 2304, ['332', '']],
  CTY_MEHB_NB: ['6435', 'Mehbubnagar', 1, 2305, ['352', 'N']],
  CITY_Mehb_8205: ['8391', 'Mehbubnagar', 1, 2306, ['332', '']],
  CTY_MEHD_NB: ['6436', 'Mehdoodan', 1, 2307, ['320', 'N']],
  CTY_MEHE_NB: ['6437', 'Meheli', 1, 2308, ['331', 'N']],
  CTY_MEHM_NB: ['6438', 'Mehma Singhwala', 1, 2309, ['320', 'N']],
  CTY_MEHS5389: ['5389', 'Mehsana', 1, 2310, ['338', 'N']],
  CTY_MEHT_NB: ['6439', 'Mehta', 1, 2311, ['320', 'N']],
  CTY_MEMA_NB: ['6440', 'Memadpur', 1, 2312, ['338', 'N']],
  CTY_MEMA_NB1: ['6441', 'Memari', 1, 2313, ['334', 'N']],
  CTY_MEMA_NB2: ['6442', 'Memaura', 1, 2314, ['326', 'N']],
  CTY_MEMN_NB: ['6443', 'Memnagar', 1, 2315, ['338', 'N']],
  CTY_MENDPTHR: ['8081', 'Mendhipathar', 1, 2316, ['350', 'N']],
  CTY_MEND_NB: ['6444', 'Mendra Kalan', 1, 2317, ['347', 'N']],
  CTY_MERA_NB: ['6445', 'Meramandali', 1, 2318, ['333', 'N']],
  CTY_MERT5433: ['5433', 'Merta City', 1, 2319, ['345', 'N']],
  CTY_METO_NB: ['6446', 'Metoda', 1, 2320, ['338', 'N']],
  CTY_METP_NB: ['6447', 'Metpalle', 1, 2321, ['352', 'N']],
  CITY_Metp_8206: ['8392', 'Metpalle', 1, 2322, ['332', '']],
  CTY_METT: ['4924', 'Mettupalayam', 1, 2323, ['323', 'N']],
  CTY_METT_NB: ['6448', 'Mettur', 1, 2324, ['323', 'N']],
  CTY_METT5370: ['5370', 'Mettur Dam', 1, 2325, ['323', 'N']],
  CTY_MWT: ['7395', 'Mewat', 1, 2326, ['337', 'Y']],
  CTY_MHOW: ['5041', 'Mhow', 1, 2327, ['340', 'N']],
  CTY_MIAN_NB: ['6449', 'Miani Khas', 1, 2328, ['320', 'N']],
  CTY_MIDN: ['4984', 'Midnapore', 1, 2329, ['334', 'N']],
  CTY_MILK_NB: ['6450', 'Milkipur', 1, 2330, ['326', 'N']],
  CTY_MIRA5305: ['5305', 'Mira Road', 1, 2331, ['322', 'Y']],
  CTY_MRBHYNDR: ['7985', 'Mira-Bhayandar', 1, 2332, ['322', 'Y']],
  CTY_MIRA5390: ['5390', 'Miraj', 1, 2333, ['322', 'N']],
  CTY_MIRA_NB: ['6451', 'Miran Kot Kalan', 1, 2334, ['320', 'N']],
  CTY_MIRG_NB: ['6452', 'Mirganj', 1, 2335, ['327', 'N']],
  CTY_MRPRTRK: ['7931', 'Mirpur Turk', 1, 2336, ['321', 'Y']],
  CTY_MRYG: ['8301', 'Miryalaguda', 1, 2337, ['332', '']],
  CITY_Miry_8159: ['8346', 'Miryalguda', 1, 2338, ['332', '']],
  CTY_MIRY: ['5186', 'Miryalguda', 1, 2339, ['352', 'N']],
  CTY_MIRZ18: ['4234', 'Mirzapur', 1, 2340, ['326', 'N']],
  CTY_MITH: ['4714', 'Mithapur', 1, 2341, ['338', 'N']],
  CTY_MTHPUR: ['7932', 'Mithe Pur', 1, 2342, ['321', 'Y']],
  CTY_MITH_NB: ['6453', 'Mithi Rohar', 1, 2343, ['338', 'N']],
  CTY_MODA: ['4715', 'Modasa', 1, 2344, ['338', 'N']],
  CTY_MODI5429: ['5429', 'Modinagar', 1, 2345, ['326', 'Y']],
  CTY_MOGA19: ['4235', 'Moga', 1, 2346, ['320', 'N']],
  CTY_MOGR_NB: ['6454', 'Mogra Badshahpur', 1, 2347, ['326', 'N']],
  CTY_MOHA: ['5199', 'Mohali', 1, 2348, ['344', 'N']],
  CTY_MOHA15: ['4236', 'Mohali', 1, 2349, ['320', 'N']],
  CTY_MOHA_NB: ['6455', 'Mohali Sas Nagar', 1, 2350, ['320', 'N']],
  CTY_MOHA_NB1: ['6456', 'Mohammadabad', 1, 2351, ['326', 'N']],
  CTY_MOHA_NB2: ['6457', 'Mohammadi', 1, 2352, ['326', 'N']],
  CTY_MOHAN: ['7599', 'Mohan', 1, 2353, ['326', 'N']],
  CTY_MOHA_NB3: ['6458', 'Mohania', 1, 2354, ['327', 'N']],
  CTY_MOHA_NB4: ['6459', 'Mohanlalganj', 1, 2355, ['326', 'N']],
  CTY_MOHONE: ['7986', 'Mohone', 1, 2356, ['322', 'Y']],
  CTY_MOKA13: ['7238', 'Mokama', 1, 2357, ['327', 'N']],
  CTY_Moka_7542: ['7202', 'Mokama', 1, 2358, ['327', 'N']],
  CTY_MOKA_NB: ['6460', 'Mokameh', 1, 2359, ['327', 'N']],
  CTY_MOKA_NB1: ['6461', 'Mokandpur', 1, 2360, ['320', 'N']],
  CTY_MOKO16: ['4237', 'Mokokchung', 1, 2361, ['342', 'N']],
  CTY_MLRBAND: ['7933', 'Molar Band', 1, 2362, ['321', 'Y']],
  'CTY_MON 17': ['4238', 'Mon', 1, 2363, ['342', 'N']],
  CTY_MON17: ['7174', 'Mon', 1, 2364, ['342', 'N']],
  CTY_MOOM_NB: ['6462', 'Moom', 1, 2365, ['320', 'N']],
  CTY_MOON_NB: ['6463', 'Moonak', 1, 2366, ['320', 'N']],
  CTY_MOOT5421: ['5421', 'Moothakunnam', 1, 2367, ['341', 'N']],
  CTY_MORA18: ['4239', 'Moradabad', 1, 2368, ['326', 'N']],
  CTY_MORA_NB: ['6464', 'Moran', 1, 2369, ['328', 'N']],
  CTY_MORA_NB1: ['6465', 'Moranwali', 1, 2370, ['320', 'N']],
  CTY_MORB: ['4716', 'Morbi', 1, 2371, ['338', 'N']],
  CTY_MORE19: ['4240', 'Morena', 1, 2372, ['340', 'N']],
  CTY_MORI: ['4854', 'Morinda', 1, 2373, ['320', 'N']],
  CTY_MORM_NB: ['6466', 'MormuGOA', 1, 2374, ['348', 'N']],
  CTY_MORM: ['7142', 'Mormugoa', 1, 2375, ['348', 'N']],
  CTY_MORV_NB: ['6467', 'Morvi', 1, 2376, ['338', 'N']],
  CTY_MOTA_NB1: ['6469', 'Mota', 1, 2377, ['338', 'N']],
  CTY_MOTA_NB: ['6468', 'Mota Mava', 1, 2378, ['338', 'N']],
  CTY_MOTA_NB2: ['6470', 'Motala', 1, 2379, ['322', 'N']],
  CTY_MTTBLA: ['8097', 'Motatimbla', 1, 2380, ['338', 'N']],
  CTY_MOTE_NB: ['6471', 'Moteeram Adda', 1, 2381, ['326', 'N']],
  CTY_MOTI: ['4648', 'Motihari', 1, 2382, ['327', 'N']],
  CTY_MUBA_NB: ['6472', 'Mubarakpur', 1, 2383, ['326', 'N']],
  CTY_MUDB_NB: ['6473', 'Mudbidri', 1, 2384, ['349', 'N']],
  CTY_MUDEBHAL: ['7579', 'Muddebihal', 1, 2385, ['349', 'N']],
  CTY_MUDH_NB: ['6474', 'Mudhal', 1, 2386, ['320', 'N']],
  CTY_MUDH: ['4791', 'Mudhol', 1, 2387, ['349', 'N']],
  CTY_MUDK_NB: ['6475', 'Mudki', 1, 2388, ['320', 'N']],
  CTY_MUGH_NB: ['6476', 'Mughalsarai', 1, 2389, ['326', 'N']],
  CTY_MUGMA: ['7585', 'Mugma', 1, 2390, ['318', 'N']],
  CTY_MUGP_NB: ['6477', 'Mugpal', 1, 2391, ['352', 'N']],
  CITY_Mugp_8207: ['8393', 'Mugpal', 1, 2392, ['332', '']],
  CTY_MUHA_NB: ['6478', 'Muhammadabad', 1, 2393, ['326', 'N']],
  CTY_MUKE: ['4855', 'Mukerian', 1, 2394, ['320', 'N']],
  CTY_MUKD: ['7385', 'Mukhed', 1, 2395, ['322', 'N']],
  CTY_MUKT20: ['4241', 'Muktsar', 1, 2396, ['320', 'N']],
  CTY_MUL_NB: ['6479', 'Mul', 1, 2397, ['322', 'N']],
  CTY_MULB: ['7313', 'Mulbagal', 1, 2398, ['349', 'N']],
  CTY_MULK: ['4792', 'Mulki', 1, 2399, ['349', 'N']],
  CTY_MULL_NB: ['6480', 'Mullana', 1, 2400, ['337', 'N']],
  CTY_MULL: ['4856', 'Mullanpur', 1, 2401, ['320', 'N']],
  CTY_MULL_NB1: ['6481', 'Mullanpur Dakha', 1, 2402, ['320', 'N']],
  CTY_MULL_NB2: ['6482', 'Mullanpur Garibadas', 1, 2403, ['320', 'N']],
  CTY_MUMB21: ['4242', 'Mumbai', 1, 2404, ['322', 'Y']],
  CTY_MUMB_NB: ['6483', 'Mumbra', 1, 2405, ['322', 'Y']],
  CTY_MUNA_NB: ['6484', 'Munak', 1, 2406, ['337', 'N']],
  CTY_MUND_NB: ['6485', 'Munda', 1, 2407, ['345', 'N']],
  CTY_MUND_NB1: ['6486', 'Mundali', 1, 2408, ['333', 'N']],
  CTY_MUNDRGI: ['7563', 'Mundargi', 1, 2409, ['349', 'N']],
  CTY_MUNDKA: ['7934', 'Mundka', 1, 2410, ['321', 'Y']],
  CTY_MUND: ['4717', 'Mundra', 1, 2411, ['338', 'N']],
  CTY_MUNG_NB: ['6487', 'Mungeli', 1, 2412, ['347', 'N']],
  CTY_MUNG22: ['4243', 'Munger', 1, 2413, ['327', 'N']],
  CTY_MUNP_NB: ['6488', 'Munpalle', 1, 2414, ['352', 'N']],
  CITY_Munp_8208: ['8394', 'Munpalle', 1, 2415, ['332', '']],
  CTY_MURA_NB: ['6489', 'Muradabad', 1, 2416, ['340', 'N']],
  CTY_MURA_NB1: ['6490', 'Muradnagar', 1, 2417, ['326', 'Y']],
  CTY_MURBD: ['7987', 'Murbad', 1, 2418, ['322', 'Y']],
  CTY_MURG_NB: ['6491', 'Murgud', 1, 2419, ['322', 'N']],
  CTY_MURS23: ['4244', 'Murshidabad', 1, 2420, ['334', 'N']],
  CTY_MURT_NB: ['6492', 'Murtijapur', 1, 2421, ['322', 'N']],
  CTY_MURUD: ['7610', 'Murud', 1, 2422, ['322', 'N']],
  CTY_MUSCAT: ['2', 'Muscat', 1, 2423, ['2', 'N']],
  CTY_MUSS_NB: ['6493', 'Mussoorie', 1, 2424, ['316', 'N']],
  CTY_MUST_NB: ['6494', 'Mustafabad', 1, 2425, ['337', 'N']],
  CTY_MSTFBAD: ['7935', 'Mustafabad, Delhi', 1, 2426, ['321', 'Y']],
  CTY_MUVA: ['4998', 'Muvattupuzha', 1, 2427, ['341', 'N']],
  CTY_MUZA24: ['4245', 'Muzaffarnagar', 1, 2428, ['326', 'N']],
  CTY_MUZA25: ['4246', 'Muzaffarpur', 1, 2429, ['327', 'N']],
  CTY_MUZZ_NB: ['6495', 'Muzzafar Nagar', 1, 2430, ['326', 'N']],
  CTY_MYSO26: ['4247', 'Mysore', 1, 2431, ['349', 'N']],
  'CTY_N.PA': ['4999', 'N.Paravur', 1, 2432, ['341', 'N']],
  CTY_NEYY_NB: ['6554', 'NEYYATTINKARA', 1, 2433, ['341', 'N']],
  CTY_NOIDA: ['8010', 'NOIDA', 1, 2434, ['326', 'Y']],
  CTY_NABA_NB: ['6496', 'Nabadwip', 1, 2435, ['334', 'N']],
  CTY_NABA27: ['4248', 'Nabarangapur', 1, 2436, ['333', 'N']],
  CTY_NABH: ['4857', 'Nabha', 1, 2437, ['320', 'N']],
  CTY_NADA_NB: ['6497', 'Nadala', 1, 2438, ['320', 'N']],
  CTY_NADA_NB1: ['6498', 'Nadapuram', 1, 2439, ['341', 'N']],
  CTY_NADA_NB2: ['6499', 'Nadaun', 1, 2440, ['331', 'N']],
  CTY_NADA: ['5000', 'Nadavaramba P.O', 1, 2441, ['341', 'N']],
  CTY_NADE_NB: ['6500', 'Nadepalle', 1, 2442, ['352', 'N']],
  CITY_Nade_8209: ['8395', 'Nadepalle', 1, 2443, ['332', '']],
  CTY_NADI28: ['4249', 'Nadia', 1, 2444, ['334', 'N']],
  CTY_NADI: ['4718', 'Nadiad', 1, 2445, ['338', 'N']],
  CTY_NGMG: ['8303', 'Nagamangala', 1, 2446, ['349', '']],
  CTY_NAGA29: ['4250', 'Nagaon', 1, 2447, ['328', 'N']],
  CTY_NAGA30: ['4251', 'Nagapattinam', 1, 2448, ['323', 'N']],
  CTY_NAGA31: ['4252', 'Nagaur', 1, 2449, ['345', 'N']],
  CTY_NAGD_NB: ['6501', 'Nagda', 1, 2450, ['340', 'N']],
  CTY_NAGD_NB1: ['6502', 'Nagdhara', 1, 2451, ['338', 'N']],
  CTY_NAGE: ['4925', 'Nagercoil', 1, 2452, ['323', 'N']],
  CTY_NAGI_NB: ['6503', 'Nagina', 1, 2453, ['326', 'N']],
  CTY_NAGP32: ['4253', 'Nagpur', 1, 2454, ['322', 'N']],
  CTY_NAGR_NB: ['6504', 'Nagrota Bagwan', 1, 2455, ['331', 'N']],
  CTY_NAHA5405: ['5405', 'Nahan', 1, 2456, ['331', 'N']],
  CTY_NAHA5388: ['5388', 'Naharlagun', 1, 2457, ['335', 'N']],
  CTY_NAHA_NB1: ['6506', 'Naharpur', 1, 2458, ['337', 'N']],
  CTY_NAHA_NB: ['6505', 'Naharpur Kasan', 1, 2459, ['337', 'Y']],
  CTY_NAHUR: ['7988', 'Nahur', 1, 2460, ['322', 'Y']],
  CTY_NAIH_NB: ['6507', 'Naihati', 1, 2461, ['334', 'N']],
  CTY_NAIN33: ['4254', 'Nainital', 1, 2462, ['316', 'N']],
  CTY_NAIS_NB: ['6508', 'Naisi', 1, 2463, ['337', 'N']],
  CTY_NJG: ['7434', 'Najafgarh', 1, 2464, ['321', 'Y']],
  CTY_NAJI_NB: ['6509', 'Najibabad', 1, 2465, ['326', 'N']],
  CTY_NAKA_NB: ['6510', 'Nakatrana', 1, 2466, ['338', 'N']],
  CTY_NAKO: ['4858', 'Nakodar', 1, 2467, ['320', 'N']],
  CTY_NAKR_NB: ['6511', 'Nakrekal', 1, 2468, ['352', 'N']],
  CITY_Nakr_8210: ['8396', 'Nakrekal', 1, 2469, ['332', '']],
  CTY_NALA: ['4755', 'Nalagarh', 1, 2470, ['331', 'N']],
  CTY_NALA34: ['4255', 'Nalanda', 1, 2471, ['327', 'N']],
  CTY_NALB35: ['4256', 'Nalbari', 1, 2472, ['328', 'N']],
  CTY_NALG36: ['4257', 'Nalgonda', 1, 2473, ['352', '3']],
  CITY_Nalg_8154: ['8341', 'Nalgonda', 1, 2474, ['332', '']],
  CTY_NALL: ['7143', 'Nallasopara', 1, 2475, ['322', 'Y']],
  CTY_NALL5430: ['5430', 'Nallasopara- West', 1, 2476, ['322', 'Y']],
  CTY_NAMA37: ['4258', 'Namakkal', 1, 2477, ['323', 'N']],
  CTY_NAMC_7148: ['7237', 'Namchi', 1, 2478, ['351', 'N']],
  CTY_NAMC_NB: ['6512', 'Namchi', 1, 2479, ['351', 'N']],
  CTY_NAMP_NB: ['6513', 'Nampur', 1, 2480, ['322', 'N']],
  CTY_NAMS: ['4631', 'Namsai', 1, 2481, ['335', 'N']],
  CTY_NANA_NB: ['6514', 'Nanaksar Kaleran', 1, 2482, ['320', 'N']],
  CTY_NAND38: ['4259', 'Nanded', 1, 2483, ['322', 'N']],
  CTY_NAND_NB: ['6515', 'Nandgaon', 1, 2484, ['322', 'N']],
  CTY_NAND_NB1: ['6516', 'Nandura', 1, 2485, ['322', 'N']],
  CTY_NAND39: ['4260', 'Nandurbar', 1, 2486, ['322', 'N']],
  CTY_NAND23: ['4487', 'Nandyal', 1, 2487, ['332', 'N']],
  CTY_NANG5321: ['5321', 'Nangal', 1, 2488, ['320', 'N']],
  CTY_NAGLDWT: ['7936', 'Nangal Dewat', 1, 2489, ['321', 'Y']],
  CTY_NANG_NB: ['6517', 'Nangal Kalan', 1, 2490, ['331', 'N']],
  CTY_NANG_NB1: ['6518', 'Nangal Kheri', 1, 2491, ['337', 'N']],
  CTY_NAGLTHKRN: ['7937', 'Nangal Thakran', 1, 2492, ['321', 'Y']],
  CTY_NGLJAT: ['7938', 'Nangloi Jat', 1, 2493, ['321', 'Y']],
  CTY_NANJ: ['4793', 'Nanjangud', 1, 2494, ['349', 'N']],
  CTY_NANP_NB: ['6519', 'Nanpara', 1, 2495, ['326', 'N']],
  CTY_NPRA: ['8085', 'Napara', 1, 2496, ['328', 'N']],
  CTY_NARAINA: ['7939', 'Naraina', 1, 2497, ['321', 'Y']],
  CTY_NARA40: ['4261', 'Naraingarh', 1, 2498, ['337', 'N']],
  CTY_NAR_PURAM: ['7634', 'Naranapuram', 1, 2499, ['323', 'N']],
  CTY_NARA_NB: ['6520', 'Narasampet', 1, 2500, ['352', 'N']],
  CITY_Nara_8211: ['8397', 'Narasampet', 1, 2501, ['332', '']],
  CTY_NARA_NB1: ['6521', 'Narasapur', 1, 2502, ['332', 'N']],
  CTY_NARA170: ['5187', 'Narasaraopet', 1, 2503, ['332', 'N']],
  CTY_NARA_NB2: ['6522', 'Narasaraopeta', 1, 2504, ['332', 'N']],
  CTY_NARA_SIN_PRM: ['7642', 'Narasingapuram', 1, 2505, ['323', 'N']],
  CTY_NARA145: ['5084', 'Narayangaon', 1, 2506, ['322', 'N']],
  CTY_NARA_NB3: ['6523', 'Narayanpet', 1, 2507, ['352', 'N']],
  CITY_Nara_8212: ['8398', 'Narayanpet', 1, 2508, ['332', '']],
  CTY_NARA5255: ['5255', 'Narayanpur', 1, 2509, ['347', 'N']],
  CTY_NARA41: ['4262', 'Narayanpur', 1, 2510, ['327', 'N']],
  CTY_NARE_NB: ['6524', 'Nareda', 1, 2511, ['345', 'N']],
  CTY_NARGAL: ['7558', 'Naregal', 1, 2512, ['349', 'N']],
  CTY_NARM42: ['4263', 'Narmada', 1, 2513, ['338', 'N']],
  CTY_NARN43: ['4264', 'Narnaud', 1, 2514, ['337', 'N']],
  CTY_NARN5326: ['5326', 'Narnaul', 1, 2515, ['337', 'N']],
  CTY_NARN_NB: ['6525', 'Narnaund', 1, 2516, ['337', 'N']],
  CITY_Nars_8169: ['8355', 'Narsampet', 1, 2517, ['332', '']],
  CTY_NARS171: ['5188', 'Narsampet', 1, 2518, ['352', 'N']],
  CTY_NARS172: ['5189', 'Narsapur', 1, 2519, ['332', 'N']],
  CTY_NARS_NB: ['6526', 'Narsapura', 1, 2520, ['349', 'N']],
  CTY_NARS44: ['4265', 'Narsinghpur', 1, 2521, ['337', 'N']],
  CTY_NARS: ['5207', 'Narsinghpur', 1, 2522, ['340', 'N']],
  CTY_NARS_NB1: ['6527', 'Narsipatnam', 1, 2523, ['332', 'N']],
  CTY_NARU_NB: ['6528', 'Narugram', 1, 2524, ['334', 'N']],
  CTY_NARW_NB: ['6529', 'Narwana', 1, 2525, ['337', 'N']],
  CTY_NASH45: ['4266', 'Nashik', 1, 2526, ['322', 'N']],
  CTY_NASI146: ['5085', 'Nasik', 1, 2527, ['322', 'N']],
  CTY_NASI83: ['4902', 'Nasirabad', 1, 2528, ['345', 'N']],
  CTY_NTP: ['7386', 'Natepute', 1, 2529, ['322', 'N']],
  CTY_NATG_NB: ['6530', 'Natgram', 1, 2530, ['334', 'N']],
  CTY_NATH_NB: ['6531', 'Nathana', 1, 2531, ['320', 'N']],
  CTY_NATH: ['4903', 'Nathdwara', 1, 2532, ['345', 'N']],
  CTY_NAT_SAN_TAI: ['7625', 'Nattarasankottai', 1, 2533, ['323', 'N']],
  CTY_NAUG_NB: ['6532', 'Naugachhia', 1, 2534, ['327', 'N']],
  CTY_NAUG_NB1: ['6533', 'Naugarh', 1, 2535, ['326', 'N']],
  CTY_NAUR_NB: ['6534', 'Naura', 1, 2536, ['320', 'N']],
  CTY_NAUS_NB2: ['6537', 'Naushera', 1, 2537, ['320', 'N']],
  CTY_NAUS_NB: ['6535', 'Naushera Maja Singh', 1, 2538, ['320', 'N']],
  CTY_NAUS_NB1: ['6536', 'Naushera Pannuan', 1, 2539, ['320', 'N']],
  CTY_NAUT_NB: ['6538', 'Nautanwa', 1, 2540, ['326', 'N']],
  CTY_NAVLGND: ['7569', 'Navalgund', 1, 2541, ['349', 'N']],
  CTY_NAVE_NB: ['6539', 'Navelim', 1, 2542, ['348', 'N']],
  CTY_NAVI46: ['4267', 'Navi Mumbai', 1, 2543, ['322', 'Y']],
  CTY_NAVS47: ['4268', 'Navsari', 1, 2544, ['338', 'N']],
  CTY_NAWA_NB: ['6540', 'Nawabganj', 1, 2545, ['326', 'N']],
  CTY_NAWA48: ['4269', 'Nawada', 1, 2546, ['327', 'N']],
  CTY_NAWA_NB1: ['6541', 'Nawagarh', 1, 2547, ['347', 'N']],
  CTY_NAWA_NB2: ['6542', 'Nawalgarh', 1, 2548, ['345', 'N']],
  CTY_NAWA_NB3: ['6543', 'Nawan Pind', 1, 2549, ['320', 'N']],
  CTY_NAWA_NB4: ['6544', 'Nawanagar', 1, 2550, ['347', 'N']],
  CTY_NAWA_NB5: ['6545', 'Nawanshahar', 1, 2551, ['320', 'N']],
  CTY_NAWA49: ['4270', 'Nawanshahr', 1, 2552, ['320', 'N']],
  CTY_NAWA_NB6: ['6546', 'Nawapur', 1, 2553, ['322', 'N']],
  CTY_NAYA: ['4859', 'Naya Nangal', 1, 2554, ['320', 'N']],
  CTY_NAYA50: ['4271', 'Nayagarh', 1, 2555, ['333', 'N']],
  CTY_NZRA: ['8084', 'Nazira', 1, 2556, ['328', 'N']],
  CTY_NEDU: ['5001', 'Nedumangad', 1, 2557, ['341', 'N']],
  CTY_NEEL_NB: ['6547', 'Neelapalle', 1, 2558, ['332', 'N']],
  CTY_NEEM5387: ['5387', 'Neem Ka Thana', 1, 2559, ['345', 'N']],
  CTY_NEEM_NB: ['6548', 'Neem ka Thana', 1, 2560, ['345', 'N']],
  CTY_NEEM_NB1: ['6549', 'Neemrana', 1, 2561, ['345', 'N']],
  CTY_NEEM51: ['4272', 'Neemuch', 1, 2562, ['340', 'N']],
  CTY_NELL52: ['4273', 'Nellore', 1, 2563, ['332', '0']],
  CTY_NER_NB: ['6550', 'Ner', 1, 2564, ['331', 'N']],
  CTY_NERA_NB: ['6551', 'Neral', 1, 2565, ['322', 'Y']],
  CTY_NERKPPAI: ['7620', 'Nerkuppai', 1, 2566, ['323', 'N']],
  CTY_NERUL: ['7989', 'Nerul', 1, 2567, ['322', 'Y']],
  CTY_NESA_NB: ['6552', 'Nesargi', 1, 2568, ['349', 'N']],
  CTY_NETR_NB: ['6553', 'Netramali', 1, 2569, ['338', 'N']],
  CTY_NETT5384: ['5384', 'Nettoor', 1, 2570, ['341', 'N']],
  CTY_NEW53: ['4274', 'New Delhi', 1, 2571, ['321', '1']],
  CTY_NDMC: ['7940', 'New Delhi Municipal Council', 1, 2572, ['321', 'Y']],
  CTY_NEWA5330: ['5330', 'Newai', 1, 2573, ['345', 'N']],
  CTY_NEYV: ['4926', 'Neyveli', 1, 2574, ['323', 'N']],
  CTY_NEYY: ['5002', 'Neyyattinkara', 1, 2575, ['341', 'N']],
  CTY_NHAV_NB: ['6555', 'Nhava Sheva', 1, 2576, ['322', 'Y']],
  CTY_NICO54: ['4275', 'Nicobar', 1, 2577, ['325', 'N']],
  CTY_NIDA_NB: ['6556', 'Nidadavole', 1, 2578, ['332', 'N']],
  CTY_NIDH_NB: ['6557', 'Nidhipur', 1, 2579, ['333', 'N']],
  CTY_NIGD_NB: ['6558', 'Nigdi', 1, 2580, ['322', 'N']],
  CTY_NIGH_NB: ['6559', 'Nighoje', 1, 2581, ['322', 'N']],
  CTY_NIHA: ['4860', 'Nihal Singh Wala', 1, 2582, ['320', 'N']],
  CTY_NIHA_NB: ['6560', 'Nihalsingh Wala', 1, 2583, ['320', 'N']],
  CTY_NILA: ['5003', 'Nilambur', 1, 2584, ['341', 'N']],
  CTY_NLG: ['7390', 'Nilanga', 1, 2585, ['322', 'N']],
  CTY_NILG55: ['4276', 'Nilgiris', 1, 2586, ['323', 'N']],
  CTY_NILO_NB: ['6561', 'Nilokheri', 1, 2587, ['337', 'N']],
  CTY_NIMA_NB: ['6562', 'Nimapara', 1, 2588, ['333', 'N']],
  CTY_NIMB5411: ['5411', 'Nimbahera', 1, 2589, ['345', 'N']],
  CTY_NIME_NB: ['6563', 'Nimetha', 1, 2590, ['338', 'N']],
  CTY_NPN: ['8304', 'Nipani', 1, 2591, ['349', '']],
  CTY_NIPH_NB: ['6564', 'Niphad', 1, 2592, ['322', 'N']],
  CTY_NIPP_NB: ['6565', 'Nippani', 1, 2593, ['349', 'N']],
  CTY_NIRA: ['5086', 'Nira', 1, 2594, ['322', 'N']],
  CITY_Nirm_8176: ['8362', 'Nirmal', 1, 2595, ['332', '']],
  CTY_NIRM: ['4594', 'Nirmal', 1, 2596, ['352', 'N']],
  CTY_NIRM_NB: ['6566', 'Nirmali', 1, 2597, ['327', 'N']],
  CTY_NISA_NB: ['6567', 'Nisaraya', 1, 2598, ['338', 'N']],
  CTY_NISS_NB: ['6568', 'Nissing', 1, 2599, ['337', 'N']],
  CTY_NIVALI: ['8096', 'Nivali', 1, 2600, ['340', 'N']],
  CTY_NIWA_NB: ['6569', 'Niwai', 1, 2601, ['345', 'N']],
  CTY_NWARI: ['8009', 'Niwari', 1, 2602, ['326', 'Y']],
  CTY_NIWA_NB1: ['6570', 'Niwaroo', 1, 2603, ['345', 'N']],
  CTY_NIZA56: ['4277', 'Nizamabad', 1, 2604, ['352', '3']],
  CITY_Niza_8145: ['8334', 'Nizamabad', 1, 2605, ['332', '']],
  CTY_NHR: ['8453', 'Nohar', 1, 2606, ['345', '']],
  CTY_NOID67: ['4288', 'Noida', 1, 2607, ['326', 'Y']],
  CTY_NOKH: ['4904', 'Nokha', 1, 2608, ['345', 'N']],
  CTY_NONG_NB: ['6571', 'Nongpoh', 1, 2609, ['350', 'N']],
  CTY_NONG_NB1: ['6572', 'Nongstoin', 1, 2610, ['350', 'N']],
  CTY_NOON_NB: ['6573', 'Noonmati', 1, 2611, ['328', 'N']],
  CTY_NORP: ['7423', 'Noorpur', 1, 2612, ['331', 'N']],
  CTY_NORT57: ['4278', 'North 24 Parganas', 1, 2613, ['334', 'N']],
  CTY_NORT58: ['4279', 'North And Middle Andaman', 1, 2614, ['325', 'N']],
  CTY_NORT59: ['4280', 'North Cachar Hills', 1, 2615, ['328', 'N']],
  CTY_NORT60: ['4281', 'North Delhi', 1, 2616, ['321', '1']],
  CTY_NORT61: ['4282', 'North Dinajpur', 1, 2617, ['334', 'N']],
  CTY_NORT_NB: ['6574', 'North Dumdum', 1, 2618, ['334', 'N']],
  CTY_NORT5251: ['5251', 'North East Delhi', 1, 2619, ['321', 'Y']],
  CTY_NORT62: ['4283', 'North Goa', 1, 2620, ['348', 'N']],
  CTY_NORT_NB1: ['6575', 'North Guwahati', 1, 2621, ['328', 'N']],
  CTY_NORT: ['4644', 'North Lakhimpur', 1, 2622, ['328', 'N']],
  CTY_NORT63: ['4284', 'North Sikkim', 1, 2623, ['351', 'N']],
  CTY_NORT64: ['4285', 'North Tripura', 1, 2624, ['330', 'N']],
  CTY_NORT65: ['4286', 'North West Delhi', 1, 2625, ['321', '1']],
  CTY_NOWG_NB: ['6576', 'Nowgong', 1, 2626, ['340', 'N']],
  CTY_NUAP66: ['4287', 'Nuapada', 1, 2627, ['333', 'N']],
  CTY_NUH_NB: ['6577', 'Nuh', 1, 2628, ['337', 'Y']],
  CTY_NUMA_NB: ['6578', 'Numaligarh', 1, 2629, ['328', 'N']],
  CTY_NUNA_NB: ['6579', 'Nuna Majra', 1, 2630, ['337', 'N']],
  CTY_NURM: ['4861', 'Nurmahal', 1, 2631, ['320', 'N']],
  CTY_NURP_NB: ['6580', 'Nurpur Bedi', 1, 2632, ['320', 'N']],
  CTY_NUVE_NB: ['6581', 'Nuvem', 1, 2633, ['348', 'N']],
  CTY_NUZV5427: ['5427', 'Nuzvid', 1, 2634, ['332', 'N']],
  CTY_OBRA_NB: ['6582', 'Obra', 1, 2635, ['326', 'N']],
  CTY_ODDA_NB: ['6583', 'Oddanchatram', 1, 2636, ['323', 'N']],
  CTY_ODWA_NB: ['6584', 'Odwara', 1, 2637, ['326', 'N']],
  CTY_OLDG_NB: ['6585', 'Old GOA', 1, 2638, ['348', 'N']],
  CTY_OLDG: ['7144', 'Old Goa', 1, 2639, ['348', 'N']],
  CTY_KNSARD: ['8261', 'Old Kanksa Road', 1, 2640, ['334', '']],
  CTY_ONGO: ['4595', 'Ongole', 1, 2641, ['332', 'N']],
  CTY_OOTY: ['4927', 'Ooty', 1, 2642, ['323', 'N']],
  'CTY_OPP 5292': ['5292', 'Opp R K Marble Hazaribagh', 1, 2643, ['318', 'N']],
  CTY_OPP5292: ['7181', 'Opp R K Marble Hazaribagh', 1, 2644, ['318', 'N']],
  CTY_ORAG_NB: ['6586', 'Oragadam', 1, 2645, ['323', 'N']],
  CTY_ORAI: ['4954', 'Orai', 1, 2646, ['326', 'N']],
  CTY_ORAS: ['7611', 'Oras', 1, 2647, ['322', 'N']],
  CTY_ORAV_NB: ['6587', 'Oravackal', 1, 2648, ['341', 'N']],
  CTY_OSMA68: ['4289', 'Osmanabad', 1, 2649, ['322', 'N']],
  CTY_OTHI_NB: ['6588', 'Othian', 1, 2650, ['320', 'N']],
  CTY_OTTA: ['5004', 'Ottapalam', 1, 2651, ['341', 'N']],
  CTY_OZAR_NB: ['6589', 'Ozar', 1, 2652, ['322', 'N']],
  CTY_PALK: ['7326', 'PALASA KASIBUGGA', 1, 2653, ['332', 'N']],
  CTY_PLKWA: ['8259', 'PILKHUWA', 1, 2654, ['326', '']],
  CTY_PNMV: ['8307', 'PONNAMARAVATHY', 1, 2655, ['323', '']],
  CTY_PACH_NB: ['6590', 'Pachaat', 1, 2656, ['320', 'N']],
  CTY_PACH_NB1: ['6591', 'Pachchunur', 1, 2657, ['352', 'N']],
  CITY_Pach_8213: ['8399', 'Pachchunur', 1, 2658, ['332', '']],
  CTY_PACH: ['5087', 'Pachora', 1, 2659, ['322', 'N']],
  CTY_PDGHA: ['7990', 'Padagha', 1, 2660, ['322', 'Y']],
  CTY_PADI_VEEDU: ['7654', 'Padaiveedu', 1, 2661, ['323', 'N']],
  CTY_PADA_NB: ['6592', 'Padampur', 1, 2662, ['345', 'N']],
  CTY_PADD_NB: ['6593', 'Paddi Jagir', 1, 2663, ['320', 'N']],
  CTY_PDMPR: ['7481', 'Padmapur', 1, 2664, ['333', 'N']],
  CTY_PADR31: ['4719', 'Padra', 1, 2665, ['338', 'N']],
  CTY_PADR108: ['4955', 'Padrauna', 1, 2666, ['326', 'N']],
  CTY_PAI_NB: ['6594', 'Pai', 1, 2667, ['337', 'N']],
  CTY_PAIT_NB: ['6595', 'Paithan', 1, 2668, ['322', 'N']],
  CTY_PAKH_NB: ['6596', 'Pakharpur', 1, 2669, ['320', 'N']],
  CTY_PAKR_NB: ['6597', 'Pakri Baramad Deobari', 1, 2670, ['326', 'N']],
  CTY_PAKU69: ['4290', 'Pakur', 1, 2671, ['318', 'N']],
  CTY_PALA118: ['5005', 'Pala', 1, 2672, ['341', 'N']],
  CTY_PALA_NB: ['6598', 'Palacole', 1, 2673, ['332', 'N']],
  CTY_PALA70: ['4291', 'Palakkad', 1, 2674, ['341', 'N']],
  CTY_PALA1: ['4596', 'Palakol', 1, 2675, ['332', 'N']],
  CTY_PLKL: ['8305', 'Palakollu', 1, 2676, ['332', '']],
  CTY_PALA71: ['4292', 'Palamau', 1, 2677, ['318', 'N']],
  CTY_PALA_NB1: ['6599', 'Palamner', 1, 2678, ['332', 'N']],
  CTY_PALA5284: ['5284', 'Palampur', 1, 2679, ['331', 'N']],
  CTY_PLI: ['7428', 'Palani', 1, 2680, ['323', 'N']],
  CTY_PALA32: ['4720', 'Palanpur', 1, 2681, ['338', 'N']],
  CTY_PALA5363: ['5363', 'Palarivattom', 1, 2682, ['341', 'N']],
  CTY_PALA_NB2: ['6600', 'Palavakkam', 1, 2683, ['323', 'N']],
  CTY_PALD_NB: ['6601', 'Palda', 1, 2684, ['340', 'N']],
  CTY_PALD_NB1: ['6602', 'Paldi', 1, 2685, ['338', 'N']],
  CTY_PALE_NB: ['6603', 'Palej', 1, 2686, ['338', 'N']],
  CTY_PLG: ['7458', 'Palghar', 1, 2687, ['322', 'Y']],
  CTY_PALI72: ['4293', 'Pali', 1, 2688, ['345', 'N']],
  CTY_PALI_NB: ['6604', 'Palia Kalan', 1, 2689, ['326', 'N']],
  CTY_PALI5313: ['5313', 'Palitana', 1, 2690, ['338', 'N']],
  CTY_PALK_NB: ['6605', 'Palkhanda', 1, 2691, ['340', 'N']],
  CTY_PALL5322: ['5322', 'Palladam', 1, 2692, ['323', 'N']],
  CTY_PALLA_PTI: ['7628', 'Pallapatti', 1, 2693, ['323', 'N']],
  CTY_PALL_HUR: ['7624', 'Pallathur', 1, 2694, ['323', 'N']],
  CTY_PALL_NB: ['6606', 'Pallavaram', 1, 2695, ['323', 'N']],
  CTY_PALL_NB1: ['6607', 'Pallikanai', 1, 2696, ['323', 'N']],
  CTY_PALL_NB2: ['6608', 'Pallipalayam', 1, 2697, ['323', 'N']],
  CTY_PALI_PTTU: ['7649', 'Pallipattu', 1, 2698, ['323', 'N']],
  CTY_PALL_NB3: ['6609', 'Pallippuram', 1, 2699, ['341', 'N']],
  CTY_PALL_NB4: ['6610', 'Palluruthy', 1, 2700, ['341', 'N']],
  CTY_PALP_NB: ['6611', 'Palpur', 1, 2701, ['326', 'N']],
  CTY_PALU_NB: ['6612', 'Palus', 1, 2702, ['322', 'N']],
  CTY_PALW: ['4743', 'Palwal', 1, 2703, ['337', 'Y']],
  CITY_Palw_8214: ['8400', 'Palwancha', 1, 2704, ['332', '']],
  CTY_PALW_NB: ['6613', 'Palwancha', 1, 2705, ['352', 'N']],
  CTY_PAMA_NB: ['6614', 'Pamal', 1, 2706, ['320', 'N']],
  CTY_PAMG_NB: ['6615', 'Pamgarh', 1, 2707, ['347', 'N']],
  CTY_PAMO_NB: ['6616', 'Pamol', 1, 2708, ['338', 'N']],
  CTY_PAMP_NB: ['6617', 'Pampore', 1, 2709, ['339', 'N']],
  CTY_PANA_NB: ['6618', 'Panagarh', 1, 2710, ['334', 'N']],
  CTY_PNJI: ['8090', 'Panaji', 1, 2711, ['348', 'N']],
  CTY_PANC73: ['4294', 'Panch Mahals', 1, 2712, ['338', 'N']],
  CTY_PANC5318: ['5318', 'Panchkula', 1, 2713, ['344', 'N']],
  CTY_PANC74: ['4295', 'Panchkula', 1, 2714, ['337', 'N']],
  CTY_PAND_NB: ['6619', 'Pandalam', 1, 2715, ['341', 'N']],
  CTY_PANDVPRA: ['7522', 'Pandavapura', 1, 2716, ['349', 'N']],
  CTY_PAND_NB1: ['6620', 'Pandharkaoda', 1, 2717, ['322', 'N']],
  CTY_PAND: ['5088', 'Pandharkawada', 1, 2718, ['322', 'N']],
  CTY_PAND_NB2: ['6621', 'Pandharpur', 1, 2719, ['322', 'N']],
  CTY_PAND5385: ['5385', 'Pandhurna', 1, 2720, ['340', 'N']],
  CTY_PAND_NB3: ['6622', 'Pandua', 1, 2721, ['333', 'N']],
  CTY_PAND_NB4: ['6623', 'Panduka', 1, 2722, ['347', 'N']],
  CTY_PNKII: ['7480', 'Panikoii', 1, 2723, ['333', 'N']],
  CTY_PANI75: ['4296', 'Panipat', 1, 2724, ['337', 'N']],
  CTY_PANJ_NB: ['6624', 'Panje Ke', 1, 2725, ['320', 'N']],
  CTY_PANJ_NB1: ['6625', 'Panjgrain Kalan', 1, 2726, ['320', 'N']],
  CTY_PANJ: ['4670', 'Panjim', 1, 2727, ['348', 'N']],
  CTY_PANN76: ['4297', 'Panna', 1, 2728, ['340', 'N']],
  CTY_PAN_PRM: ['7639', 'Pannaipuram', 1, 2729, ['323', 'N']],
  CTY_PNSK: ['7420', 'Panskura', 1, 2730, ['334', 'N']],
  CTY_PANV: ['5089', 'Panvel', 1, 2731, ['322', 'Y']],
  CTY_PAON: ['4757', 'Paonta Sahib', 1, 2732, ['331', 'N']],
  CTY_PAPU77: ['4298', 'Papum Pare', 1, 2733, ['335', 'N']],
  CTY_PARA_NB: ['6626', 'Para Bazar', 1, 2734, ['326', 'N']],
  CTY_PARA_NB1: ['6627', 'Para Saray', 1, 2735, ['326', 'N']],
  CTY_PARA_NB2: ['6628', 'Parabhani', 1, 2736, ['322', 'N']],
  CTY_PARA_NB3: ['6629', 'Paradeep', 1, 2737, ['333', 'N']],
  CTY_PARA: ['5129', 'Paradip Port', 1, 2738, ['333', 'N']],
  CTY_PRS: ['7439', 'Parasia', 1, 2739, ['340', 'N']],
  CTY_PRTW: ['7407', 'Paratwada', 1, 2740, ['322', 'N']],
  CTY_PAR_VI: ['7630', 'Paravai', 1, 2741, ['323', 'N']],
  CTY_PARA_NB4: ['6630', 'Paravur', 1, 2742, ['341', 'N']],
  CTY_PARB78: ['4299', 'Parbhani', 1, 2743, ['322', 'N']],
  CTY_PARD_NB: ['6631', 'Pardi', 1, 2744, ['338', 'N']],
  CTY_PARK_NB: ['6632', 'Parkal', 1, 2745, ['352', 'N']],
  CITY_Park_8215: ['8401', 'Parkal', 1, 2746, ['332', '']],
  CTY_PARL_NB: ['6633', 'Parlakhemundi', 1, 2747, ['333', 'N']],
  CTY_PARL_NB1: ['6634', 'Parli', 1, 2748, ['322', 'N']],
  CTY_PARM_NB: ['6635', 'Parmanand', 1, 2749, ['320', 'N']],
  CTY_PARN_NB: ['6636', 'Parner', 1, 2750, ['322', 'N']],
  CTY_PARS_NB: ['6637', 'Parsottampur', 1, 2751, ['326', 'N']],
  CTY_PART_NB: ['6638', 'Parthala Khanjarpur', 1, 2752, ['326', 'Y']],
  CTY_PARV: ['4597', 'Parvathipuram', 1, 2753, ['332', 'N']],
  CTY_PARW_NB: ['6639', 'Parwanoo', 1, 2754, ['331', 'N']],
  CTY_PASC: ['4985', 'Paschimmidnapur', 1, 2755, ['334', 'N']],
  CTY_PASI9: ['4632', 'Pasighat', 1, 2756, ['335', 'N']],
  CTY_PSTHL: ['7991', 'Pasthal', 1, 2757, ['322', 'Y']],
  CTY_PTLA: ['8011', 'Patala', 1, 2758, ['326', 'Y']],
  CTY_PATA_NB: ['6640', 'Patalganga', 1, 2759, ['322', 'N']],
  CTY_PATA79: ['4300', 'Patan', 1, 2760, ['338', 'N']],
  CTY_PATA: ['4598', 'Patancheru', 1, 2761, ['352', 'N']],
  CITY_Pata_8164: ['8351', 'Patancheru', 1, 2762, ['332', '']],
  CTY_PTUDI: ['7486', 'Pataudi', 1, 2763, ['337', 'N']],
  CTY_PATAUDI: ['7964', 'Pataudi', 1, 2764, ['337', 'N']],
  CTY_PATH_NB: ['6641', 'Pathalgaon', 1, 2765, ['347', 'N']],
  CTY_PATH80: ['4301', 'Pathanamthitta', 1, 2766, ['341', 'N']],
  CTY_PATH: ['4862', 'Pathankot', 1, 2767, ['320', 'N']],
  CTY_PATH5358: ['5358', 'Pathankot', 1, 2768, ['344', 'N']],
  CTY_PATH_NB1: ['6642', 'Pathsala', 1, 2769, ['328', 'N']],
  CTY_PATH_NB2: ['6643', 'Pathwal', 1, 2770, ['339', 'N']],
  CTY_PATI81: ['4302', 'Patiala', 1, 2771, ['320', 'N']],
  CTY_PATN82: ['4303', 'Patna', 1, 2772, ['327', 'N']],
  CTY_PATR: ['4863', 'Patran', 1, 2773, ['320', 'N']],
  CTY_PATR_NB: ['6644', 'Patratu', 1, 2774, ['318', 'N']],
  CTY_PATT_NB: ['6645', 'Pattambi', 1, 2775, ['341', 'N']],
  CTY_PATT158: ['5130', 'Pattamundai', 1, 2776, ['333', 'N']],
  CTY_PATT_NB1: ['6646', 'Pattan', 1, 2777, ['339', 'N']],
  CTY_PATT70: ['4864', 'Patti', 1, 2778, ['320', 'N']],
  CTY_PATT: ['7145', 'Patti Pratapgarh', 1, 2779, ['326', 'N']],
  CTY_PATT_NB2: ['6647', 'Patti,Pratapgarh', 1, 2780, ['326', 'N']],
  CTY_PTKT: ['8306', 'Pattukkottai', 1, 2781, ['323', '']],
  CTY_PATT93: ['4928', 'Pattukottai', 1, 2782, ['323', 'N']],
  CTY_PATW_NB: ['6648', 'Patwdh', 1, 2783, ['326', 'N']],
  CTY_PAUR83: ['4304', 'Pauri Garhwal', 1, 2784, ['316', 'N']],
  CTY_PAVGDA: ['7514', 'Pavagada', 1, 2785, ['349', 'N']],
  CTY_PAYA_NB: ['6649', 'Payal', 1, 2786, ['320', 'N']],
  CTY_PAYY: ['5006', 'Payyanur', 1, 2787, ['341', 'N']],
  CITY_Pedd_8216: ['8402', 'Peddapalle', 1, 2788, ['332', '']],
  CTY_PEDD_NB: ['6650', 'Peddapalle', 1, 2789, ['352', 'N']],
  CITY_Pedd_8217: ['8403', 'Peddapur', 1, 2790, ['332', '']],
  CTY_PEDD_NB1: ['6651', 'Peddapur', 1, 2791, ['352', 'N']],
  CTY_PEDD: ['4599', 'Peddapuram', 1, 2792, ['332', 'N']],
  CTY_PEED_NB: ['6652', 'Peedampalli', 1, 2793, ['323', 'N']],
  CTY_PEGA_NB: ['6653', 'Pegadapalli', 1, 2794, ['352', 'N']],
  CITY_Pega_8218: ['8404', 'Pegadapalli', 1, 2795, ['332', '']],
  CTY_PHLDPRBNGR: ['7941', 'Pehlad Pur Bangar', 1, 2796, ['321', 'Y']],
  CTY_PEHO: ['4744', 'Pehowa', 1, 2797, ['337', 'N']],
  CTY_PEN_NB: ['6654', 'Pen', 1, 2798, ['322', 'N']],
  CTY_PEND_NB: ['6655', 'Pendra', 1, 2799, ['347', 'N']],
  CTY_PERYUR: ['7618', 'Peraiyur', 1, 2800, ['323', 'N']],
  CTY_PERA84: ['4305', 'Perambalur', 1, 2801, ['323', 'N']],
  CTY_PERE85: ['4306', 'Peren', 1, 2802, ['342', 'N']],
  CTY_PERI_NB: ['6656', 'Peringanam', 1, 2803, ['341', 'N']],
  CTY_PERI: ['5007', 'Perinthalmanna', 1, 2804, ['341', 'N']],
  CTY_PERI_NB1: ['6657', 'Periyakulam', 1, 2805, ['323', 'N']],
  CTY_PERI_NB2: ['6658', 'Periyanaikenpalayam', 1, 2806, ['323', 'N']],
  CTY_PERN_NB: ['6659', 'Pernem', 1, 2807, ['348', 'N']],
  CTY_PERU: ['5008', 'Perumbavoor', 1, 2808, ['341', 'N']],
  CTY_PERU5360: ['5360', 'Perundurai', 1, 2809, ['323', 'N']],
  CTY_PERU_NB: ['6660', 'Perungalathur', 1, 2810, ['323', 'N']],
  CTY_PERGDI: ['8033', 'Perungudi', 1, 2811, ['323', 'N']],
  CTY_PETH_NB: ['6661', 'Peth Kasba', 1, 2812, ['322', 'N']],
  CTY_PETL: ['4721', 'Petlad', 1, 2813, ['338', 'N']],
  CTY_PHAG: ['4865', 'Phagwara', 1, 2814, ['320', 'N']],
  CTY_PHAL_NB: ['6662', 'Phalodi', 1, 2815, ['345', 'N']],
  CTY_PHAL: ['5090', 'Phaltan', 1, 2816, ['322', 'N']],
  CTY_PHAP_NB: ['6663', 'Phaphrana', 1, 2817, ['337', 'N']],
  CTY_PHEK86: ['4307', 'Phek', 1, 2818, ['342', 'N']],
  CTY_PHIL: ['4866', 'Phillaur', 1, 2819, ['320', 'N']],
  CTY_PHUL_NB: ['6664', 'Phul', 1, 2820, ['320', 'N']],
  CTY_PHUL_NB1: ['6665', 'Phulabani', 1, 2821, ['333', 'N']],
  CTY_PHUL: ['4905', 'Phulera', 1, 2822, ['345', 'N']],
  CTY_PHUL_NB2: ['6666', 'Phullanwala', 1, 2823, ['320', 'N']],
  CTY_PHULPUR: ['7', 'Phulpur', 1, 2824, ['326', 'N']],
  CTY_PHUR_NB: ['6667', 'Phurso', 1, 2825, ['318', 'N']],
  CTY_PIDU: ['4600', 'Piduguralla', 1, 2826, ['332', 'N']],
  CTY_PNI: ['7357', 'Pilani', 1, 2827, ['345', 'N']],
  CTY_PILE_NB: ['6668', 'Pileru', 1, 2828, ['332', 'N']],
  CTY_PILI: ['4906', 'Pilibanga', 1, 2829, ['345', 'N']],
  CTY_PILI87: ['4308', 'Pilibhit', 1, 2830, ['326', 'N']],
  CTY_PILU_NB: ['6669', 'Pilu Khera', 1, 2831, ['337', 'N']],
  CTY_PIMP_NB: ['6670', 'Pimpri', 1, 2832, ['322', 'N']],
  CTY_PIND_NB: ['6671', 'Pindi Balochan', 1, 2833, ['320', 'N']],
  CTY_PINJ: ['4745', 'Pinjore', 1, 2834, ['337', 'N']],
  CTY_PIPA: ['5042', 'Pipariya', 1, 2835, ['340', 'N']],
  CTY_PIPL_NB: ['6672', 'Pipli', 1, 2836, ['337', 'N']],
  CTY_PIPR_NB: ['6673', 'Pipraich', 1, 2837, ['326', 'N']],
  CTY_PRL: ['8454', 'Piprali road', 1, 2838, ['345', '']],
  CTY_PIRA: ['5009', 'Piravom', 1, 2839, ['341', 'N']],
  CTY_PERYPTNA: ['7526', 'Piriyapatna', 1, 2840, ['349', 'N']],
  CTY_PITH5347: ['5347', 'Pithampur', 1, 2841, ['340', 'N']],
  CTY_PITH_NB: ['6674', 'Pithapuram', 1, 2842, ['332', 'N']],
  CTY_PITH_NB1: ['6675', 'Pithla', 1, 2843, ['326', 'N']],
  CTY_PITH94: ['4309', 'Pithoragarh', 1, 2844, ['316', 'N']],
  CTY_POAT_NB: ['6676', 'Poata', 1, 2845, ['345', 'N']],
  CTY_PODI_NB: ['6677', 'Podili', 1, 2846, ['332', 'N']],
  CTY_POGA: ['7320', 'Pogathota', 1, 2847, ['332', 'N']],
  CTY_POJE_NB: ['6678', 'Pojewal', 1, 2848, ['320', 'N']],
  CTY_PKH: ['7358', 'Pokhran', 1, 2849, ['345', 'N']],
  CTY_POLL: ['4929', 'Pollachi', 1, 2850, ['323', 'N']],
  CTY_PONA: ['7146', 'Ponata Sahib', 1, 2851, ['331', 'N']],
  CTY_PONA_NB: ['6679', 'Ponata sahib', 1, 2852, ['331', 'N']],
  CTY_POND: ['4671', 'Ponda', 1, 2853, ['348', 'N']],
  CTY_POND187: ['5210', 'Pondicherry', 1, 2854, ['324', 'N']],
  CTY_POND88: ['4310', 'Pondicherry', 1, 2855, ['332', 'N']],
  CTY_PONN: ['5010', 'Ponnani', 1, 2856, ['341', 'N']],
  CTY_PONN_NB: ['6680', 'Ponnur', 1, 2857, ['332', 'N']],
  CTY_PNSB: ['8308', 'Ponta Sahib', 1, 2858, ['331', '']],
  CTY_POON89: ['4311', 'Poonch', 1, 2859, ['339', 'N']],
  CTY_POON_NB: ['6681', 'Poondi', 1, 2860, ['323', 'N']],
  CTY_POON_NB1: ['6682', 'Poongamoodu', 1, 2861, ['341', 'N']],
  CTY_PTHKLN: ['7942', 'Pooth Kalan', 1, 2862, ['321', 'Y']],
  CTY_PTHKHD: ['7943', 'Pooth Khurd', 1, 2863, ['321', 'Y']],
  CTY_POR_NB: ['6683', 'Por', 1, 2864, ['338', 'N']],
  CTY_PORA_NB: ['6684', 'Poranki', 1, 2865, ['332', 'N']],
  CTY_PORB90: ['4312', 'Porbandar', 1, 2866, ['338', 'N']],
  CTY_PORB5392: ['5392', 'Porbander', 1, 2867, ['338', 'N']],
  CTY_PORT5350: ['5350', 'Port Blair', 1, 2868, ['325', 'N']],
  CTY_PORUR: ['7616', 'Porur', 1, 2869, ['323', 'N']],
  CTY_PORV_NB: ['6685', 'Porvorim', 1, 2870, ['348', 'N']],
  CTY_POST_NB: ['6686', 'Post Loni', 1, 2871, ['326', 'Y']],
  CTY_POST_NB1: ['6687', 'Post Surajpur', 1, 2872, ['326', 'Y']],
  CTY_POWAI: ['7992', 'Powai', 1, 2873, ['322', 'Y']],
  CTY_POWA_NB: ['6688', 'Powayan', 1, 2874, ['326', 'N']],
  CTY_PRAK91: ['4313', 'Prakasam', 1, 2875, ['332', 'N']],
  CTY_PRAN_NB: ['6689', 'Prantij', 1, 2876, ['338', 'N']],
  CTY_PRAS: ['7456', 'Prasadraopeta', 1, 2877, ['333', 'N']],
  CTY_PRAT: ['5197', 'Pratapgarh', 1, 2878, ['326', 'N']],
  CTY_PRAT92: ['4314', 'Pratapgarh', 1, 2879, ['345', 'N']],
  CTY_PROD_NB: ['6690', 'Proddattur', 1, 2880, ['332', 'N']],
  CTY_PROD: ['4601', 'Proddatur', 1, 2881, ['332', 'N']],
  CTY_PUDH_7146: ['7201', 'Pudhupakkam', 1, 2882, ['323', 'N']],
  CTY_PUDU_NB: ['6691', 'Puducherry', 1, 2883, ['', 'N']],
  CTY_PUDU93: ['4315', 'Pudukkottai', 1, 2884, ['323', 'N']],
  CTY_PUDU: ['4930', 'Pudukottai', 1, 2885, ['323', 'N']],
  CTY_PUDU_PTI: ['7641', 'Pudupatti', 1, 2886, ['323', 'N']],
  CTY_PUKH_NB: ['6692', 'Pukhrayan', 1, 2887, ['326', 'N']],
  CTY_PLPHLD: ['7944', 'Pul Pehlad', 1, 2888, ['321', 'Y']],
  CTY_PULI_NB: ['6693', 'Pulivendula', 1, 2889, ['332', 'N']],
  CTY_PULW95: ['4316', 'Pulwama', 1, 2890, ['339', 'N']],
  CTY_PUNA: ['5011', 'Punalur', 1, 2891, ['341', 'N']],
  CTY_PUND_NB: ['6694', 'Pundri', 1, 2892, ['337', 'N']],
  CTY_PUNE94: ['4317', 'Pune', 1, 2893, ['322', 'Y']],
  CTY_PUNG_NB: ['6695', 'Punganur', 1, 2894, ['332', 'N']],
  CTY_PURA_NB: ['6696', 'Puranpur', 1, 2895, ['326', 'N']],
  CTY_PURB5303: ['5303', 'Purba Medinipur', 1, 2896, ['334', 'N']],
  CTY_PURI95: ['4318', 'Puri', 1, 2897, ['333', 'N']],
  CTY_PMD: ['7394', 'Purmandal', 1, 2898, ['339', 'N']],
  CTY_PURN: ['4649', 'Purnea', 1, 2899, ['327', 'N']],
  CTY_PURN96: ['4319', 'Purnia', 1, 2900, ['327', 'N']],
  CTY_PURQ_NB: ['6697', 'Purquazi', 1, 2901, ['326', 'N']],
  CTY_PURU: ['4986', 'Purulia', 1, 2902, ['334', 'N']],
  CTY_PURU97: ['4320', 'Puruliya', 1, 2903, ['334', 'N']],
  CTY_PURV_5443: ['7188', 'Purvi Champaran', 1, 2904, ['327', 'N']],
  CTY_PURW_NB: ['6698', 'Purwa', 1, 2905, ['326', 'N']],
  CTY_PUSA_NB: ['6699', 'Pusad', 1, 2906, ['322', 'N']],
  CTY_PUSHPRJ: ['7333', 'Pushparajgarh', 1, 2907, ['340', 'N']],
  CTY_PUTH_NB: ['6700', 'Puthenchira', 1, 2908, ['341', 'N']],
  CTY_PUTT_NB: ['6701', 'Puttaparthi', 1, 2909, ['332', 'N']],
  CTY_PUTT2: ['4602', 'Puttaparthy', 1, 2910, ['332', 'N']],
  CTY_PUTT_NB1: ['7222', 'Puttur', 1, 2911, ['332', 'N']],
  CTY_PUTT56: ['4794', 'Puttur', 1, 2912, ['349', 'N']],
  CTY_PYNU_NB: ['6702', 'Pynursla', 1, 2913, ['350', 'N']],
  CTY_QADI: ['4867', 'Qadian', 1, 2914, ['320', 'N']],
  CTY_QZG: ['7365', 'Qazigund', 1, 2915, ['339', 'N']],
  CTY_QMRDNGR: ['7945', 'Quammruddin Nagar', 1, 2916, ['321', 'Y']],
  CTY_QUEP_NB: ['6703', 'Quepem', 1, 2917, ['348', 'N']],
  CTY_QULA: ['7488', 'Queula', 1, 2918, ['348', 'N']],
  CTY_QUIL: ['5012', 'Quilandi', 1, 2919, ['341', 'N']],
  CTY_RADA_NB: ['6704', 'Radaur', 1, 2920, ['337', 'N']],
  CTY_RADH_NB: ['6705', 'Radhanpur', 1, 2921, ['338', 'N']],
  CTY_RAEB: ['7147', 'Rae Bareilly', 1, 2922, ['326', 'N']],
  CTY_RAE: ['4956', 'Rae Bareli', 1, 2923, ['326', 'N']],
  CTY_RAEB98: ['4321', 'Raebareli', 1, 2924, ['326', 'N']],
  CTY_RAEK: ['4868', 'Raekot', 1, 2925, ['320', 'N']],
  CTY_RFG: ['8477', 'Rafiganj', 1, 2926, ['327', '']],
  CTY_RAGH_NB: ['6706', 'Raghavapet', 1, 2927, ['352', 'N']],
  CITY_Ragh_8219: ['8405', 'Raghavapet', 1, 2928, ['332', '']],
  CTY_Ragh_7544: ['7240', 'Raghudevapuram', 1, 2929, ['332', 'N']],
  CTY_RUG: ['8593', 'Raghunathpur', 1, 2930, ['333', 'N']],
  CTY_RAHA: ['5091', 'Rahata', 1, 2931, ['322', 'N']],
  CTY_RAHI_NB: ['6707', 'Rahiad', 1, 2932, ['338', 'N']],
  CTY_RAHO_NB: ['6708', 'Rahon', 1, 2933, ['320', 'N']],
  CTY_RAHU: ['5092', 'Rahuri', 1, 2934, ['322', 'N']],
  CTY_RAIC99: ['4322', 'Raichur', 1, 2935, ['349', 'N']],
  CTY_RAIG5420: ['5420', 'Raigad', 1, 2936, ['322', 'Y']],
  CTY_RAIG_NB: ['6709', 'Raiganj', 1, 2937, ['334', 'N']],
  CTY_RAIG96: ['4323', 'Raigarh', 1, 2938, ['347', 'N']],
  CTY_RAIGRH: ['7587', 'Raigarh', 1, 2939, ['340', 'N']],
  CTY_RAIG11: ['4324', 'Raigarh(Mh)', 1, 2940, ['322', 'Y']],
  CTY_RAIK5395: ['5395', 'Raikot', 1, 2941, ['320', 'N']],
  CTY_RAIL_NB: ['6710', 'Railmajra', 1, 2942, ['320', 'N']],
  CTY_RAIP12: ['4325', 'Raipur', 1, 2943, ['347', 'N']],
  CTY_RAIP_NB: ['6711', 'Raipur Rani', 1, 2944, ['337', 'N']],
  CTY_RAIR_NB: ['6712', 'Rair Kalan', 1, 2945, ['337', 'N']],
  CTY_RAIR_NB1: ['6713', 'Rairangpur', 1, 2946, ['333', 'N']],
  CTY_RAIS_NB: ['6714', 'Raisar', 1, 2947, ['320', 'N']],
  CTY_RAIS13: ['4326', 'Raisen', 1, 2948, ['340', 'N']],
  CTY_RAIS: ['4907', 'Raisinghnagar', 1, 2949, ['345', 'N']],
  CTY_RAJA_NB: ['6715', 'Raja Sansi', 1, 2950, ['320', 'N']],
  CTY_RAJA_NB1: ['6716', 'Rajagangapur', 1, 2951, ['333', 'N']],
  CTY_RAJA3: ['4603', 'Rajahmundry', 1, 2952, ['332', 'N']],
  CTY_RAJA4: ['4604', 'Rajam', 1, 2953, ['332', 'N']],
  CTY_RAJA_NB2: ['6717', 'Rajampet', 1, 2954, ['332', 'N']],
  CTY_RAJA94: ['4931', 'Rajapalayam', 1, 2955, ['323', 'N']],
  CTY_RAJA_NB3: ['6718', 'Rajarhat Gopalpur', 1, 2956, ['334', 'N']],
  CTY_RAJA_NB4: ['6719', 'Rajasmand', 1, 2957, ['345', 'N']],
  CTY_RAJA_NB5: ['6720', 'Rajaund', 1, 2958, ['337', 'N']],
  CTY_RAJA14: ['4327', 'Rajauri', 1, 2959, ['339', 'N']],
  CTY_RAJB_NB: ['6721', 'Rajballabhpur', 1, 2960, ['334', 'N']],
  CTY_RAJG5268: ['5268', 'Rajgarh', 1, 2961, ['340', 'N']],
  CTY_RAJG5371: ['5371', 'Rajgarh', 1, 2962, ['345', 'N']],
  CTY_RAJG15: ['4328', 'Rajgarh', 1, 2963, ['337', 'N']],
  CTY_RAJG_NB3: ['7225', 'Rajghar', 1, 2964, ['331', 'N']],
  CTY_RAJG_NB2: ['7224', 'Rajghar', 1, 2965, ['345', 'N']],
  CTY_RAJG_NB1: ['7223', 'Rajghar', 1, 2966, ['340', 'N']],
  CTY_RAJG_NB: ['6722', 'Rajgir', 1, 2967, ['327', 'N']],
  CTY_RAJI_NB: ['6723', 'Rajia', 1, 2968, ['320', 'N']],
  CTY_RAJI: ['4658', 'Rajim', 1, 2969, ['347', 'N']],
  CTY_RAJK16: ['4329', 'Rajkot', 1, 2970, ['338', 'N']],
  CTY_RAJN_NB: ['6724', 'Rajnadgaon', 1, 2971, ['347', 'N']],
  CTY_RAJN26: ['4330', 'Rajnandgaon', 1, 2972, ['347', 'N']],
  CTY_RAJOKRI: ['7946', 'Rajokri', 1, 2973, ['321', 'Y']],
  CTY_RAJO_NB: ['6725', 'Rajosana', 1, 2974, ['338', 'N']],
  CTY_RAJO_NB1: ['6726', 'Rajouri', 1, 2975, ['339', 'N']],
  CTY_RAJP33: ['4723', 'Rajpipla', 1, 2976, ['338', 'N']],
  CTY_RAJP_NB: ['6727', 'Rajpur Bhaian', 1, 2977, ['320', 'N']],
  CTY_RAJP71: ['4869', 'Rajpura', 1, 2978, ['320', 'N']],
  CTY_RAJS27: ['4331', 'Rajsamand', 1, 2979, ['345', 'N']],
  CTY_RAJU: ['4724', 'Rajula', 1, 2980, ['338', 'N']],
  CTY_RAJU_NB: ['6728', 'Rajura', 1, 2981, ['322', 'N']],
  CTY_RAKA_NB: ['6729', 'Rakanpur', 1, 2982, ['338', 'N']],
  CTY_RAMA_NB: ['6730', 'Ramachandrapuram', 1, 2983, ['332', 'N']],
  CITY_Rama_8220: ['8406', 'Ramagundam', 1, 2984, ['332', '']],
  CTY_RAMA_NB1: ['6731', 'Ramagundam', 1, 2985, ['352', 'N']],
  CTY_RAMA: ['4870', 'Raman', 1, 2986, ['320', 'N']],
  CTY_RAMA28: ['4332', 'Ramanagar', 1, 2987, ['349', 'N']],
  CTY_RAMA_NB2: ['6732', 'Ramanagaram', 1, 2988, ['349', 'N']],
  CTY_RAMA29: ['4333', 'Ramanathapuram', 1, 2989, ['323', 'N']],
  CTY_RAMA_NB3: ['6733', 'Ramanujganj', 1, 2990, ['347', 'N']],
  CTY_RAMA_NB4: ['6734', 'Ramapuram', 1, 2991, ['323', 'N']],
  CTY_RAMD: ['7148', 'Ramdas', 1, 2992, ['320', 'N']],
  CTY_RAMD_NB: ['6735', 'Ramdas (M Cl)', 1, 2993, ['320', 'N']],
  CTY_RAME_NB: ['6736', 'Rameswarpur', 1, 2994, ['316', 'N']],
  CTY_RAMG_NB: ['6737', 'Ramganj Mandi', 1, 2995, ['345', 'N']],
  CTY_RAMG5270: ['5270', 'Ramgarh', 1, 2996, ['318', 'N']],
  CTY_RAMG30: ['4334', 'Ramgarh', 1, 2997, ['327', 'N']],
  CTY_RAMG: ['4766', 'Ramgarh Cantt', 1, 2998, ['318', 'N']],
  CTY_RAMG5297: ['5297', 'Ramgarh Cantt.', 1, 2999, ['318', 'N']],
  CTY_RAMN_NB: ['6738', 'Ramnagar', 1, 3000, ['316', 'N']],
  CTY_RAMP31: ['4335', 'Rampur', 1, 3001, ['331', 'N']],
  CTY_RAMP190: ['5217', 'Rampur', 1, 3002, ['326', 'N']],
  CTY_RMPR: ['7294', 'Rampur (Motihari)', 1, 3003, ['327', 'N']],
  CTY_RMPB: ['8309', 'Rampur Bushahr', 1, 3004, ['331', '']],
  CTY_RAMP_NB: ['6739', 'Rampur Jagir', 1, 3005, ['320', 'N']],
  CTY_RAMP_NB1: ['6740', 'Rampura', 1, 3006, ['338', 'N']],
  CTY_RAMP: ['4871', 'Rampura Phul', 1, 3007, ['320', 'N']],
  CTY_RAMP_NB2: ['6741', 'Rampurhat', 1, 3008, ['334', 'N']],
  CTY_RAMT: ['5093', 'Ramtek', 1, 3009, ['322', 'N']],
  CTY_RMYP: ['8310', 'Ramyampet', 1, 3010, ['332', '']],
  CTY_RANA_NB: ['6742', 'Ranaghat', 1, 3011, ['334', 'N']],
  CTY_RANB_NB: ['6743', 'Ranbir Singh Pora', 1, 3012, ['339', 'N']],
  CTY_RANC32: ['4336', 'Ranchi', 1, 3013, ['318', 'N']],
  CTY_RANE: ['4795', 'Ranebennur', 1, 3014, ['349', 'N']],
  CITY_Rang_8180: ['8366', 'Rangareddi', 1, 3015, ['332', '']],
  CTY_RANG_NB: ['6744', 'Rangareddi', 1, 3016, ['352', 'N']],
  CITY_Rang_8181: ['8367', 'Rangareddy', 1, 3017, ['332', '']],
  CTY_RANG_NB1: ['6745', 'Rangareddy', 1, 3018, ['352', 'N']],
  CTY_RANG_NB2: ['6746', 'Rangia', 1, 3019, ['328', 'N']],
  CTY_RANG_NB3: ['6747', 'Rangian', 1, 3020, ['320', 'N']],
  CTY_RANG_NB4: ['6748', 'Rangibasan', 1, 3021, ['334', 'N']],
  CTY_RANG_NB5: ['6749', 'Rangpo', 1, 3022, ['351', 'N']],
  CTY_RANI: ['4746', 'Rania', 1, 3023, ['337', 'N']],
  CTY_RANI_NB: ['6750', 'Ranibennur', 1, 3024, ['349', 'N']],
  CTY_RANI_NB1: ['6751', 'Raniganj', 1, 3025, ['334', 'N']],
  CTY_RNI: ['7405', 'Ranikhet', 1, 3026, ['316', 'N']],
  CTY_RANI5341: ['5341', 'Ranipet', 1, 3027, ['323', 'N']],
  CTY_RANI_NB2: ['6752', 'Ranipettai', 1, 3028, ['323', 'N']],
  CTY_RANI_NB3: ['6753', 'Ranipool', 1, 3029, ['351', 'N']],
  CTY_RANI_NB4: ['6754', 'Ranipur', 1, 3030, ['320', 'N']],
  CTY_RANJ_NB: ['6755', 'Ranjangaon', 1, 3031, ['322', 'N']],
  CTY_RANN_NB: ['6756', 'Ranni', 1, 3032, ['341', 'N']],
  CTY_RANN: ['5013', 'Ranny', 1, 3033, ['341', 'N']],
  CTY_RAPA: ['4605', 'Rapalle', 1, 3034, ['332', 'N']],
  CTY_RASI_NB: ['6757', 'Rasipuram', 1, 3035, ['323', 'N']],
  CTY_RASU_NB: ['6758', 'Rasulpur', 1, 3036, ['337', 'N']],
  CTY_RTG: ['7354', 'Ratangarh', 1, 3037, ['345', 'N']],
  CTY_RTPUR: ['7479', 'Ratanpur', 1, 3038, ['347', 'N']],
  CTY_RATH_NB: ['6759', 'Rath', 1, 3039, ['326', 'N']],
  CTY_RATI_NB: ['6760', 'Ratia', 1, 3040, ['337', 'N']],
  CTY_RATL33: ['4337', 'Ratlam', 1, 3041, ['340', 'N']],
  CTY_RATN34: ['4338', 'Ratnagiri', 1, 3042, ['322', 'N']],
  CTY_RATN_NB: ['6761', 'Ratnari', 1, 3043, ['331', 'N']],
  CTY_RATT_NB: ['6762', 'Rattewal', 1, 3044, ['320', 'N']],
  CTY_RAU: ['5043', 'Rau', 1, 3045, ['340', 'N']],
  CTY_RAVE_NB: ['6763', 'Raver', 1, 3046, ['322', 'N']],
  CTY_RAVU: ['4606', 'Ravulapalem', 1, 3047, ['332', 'N']],
  CTY_RAWA: ['4908', 'Rawat Bhata', 1, 3048, ['345', 'N']],
  CTY_RWBT: ['8311', 'Rawatbhata', 1, 3049, ['345', '']],
  CTY_RAWA_NB: ['6764', 'Rawatsar', 1, 3050, ['345', 'N']],
  CTY_RAXA_NB: ['6765', 'Raxaul Bazar', 1, 3051, ['327', 'N']],
  CTY_RAYA_NB: ['6766', 'Raya', 1, 3052, ['326', 'N']],
  CTY_RAYA_NB1: ['6767', 'Rayachoti', 1, 3053, ['332', 'N']],
  CTY_RAYA_NB2: ['6768', 'Rayadurg', 1, 3054, ['332', 'N']],
  CTY_RAYA35: ['4339', 'Rayagada', 1, 3055, ['333', 'N']],
  CTY_RAYY_NB: ['6769', 'Rayya', 1, 3056, ['320', 'N']],
  CTY_REAS5269: ['5269', 'Reasi', 1, 3057, ['339', 'N']],
  CTY_REDH_NB: ['6770', 'Red Hills', 1, 3058, ['323', 'N']],
  CTY_REDD_NB: ['6771', 'Reddipalle', 1, 3059, ['352', 'N']],
  CITY_Redd_8221: ['8407', 'Reddipalle', 1, 3060, ['332', '']],
  CTY_REHA_NB: ['6772', 'Rehana Jattan', 1, 3061, ['320', 'N']],
  CTY_REKA_NB: ['6773', 'Rekang Peo', 1, 3062, ['331', 'N']],
  CTY_RENG_NB: ['6774', 'Rengali', 1, 3063, ['333', 'N']],
  CTY_RENU: ['4957', 'Renukoot', 1, 3064, ['326', 'N']],
  CTY_REPA5361: ['5361', 'Repalle', 1, 3065, ['332', 'N']],
  CTY_REVEGNJ: ['7614', 'Revelganj', 1, 3066, ['327', 'N']],
  CTY_REWA36: ['4340', 'Rewa', 1, 3067, ['340', 'N']],
  CTY_REWA37: ['4341', 'Rewari', 1, 3068, ['337', 'N']],
  CTY_RIB38: ['7177', 'Ri Bhoi', 1, 3069, ['350', 'N']],
  'CTY_RI B38': ['4342', 'Ri Bhoi', 1, 3070, ['350', 'N']],
  CTY_RISH: ['4966', 'Rishikesh', 1, 3071, ['316', 'N']],
  CTY_RISH5315: ['5315', 'Rishra', 1, 3072, ['334', 'N']],
  CTY_ROBE: ['4958', 'Robertsganj', 1, 3073, ['326', 'N']],
  CTY_RODH39: ['4343', 'Rodha', 1, 3074, ['337', 'N']],
  CTY_RHA: ['8312', 'Roha', 1, 3075, ['322', '']],
  CTY_ROHA_NB: ['6775', 'Roha Ashtami', 1, 3076, ['322', 'N']],
  CTY_ROHE_NB: ['6776', 'Roherianwali', 1, 3077, ['320', 'N']],
  CTY_ROHR: ['4758', 'Rohru', 1, 3078, ['331', 'N']],
  CTY_ROHT40: ['4344', 'Rohtak', 1, 3079, ['337', 'N']],
  CTY_ROHT41: ['4345', 'Rohtas', 1, 3080, ['327', 'N']],
  CTY_ROIN: ['4634', 'Roing', 1, 3081, ['335', 'N']],
  CTY_RON: ['7568', 'Ron', 1, 3082, ['349', 'N']],
  CTY_ROK: ['7371', 'Roorkee', 1, 3083, ['316', 'N']],
  CTY_ROOR: ['4959', 'Roorkee', 1, 3084, ['326', 'N']],
  CTY_ROPA42: ['4346', 'Ropar', 1, 3085, ['320', 'N']],
  CTY_RORA_NB: ['6777', 'Roranwala', 1, 3086, ['320', 'N']],
  CTY_RSHNPUR: ['7947', 'Roshan Pura', 1, 3087, ['321', 'Y']],
  CTY_ROUR: ['5131', 'Rourkela', 1, 3088, ['333', 'N']],
  CTY_RSAR_NB: ['6778', 'Rsara', 1, 3089, ['326', 'N']],
  CTY_RUDA_NB: ['6779', 'Rudauli', 1, 3090, ['326', 'N']],
  CTY_RUDE_NB: ['6780', 'Rudel', 1, 3091, ['338', 'N']],
  CTY_RUDR43: ['4347', 'Rudraprayag', 1, 3092, ['316', 'N']],
  CTY_RUDRPUR: ['7605', 'Rudrapur', 1, 3093, ['326', 'N']],
  CTY_RUDR: ['4967', 'Rudrapur', 1, 3094, ['316', 'N']],
  CTY_RUPA_NB: ['6781', 'Rupana', 1, 3095, ['320', 'N']],
  CTY_RUPN5279: ['5279', 'Rupnagar', 1, 3096, ['320', 'N']],
  CTY_RPY: ['7430', 'Rupnarayanpur', 1, 3097, ['334', 'N']],
  CTY_SAHI_NB: ['6794', 'SAHIBZADA AJIT SINGH NAGAR', 1, 3098, ['320', 'N']],
  CTY_SANG_NB1: ['6829', 'SANGLI-MIRAJ-KUPWAD', 1, 3099, ['322', 'N']],
  CTY_STR: ['8315', 'SATTUR', 1, 3100, ['323', '']],
  CTY_SITA: ['5218', 'SITAPUR', 1, 3101, ['326', 'N']],
  CTY_SABA44: ['4348', 'Sabarkantha', 1, 3102, ['338', 'N']],
  CTY_SABH_NB: ['6782', 'Sabhra', 1, 3103, ['320', 'N']],
  CTY_SABO_NB: ['6783', 'Sabour', 1, 3104, ['327', 'N']],
  CTY_SADA_NB: ['6784', 'Sadabad', 1, 3105, ['326', 'N']],
  CTY_SDTPURGJRN: ['7948', 'Sadat Pur Gujran', 1, 3106, ['321', 'Y']],
  CTY_SADH_NB: ['6785', 'Sadhaura', 1, 3107, ['337', 'N']],
  CTY_SADI_NB: ['6786', 'Sadi', 1, 3108, ['345', 'N']],
  CTY_SADI_NB1: ['6787', 'Sadiq', 1, 3109, ['320', 'N']],
  CTY_SADU_NB: ['6788', 'Sadulsahar', 1, 3110, ['345', 'N']],
  CTY_SDSH: ['8313', 'Sadulshahar', 1, 3111, ['345', '']],
  CTY_SAFI_NB: ['6789', 'Safidon', 1, 3112, ['337', 'N']],
  CTY_SAGA: ['5208', 'Sagar', 1, 3113, ['340', 'N']],
  CTY_SAGA45: ['4349', 'Sagar', 1, 3114, ['349', 'N']],
  CTY_SAGW_NB: ['6790', 'Sagwara', 1, 3115, ['345', 'N']],
  CTY_SAHA_NB: ['6791', 'Saha', 1, 3116, ['337', 'N']],
  CTY_SAHA_NB1: ['6792', 'Sahabuddinpur', 1, 3117, ['326', 'N']],
  CTY_SAHA46: ['4350', 'Saharanpur', 1, 3118, ['326', 'N']],
  CTY_SAHA47: ['4351', 'Saharsa', 1, 3119, ['327', 'N']],
  CTY_SAHA_NB2: ['6793', 'Sahauran', 1, 3120, ['320', 'N']],
  CTY_SAHI5299: ['5299', 'Sahibabad', 1, 3121, ['326', 'Y']],
  CTY_SHDAUPUR: ['7949', 'Sahibabad Daulat Pur', 1, 3122, ['321', 'Y']],
  CTY_SAHI48: ['4352', 'Sahibganj', 1, 3123, ['318', 'N']],
  CTY_SAHI: ['7149', 'Sahibzada Ajit Singh Nagar', 1, 3124, ['320', 'N']],
  CTY_SAHJ_NB: ['6795', 'Sahjanwa', 1, 3125, ['326', 'N']],
  CTY_SAHN_NB: ['6796', 'Sahnewal', 1, 3126, ['320', 'N']],
  CTY_SAIAJB: ['7950', 'Saidul Ajaib', 1, 3127, ['321', 'Y']],
  CTY_SAIH5258: ['5258', 'Saiha', 1, 3128, ['343', 'N']],
  CTY_SAIL_NB: ['6797', 'Saila Khurd', 1, 3129, ['320', 'N']],
  CTY_SAIL_NB1: ['6798', 'Sailu', 1, 3130, ['322', 'N']],
  CTY_SAIN_NB: ['6799', 'Saini Majra', 1, 3131, ['320', 'N']],
  CTY_SAIN_NB1: ['6800', 'Sainj', 1, 3132, ['331', 'N']],
  CTY_SAIN5296: ['5296', 'Sainthia', 1, 3133, ['334', 'N']],
  CTY_SAKA_NB: ['6801', 'Sakat Sanala', 1, 3134, ['338', 'N']],
  CTY_SAKLESPR: ['7535', 'Sakleshpur', 1, 3135, ['349', 'N']],
  CTY_SALA_NB: ['6802', 'Salairani', 1, 3136, ['322', 'N']],
  CTY_SALC: ['4672', 'Salcette', 1, 3137, ['348', 'N']],
  CTY_SALE49: ['4353', 'Salem', 1, 3138, ['323', 'N']],
  CTY_SALE_NB: ['6803', 'Salempur', 1, 3139, ['326', 'N']],
  CTY_SALE_NB1: ['6804', 'Salepur', 1, 3140, ['333', 'N']],
  CTY_SALI_NB: ['6805', 'Saligao', 1, 3141, ['348', 'N']],
  CTY_SALO_NB: ['6806', 'Salon', 1, 3142, ['326', 'N']],
  CTY_SALU_NB: ['6807', 'Saluni', 1, 3143, ['347', 'N']],
  CTY_SALU: ['4607', 'Salur', 1, 3144, ['332', 'N']],
  CTY_SAMA_NB: ['6808', 'Samada', 1, 3145, ['326', 'N']],
  CTY_SAMA_NB1: ['6809', 'Samaipur', 1, 3146, ['337', 'Y']],
  CTY_SAMA50: ['4354', 'Samalkha', 1, 3147, ['337', 'N']],
  CTY_SAMA: ['4872', 'Samana', 1, 3148, ['320', 'N']],
  CTY_SAMA51: ['4355', 'Samastipur', 1, 3149, ['327', 'N']],
  CTY_SAMB_5449: ['7191', 'Samba', 1, 3150, ['339', 'N']],
  CTY_SAMB_NB: ['6810', 'Samba', 1, 3151, ['339', 'N']],
  CTY_SAMB52: ['4356', 'Sambalpur', 1, 3152, ['333', 'N']],
  CTY_SAMB_NB1: ['6811', 'Sambhal', 1, 3153, ['326', 'N']],
  CTY_SMBHLK: ['7951', 'Sambhalka', 1, 3154, ['321', 'Y']],
  CTY_SAMB_NB2: ['6812', 'Sambhar', 1, 3155, ['345', 'N']],
  CTY_SAMG_NB: ['6813', 'Samgauli', 1, 3156, ['320', 'N']],
  CTY_SAML_NB: ['6814', 'Samlod', 1, 3157, ['338', 'N']],
  CTY_SAMO_NB: ['6815', 'Samou', 1, 3158, ['338', 'N']],
  CTY_SAMP_NB: ['6816', 'Sampla', 1, 3159, ['337', 'N']],
  CTY_SAMP_NB1: ['6817', 'Sampura', 1, 3160, ['338', 'N']],
  CTY_SAMP_NB2: ['6818', 'Sampurna Nagar', 1, 3161, ['326', 'N']],
  CTY_SAMR5311: ['5311', 'Samrala', 1, 3162, ['320', 'N']],
  CTY_SANA_NB: ['6819', 'Sanand', 1, 3163, ['338', 'N']],
  CTY_SANA_NB1: ['6820', 'Sanathal', 1, 3164, ['338', 'N']],
  CTY_SANA_NB2: ['6821', 'Sanaur', 1, 3165, ['320', 'N']],
  CTY_SANA_NB3: ['6822', 'Sanawad', 1, 3166, ['340', 'N']],
  CTY_SANC_NB: ['6823', 'Sanchore', 1, 3167, ['345', 'N']],
  CTY_SAND_NB: ['6824', 'Sandhai', 1, 3168, ['337', 'N']],
  CTY_SAND_NB1: ['6825', 'Sandhaur', 1, 3169, ['320', 'N']],
  CTY_SAND_NB2: ['6826', 'Sandila', 1, 3170, ['326', 'N']],
  CTY_SAND: ['4796', 'Sandur', 1, 3171, ['349', 'N']],
  CTY_SANE: ['4873', 'Sanehwal', 1, 3172, ['320', 'N']],
  CTY_SANE_NB: ['6827', 'Saneta', 1, 3173, ['320', 'N']],
  CTY_SANG147: ['5094', 'Sangamner', 1, 3174, ['322', 'N']],
  CTY_SANG84: ['4909', 'Sanganer', 1, 3175, ['345', 'N']],
  CTY_SNGR: ['7435', 'Sangareddy', 1, 3176, ['352', 'N']],
  CTY_SANG5329: ['5329', 'Sangaria', 1, 3177, ['345', 'N']],
  CTY_SANG_NB: ['6828', 'Sangat', 1, 3178, ['320', 'N']],
  CTY_SANG53: ['4357', 'Sangli', 1, 3179, ['322', 'N']],
  CTY_SMIK: ['7150', 'Sangli Miraj Kupwad', 1, 3180, ['322', 'N']],
  CTY_SGMW: ['7376', 'Sangmeshwar', 1, 3181, ['322', 'N']],
  CTY_SANG54: ['4358', 'Sangrur', 1, 3182, ['320', 'N']],
  CTY_SANG_NB2: ['6830', 'Sanguem', 1, 3183, ['348', 'N']],
  CTY_SANJ_NB: ['6831', 'Sanjali', 1, 3184, ['338', 'N']],
  CTY_SANJ_NB1: ['6832', 'Sanjan', 1, 3185, ['338', 'N']],
  CTY_SANJ_NB2: ['6833', 'Sanjauli', 1, 3186, ['331', 'N']],
  CTY_SANK_NB: ['6834', 'Sankagiri', 1, 3187, ['323', 'N']],
  CTY_SANK_NB1: ['6835', 'Sankeshwar', 1, 3188, ['349', 'N']],
  CTY_SANOTH: ['7952', 'Sanoth', 1, 3189, ['321', 'Y']],
  CTY_SNPDA: ['7993', 'Sanpada', 1, 3190, ['322', 'Y']],
  CTY_SANP_NB: ['6836', 'Sanpera', 1, 3191, ['337', 'N']],
  CTY_SANQ_NB: ['6837', 'Sanquelim', 1, 3192, ['348', 'N']],
  CTY_SANT55: ['4359', 'Sant Kabir Nagar', 1, 3193, ['326', 'N']],
  CTY_SANT56: ['4360', 'Sant Ravidas Nagar', 1, 3194, ['326', 'N']],
  CTY_SANT_NB: ['6838', 'Santa Cruz', 1, 3195, ['348', 'Y']],
  CTY_SANTACZ: ['7994', 'Santa Cruz', 1, 3196, ['322', 'Y']],
  CTY_SANTPUR: ['7671', 'Santoshpur', 1, 3197, ['334', 'N']],
  CTY_SAON: ['5095', 'Saoner', 1, 3198, ['322', 'N']],
  CTY_SAPH_NB: ['6839', 'Saphale', 1, 3199, ['322', 'N']],
  CTY_SARA_NB: ['6840', 'Sarai mir', 1, 3200, ['326', 'N']],
  CTY_SARA_NB1: ['6841', 'Saraidhela', 1, 3201, ['318', 'N']],
  CTY_SARA_NB2: ['6842', 'Saraikela', 1, 3202, ['318', 'N']],
  CTY_SRMR: ['8314', 'Saraimir', 1, 3203, ['326', '']],
  CTY_SARA57: ['4361', 'Saran', 1, 3204, ['327', 'N']],
  CTY_SARA_NB3: ['6843', 'Saravanampatti', 1, 3205, ['323', 'N']],
  CTY_SARD_NB: ['6844', 'Sardar Shahar', 1, 3206, ['345', 'N']],
  CTY_SARD_NB1: ['6845', 'Sardhana', 1, 3207, ['326', 'N']],
  CTY_SARD_NB2: ['6846', 'Sardulgarh', 1, 3208, ['320', 'N']],
  CTY_SARI_NB: ['6847', 'Sarigam', 1, 3209, ['338', 'N']],
  CTY_SARK_NB: ['6848', 'Sarkaghat', 1, 3210, ['331', 'N']],
  CTY_SARN_NB: ['6849', 'Sarna', 1, 3211, ['320', 'N']],
  CTY_SASN_NB: ['6850', 'Sas Nagar ( Mohali)', 1, 3212, ['320', 'N']],
  CTY_SASA_NB: ['6851', 'Sasaram', 1, 3213, ['327', 'N']],
  CTY_SATA: ['5096', 'Satana', 1, 3214, ['322', 'N']],
  CTY_SATA58: ['4362', 'Satara', 1, 3215, ['322', 'N']],
  CITY_Sath_8223: ['8409', 'Sathupalle', 1, 3216, ['332', '']],
  CTY_SATH_NB: ['6852', 'Sathupalle', 1, 3217, ['352', 'N']],
  CTY_SATH: ['4932', 'Sathyamangalam', 1, 3218, ['323', 'N']],
  CTY_SATL_NB: ['6853', 'Satlasana', 1, 3219, ['338', 'N']],
  CTY_SATN59: ['4363', 'Satna', 1, 3220, ['340', 'N']],
  CTY_SATT_NB: ['6854', 'Sattenapalle', 1, 3221, ['332', 'N']],
  CTY_SATT: ['4608', 'Sattenapalli', 1, 3222, ['332', 'N']],
  CTY_STTUR: ['7652', 'Sattur', 1, 3223, ['323', 'N']],
  CTY_SAUR_NB: ['6855', 'Sauri', 1, 3224, ['333', 'N']],
  CTY_SAVNUR: ['7557', 'Savanur', 1, 3225, ['349', 'N']],
  CTY_SAVA_NB: ['6856', 'Savardari', 1, 3226, ['322', 'N']],
  CTY_SAVA: ['4725', 'Savarkundla', 1, 3227, ['338', 'N']],
  CTY_SAVD: ['5097', 'Savda', 1, 3228, ['322', 'N']],
  CTY_SAVN_NB: ['6857', 'Savner', 1, 3229, ['322', 'N']],
  CTY_SAWA60: ['4364', 'Sawai Madhopur', 1, 3230, ['345', 'N']],
  CTY_SAWA: ['5098', 'Sawantwadi', 1, 3231, ['322', 'N']],
  CTY_SAY_GUDI: ['7631', 'Sayalgudi', 1, 3232, ['323', 'N']],
  CTY_SAYL_NB: ['6858', 'Sayla', 1, 3233, ['338', 'N']],
  CITY_Secu_8161: ['8348', 'Secunderabad', 1, 3234, ['332', '']],
  CTY_SECU20: ['4415', 'Secunderabad', 1, 3235, ['352', 'N']],
  CITY_Secu_8224: ['8410', 'Secunderabad Cantt.', 1, 3236, ['332', '']],
  CTY_SECU_NB: ['6859', 'Secunderabad Cantt.', 1, 3237, ['352', 'N']],
  CTY_SEDA_NB: ['6860', 'Sedam', 1, 3238, ['349', 'N']],
  CTY_SEDA_NB1: ['6861', 'Sedariya', 1, 3239, ['345', 'N']],
  CTY_SEHJ_NB: ['6862', 'Sehjra', 1, 3240, ['320', 'N']],
  CTY_SEHO61: ['4365', 'Sehore', 1, 3241, ['340', 'N']],
  CTY_SELU_NB: ['6863', 'Selud', 1, 3242, ['347', 'N']],
  CTY_SEMA_NB: ['6864', 'Semara Chandrauli', 1, 3243, ['326', 'N']],
  CTY_SENA62: ['4366', 'Senapati', 1, 3244, ['329', 'N']],
  CTY_SEND_NB: ['6865', 'Sendhwa', 1, 3245, ['340', 'N']],
  CTY_SEND_NB1: ['6866', 'Sendri', 1, 3246, ['347', 'N']],
  CTY_SEOL_NB: ['6867', 'Seoli', 1, 3247, ['337', 'N']],
  CTY_SEON63: ['4367', 'Seoni', 1, 3248, ['340', 'N']],
  CTY_SEON_NB: ['6868', 'Seoni Malwa', 1, 3249, ['340', 'N']],
  CTY_SEPP: ['4635', 'Seppa', 1, 3250, ['335', 'N']],
  CTY_SERA_NB: ['6869', 'Seraikela', 1, 3251, ['318', 'N']],
  CTY_SERA64: ['4368', 'Seraikela-Kharsawan', 1, 3252, ['318', 'N']],
  CTY_SERA: ['4987', 'Serampore', 1, 3253, ['334', 'N']],
  CTY_SERA_NB1: ['6870', 'Seraulim', 1, 3254, ['348', 'N']],
  CTY_SERC5278: ['5278', 'Serchhip', 1, 3255, ['343', 'N']],
  CTY_SEVO_NB: ['6871', 'Sevoor', 1, 3256, ['323', 'N']],
  CTY_SEVU_PTI: ['7627', 'Sevugampatti', 1, 3257, ['323', 'N']],
  CTY_SEWA_NB: ['6872', 'Sewarhi', 1, 3258, ['326', 'N']],
  CITY_Shad_8225: ['8411', 'Shadnagar', 1, 3259, ['332', '']],
  CTY_SHAD_NB: ['6873', 'Shadnagar', 1, 3260, ['352', 'N']],
  CTY_SHAH38: ['4747', 'Shahabad', 1, 3261, ['337', 'N']],
  CTY_SHAD: ['7995', 'Shahad', 1, 3262, ['322', 'Y']],
  CTY_SHD: ['7393', 'Shahada', 1, 3263, ['322', 'N']],
  CTY_SHAH_NB: ['6874', 'Shahade', 1, 3264, ['322', 'N']],
  CTY_SHAH_NB1: ['6875', 'Shahapur', 1, 3265, ['322', 'Y']],
  CTY_SHAH_NB2: ['6876', 'Shahbad', 1, 3266, ['337', 'N']],
  CTY_SHAH65: ['4369', 'Shahdol', 1, 3267, ['340', 'N']],
  CTY_SHAH_NB3: ['6877', 'Shahganj', 1, 3268, ['326', 'N']],
  CTY_SHAH73: ['4874', 'Shahid Udham Singh Nagar', 1, 3269, ['320', 'N']],
  CTY_SHAH66: ['4370', 'Shahjahanpur', 1, 3270, ['326', 'N']],
  CTY_SHAH74: ['4875', 'Shahkot', 1, 3271, ['320', 'N']],
  CTY_SHAH_NB7: ['7226', 'Shahpur', 1, 3272, ['337', 'N']],
  CTY_SHAH_NB5: ['6879', 'Shahpur', 1, 3273, ['338', 'N']],
  CTY_SHAH_NB9: ['7228', 'Shahpur', 1, 3274, ['349', 'N']],
  CTY_SHAH_NB8: ['7227', 'Shahpur', 1, 3275, ['338', 'N']],
  CTY_SHAH_NB4: ['6878', 'Shahpur Govardhanpur Bangar', 1, 3276, ['326', 'Y']],
  CTY_SHAH85: ['4910', 'Shahpura', 1, 3277, ['345', 'N']],
  CTY_SHAH_NB6: ['6880', 'Shahzadpur', 1, 3278, ['337', 'N']],
  CTY_SHAJ67: ['4371', 'Shajapur', 1, 3279, ['340', 'N']],
  CTY_SHLMRBGH: ['7953', 'Shalimar Bagh', 1, 3280, ['321', 'Y']],
  CTY_SHAM_NB: ['6881', 'Shamalaji', 1, 3281, ['338', 'N']],
  CTY_SHAM_NB1: ['6882', 'Shamashpur', 1, 3282, ['320', 'N']],
  CTY_SHAM_NB2: ['6883', 'Shamchurasi', 1, 3283, ['320', 'N']],
  CTY_SHAM110: ['4960', 'Shamli', 1, 3284, ['326', 'N']],
  CTY_SHAM_NB4: ['6885', 'Shamsabad', 1, 3285, ['326', 'N']],
  CTY_SHAM_NB3: ['6884', 'Shamsabad', 1, 3286, ['326', 'N']],
  CTY_SHAM_NB5: ['7229', 'Shamsabad', 1, 3287, ['326', 'N']],
  CTY_SHAM5: ['4609', 'Shamshabad', 1, 3288, ['352', 'N']],
  CITY_Sham_8167: ['8354', 'Shamshabad', 1, 3289, ['332', '']],
  CTY_SHAN_NB: ['6886', 'Shankar', 1, 3290, ['320', 'N']],
  CTY_SHAN_NB1: ['6887', 'Shankargarh', 1, 3291, ['326', 'N']],
  CITY_Shan_8226: ['8412', 'Shankarpally', 1, 3292, ['332', '']],
  CTY_SHAN_NB2: ['6888', 'Shankarpally', 1, 3293, ['352', 'N']],
  CTY_SHAN_NB3: ['6889', 'Shanpung', 1, 3294, ['350', 'N']],
  CTY_SHAP_NB: ['6890', 'Shapar', 1, 3295, ['338', 'N']],
  CTY_SHARJAH: ['6', 'Sharjah', 1, 3296, ['5', 'N']],
  CTY_SHEG_NB: ['6891', 'Shegaon', 1, 3297, ['322', 'N']],
  CTY_SHEI68: ['4372', 'Sheikhpura', 1, 3298, ['327', 'N']],
  CTY_SHEI: ['7151', 'Sheikhpura', 1, 3299, ['327', 'N']],
  CTY_SHELAR: ['7996', 'Shelar', 1, 3300, ['322', 'Y']],
  CTY_SHEO69: ['4373', 'Sheohar', 1, 3301, ['327', 'N']],
  CTY_SHEO70: ['4374', 'Sheopur', 1, 3302, ['340', 'N']],
  CTY_SHER_NB: ['6892', 'Sherkot', 1, 3303, ['326', 'N']],
  CTY_SHP: ['7382', 'Sherpur', 1, 3304, ['320', 'N']],
  CTY_SHER_NB1: ['6893', 'Sherpura', 1, 3305, ['338', 'N']],
  CTY_SHER: ['5014', 'Shertally', 1, 3306, ['341', 'N']],
  CTY_SHIGAON: ['7564', 'Shiggaon', 1, 3307, ['349', 'N']],
  CTY_SHIH_NB: ['6894', 'Shiholi Moti', 1, 3308, ['338', 'N']],
  CTY_SHIKPR: ['7534', 'Shikarpur', 1, 3309, ['349', 'N']],
  CTY_SHIK: ['4961', 'Shikohabad', 1, 3310, ['326', 'N']],
  CTY_SHIK_NB: ['6895', 'Shikohpur', 1, 3311, ['337', 'Y']],
  CTY_SHIK_NB1: ['6896', 'Shikrapur', 1, 3312, ['322', 'N']],
  CTY_SHIL_NB: ['6897', 'Shilaru', 1, 3313, ['331', 'N']],
  CTY_SHIL: ['5114', 'Shillong', 1, 3314, ['350', 'N']],
  CTY_SHIM71: ['4375', 'Shimla', 1, 3315, ['331', 'N']],
  CTY_SHIM72: ['4376', 'Shimoga', 1, 3316, ['349', 'N']],
  CTY_SHIRHATI: ['7566', 'Shirahatti', 1, 3317, ['349', 'N']],
  CTY_SHIR5375: ['5375', 'Shirdi', 1, 3318, ['322', 'N']],
  CTY_SHIR5351: ['5351', 'Shirpur', 1, 3319, ['322', 'N']],
  CTY_SHIR149: ['5099', 'Shirur', 1, 3320, ['322', 'N']],
  CTY_SHIR150: ['5100', 'Shirval', 1, 3321, ['322', 'N']],
  CTY_SHIR_NB: ['6898', 'Shirwal', 1, 3322, ['322', 'N']],
  CTY_SHIV73: ['4377', 'Shivpuri', 1, 3323, ['340', 'N']],
  CTY_SHOH_NB: ['6899', 'Shohratgarh', 1, 3324, ['326', 'N']],
  CTY_SHOLUR: ['7662', 'Sholur', 1, 3325, ['323', 'N']],
  CTY_SHOP5271: ['5271', 'Shopian', 1, 3326, ['339', 'N']],
  CTY_SHOR5365: ['5365', 'Shoranur', 1, 3327, ['341', 'N']],
  CTY_SHOPPUR: ['7565', 'Shorapur', 1, 3328, ['349', 'N']],
  CTY_SHRA74: ['4378', 'Shrawasti', 1, 3329, ['326', 'N']],
  CTY_SHRI_NB: ['6900', 'Shrigonda', 1, 3330, ['322', 'N']],
  CTY_SHRI: ['5101', 'Shrirampur', 1, 3331, ['322', 'N']],
  CTY_SHUJ: ['5044', 'Shujalpur', 1, 3332, ['340', 'N']],
  CTY_SHUK_NB: ['6901', 'Shukartal Bangar', 1, 3333, ['326', 'N']],
  CTY_SHUK_NB1: ['6902', 'Shuklaganj', 1, 3334, ['326', 'N']],
  CTY_SIBS75: ['4379', 'Sibsagar', 1, 3335, ['328', 'N']],
  CTY_SIDPUR: ['7576', 'Siddapur', 1, 3336, ['349', 'N']],
  CTY_SIDD76: ['4380', 'Siddharthnagar', 1, 3337, ['326', 'N']],
  CITY_Sidd_8177: ['8363', 'Siddipet', 1, 3338, ['332', '']],
  CTY_SIDD: ['4610', 'Siddipet', 1, 3339, ['352', 'N']],
  CTY_SIDH77: ['4381', 'Sidhi', 1, 3340, ['340', 'N']],
  CTY_SIDH_NB: ['6903', 'Sidhpur', 1, 3341, ['338', 'N']],
  CTY_SIDH_NB1: ['6904', 'Sidhwan Bet', 1, 3342, ['320', 'N']],
  CTY_SIDS_NB: ['6905', 'Sidsar', 1, 3343, ['338', 'N']],
  CTY_SIHO34: ['4726', 'Sihor', 1, 3344, ['338', 'N']],
  CTY_SIHO132: ['5045', 'Sihora', 1, 3345, ['340', 'N']],
  CTY_SIKA_NB: ['6906', 'Sikanderpur Badha', 1, 3346, ['337', 'Y']],
  CTY_SIKA_NB1: ['6907', 'Sikandrabad', 1, 3347, ['326', 'N']],
  CTY_SIKA78: ['4382', 'Sikar', 1, 3348, ['345', 'N']],
  CTY_SIKH_NB: ['6908', 'Sikhwala', 1, 3349, ['320', 'N']],
  CTY_SILC: ['4645', 'Silchar', 1, 3350, ['328', 'N']],
  CTY_SILI: ['4988', 'Siliguri', 1, 3351, ['334', 'N']],
  CTY_SILL: ['5102', 'Sillod', 1, 3352, ['322', 'N']],
  CTY_SILV: ['4661', 'Silvassa', 1, 3353, ['317', 'N']],
  CTY_SIL: ['7377', 'Silvassa', 1, 3354, ['338', 'N']],
  CTY_SIMA_NB: ['6909', 'Simaliya', 1, 3355, ['338', 'N']],
  CTY_SIMD79: ['4383', 'Simdega', 1, 3356, ['318', 'N']],
  CTY_SIMI_NB: ['6910', 'Siminoi', 1, 3357, ['333', 'N']],
  CTY_SINDGI: ['7578', 'Sindagi', 1, 3358, ['349', 'N']],
  CTY_SIND: ['4797', 'Sindhanur', 1, 3359, ['349', 'N']],
  CTY_SIND80: ['4384', 'Sindhudurg', 1, 3360, ['322', 'N']],
  CTY_SINGM_PNARI: ['7629', 'Singampunari', 1, 3361, ['323', 'N']],
  CTY_SING_NB: ['6911', 'Singhaur', 1, 3362, ['337', 'N']],
  CTY_SING5249: ['5249', 'Singrauli', 1, 3363, ['340', 'N']],
  CTY_SING_NB1: ['6912', 'Singtam', 1, 3364, ['351', 'N']],
  CTY_SNGUR: ['8263', 'Singur', 1, 3365, ['334', '']],
  CTY_SINN_NB: ['6913', 'Sinnar', 1, 3366, ['322', 'N']],
  CTY_SIOL_NB: ['6914', 'Siolim', 1, 3367, ['348', 'N']],
  CTY_SIRA: ['7532', 'Sira', 1, 3368, ['349', 'N']],
  CTY_SRSPUR: ['7954', 'Siras Pur', 1, 3369, ['321', 'Y']],
  CTY_SIRA_NB: ['6915', 'Sirathu', 1, 3370, ['326', 'N']],
  CTY_SIRA_NB1: ['7230', 'Sirathu', 1, 3371, ['326', 'N']],
  CTY_SIRC_NB: ['6916', 'Sircaim', 1, 3372, ['348', 'N']],
  CTY_SIRC_NB1: ['6917', 'Sircilla', 1, 3373, ['352', 'N']],
  CITY_Sirc_8227: ['8413', 'Sircilla', 1, 3374, ['332', '']],
  CTY_SIRH: ['4876', 'Sirhind', 1, 3375, ['320', 'N']],
  CTY_SHFS: ['8316', 'Sirhind Fatehgarh Sahib', 1, 3376, ['320', '']],
  CTY_SIRM81: ['4385', 'Sirmaur', 1, 3377, ['331', 'N']],
  CTY_SIRM5372: ['5372', 'Sirmour', 1, 3378, ['331', 'N']],
  CTY_SIRO82: ['4386', 'Sirohi', 1, 3379, ['345', 'N']],
  CTY_SIRO: ['5046', 'Sironj', 1, 3380, ['340', 'N']],
  CTY_SIRS83: ['4387', 'Sirsa', 1, 3381, ['337', 'N']],
  CTY_SIRS: ['4798', 'Sirsi', 1, 3382, ['349', 'N']],
  CTY_SISO_NB: ['6918', 'Sisodara', 1, 3383, ['338', 'N']],
  CTY_SISW_NB: ['6919', 'Siswa', 1, 3384, ['326', 'N']],
  CTY_SITA84: ['4388', 'Sitamarhi', 1, 3385, ['327', 'N']],
  CTY_SITA85: ['4389', 'Sitapur', 1, 3386, ['347', 'N']],
  CTY_SITA_NB: ['6920', 'Sitarganj', 1, 3387, ['316', 'N']],
  CTY_SITO_NB: ['6921', 'Sito Gunno', 1, 3388, ['320', 'N']],
  CTY_SIVA86: ['4390', 'Sivaganga', 1, 3389, ['323', 'N']],
  CTY_SIVA: ['4933', 'Sivakasi', 1, 3390, ['323', 'N']],
  CTY_SIVSGR: ['8262', 'Sivasagar', 1, 3391, ['328', '']],
  CTY_SIWA_NB1: ['7231', 'Siwan', 1, 3392, ['327', 'N']],
  CTY_SIWA_NB2: ['7232', 'Siwan', 1, 3393, ['337', 'N']],
  CTY_SIWA87: ['4391', 'Siwan', 1, 3394, ['327', 'N']],
  CTY_SIWA_NB: ['6922', 'Siwani', 1, 3395, ['337', 'N']],
  CTY_SOHA_NB: ['6923', 'Sohana', 1, 3396, ['320', 'N']],
  CTY_SOHA_NB1: ['6924', 'Sohanpur', 1, 3397, ['326', 'N']],
  CTY_SOHNA: ['7965', 'Sohna', 1, 3398, ['337', 'Y']],
  CTY_SOJA5367: ['5367', 'Sojat City', 1, 3399, ['345', 'N']],
  CTY_SOLA_NB: ['6925', 'Solaiya', 1, 3400, ['338', 'N']],
  CTY_SOLA88: ['4392', 'Solan', 1, 3401, ['331', 'N']],
  CTY_SOLA89: ['4393', 'Solapur', 1, 3402, ['322', 'Y']],
  CTY_SOMA_NB: ['6926', 'Somatane', 1, 3403, ['322', 'N']],
  CTY_SOMVPET: ['7512', 'Somvarpet', 1, 3404, ['349', 'N']],
  CTY_SONA90: ['4394', 'Sonapur', 1, 3405, ['333', 'N']],
  CTY_SNRPR: ['8267', 'Sonarpur', 1, 3406, ['334', '']],
  CTY_SNW: ['7356', 'Sonawari', 1, 3407, ['339', 'N']],
  CTY_SONB91: ['4395', 'Sonbhadra', 1, 3408, ['326', 'N']],
  CTY_SNBD: ['8317', 'Sonebhadra', 1, 3409, ['326', '']],
  CTY_SONE: ['4748', 'Sonepat', 1, 3410, ['337', 'N']],
  CTY_SONE_NB: ['6927', 'Sonepur', 1, 3411, ['333', 'N']],
  CTY_SONI92: ['4396', 'Sonipat', 1, 3412, ['337', 'N']],
  CTY_SONI93: ['4397', 'Sonitpur', 1, 3413, ['328', 'N']],
  CTY_SONJ_NB: ['6928', 'Sonjamb', 1, 3414, ['322', 'N']],
  CTY_SONP_NB: ['6929', 'Sonpur', 1, 3415, ['347', 'N']],
  CTY_SOPO5403: ['5403', 'Sopore', 1, 3416, ['339', 'N']],
  CTY_SRBA: ['7509', 'Soraba', 1, 3417, ['349', 'N']],
  CTY_SORA_NB: ['6930', 'Soraon', 1, 3418, ['326', 'N']],
  CTY_SORU_NB: ['6931', 'Sorumona Poria', 1, 3419, ['328', 'N']],
  CTY_SOUT94: ['4398', 'South 24 Parganas', 1, 3420, ['334', 'N']],
  CTY_SOUT95: ['4399', 'South Andaman', 1, 3421, ['325', 'N']],
  CTY_SOUT96: ['4400', 'South Delhi', 1, 3422, ['321', 'Y']],
  CTY_SOUT97: ['4401', 'South Dinajpur', 1, 3423, ['334', 'N']],
  'CTY_SDM ': ['8474', 'South Dumdum', 1, 3424, ['334', '']],
  CTY_SOUT98: ['4402', 'South Garo Hills', 1, 3425, ['350', 'N']],
  CTY_SOUT99: ['4403', 'South Goa', 1, 3426, ['348', 'N']],
  CTY_SOUT_NB: ['6932', 'South Parur', 1, 3427, ['341', 'N']],
  CTY_SOUT11: ['4404', 'South Sikkim', 1, 3428, ['351', 'N']],
  CTY_SOUT14: ['4405', 'South Tripura', 1, 3429, ['330', 'N']],
  CTY_SOUT12: ['4406', 'South West Delhi', 1, 3430, ['321', 'Y']],
  CTY_SRIG_NB: ['6933', 'Sri Ganganagar', 1, 3431, ['345', 'N']],
  CTY_SRIH_NB: ['6934', 'Sri Hargobindpur Sahib', 1, 3432, ['320', 'N']],
  CTY_SRIV_NB: ['6935', 'Sri Vijaynagar', 1, 3433, ['345', 'N']],
  CTY_SRIK13: ['4407', 'Srikakulam', 1, 3434, ['332', 'N']],
  CTY_SRIK_NB: ['6936', 'Srikalahasti', 1, 3435, ['332', 'N']],
  CTY_SRIM_NB: ['6937', 'Srimadhopur', 1, 3436, ['345', 'N']],
  CTY_SRIN14: ['4408', 'Srinagar', 1, 3437, ['339', 'N']],
  CTY_SRIN_NB: ['7233', 'Srinagar', 1, 3438, ['316', 'N']],
  CTY_SRINGRI: ['7543', 'Sringeri', 1, 3439, ['349', 'N']],
  CTY_SRIP_NB: ['6938', 'Sriperumbudur', 1, 3440, ['323', 'N']],
  CTY_SRIR_NB: ['6939', 'Srirangam', 1, 3441, ['323', 'N']],
  CTY_SVPT: ['8318', 'Srivilliputtur', 1, 3442, ['323', '']],
  CTY_SUAL_NB: ['6940', 'Sualkuchi', 1, 3443, ['328', 'N']],
  CTY_SUDH_NB: ['6941', 'Sudhail', 1, 3444, ['337', 'N']],
  CTY_SUDH_NB1: ['6942', 'Sudhar', 1, 3445, ['320', 'N']],
  CTY_SUGH_NB: ['6943', 'Sughad', 1, 3446, ['338', 'N']],
  CTY_SUJA_NB: ['6944', 'Sujangarh', 1, 3447, ['345', 'N']],
  CTY_SUJA_NB1: ['6945', 'Sujanpur', 1, 3448, ['320', 'N']],
  CTY_SUKH_NB: ['6946', 'Sukhdevpura', 1, 3449, ['345', 'N']],
  CTY_SUKH_NB1: ['6947', 'Sukher', 1, 3450, ['345', 'N']],
  CTY_SKHRLI: ['7966', 'Sukhrali', 1, 3451, ['337', 'N']],
  CTY_SULA_NB: ['6948', 'Sulah', 1, 3452, ['331', 'N']],
  CTY_SULL: ['4799', 'Sullia', 1, 3453, ['349', 'N']],
  CTY_SULT120: ['5015', 'Sultan Battery', 1, 3454, ['341', 'N']],
  CTY_SLTPUR: ['7955', 'Sultan Pur', 1, 3455, ['321', 'Y']],
  CTY_SLTPURMJR: ['7956', 'Sultan Pur Majra', 1, 3456, ['321', 'Y']],
  CTY_SULT_NB: ['6949', 'Sultanabad', 1, 3457, ['352', 'N']],
  CITY_Sult_8230: ['8416', 'Sultanabad', 1, 3458, ['332', '']],
  CTY_SULT15: ['4409', 'Sultanpur', 1, 3459, ['320', 'N']],
  CTY_SULT_NB1: ['6950', 'Sultanpur', 1, 3460, ['326', 'N']],
  CTY_SULT: ['5219', 'Sultanpur', 1, 3461, ['326', 'N']],
  CTY_SULTAN: ['8773', 'Sultanpur', 1, 3462, ['334', 'N']],
  CTY_SULT75: ['4877', 'Sultanpur Lodhi', 1, 3463, ['320', 'N']],
  CTY_SULT_NB2: ['6951', 'Sulthan Bathery', 1, 3464, ['341', 'N']],
  CTY_SULY_NB: ['6952', 'Sulya', 1, 3465, ['349', 'N']],
  CTY_SUME: ['4912', 'Sumerpur', 1, 3466, ['345', 'N']],
  CTY_SUNA159: ['5132', 'Sunabeda', 1, 3467, ['333', 'N']],
  CTY_SUNA76: ['4878', 'Sunam', 1, 3468, ['320', 'N']],
  CTY_SUND_NB: ['6953', 'Sundarapuram', 1, 3469, ['323', 'N']],
  CTY_SUND_NB1: ['6954', 'Sundargarh', 1, 3470, ['333', 'N']],
  CTY_SUND_NB2: ['6955', 'Sundarnagar', 1, 3471, ['331', 'N']],
  CTY_SUND45: ['4761', 'Sunderbani', 1, 3472, ['339', 'N']],
  CTY_SUND16: ['4410', 'Sundergarh', 1, 3473, ['333', 'N']],
  CTY_SUND43: ['4759', 'Sundernagar', 1, 3474, ['331', 'N']],
  CTY_SUND_NB3: ['6956', 'Sundli -Jubbal (Jai-Pidi)', 1, 3475, ['331', 'N']],
  CTY_SUND: ['7152', 'Sundli Jubbal', 1, 3476, ['331', 'N']],
  CTY_SUPA: ['7560', 'Supa', 1, 3477, ['349', 'N']],
  CTY_SUPA_NB: ['6957', 'Supasi', 1, 3478, ['338', 'N']],
  CTY_SUPA15: ['4411', 'Supaul', 1, 3479, ['327', 'N']],
  CTY_SUPE: ['4659', 'Supela', 1, 3480, ['347', 'N']],
  CTY_SURS_NB: ['6958', 'Sur Singh', 1, 3481, ['320', 'N']],
  CTY_SURA_NB3: ['7234', 'Surajpur', 1, 3482, ['347', 'N']],
  CTY_SURA_NB: ['6959', 'Surajpur', 1, 3483, ['347', 'N']],
  CTY_SURA_NB4: ['7235', 'Surajpur', 1, 3484, ['326', 'Y']],
  CTY_SURA_NB1: ['6960', 'Surajpur', 1, 3485, ['326', 'Y']],
  CTY_SRK: ['7367', 'Surankote', 1, 3486, ['339', 'N']],
  CTY_SURA17: ['4412', 'Surat', 1, 3487, ['338', '2']],
  CTY_SURA: ['4913', 'Suratgarh', 1, 3488, ['345', 'N']],
  CTY_SURA_NB2: ['6961', 'Surathkal', 1, 3489, ['349', 'N']],
  CTY_SURE18: ['4413', 'Surendra Nagar', 1, 3490, ['338', 'N']],
  CTY_SURE: ['4727', 'Surendranagar', 1, 3491, ['338', 'N']],
  CTY_SURG19: ['4414', 'Surguja', 1, 3492, ['347', 'N']],
  CTY_SURI_NB: ['6962', 'Suri', 1, 3493, ['334', 'N']],
  CTY_SURY: ['4611', 'Suryapet', 1, 3494, ['352', 'N']],
  CITY_Sury_8166: ['8353', 'Suryapet', 1, 3495, ['332', '']],
  CTY_SUSA_NB: ['6963', 'Susari', 1, 3496, ['340', 'N']],
  CTY_TAKA_NB1: ['6968', 'TAKAVE BUDRUK', 1, 3497, ['322', 'N']],
  CTY_TADA_NB: ['6964', 'Tada', 1, 3498, ['332', 'N']],
  CTY_TADE: ['4612', 'Tadepalligudem', 1, 3499, ['332', 'N']],
  CTY_TADI_NB: ['6965', 'Tadipatri', 1, 3500, ['332', 'N']],
  CTY_TADP: ['4613', 'Tadpatri', 1, 3501, ['332', 'N']],
  CTY_TAHL_NB: ['6966', 'Tahliwala Jattan', 1, 3502, ['320', 'N']],
  CTY_TAJPUL: ['7957', 'Taj Pul', 1, 3503, ['321', 'Y']],
  CTY_TAKA_NB: ['6967', 'Takalimiya', 1, 3504, ['322', 'N']],
  CTY_TAKA: ['7153', 'Takave Budruk', 1, 3505, ['322', 'N']],
  CTY_TAKH_NB: ['6969', 'Takhatpur', 1, 3506, ['347', 'N']],
  CTY_TAKH: ['7154', 'Takhu Chak', 1, 3507, ['320', 'N']],
  CTY_TAKH_NB1: ['6970', 'Takhu chak', 1, 3508, ['320', 'N']],
  CTY_TALA: ['4728', 'Talaja', 1, 3509, ['338', 'N']],
  CTY_TALA_NB: ['6971', 'Talala', 1, 3510, ['338', 'N']],
  CTY_TLG: ['7389', 'Talala  Gir', 1, 3511, ['338', 'N']],
  CTY_TALHAT: ['7604', 'Talbehat', 1, 3512, ['326', 'N']],
  CTY_TALC: ['5133', 'Talcher', 1, 3513, ['333', 'N']],
  CTY_TALE: ['5103', 'Talegaon', 1, 3514, ['322', 'Y']],
  CTY_TALE_NB: ['6972', 'Talegaon Dabhade', 1, 3515, ['322', 'N']],
  CTY_TALH_NB: ['6973', 'Talhan', 1, 3516, ['320', 'N']],
  CTY_TALI_NB: ['6974', 'Talikulam', 1, 3517, ['341', 'N']],
  CTY_TALI: ['5016', 'Taliparamba', 1, 3518, ['341', 'N']],
  CTY_TALO_NB: ['6975', 'Talod', 1, 3519, ['338', 'N']],
  CTY_TALO_NB1: ['6976', 'Taloje Majkur', 1, 3520, ['322', 'Y']],
  CTY_TALW_NB: ['6977', 'Talwan', 1, 3521, ['320', 'N']],
  CTY_TALW_NB1: ['6978', 'Talwandi Bhai', 1, 3522, ['320', 'N']],
  CTY_TALW_NB2: ['6979', 'Talwandi Chaudrian', 1, 3523, ['320', 'N']],
  CTY_TALW77: ['4879', 'Talwandi Sabo', 1, 3524, ['320', 'N']],
  CTY_TALW_NB3: ['6980', 'Talwara', 1, 3525, ['320', 'N']],
  CTY_TALW78: ['4880', 'Talwara Township', 1, 3526, ['320', 'N']],
  CTY_TAME21: ['4416', 'Tamenglong', 1, 3527, ['329', 'N']],
  CTY_TAML_NB: ['6981', 'Tamluk', 1, 3528, ['334', 'N']],
  CTY_TND: ['7396', 'Tanda', 1, 3529, ['326', 'N']],
  CTY_TAND5382: ['5382', 'Tanda', 1, 3530, ['320', 'N']],
  CITY_Tand_8162: ['8349', 'Tandur', 1, 3531, ['332', '']],
  CTY_TAND: ['4614', 'Tandur', 1, 3532, ['352', 'N']],
  CTY_TANG_NB: ['6982', 'Tangi', 1, 3533, ['333', 'N']],
  CTY_TANG_NB1: ['6983', 'Tangra', 1, 3534, ['320', 'N']],
  CTY_TANK_5439: ['7195', 'Tankara', 1, 3535, ['338', 'N']],
  CTY_TANK_NB: ['6984', 'Tankara', 1, 3536, ['338', 'N']],
  CTY_TANK_NB1: ['6985', 'Tankua', 1, 3537, ['333', 'N']],
  CTY_TANU: ['4615', 'Tanuku', 1, 3538, ['332', 'N']],
  CTY_TAOR_NB: ['6986', 'Taoru', 1, 3539, ['337', 'N']],
  CTY_TAPA_NB: ['6987', 'Tapa', 1, 3540, ['320', 'N']],
  CTY_TAPA5354: ['5354', 'Tapa Mandi', 1, 3541, ['320', 'N']],
  CTY_TAPI5256: ['5256', 'Tapi', 1, 3542, ['338', 'N']],
  CTY_TAPO_NB: ['6988', 'Tapokda', 1, 3543, ['345', 'N']],
  CTY_TARA_NB: ['6989', 'Taragarh', 1, 3544, ['320', 'N']],
  CTY_TARA_NB1: ['6990', 'Tarakeswar', 1, 3545, ['334', 'N']],
  CTY_TARA16: ['4417', 'Taraori', 1, 3546, ['337', 'N']],
  CTY_TARA_NB2: ['6991', 'Tarapur', 1, 3547, ['338', 'N']],
  CTY_TARN: ['4881', 'Tarn Taran', 1, 3548, ['320', 'N']],
  CTY_TARS_NB: ['6992', 'Tarsikka', 1, 3549, ['320', 'N']],
  CTY_TARS_NB1: ['6993', 'Tarsod', 1, 3550, ['322', 'N']],
  CTY_TASG_NB: ['6994', 'Tasgaon', 1, 3551, ['322', 'N']],
  CTY_TAWA22: ['4418', 'Tawang', 1, 3552, ['335', 'N']],
  CTY_TENB: ['7445', 'Teen Batti', 1, 3553, ['338', 'N']],
  CTY_TEHR_NB: ['6995', 'Tehri', 1, 3554, ['', 'N']],
  CTY_TEHR23: ['4419', 'Tehri Garhwal', 1, 3555, ['316', 'N']],
  CTY_TEHS_NB: ['6996', 'Tehsil Dadri', 1, 3556, ['326', 'N']],
  CTY_TEHS_NB1: ['6997', 'Tehsil Jewar', 1, 3557, ['326', 'N']],
  CTY_TEHS_NB2: ['6998', 'Tehsil Phillaur', 1, 3558, ['320', 'N']],
  CTY_TEHS_NB3: ['6999', 'Tehsil Sadar', 1, 3559, ['326', 'Y']],
  CTY_TENA: ['4616', 'Tenali', 1, 3560, ['332', 'N']],
  CTY_TENK5378: ['5378', 'Tenkasi', 1, 3561, ['323', 'N']],
  CTY_TEZP: ['4646', 'Tezpur', 1, 3562, ['328', 'N']],
  CTY_TEZU: ['4636', 'Tezu', 1, 3563, ['335', 'N']],
  CTY_THAD_NB: ['7000', 'Thadikal', 1, 3564, ['352', 'N']],
  CITY_Thad_8231: ['8417', 'Thadikal', 1, 3565, ['332', '']],
  CTY_THAL: ['5017', 'Thalassery', 1, 3566, ['341', 'N']],
  CTY_THAMRI_KULAM: ['7659', 'Thamaraikulam', 1, 3567, ['323', 'N']],
  CTY_THAM_NB: ['7001', 'Thamarassery', 1, 3568, ['341', 'N']],
  CTY_THAN_NB: ['7002', 'Thana Chappar', 1, 3569, ['337', 'N']],
  CTY_THAN24: ['4420', 'Thane', 1, 3570, ['322', 'Y']],
  CTY_THAN_NB1: ['7003', 'Thanesar', 1, 3571, ['337', 'N']],
  CTY_THAN: ['4729', 'Thangadh', 1, 3572, ['338', 'N']],
  CTY_THAN25: ['4421', 'Thanjavur', 1, 3573, ['323', 'N']],
  CTY_THAN_NB2: ['7004', 'Thanneermukkam', 1, 3574, ['341', 'N']],
  CTY_THAR_NB: ['7005', 'Tharaj', 1, 3575, ['320', 'N']],
  CTY_THAS_NB: ['7006', 'Thaska Khadar', 1, 3576, ['337', 'N']],
  CTY_THE26: ['7178', 'The Dangs', 1, 3577, ['338', 'N']],
  'CTY_THE 26': ['4422', 'The Dangs', 1, 3578, ['338', 'N']],
  CTY_THEN27: ['4423', 'Theni', 1, 3579, ['323', 'N']],
  CTY_TNKS: ['8319', 'Thenkasi', 1, 3580, ['323', '']],
  CTY_THEO_NB: ['7007', 'Theog', 1, 3581, ['331', 'N']],
  CTY_THIR_NB: ['7008', 'Thirkkakara', 1, 3582, ['341', 'N']],
  CTY_THIR_NB1: ['7009', 'Thirthahalli', 1, 3583, ['349', 'N']],
  CTY_THIR_NB2: ['7010', 'Thirumangalam', 1, 3584, ['323', 'N']],
  CTY_THIR_NB3: ['7011', 'Thiruvallur', 1, 3585, ['323', 'N']],
  CTY_THIR28: ['4424', 'Thiruvananthapuram', 1, 3586, ['341', 'N']],
  CTY_THIR_NB4: ['7012', 'Thiruvarur', 1, 3587, ['323', 'N']],
  CTY_THIR_NB5: ['7013', 'Thiruverambur', 1, 3588, ['323', 'N']],
  CTY_THIR_NB6: ['7014', 'Thiruvilwamala', 1, 3589, ['341', 'N']],
  CTY_THIR_NB7: ['7015', 'Thiruvottiyur', 1, 3590, ['323', 'N']],
  CTY_THIS_NB: ['7016', 'Thisayanvilai', 1, 3591, ['323', 'N']],
  CTY_THOD: ['5018', 'Thodupuzha', 1, 3592, ['341', 'N']],
  CTY_TKD: ['8320', 'Thoothukudi', 1, 3593, ['323', '']],
  CTY_THO_THKDI: ['7644', 'Thoothukudi', 1, 3594, ['323', 'N']],
  CTY_THOR: ['7318', 'Thorrur', 1, 3595, ['332', 'N']],
  CTY_THOU29: ['4425', 'Thoubal', 1, 3596, ['329', 'N']],
  CTY_THRI_NB: ['7017', 'Thripunithura', 1, 3597, ['341', 'N']],
  CTY_THRI30: ['4426', 'Thrissur', 1, 3598, ['341', 'N']],
  CTY_THUC_NB: ['7018', 'Thuckalay', 1, 3599, ['323', 'N']],
  CTY_THUMBE: ['7539', 'Thumbe', 1, 3600, ['349', 'N']],
  CTY_THUM_NB: ['7019', 'Thumboor', 1, 3601, ['341', 'N']],
  CTY_TIBR_NB: ['7020', 'Tibri', 1, 3602, ['320', 'N']],
  CTY_TIGA_NB: ['7021', 'Tigaon', 1, 3603, ['337', 'Y']],
  CTY_TIGR_NB: ['7022', 'Tigrana', 1, 3604, ['337', 'N']],
  CTY_TIKA31: ['4427', 'Tikamgarh', 1, 3605, ['340', 'N']],
  CTY_TILD: ['4660', 'Tilda', 1, 3606, ['347', 'N']],
  CTY_TILH_NB: ['7023', 'Tilhar', 1, 3607, ['326', 'N']],
  CTY_TILPAT: ['7967', 'Tilpat', 1, 3608, ['337', 'N']],
  CTY_TINI_NB: ['7024', 'Tinidvanam', 1, 3609, ['323', 'N']],
  CTY_TINS32: ['4428', 'Tinsukia', 1, 3610, ['328', 'N']],
  CTY_TIPT: ['4800', 'Tiptur', 1, 3611, ['349', 'N']],
  CTY_TIRA33: ['4429', 'Tirap', 1, 3612, ['335', 'N']],
  CTY_TIRU5323: ['5323', 'Tiruchendur', 1, 3613, ['323', 'N']],
  CTY_TIRU5309: ['5309', 'Tiruchengode', 1, 3614, ['323', 'N']],
  CTY_TRIG: ['8713', 'Tiruchengodu', 1, 3615, ['323', 'N']],
  CTY_TIRU_NB: ['7025', 'Tiruchirapalli', 1, 3616, ['323', 'N']],
  CTY_TIRU34: ['4430', 'Tiruchirappalli', 1, 3617, ['323', 'N']],
  CTY_TIRU5401: ['5401', 'Tirukollur', 1, 3618, ['323', 'N']],
  CTY_TIRU_NARSIPR: ['7508', 'Tirumakudal Narsipur', 1, 3619, ['349', 'N']],
  CTY_TIRU35: ['4431', 'Tirunelveli', 1, 3620, ['323', 'N']],
  CTY_TIRU_NB1: ['7026', 'Tirupathur', 1, 3621, ['323', 'N']],
  CTY_TIRU6: ['4617', 'Tirupati', 1, 3622, ['332', 'N']],
  CTY_TIRU96: ['4934', 'Tirupattur', 1, 3623, ['323', 'N']],
  CTY_TIRU_NB2: ['7027', 'Tiruppur', 1, 3624, ['323', 'N']],
  CTY_TIRU97: ['4935', 'Tirupur', 1, 3625, ['323', 'N']],
  CTY_TIRU121: ['5019', 'Tirur', 1, 3626, ['341', 'N']],
  CTY_TIRU122: ['5020', 'Tiruvalla', 1, 3627, ['341', 'N']],
  CTY_TIRU36: ['4432', 'Tiruvallur', 1, 3628, ['323', 'N']],
  CTY_TIRU37: ['4433', 'Tiruvannamalai', 1, 3629, ['323', 'N']],
  CTY_TIRU38: ['4434', 'Tiruvarur', 1, 3630, ['323', 'N']],
  CTY_TIRU_NB3: ['7028', 'Tiruvilla', 1, 3631, ['341', 'N']],
  CTY_TIRU_NB4: ['7029', 'Tiruvur', 1, 3632, ['332', 'N']],
  CTY_TIRU7: ['4618', 'Tiruvuru', 1, 3633, ['332', 'N']],
  CTY_TIRW_NB: ['7030', 'Tirwaganj', 1, 3634, ['326', 'N']],
  CTY_TISRA: ['7584', 'Tisra', 1, 3635, ['318', 'N']],
  CTY_TITAGRH: ['7670', 'Titagarh', 1, 3636, ['334', 'N']],
  CTY_TITL_NB: ['7031', 'Titlagarh', 1, 3637, ['333', 'N']],
  CTY_TOHA: ['4749', 'Tohana', 1, 3638, ['337', 'N']],
  CTY_TONK39: ['4435', 'Tonk', 1, 3639, ['345', 'N']],
  CTY_TOPWN: ['7475', 'Topowan', 1, 3640, ['316', 'N']],
  CTY_TOSH40: ['4436', 'Tosham', 1, 3641, ['337', 'N']],
  CTY_TOTU_NB: ['7032', 'Totu', 1, 3642, ['331', 'N']],
  CTY_TRAL_NB: ['7033', 'Tral', 1, 3643, ['339', 'N']],
  CTY_TRAN_NB: ['7034', 'Tranol', 1, 3644, ['338', 'N']],
  CTY_TRIC123: ['5021', 'Trichur', 1, 3645, ['341', 'N']],
  CTY_TRIC100: ['4936', 'Trichy', 1, 3646, ['323', 'N']],
  CTY_TRIM_NB: ['7035', 'Trimbakeshwar', 1, 3647, ['322', 'N']],
  CTY_TRIP_NB: ['7036', 'Triprayar', 1, 3648, ['341', 'N']],
  CTY_TRIP: ['5022', 'Tripunithura', 1, 3649, ['341', 'N']],
  CTY_TRIV: ['5023', 'Trivandrum', 1, 3650, ['341', 'N']],
  CTY_TRMBAY: ['7997', 'Trombay', 1, 3651, ['322', 'Y']],
  CTY_TUEN41: ['4437', 'Tuensang', 1, 3652, ['342', 'N']],
  CTY_TULS_NB: ['7037', 'Tulsipur', 1, 3653, ['326', 'N']],
  CTY_TUMK42: ['4438', 'Tumkur', 1, 3654, ['349', 'N']],
  CTY_TUMS: ['5104', 'Tumsar', 1, 3655, ['322', 'N']],
  CTY_TUND_NB: ['7038', 'Tundla', 1, 3656, ['326', 'N']],
  CTY_TUNI5418: ['5418', 'Tuni', 1, 3657, ['332', 'N']],
  CTY_TURA: ['5115', 'Tura', 1, 3658, ['350', 'N']],
  CTY_TURBHE: ['7998', 'Turbhe', 1, 3659, ['322', 'Y']],
  CTY_TUTI43: ['4439', 'Tuticorin', 1, 3660, ['323', 'N']],
  CTY_UTOF_NB: ['7039', 'U.T of DADRA & NAGAR HAVELI', 1, 3661, ['317', 'N']],
  CTY_UTDA: ['7155', 'U.T of Dadra & Nagar Haveli', 1, 3662, ['317', 'N']],
  CTY_UCHA_NB: ['7040', 'Uchana Kalan', 1, 3663, ['337', 'N']],
  CTY_UDAI44: ['4440', 'Udaipur', 1, 3664, ['345', 'N']],
  CTY_UDAI_NB: ['7236', 'Udaipur', 1, 3665, ['330', 'N']],
  CTY_UDAL_5447: ['7197', 'Udalguri', 1, 3666, ['328', 'N']],
  CTY_UDGI_NB: ['7041', 'Udgir', 1, 3667, ['322', 'N']],
  CTY_UDHA_MANDALAM: ['7660', 'Udhagamandalam', 1, 3668, ['323', 'N']],
  CTY_UDHA45: ['4441', 'Udham Singh Nagar', 1, 3669, ['316', 'N']],
  CTY_UDHA46: ['4442', 'Udhampur', 1, 3670, ['339', 'N']],
  CTY_UDNA: ['8321', 'Udhna', 1, 3671, ['338', '']],
  CTY_UDUM_NB: ['7042', 'Udumalaipettai', 1, 3672, ['323', 'N']],
  CTY_UDUM: ['4937', 'Udumalpet', 1, 3673, ['323', 'N']],
  CTY_UDUP47: ['4443', 'Udupi', 1, 3674, ['349', 'N']],
  CTY_UDWA_NB: ['7043', 'Udwada', 1, 3675, ['338', 'N']],
  CTY_UGGI_NB: ['7044', 'Uggi', 1, 3676, ['320', 'N']],
  CTY_UGRA_NB: ['7045', 'Ugra Kheri', 1, 3677, ['337', 'N']],
  CTY_UJHA_NB: ['7046', 'Ujhani', 1, 3678, ['326', 'N']],
  CTY_UJIR: ['4801', 'Ujire', 1, 3679, ['349', 'N']],
  CTY_UJJA48: ['4444', 'Ujjain', 1, 3680, ['340', 'N']],
  CTY_UKHR49: ['4445', 'Ukhrul', 1, 3681, ['329', 'N']],
  CTY_UKLA: ['4750', 'Uklana Mandi', 1, 3682, ['337', 'N']],
  CTY_ULHA5295: ['5295', 'Ulhasnagar', 1, 3683, ['322', 'Y']],
  CTY_ULLAL: ['7538', 'Ullal', 1, 3684, ['349', 'N']],
  CTY_ULLU_NB: ['7047', 'Ulluberia', 1, 3685, ['334', 'N']],
  'CTY_ULU ': ['8475', 'Uluberia', 1, 3686, ['334', '']],
  CTY_UMAR50: ['4446', 'Umaria', 1, 3687, ['340', 'N']],
  CTY_UMBE_NB: ['7048', 'UmberGOAn', 1, 3688, ['338', 'N']],
  CTY_UMBE: ['7156', 'Umbergoan', 1, 3689, ['338', 'N']],
  CTY_UMBR_NB: ['7049', 'Umbraj', 1, 3690, ['322', 'N']],
  CTY_UMRE: ['5105', 'Umred', 1, 3691, ['322', 'N']],
  CTY_UNA51: ['7179', 'Una', 1, 3692, ['338', 'N']],
  'CTY_UNA 51': ['4447', 'Una', 1, 3693, ['338', 'N']],
  CTY_UNA: ['5202', 'Una', 1, 3694, ['331', 'N']],
  CTY_UNCH_NB: ['7050', 'Unchahar', 1, 3695, ['326', 'N']],
  CTY_UNJH: ['4730', 'Unjha', 1, 3696, ['338', 'N']],
  CTY_UNNA52: ['4448', 'Unnao', 1, 3697, ['326', 'Y']],
  CTY_UNTS_NB: ['7051', 'Untsal', 1, 3698, ['337', 'N']],
  CTY_UPLE_NB: ['7052', 'Upleta', 1, 3699, ['338', 'N']],
  CTY_UPPE53: ['4449', 'Upper Siang', 1, 3700, ['335', 'N']],
  CTY_UPPE54: ['4450', 'Upper Subansiri', 1, 3701, ['335', 'N']],
  CTY_URAL_NB: ['7053', 'Urali Kanchan', 1, 3702, ['322', 'N']],
  CTY_URAN_NB1: ['7055', 'Uran', 1, 3703, ['322', 'Y']],
  CTY_URAN_NB: ['7054', 'Uran Islampur', 1, 3704, ['322', 'N']],
  CTY_URMA: ['4882', 'Urmar Tanda', 1, 3705, ['320', 'N']],
  CTY_URSE_NB: ['7056', 'Urse', 1, 3706, ['322', 'N']],
  CTY_USGA_NB: ['7057', 'Usgao', 1, 3707, ['348', 'N']],
  CTY_UTH_PALYM: ['7640', 'Uthamapalayam', 1, 3708, ['323', 'N']],
  CTY_UTRA_NB: ['7058', 'Utraula', 1, 3709, ['326', 'N']],
  CTY_UTTA_9: ['9', 'Uttar Dinajpur', 1, 3710, ['334', 'N']],
  CTY_UTTA55: ['4451', 'Uttara Kannada', 1, 3711, ['349', 'N']],
  CTY_UTTA56: ['4452', 'Uttarkashi', 1, 3712, ['316', 'N']],
  CTY_UTPR: ['7416', 'Uttarpara', 1, 3713, ['334', 'N']],
  CTY_VEJA_NB: ['7078', 'VEJALPUR', 1, 3714, ['338', 'N']],
  CTY_VADA_NB: ['7059', 'Vadakara', 1, 3715, ['341', 'N']],
  CTY_VADA_NB1: ['7060', 'Vadakkancheri', 1, 3716, ['341', 'N']],
  CTY_VADA: ['7411', 'Vadali', 1, 3717, ['338', 'N']],
  CTY_VADA_NB2: ['7061', 'Vadavalli', 1, 3718, ['323', 'N']],
  CTY_VADIA: ['7496', 'Vadia', 1, 3719, ['338', 'N']],
  CTY_VAD_PTI: ['7626', 'Vadipatti', 1, 3720, ['323', 'N']],
  CTY_VADO57: ['4453', 'Vadodara', 1, 3721, ['338', '2']],
  CTY_VADUJ: ['8089', 'Vaduj', 1, 3722, ['322', 'N']],
  CTY_VAIJ_NB: ['7062', 'Vaijapur', 1, 3723, ['322', 'N']],
  CTY_VAIK: ['5024', 'Vaikom', 1, 3724, ['341', 'N']],
  CTY_VAIS58: ['4454', 'Vaishali', 1, 3725, ['327', 'N']],
  CTY_VTRNA: ['7999', 'Vaitarna', 1, 3726, ['322', 'Y']],
  CTY_VJRSWR: ['8000', 'Vajreshwari', 1, 3727, ['322', 'Y']],
  CTY_VALA_NB: ['7063', 'Valanchery', 1, 3728, ['341', 'N']],
  CTY_VALL_NB: ['7064', 'Vallabh Vidhya Nagar', 1, 3729, ['338', 'N']],
  CTY_VBP: ['7388', 'Vallabhipur', 1, 3730, ['338', 'N']],
  CTY_VALL5377: ['5377', 'Vallioor', 1, 3731, ['323', 'N']],
  CTY_VALP_NB: ['7065', 'Valpoi', 1, 3732, ['348', 'N']],
  CTY_VALS59: ['4455', 'Valsad', 1, 3733, ['338', 'N']],
  CTY_VALS_NB: ['7066', 'Valsarvakkam', 1, 3734, ['323', 'N']],
  CTY_VANA_NB: ['7067', 'Vanagaram', 1, 3735, ['323', 'N']],
  CTY_VANA_NB1: ['7068', 'Vanasgaon', 1, 3736, ['322', 'N']],
  CTY_VANGNI: ['8001', 'Vangani', 1, 3737, ['322', 'Y']],
  CTY_VANI_NB: ['7069', 'Vaniyambadi', 1, 3738, ['323', 'N']],
  CTY_VANN_NB: ['7070', 'Vannankulam', 1, 3739, ['323', 'N']],
  CTY_VANN_NB1: ['7071', 'Vannel K', 1, 3740, ['352', 'N']],
  CITY_Vann_8235: ['8421', 'Vannel K', 1, 3741, ['332', '']],
  CTY_VANS_NB: ['7072', 'Vansda', 1, 3742, ['338', 'N']],
  CTY_VAPI: ['4731', 'Vapi', 1, 3743, ['338', 'N']],
  CTY_VARA60: ['4456', 'Varanasi', 1, 3744, ['326', 'N']],
  CTY_VARC_NB: ['7073', 'Varca', 1, 3745, ['348', 'N']],
  CTY_VARK: ['5025', 'Varkala', 1, 3746, ['341', 'N']],
  CTY_VARS_NB: ['7074', 'Varsamedi', 1, 3747, ['338', 'N']],
  CTY_VASA_NB: ['7075', 'Vasad', 1, 3748, ['338', 'N']],
  CTY_VASA: ['5106', 'Vasai', 1, 3749, ['322', 'Y']],
  CTY_VASRD: ['8002', 'Vasai Road', 1, 3750, ['322', 'Y']],
  CTY_VASC: ['4673', 'Vasco', 1, 3751, ['348', 'N']],
  CTY_VASHI: ['8003', 'Vashi', 1, 3752, ['322', 'Y']],
  CTY_VSHND: ['8004', 'Vashind', 1, 3753, ['322', 'Y']],
  CTY_VSN: ['7443', 'Vasna', 1, 3754, ['338', 'N']],
  CTY_VATA: ['5026', 'Vatakara', 1, 3755, ['341', 'N']],
  CTY_VATA_NB: ['7076', 'Vatanappally', 1, 3756, ['341', 'N']],
  CTY_VATA5317: ['5317', 'Vatanappilly', 1, 3757, ['341', 'N']],
  CTY_VAVD_NB: ['7077', 'Vavdi', 1, 3758, ['338', 'N']],
  CTY_VEER_PNDI: ['7646', 'Veerapandi', 1, 3759, ['323', 'N']],
  CTY_VEJA: ['7157', 'Vejalpur', 1, 3760, ['338', 'N']],
  CTY_VELI_NB: ['7079', 'Veliyanad', 1, 3761, ['341', 'N']],
  CTY_VELL61: ['4457', 'Vellore', 1, 3762, ['323', 'N']],
  CTY_VELUR: ['7619', 'Velur', 1, 3763, ['323', 'N']],
  CTY_VEMU_NB: ['7080', 'Vemulakurthi', 1, 3764, ['352', 'N']],
  CITY_Vemu_8236: ['8422', 'Vemulakurthi', 1, 3765, ['332', '']],
  CITY_Vemu_8237: ['8423', 'Vemulawada', 1, 3766, ['332', '']],
  CTY_VEMU_NB1: ['7081', 'Vemulawada', 1, 3767, ['352', 'N']],
  CTY_VNG: ['7384', 'Vengurla', 1, 3768, ['322', 'N']],
  CTY_VENK: ['4619', 'Venkatagiri', 1, 3769, ['332', 'N']],
  CTY_VNKTPRA: ['7501', 'Venkatapura', 1, 3770, ['349', 'N']],
  CTY_VERA: ['4732', 'Veraval', 1, 3771, ['338', 'N']],
  CTY_VERE_NB: ['7082', 'Verem', 1, 3772, ['348', 'N']],
  CTY_VERNA: ['8093', 'Verna', 1, 3773, ['348', 'N']],
  CTY_VRSVA: ['8005', 'Versova', 1, 3774, ['322', 'Y']],
  CTY_VICA_NB: ['7083', 'Vicarabad', 1, 3775, ['352', 'N']],
  CITY_Vica_8238: ['8424', 'Vicarabad', 1, 3776, ['332', '']],
  CTY_VIDI62: ['4458', 'Vidisha', 1, 3777, ['340', 'N']],
  CTY_VIJA_NB: ['7084', 'Vijainagar', 1, 3778, ['345', 'N']],
  CTY_VIJA_NB1: ['7085', 'Vijaipur', 1, 3779, ['326', 'N']],
  CTY_VIJA35: ['4733', 'Vijapur', 1, 3780, ['338', 'N']],
  CTY_VIJA_NB2: ['7086', 'Vijayawada', 1, 3781, ['332', 'N']],
  CTY_VIJA_NB3: ['7087', 'Vijaypura', 1, 3782, ['345', 'N']],
  CTY_VIJA8: ['4620', 'Vijaywada', 1, 3783, ['332', 'N']],
  CTY_VIKA_NB: ['7088', 'Vikasnagar', 1, 3784, ['316', 'N']],
  CTY_VKSPUR: ['7958', 'Vikaspuri', 1, 3785, ['321', 'Y']],
  CTY_VIKR_NB: ['7089', 'Vikramgad', 1, 3786, ['322', 'N']],
  CTY_VIL_KULAM: ['7647', 'Vilathikulam', 1, 3787, ['323', 'N']],
  CTY_VILL63: ['4459', 'Villupuram', 1, 3788, ['323', 'N']],
  CTY_VLPR: ['8322', 'Viluppuram', 1, 3789, ['323', '']],
  CTY_VMNGR: ['8256', 'Viman Nagar', 1, 3790, ['322', '']],
  CTY_VINU_NB: ['7090', 'Vinukonda', 1, 3791, ['332', 'N']],
  CTY_VIRA_NB: ['7091', 'Virajpet', 1, 3792, ['349', 'N']],
  CTY_VIRA: ['7399', 'Viramgam', 1, 3793, ['338', 'N']],
  CTY_VIRA5294: ['5294', 'Virar', 1, 3794, ['322', 'Y']],
  CTY_VIRU64: ['4460', 'Virudhunagar', 1, 3795, ['323', 'N']],
  CTY_VISA65: ['4461', 'Visakhapatnam', 1, 3796, ['332', 'N']],
  CTY_VISA_NB: ['7092', 'Visavadar', 1, 3797, ['338', 'N']],
  CTY_VISN: ['4734', 'Visnagar', 1, 3798, ['338', 'N']],
  CTY_VISWA_THAM: ['7632', 'Viswanatham', 1, 3799, ['323', 'N']],
  CTY_VITA: ['5107', 'Vita', 1, 3800, ['322', 'N']],
  CTY_VTHLWD: ['8006', 'Vithalwadi', 1, 3801, ['322', 'Y']],
  CTY_VIZI66: ['4462', 'Vizianagaram', 1, 3802, ['332', 'N']],
  CTY_VRIN: ['4962', 'Vrindavan', 1, 3803, ['326', 'N']],
  CTY_VUYY_NB: ['7093', 'Vuyyuru', 1, 3804, ['332', 'N']],
  CTY_VYAR_NB: ['7094', 'Vyara', 1, 3805, ['338', 'N']],
  CTY_WADA_NB: ['7095', 'Wada', 1, 3806, ['322', 'N']],
  CTY_WADA5386: ['5386', 'Wadakanchery', 1, 3807, ['341', 'N']],
  CTY_WADA_NB1: ['7096', 'Wadakkanchery', 1, 3808, ['341', 'N']],
  CTY_WADH_NB: ['7097', 'Wadhwan', 1, 3809, ['338', 'N']],
  CTY_WADI_NB: ['7098', 'Wadi', 1, 3810, ['349', 'N']],
  CTY_WADR_NB: ['7099', 'Wadrafnagar', 1, 3811, ['347', 'N']],
  CTY_WGH: ['7387', 'Waghodia', 1, 3812, ['338', 'N']],
  CTY_WAHA_NB: ['7100', 'Wahabwala', 1, 3813, ['320', 'N']],
  CTY_WAI: ['5108', 'Wai', 1, 3814, ['322', 'N']],
  CTY_WAID: ['5047', 'Waidhan', 1, 3815, ['340', 'N']],
  CTY_WAID_NB: ['7101', 'Waidhan - Singrauli', 1, 3816, ['340', 'N']],
  CTY_WALA5340: ['5340', 'Walajapet', 1, 3817, ['323', 'N']],
  CITY_Wana_8160: ['8347', 'Wanaparthy', 1, 3818, ['332', '']],
  CTY_WANA: ['4622', 'Wanaparthy', 1, 3819, ['352', 'N']],
  CTY_WANI5356: ['5356', 'Wani', 1, 3820, ['322', 'N']],
  CTY_WANK: ['4735', 'Wankaner', 1, 3821, ['338', 'N']],
  CTY_WNWRI: ['8257', 'Wanowrie', 1, 3822, ['322', '']],
  CTY_WNG: ['7403', 'Warananagar', 1, 3823, ['322', 'N']],
  CITY_Wara_8151: ['8339', 'Warangal', 1, 3824, ['332', '']],
  CTY_WARA67: ['4463', 'Warangal', 1, 3825, ['352', 'N']],
  CTY_WARD68: ['4464', 'Wardha', 1, 3826, ['322', 'N']],
  CTY_WARO: ['5109', 'Warora', 1, 3827, ['322', 'N']],
  CTY_WARU: ['5110', 'Warud', 1, 3828, ['322', 'N']],
  CTY_WARY_NB: ['7102', 'Waryam Khera', 1, 3829, ['320', 'N']],
  CTY_WASH69: ['4465', 'Washim', 1, 3830, ['322', 'N']],
  CTY_WAYA70: ['4466', 'Wayanad', 1, 3831, ['341', 'N']],
  CTY_WEST71: ['4467', 'West Champaran', 1, 3832, ['327', 'N']],
  CTY_WEST72: ['4468', 'West Delhi', 1, 3833, ['321', 'Y']],
  CTY_WST_DNJPR: ['7666', 'West Dinajpur', 1, 3834, ['334', 'N']],
  CTY_WEST73: ['4469', 'West Garo Hills', 1, 3835, ['350', 'N']],
  CTY_WEST74: ['4470', 'West Godavari', 1, 3836, ['332', 'N']],
  CTY_WEST75: ['4471', 'West Kameng', 1, 3837, ['335', 'N']],
  CTY_WEST76: ['4472', 'West Khasi Hills', 1, 3838, ['350', 'N']],
  CTY_WEST77: ['4473', 'West Midnapore', 1, 3839, ['334', 'N']],
  CTY_WEST5248: ['5248', 'West Nimar', 1, 3840, ['340', 'N']],
  CTY_WEST78: ['4474', 'West Siang', 1, 3841, ['335', 'N']],
  CTY_WEST79: ['4475', 'West Sikkim', 1, 3842, ['351', 'N']],
  CTY_WEST80: ['4476', 'West Singhbhum', 1, 3843, ['318', 'N']],
  CTY_WEST81: ['4477', 'West Tripura', 1, 3844, ['330', 'N']],
  CTY_WILL_NB: ['7103', 'Williamnagar', 1, 3845, ['350', 'N']],
  CTY_WOKH82: ['4478', 'Wokha', 1, 3846, ['342', 'N']],
  CTY_YADG5267: ['5267', 'Yadgir', 1, 3847, ['349', 'N']],
  CTY_YAIR_NB: ['7104', 'Yairipok', 1, 3848, ['329', 'N']],
  CTY_YELABRGA: ['7572', 'Yalaburga', 1, 3849, ['349', 'N']],
  CTY_YAMU83: ['4479', 'Yamuna Nagar', 1, 3850, ['337', 'N']],
  CTY_YAMU5362: ['5362', 'Yamuna Nagar', 1, 3851, ['331', 'N']],
  CTY_YAMU_NB: ['7105', 'Yamunanagar', 1, 3852, ['337', 'N']],
  CTY_YANA: ['4623', 'Yanam', 1, 3853, ['332', 'N']],
  CTY_YAVA84: ['4480', 'Yavatmal', 1, 3854, ['322', 'N']],
  CTY_YELDUR: ['7524', 'Yelandur', 1, 3855, ['349', 'N']],
  CTY_YLLPR: ['8094', 'Yellapur', 1, 3856, ['349', 'N']],
  CTY_YEMM_NB: ['7106', 'Yemmiganur', 1, 3857, ['332', 'N']],
  CTY_YEVL_NB: ['7107', 'Yevla', 1, 3858, ['322', 'N']],
  CTY_YEVO: ['5111', 'Yevola', 1, 3859, ['322', 'N']],
  CTY_YING11: ['4637', 'Yingkiong', 1, 3860, ['335', 'N']],
  CTY_ZHB: ['8323', 'Zaheerabad', 1, 3861, ['332', '']],
  CITY_Zahi_8239: ['8425', 'Zahirabad', 1, 3862, ['332', '']],
  CTY_ZAHI_NB: ['7108', 'Zahirabad', 1, 3863, ['352', 'N']],
  CTY_ZAIN_NB: ['7109', 'Zainakote', 1, 3864, ['339', 'N']],
  CTY_ZUDNPUR: ['7959', 'Ziauddin Pur', 1, 3865, ['321', 'Y']],
  CTY_ZINK_NB: ['7110', 'Zinkibhadra', 1, 3866, ['332', 'N']],
  CTY_ZIRA: ['4883', 'Zira', 1, 3867, ['320', 'N']],
  CTY_ZIRA_NB: ['7111', 'Zirakpur', 1, 3868, ['320', 'N']],
  CTY_ZIRO: ['4639', 'Ziro', 1, 3869, ['335', 'N']],
  CTY_ZUAR_NB: ['7112', 'Zuarinagar', 1, 3870, ['348', 'N']],
  CTY_ZUNH85: ['4481', 'Zunhebotto', 1, 3871, ['342', 'N']],
  CTY_LLK: ['7315', 'llkal', 1, 3872, ['349', 'N']],
  CTY_MANCHR: ['8079', 'mankachar', 1, 3873, ['350', 'N']],
  CTY_SUNDE: ['8793', 'sundernagar', 1, 3874, ['331', 'N']],
};
var GCOM_STATE = {
  AAN: ['325', 'Andaman & Nicobar Islands', 1, 1, ['18534']],
  ANDH: ['332', 'Andhra Pradesh', 1, 2, ['18534']],
  ARUN: ['335', 'Arunachal Pradesh', 1, 3, ['18534']],
  ASSM: ['328', 'Assam', 1, 4, ['18534']],
  BIHA: ['327', 'Bihar', 1, 5, ['18534']],
  '6': ['6', 'Cayman Islands', 1, 6, ['65586']],
  CHAN: ['344', 'Chandigarh', 1, 7, ['18534']],
  CHHA: ['347', 'Chattisgarh', 1, 8, ['18534']],
  DNH: ['317', 'Dadra & Nagar Haveli', 1, 9, ['18534']],
  DAD: ['346', 'Daman & Diu', 1, 10, ['18534']],
  DELH: ['321', 'Delhi', 1, 11, ['18534']],
  GOA: ['348', 'Goa', 1, 12, ['18534']],
  GUJA: ['338', 'Gujarat', 1, 13, ['18534']],
  HARY: ['337', 'Haryana', 1, 14, ['18534']],
  HP: ['331', 'Himachal Pradesh', 1, 15, ['18534']],
  JAK: ['339', 'Jammu & Kashmir', 1, 16, ['18534']],
  JHAR: ['318', 'Jharkhand', 1, 17, ['18534']],
  KARN: ['349', 'Karnataka', 1, 18, ['18534']],
  KERA: ['341', 'Kerala', 1, 19, ['18534']],
  '1': ['1', 'Kingdom Of Bahrain', 1, 20, ['18678']],
  '3': ['3', 'Kuwait', 1, 21, ['18543']],
  LAKS: ['336', 'Lakshadweep', 1, 22, ['18534']],
  MP: ['340', 'Madhya Pradesh', 1, 23, ['18534']],
  MAHA: ['322', 'Maharashtra', 1, 24, ['18534']],
  MANI: ['329', 'Manipur', 1, 25, ['18534']],
  MEGH: ['350', 'Meghalaya', 1, 26, ['18534']],
  MIZO: ['343', 'Mizoram', 1, 27, ['18534']],
  NAGA: ['342', 'Nagaland', 1, 28, ['18534']],
  ORIS: ['333', 'Odisha', 1, 29, ['18534']],
  POND: ['324', 'Pondicherry', 1, 30, ['18534']],
  PUNJ: ['320', 'Punjab', 1, 31, ['18534']],
  '4': ['4', 'Qatar', 1, 32, ['18705']],
  RAJA: ['345', 'Rajasthan', 1, 33, ['18534']],
  SIKK: ['351', 'Sikkim', 1, 34, ['18534']],
  '2': ['2', 'Sultanate of Oman', 1, 35, ['18619']],
  TN: ['323', 'Tamil Nadu', 1, 36, ['18534']],
  TNG: ['352', 'Telangana', 1, 37, ['18534']],
  TRIP: ['330', 'Tripura', 1, 38, ['18534']],
  '5': ['5', 'U.A.E', 1, 39, ['18622']],
  UP: ['326', 'Uttar Pradesh', 1, 40, ['18534']],
  UTTD: ['316', 'Uttarakhand', 1, 41, ['18534']],
  WB: ['334', 'West Bengal', 1, 42, ['18534']],
};
var GCOM_AGENT_CODES = {
  '361': ['00808947', 'C2TCV9', 1, 1, []],
  '362': ['00808948', 'C2TCV9', 1, 2, []],
  '363': ['00808947', 'CIP', 1, 3, []],
  '364': ['00808948', 'CIP', 1, 4, []],
  '365': ['00808947', 'IUNO', 1, 5, []],
  '366': ['00808948', 'IUNO', 1, 6, []],
  '367': ['00808947', 'CDAC', 1, 7, []],
  '368': ['00808948', 'CDAC', 1, 8, []],
  '369': ['00808947', 'EAHT', 1, 9, []],
  '370': ['00808948', 'EAHT', 1, 10, []],
  '371': ['00808947', 'CANC', 1, 11, []],
  '372': ['00808948', 'CANC', 1, 12, []],
  '373': ['00808947', 'PGNP', 1, 13, []],
  '374': ['00808948', 'PGNP', 1, 14, []],
  '375': ['00808947', 'IANP', 1, 15, []],
  '376': ['00808948', 'IANP', 1, 16, []],
  '377': ['00808947', 'SANCH', 1, 17, []],
  '378': ['00808948', 'SANCH', 1, 18, []],
  '562': ['00923865', 'C2P3DP', 1, 19, []],
  '563': ['00923866', 'C2P3DP', 1, 20, []],
  '564': ['00923867', 'C2PP', 1, 21, []],
  '533': ['00347134', 'C2PP', 1, 22, []],
  '534': ['00347134', 'SANCH', 1, 23, []],
  '561': ['00923864', 'C2PP', 1, 24, []],
  '421': ['00884809', 'PGNP', 1, 25, []],
  '441': ['00773787', 'SANPAR', 1, 26, []],
  '501': ['00732252', 'GSPV9', 1, 27, []],
  '502': ['00884808', 'GSPV9', 1, 28, []],
  '581': ['00925227', 'C2PP', 1, 29, []],
  '582': ['00925227', 'C2P3DP', 1, 30, []],
  '583': ['00925227', 'SANCHP', 1, 31, []],
  '21': ['00773787', 'SANCH', 1, 32, []],
  '22': ['00775277', 'SANCH', 1, 33, []],
  '281': ['00732252', 'SANCH', 1, 34, []],
  '282': ['00732252', 'SANPAR', 1, 35, []],
  '283': ['00732252', 'C2I', 1, 36, []],
  '284': ['00732252', 'C2R', 1, 37, []],
  '285': ['00732252', 'SIPPAR', 1, 38, []],
  '286': ['00732252', 'EA', 1, 39, []],
  '287': ['00732252', 'UL8WP', 1, 40, []],
  '288': ['00732252', 'PENPAR', 1, 41, []],
  '289': ['00732252', 'CDAC', 1, 42, []],
  '290': ['00732252', 'EAHT', 1, 43, []],
  '291': ['00732252', 'CANC', 1, 44, []],
  '292': ['00732252', 'C2TCV9', 1, 45, []],
  '293': ['00732252', 'YS', 1, 46, []],
  '294': ['00732252', 'GPP', 1, 47, []],
  '295': ['00732252', 'UL8ESP3', 1, 48, []],
  '296': ['00732252', 'NIV', 1, 49, []],
  '297': ['00732252', 'SANCHP', 1, 50, []],
  '298': ['00732252', 'IUNO', 1, 51, []],
  '299': ['00732252', 'PGNP', 1, 52, []],
  '300': ['00732252', 'EALPTP', 1, 53, []],
  '301': ['00732252', 'CIP', 1, 54, []],
  '302': ['00732252', 'CG', 1, 55, []],
  '303': ['00732252', 'NPR', 1, 56, []],
  '304': ['00732252', 'LPT', 1, 57, []],
  '305': ['00732252', 'SAPLUSE', 1, 58, []],
  '307': ['00884808', 'SANCH', 1, 59, []],
  '308': ['00884808', 'SANPAR', 1, 60, []],
  '309': ['00884808', 'C2I', 1, 61, []],
  '310': ['00884808', 'C2R', 1, 62, []],
  '311': ['00884808', 'SIPPAR', 1, 63, []],
  '312': ['00884808', 'EA', 1, 64, []],
  '313': ['00884808', 'UL8WP', 1, 65, []],
  '314': ['00884808', 'PENPAR', 1, 66, []],
  '315': ['00884808', 'CDAC', 1, 67, []],
  '316': ['00884808', 'EAHT', 1, 68, []],
  '317': ['00884808', 'CANC', 1, 69, []],
  '318': ['00884808', 'C2TCV9', 1, 70, []],
  '319': ['00884808', 'YS', 1, 71, []],
  '320': ['00884808', 'GPP', 1, 72, []],
  '321': ['00884808', 'UL8ESP3', 1, 73, []],
  '322': ['00884808', 'NIV', 1, 74, []],
  '323': ['00884808', 'SANCHP', 1, 75, []],
  '324': ['00884808', 'IUNO', 1, 76, []],
  '325': ['00884808', 'PGNP', 1, 77, []],
  '326': ['00884808', 'EALPTP', 1, 78, []],
  '327': ['00884808', 'CIP', 1, 79, []],
  '328': ['00884808', 'CG', 1, 80, []],
  '329': ['00884808', 'NPR', 1, 81, []],
  '330': ['00884808', 'LPT', 1, 82, []],
  '331': ['00884808', 'SAPLUSE', 1, 83, []],
  '333': ['00903775', 'C2PP', 1, 84, []],
  '401': ['00347145', 'C2PP', 1, 85, []],
  '402': ['00347150', 'C2PP', 1, 86, []],
  '403': ['00347152', 'C2PP', 1, 87, []],
  '404': ['00347154', 'C2PP', 1, 88, []],
  '405': ['00347153', 'C2PP', 1, 89, []],
  '406': ['00347151', 'C2PP', 1, 90, []],
  '407': ['00347145', 'SANCH', 1, 91, []],
  '408': ['00347150', 'SANCH', 1, 92, []],
  '409': ['00347152', 'SANCH', 1, 93, []],
  '410': ['00347154', 'SANCH', 1, 94, []],
  '411': ['00347153', 'SANCH', 1, 95, []],
  '412': ['00347151', 'SANCH', 1, 96, []],
  '461': ['00738444', 'C2PP', 1, 97, []],
  '462': ['00738444', 'C2P3DP', 1, 98, []],
  '463': ['00738444', 'CIP', 1, 99, []],
  '464': ['00738444', 'C2I', 1, 100, []],
  '465': ['00738444', 'LPT', 1, 101, []],
  '466': ['00738444', 'EA', 1, 102, []],
  '467': ['00738444', 'UL8ESP3', 1, 103, []],
  '468': ['00738444', 'UL8WP', 1, 104, []],
  '469': ['00738444', 'NIV', 1, 105, []],
  '470': ['00738444', 'IUNO', 1, 106, []],
  '471': ['00738444', 'SANPAR', 1, 107, []],
  '472': ['00738444', 'SANCHP', 1, 108, []],
  '473': ['00738444', 'CG', 1, 109, []],
  '474': ['00738444', 'EALPTP', 1, 110, []],
  '475': ['00738444', 'SIPPAR', 1, 111, []],
  '476': ['00738444', 'SANCH', 1, 112, []],
  '477': ['00738444', 'SAPLUSE', 1, 113, []],
  '478': ['00738444', 'PGNP', 1, 114, []],
  '479': ['00738444', 'C2R', 1, 115, []],
  '480': ['00738444', 'PENPAR', 1, 116, []],
  '481': ['00738444', 'GPP', 1, 117, []],
  '482': ['00738444', 'IANP', 1, 118, []],
  '483': ['00738444', 'C2TCV9', 1, 119, []],
  '484': ['00738444', 'CDAC', 1, 120, []],
  '485': ['00738444', 'EAHT', 1, 121, []],
  '486': ['00738444', 'CANC', 1, 122, []],
  '487': ['00738444', 'YS', 1, 123, []],
  '488': ['00738444', 'YSUD', 1, 124, []],
  '489': ['00738444', 'C2PSA', 1, 125, []],
  '541': ['00895507', 'C2PP', 1, 126, []],
  '542': ['00895507', 'C2P3DP', 1, 127, []],
  '543': ['00895507', 'SANCHP', 1, 128, []],
  '42': ['00625432', 'C2P3DP', 1, 129, []],
  '43': ['00730073', 'C2P3DP', 1, 130, []],
  '44': ['00687587', 'C2P3DP', 1, 131, []],
  '45': ['00740058', 'C2P3DP', 1, 132, []],
  '46': ['00754929', 'C2P3DP', 1, 133, []],
  '47': ['00755723', 'C2P3DP', 1, 134, []],
  '48': ['00755724', 'C2P3DP', 1, 135, []],
  '49': ['00755725', 'C2P3DP', 1, 136, []],
  '50': ['00755726', 'C2P3DP', 1, 137, []],
  '51': ['00755727', 'C2P3DP', 1, 138, []],
  '52': ['00771254', 'C2P3DP', 1, 139, []],
  '53': ['00755899', 'C2P3DP', 1, 140, []],
  '54': ['00774104', 'C2P3DP', 1, 141, []],
  '55': ['00853822', 'C2P3DP', 1, 142, []],
  '56': ['00775277', 'C2P3DP', 1, 143, []],
  '57': ['00773787', 'C2P3DP', 1, 144, []],
  '58': ['00768719', 'C2P3DP', 1, 145, []],
  '59': ['00763343', 'C2P3DP', 1, 146, []],
  '60': ['00774104', 'SANCH', 1, 147, []],
  '61': ['00803932', 'SANCH', 1, 148, []],
  '62': ['00726941', 'SANCH', 1, 149, []],
  '63': ['00844215', 'SANCH', 1, 150, []],
  '64': ['00853822', 'SANCH', 1, 151, []],
  '65': ['00837280', 'SANCH', 1, 152, []],
  '66': ['00755723', 'SANCH', 1, 153, []],
  '67': ['00808947', 'SANPAR', 1, 154, []],
  '68': ['00808948', 'SANPAR', 1, 155, []],
  '69': ['00844215', 'SANPAR', 1, 156, []],
  '70': ['00803932', 'SANPAR', 1, 157, []],
  '71': ['00774104', 'SANPAR', 1, 158, []],
  '72': ['00837280', 'SANPAR', 1, 159, []],
  '73': ['00803932', 'UL9C2I', 1, 160, []],
  '74': ['00808947', 'UL9C2I', 1, 161, []],
  '75': ['00808948', 'UL9C2I', 1, 162, []],
  '76': ['00774104', 'UL9C2I', 1, 163, []],
  '77': ['00755723', 'UL9C2I', 1, 164, []],
  '78': ['00755724', 'UL9C2I', 1, 165, []],
  '79': ['00755725', 'UL9C2I', 1, 166, []],
  '80': ['00755726', 'UL9C2I', 1, 167, []],
  '81': ['00755727', 'UL9C2I', 1, 168, []],
  '82': ['00625432', 'UL9C2I', 1, 169, []],
  '83': ['00803932', 'UL8C2I', 1, 170, []],
  '84': ['00808947', 'UL8C2I', 1, 171, []],
  '85': ['00808948', 'UL8C2I', 1, 172, []],
  '86': ['00774104', 'UL8C2I', 1, 173, []],
  '87': ['00755723', 'UL8C2I', 1, 174, []],
  '88': ['00755724', 'UL8C2I', 1, 175, []],
  '89': ['00755725', 'UL8C2I', 1, 176, []],
  '90': ['00755726', 'UL8C2I', 1, 177, []],
  '91': ['00755727', 'UL8C2I', 1, 178, []],
  '92': ['00625432', 'UL8C2I', 1, 179, []],
  '93': ['00837280', 'UL8C2R', 1, 180, []],
  '94': ['00803932', 'UL8C2R', 1, 181, []],
  '95': ['00774104', 'UL8C2R', 1, 182, []],
  '96': ['00837280', 'UL9C2R', 1, 183, []],
  '97': ['00803932', 'UL9C2R', 1, 184, []],
  '98': ['00774104', 'UL9C2R', 1, 185, []],
  '99': ['00775277', 'SIPPAR', 1, 186, []],
  '100': ['00726941', 'SIPPAR', 1, 187, []],
  '101': ['00808947', 'SIPPAR', 1, 188, []],
  '102': ['00808948', 'SIPPAR', 1, 189, []],
  '103': ['00844215', 'SIPPAR', 1, 190, []],
  '104': ['00837280', 'SIPPAR', 1, 191, []],
  '105': ['00803932', 'SIPPAR', 1, 192, []],
  '106': ['00774104', 'SIPPAR', 1, 193, []],
  '107': ['00773787', 'SIPPAR', 1, 194, []],
  '108': ['00775277', 'UL8EA1', 1, 195, []],
  '109': ['00773787', 'UL8EA1', 1, 196, []],
  '110': ['00808947', 'UL8EA1', 1, 197, []],
  '111': ['00808948', 'UL8EA1', 1, 198, []],
  '112': ['00844215', 'UL8EA1', 1, 199, []],
  '113': ['00837280', 'UL8EA1', 1, 200, []],
  '114': ['00803932', 'UL8EA1', 1, 201, []],
  '115': ['00774104', 'UL8EA1', 1, 202, []],
  '116': ['00775277', 'UL9EA1', 1, 203, []],
  '117': ['00773787', 'UL9EA1', 1, 204, []],
  '118': ['00808947', 'UL9EA1', 1, 205, []],
  '119': ['00808948', 'UL9EA1', 1, 206, []],
  '120': ['00844215', 'UL9EA1', 1, 207, []],
  '121': ['00837280', 'UL9EA1', 1, 208, []],
  '122': ['00803932', 'UL9EA1', 1, 209, []],
  '123': ['00774104', 'UL9EA1', 1, 210, []],
  '124': ['00808947', 'UL9EA', 1, 211, []],
  '125': ['00808948', 'UL9EA', 1, 212, []],
  '126': ['00773787', 'UL9EA', 1, 213, []],
  '127': ['00803932', 'UL9EA', 1, 214, []],
  '128': ['00774104', 'UL9EA', 1, 215, []],
  '129': ['00808947', 'UL8EA', 1, 216, []],
  '130': ['00808948', 'UL8EA', 1, 217, []],
  '131': ['00773787', 'UL8EA', 1, 218, []],
  '132': ['00803932', 'UL8EA', 1, 219, []],
  '133': ['00774104', 'UL8EA', 1, 220, []],
  '134': ['00844215', 'UL8EA2', 1, 221, []],
  '135': ['00730073', 'UL8EA2', 1, 222, []],
  '136': ['00844215', 'UL9EA2', 1, 223, []],
  '137': ['00730073', 'UL9EA2', 1, 224, []],
  '138': ['00808947', 'UL8WP', 1, 225, []],
  '139': ['00808948', 'UL8WP', 1, 226, []],
  '140': ['00803932', 'UL8WP', 1, 227, []],
  '141': ['00774104', 'UL8WP', 1, 228, []],
  '142': ['00808947', 'PENPAR', 1, 229, []],
  '143': ['00808948', 'PENPAR', 1, 230, []],
  '144': ['00803932', 'PENPAR', 1, 231, []],
  '145': ['00774104', 'PENPAR', 1, 232, []],
  '146': ['00773787', 'PENPAR', 1, 233, []],
  '147': ['00625432', 'CDAC', 1, 234, []],
  '148': ['00730073', 'CDAC', 1, 235, []],
  '149': ['00755723', 'CDAC', 1, 236, []],
  '150': ['00755724', 'CDAC', 1, 237, []],
  '151': ['00755725', 'CDAC', 1, 238, []],
  '152': ['00755726', 'CDAC', 1, 239, []],
  '153': ['00755727', 'CDAC', 1, 240, []],
  '154': ['00774104', 'CDAC', 1, 241, []],
  '155': ['00625432', 'EAHT', 1, 242, []],
  '156': ['00730073', 'EAHT', 1, 243, []],
  '157': ['00755723', 'EAHT', 1, 244, []],
  '158': ['00755724', 'EAHT', 1, 245, []],
  '159': ['00755725', 'EAHT', 1, 246, []],
  '160': ['00755726', 'EAHT', 1, 247, []],
  '161': ['00755727', 'EAHT', 1, 248, []],
  '162': ['00774104', 'EAHT', 1, 249, []],
  '163': ['00625432', 'C2TCV9', 1, 250, []],
  '164': ['00730073', 'C2TCV9', 1, 251, []],
  '165': ['00755723', 'C2TCV9', 1, 252, []],
  '166': ['00755724', 'C2TCV9', 1, 253, []],
  '167': ['00755725', 'C2TCV9', 1, 254, []],
  '168': ['00755726', 'C2TCV9', 1, 255, []],
  '169': ['00755727', 'C2TCV9', 1, 256, []],
  '170': ['00774104', 'C2TCV9', 1, 257, []],
  '171': ['00837280', 'YS', 1, 258, []],
  '172': ['00773787', 'YS', 1, 259, []],
  '173': ['00808947', 'YS', 1, 260, []],
  '174': ['00808948', 'YS', 1, 261, []],
  '175': ['00803932', 'YS', 1, 262, []],
  '176': ['00774104', 'YS', 1, 263, []],
  '177': ['00730073', 'YSUD', 1, 264, []],
  '178': ['00773787', 'UL9YS', 1, 265, []],
  '179': ['00808947', 'UL9YS', 1, 266, []],
  '180': ['00808948', 'UL9YS', 1, 267, []],
  '181': ['00803932', 'UL9YS', 1, 268, []],
  '182': ['00774104', 'UL9YS', 1, 269, []],
  '183': ['00730073', 'UL9YS', 1, 270, []],
  '184': ['00773787', 'UL8YS', 1, 271, []],
  '185': ['00808947', 'UL8YS', 1, 272, []],
  '186': ['00808948', 'UL8YS', 1, 273, []],
  '187': ['00803932', 'UL8YS', 1, 274, []],
  '188': ['00774104', 'UL8YS', 1, 275, []],
  '189': ['00730073', 'UL8YS', 1, 276, []],
  '190': ['00773787', 'GPP', 1, 277, []],
  '191': ['00808947', 'GPP', 1, 278, []],
  '192': ['00808948', 'GPP', 1, 279, []],
  '193': ['00803932', 'GPP', 1, 280, []],
  '194': ['00774104', 'GPP', 1, 281, []],
  '195': ['00773787', 'UL8ESP3', 1, 282, []],
  '196': ['00803932', 'UL8ESP3', 1, 283, []],
  '197': ['00774104', 'UL8ESP3', 1, 284, []],
  '198': ['00808947', 'NIV', 1, 285, []],
  '199': ['00808948', 'NIV', 1, 286, []],
  '200': ['00844215', 'NIV', 1, 287, []],
  '201': ['00775277', 'NIV', 1, 288, []],
  '202': ['00773787', 'NIV', 1, 289, []],
  '203': ['00837280', 'NIV', 1, 290, []],
  '204': ['00803932', 'NIV', 1, 291, []],
  '205': ['00774104', 'NIV', 1, 292, []],
  '206': ['00808947', 'SANCHP', 1, 293, []],
  '207': ['00808948', 'SANCHP', 1, 294, []],
  '208': ['00837281', 'SANCHP', 1, 295, []],
  '209': ['00773787', 'IUNO', 1, 296, []],
  '210': ['00837280', 'IUNO', 1, 297, []],
  '211': ['00803932', 'IUNO', 1, 298, []],
  '212': ['00774104', 'IUNO', 1, 299, []],
  '213': ['00773787', 'PGNP', 1, 300, []],
  '214': ['00837280', 'PGNP', 1, 301, []],
  '215': ['00803932', 'PGNP', 1, 302, []],
  '216': ['00774104', 'PGNP', 1, 303, []],
  '217': ['00844215', 'PGNP', 1, 304, []],
  '218': ['00773787', 'EALPTP', 1, 305, []],
  '219': ['00808947', 'EALPTP', 1, 306, []],
  '220': ['00808948', 'EALPTP', 1, 307, []],
  '221': ['00803932', 'EALPTP', 1, 308, []],
  '222': ['00774104', 'EALPTP', 1, 309, []],
  '223': ['00853822', 'EALPTP', 1, 310, []],
  '224': ['00755723', 'EALPTP', 1, 311, []],
  '225': ['00803932', 'CIP', 1, 312, []],
  '226': ['00774104', 'CIP', 1, 313, []],
  '227': ['00625432', 'CANC', 1, 314, []],
  '228': ['00730073', 'CANC', 1, 315, []],
  '229': ['00755723', 'CANC', 1, 316, []],
  '230': ['00755724', 'CANC', 1, 317, []],
  '231': ['00755725', 'CANC', 1, 318, []],
  '232': ['00755726', 'CANC', 1, 319, []],
  '233': ['00755727', 'CANC', 1, 320, []],
  '234': ['00774104', 'CANC', 1, 321, []],
  '235': ['00895346', 'CANC', 1, 322, []],
  '236': ['00837280', 'CANC', 1, 323, []],
  '237': ['00808947', 'CG', 1, 324, []],
  '238': ['00808948', 'CG', 1, 325, []],
  '239': ['00803932', 'CG', 1, 326, []],
  '240': ['00774104', 'CG', 1, 327, []],
  '241': ['00808947', 'NPR', 1, 328, []],
  '242': ['00808948', 'NPR', 1, 329, []],
  '243': ['00803932', 'NPR', 1, 330, []],
  '244': ['00774104', 'NPR', 1, 331, []],
  '245': ['00808947', 'LPT', 1, 332, []],
  '246': ['00808948', 'LPT', 1, 333, []],
  '247': ['00803932', 'LPT', 1, 334, []],
  '248': ['00774104', 'LPT', 1, 335, []],
  '249': ['00844215', 'SAPLUSE', 1, 336, []],
  '250': ['00808947', 'SAPLUSE', 1, 337, []],
  '251': ['00808948', 'SAPLUSE', 1, 338, []],
  '252': ['00773787', 'SAPLUSE', 1, 339, []],
  '253': ['00837280', 'SAPLUSE', 1, 340, []],
  '254': ['00803932', 'SAPLUSE', 1, 341, []],
  '255': ['00774104', 'SAPLUSE', 1, 342, []],
  '256': ['00853822', 'SAPLUSE', 1, 343, []],
  '257': ['00773787', 'C2PP', 1, 344, []],
  '258': ['00768719', 'C2PP', 1, 345, []],
  '259': ['00895346', 'C2PP', 1, 346, []],
  '260': ['00803932', 'C2PP', 1, 347, []],
  '261': ['00774104', 'C2PP', 1, 348, []],
  '262': ['00730073', 'C2PP', 1, 349, []],
  '381': ['00898450', 'SANCH', 1, 350, []],
  '382': ['00898450', 'SANCHP', 1, 351, []],
  '383': ['00898450', 'PGNP', 1, 352, []],
  '384': ['00898450', 'IUNO', 1, 353, []],
  '385': ['00898450', 'C2P3DP', 1, 354, []],
  '386': ['00898450', 'C2PP', 1, 355, []],
  '387': ['00898450', 'SIPPAR', 1, 356, []],
  '388': ['00898450', 'C2I', 1, 357, []],
  '389': ['00909636', 'IANP', 1, 358, []],
  '390': ['00909636', 'C2P3DP', 1, 359, []],
  '391': ['00909636', 'SANCHP', 1, 360, []],
  '392': ['00909636', 'SANCH', 1, 361, []],
};
var GOPS_COUNTRY = {
  CNTRY_AFG: ['18613', 'Afghanistan', 1, 1, []],
  CNTRY_AL: ['18668', 'Albania', 1, 2, []],
  CNTRY_GBA: ['18524', 'Alderney', 1, 3, []],
  CNTRY_DZ: ['18509', 'Algeria', 1, 4, []],
  CNTRY_AND: ['18669', 'Andorra', 1, 5, []],
  CNTRY_AGO: ['18624', 'Angola', 1, 6, []],
  CNTRY_AGU: ['18625', 'Anguilla', 1, 7, []],
  CNTRY_ABB: ['18623', 'Antigua and Barbuda', 1, 8, []],
  CNTRY_RA: ['18565', 'Argentina', 1, 9, []],
  CNTRY_ARM: ['18627', 'Armenia', 1, 10, []],
  CNTRY_ARB: ['18626', 'Aruba', 1, 11, []],
  CNTRY_AUS: ['18670', 'Australia', 1, 12, []],
  CNTRY_A: ['18612', 'Austria', 1, 13, []],
  CNTRY_AZB: ['18628', 'Azerbaijan', 1, 14, []],
  CNTRY_BS: ['18679', 'Bahamas', 1, 15, []],
  CNTRY_BRN: ['18678', 'Bahrain', 1, 16, []],
  CNTRY_BD: ['18672', 'Bangladesh', 1, 17, []],
  CNTRY_BDS: ['18673', 'Barbados', 1, 18, []],
  CNTRY_BLR: ['18632', 'Belarus', 1, 19, []],
  CNTRY_B: ['18671', 'Belgium', 1, 20, []],
  CNTRY_BH: ['18675', 'Belize', 1, 21, []],
  CNTRY_DY: ['18508', 'Benin', 1, 22, []],
  CNTRY_BER: ['18629', 'Bermuda', 1, 23, []],
  CNTRY_BHU: ['18630', 'Bhutan', 1, 24, []],
  CNTRY_BOL: ['18676', 'Bolivia', 1, 25, []],
  CNTRY_BSN: ['18636', 'Bosnia', 1, 26, []],
  CNTRY_RB: ['18566', 'Botswana', 1, 27, []],
  CNTRY_BR: ['18677', 'Brazil', 1, 28, []],
  CNTRY_BRT: ['18635', 'Britain', 1, 29, []],
  CNTRY_BVI: ['18637', 'British Virgin Islands', 1, 30, []],
  CNTRY_BNI: ['18745', 'Brunei', 1, 31, []],
  CNTRY_BG: ['18674', 'Bulgaria', 1, 32, []],
  CNTRY_BKF: ['18631', 'Burkina Faso', 1, 33, []],
  CNTRY_BRM: ['18634', 'Burma', 1, 34, []],
  CNTRY_BRD: ['18633', 'Burundi', 1, 35, []],
  CNTRY_K: ['18542', 'Cambodia', 1, 36, []],
  CNTRY_CMR: ['18639', 'Cameroon', 1, 37, []],
  CNTRY_CDN: ['18682', 'Canada', 1, 38, []],
  CNTRY_CNI: ['18641', 'Canary Islands', 1, 39, []],
  CNTRY_CTN: ['18737', 'Cape Town', 1, 40, []],
  CNTRY_CPV: ['18642', 'Cape Verde', 1, 41, []],
  CNTRY_CYI: ['65586', 'Cayman Islands', 1, 42, []],
  CNTRY_RCA: ['18567', 'Central African Republic', 1, 43, []],
  CNTRY_CHD: ['18638', 'Chad', 1, 44, []],
  CNTRY_RCH: ['18569', 'Chile', 1, 45, []],
  CNTRY_CHN: ['18738', 'China', 1, 46, []],
  CNTRY_CO: ['18502', 'Colombia', 1, 47, []],
  CNTRY_COM: ['18640', 'Comoros', 1, 48, []],
  CNTRY_RCB: ['18568', 'Congo', 1, 49, []],
  CNTRY_CR: ['18503', 'Costa Rica', 1, 50, []],
  CNTRY_CV9: ['18666', 'Cote dIvoire', 1, 51, []],
  CNTRY_HR: ['18531', 'Croatia', 1, 52, []],
  CNTRY_C: ['18681', 'Cuba', 1, 53, []],
  CNTRY_CRC: ['18643', 'Curacao', 1, 54, []],
  CNTRY_CY: ['18504', 'Cyprus', 1, 55, []],
  CNTRY_CZH: ['18739', 'Czech', 1, 56, []],
  CNTRY_IC: ['18734', 'Czech Republic', 1, 57, []],
  CNTRY_DPC: ['18645', 'Democratic Republic of Congo', 1, 58, []],
  CNTRY_DK: ['18506', 'Denmark', 1, 59, []],
  CNTRY_DJI: ['18644', 'Djibouti', 1, 60, []],
  CNTRY_WD: ['18602', 'Dominica', 1, 61, []],
  CNTRY_DOM: ['18507', 'Dominican Republic', 1, 62, []],
  CNTRY_EA1: ['18732', 'East Africa', 1, 63, []],
  CNTRY_EA: ['18729', 'EastTimor', 1, 64, []],
  CNTRY_EC: ['18514', 'Ecuador', 1, 65, []],
  CNTRY_ET: ['18516', 'Egypt', 1, 66, []],
  CNTRY_ES: ['18515', 'El Salvador', 1, 67, []],
  CNTRY_ENG: ['18646', 'England', 1, 68, []],
  CNTRY_EQG: ['18647', 'Equitorial Guinea', 1, 69, []],
  CNTRY_ERT: ['18648', 'Eritrea', 1, 70, []],
  CNTRY_EW: ['18518', 'Estonia', 1, 71, []],
  CNTRY_ETH: ['18517', 'Ethiopia', 1, 72, []],
  CNTRY_FLI: ['18649', 'Falkland Islands', 1, 73, []],
  CNTRY_FJI: ['18521', 'Fiji', 1, 74, []],
  CNTRY_FIN: ['18520', 'Finland', 1, 75, []],
  CNTRY_F: ['18519', 'France', 1, 76, []],
  CNTRY_FRG: ['18650', 'French Guiana', 1, 77, []],
  CNTRY_FRP: ['18651', 'French Polynesia', 1, 78, []],
  CNTRY_GBN: ['18652', 'Gabon', 1, 79, []],
  CNTRY_GMB: ['18740', 'Gambia', 1, 80, []],
  CNTRY_GRG: ['18656', 'Georgia', 1, 81, []],
  CNTRY_D: ['18505', 'Germany', 1, 82, []],
  CNTRY_GH: ['18527', 'Ghana', 1, 83, []],
  CNTRY_GBZ: ['18525', 'Gibraltar', 1, 84, []],
  CNTRY_GB: ['18523', 'Great Britain', 1, 85, []],
  CNTRY_GR: ['18528', 'Greece', 1, 86, []],
  CNTRY_GNL: ['18655', 'Greenland', 1, 87, []],
  CNTRY_WG: ['18603', 'Grenada', 1, 88, []],
  CNTRY_GDL: ['18654', 'Guadeloupe', 1, 89, []],
  CNTRY_GUM: ['18658', 'Guam', 1, 90, []],
  CNTRY_GCA: ['18526', 'Guatemala', 1, 91, []],
  CNTRY_GUI: ['18657', 'Guinea', 1, 92, []],
  CNTRY_GBS: ['18653', 'Guinea bissau', 1, 93, []],
  CNTRY_GUY: ['18529', 'Guyana', 1, 94, []],
  CNTRY_RH: ['18570', 'Haiti', 1, 95, []],
  CNTRY_HDR: ['18659', 'Honduras', 1, 96, []],
  CNTRY_HK: ['18614', 'Hong Kong', 1, 97, []],
  CNTRY_H: ['18530', 'Hungary', 1, 98, []],
  CNTRY_IS: ['18538', 'Iceland', 1, 99, []],
  CNTRY_IND: ['18534', 'India', 1, 100, []],
  CNTRY_RI: ['18617', 'Indonesia', 1, 101, []],
  CNTRY_IR: ['18535', 'Iran', 1, 102, []],
  CNTRY_IRQ: ['18537', 'Iraq', 1, 103, []],
  CNTRY_IRL: ['18536', 'Ireland', 1, 104, []],
  CNTRY_IL: ['18533', 'Israel', 1, 105, []],
  CNTRY_I: ['18532', 'Italy', 1, 106, []],
  CNTRY_CI: ['18684', 'Ivory Coast', 1, 107, []],
  CNTRY_JA: ['18540', 'Jamaica', 1, 108, []],
  CNTRY_J: ['18539', 'Japan', 1, 109, []],
  CNTRY_JOR: ['18541', 'Jordan', 1, 110, []],
  CNTRY_KSN: ['18741', 'Kazhakistan', 1, 111, []],
  CNTRY_EAK: ['18511', 'Kenya', 1, 112, []],
  CNTRY_KIR: ['18686', 'Kiribati', 1, 113, []],
  CNTRY_KWT: ['18543', 'Kuwait', 1, 114, []],
  CNTRY_KGZ: ['18660', 'Kyrgyzstan', 1, 115, []],
  CNTRY_LAO: ['18545', 'Laos', 1, 116, []],
  CNTRY_LV: ['18549', 'Latvia', 1, 117, []],
  CNTRY_RL: ['18572', 'Lebanon', 1, 118, []],
  CNTRY_LS: ['18547', 'Lesotho', 1, 119, []],
  CNTRY_LBR: ['18687', 'Liberia', 1, 120, []],
  CNTRY_LAR: ['18546', 'Libya', 1, 121, []],
  CNTRY_FL: ['18522', 'Liechtenstein', 1, 122, []],
  CNTRY_LT: ['18548', 'Lithuania', 1, 123, []],
  CNTRY_WC: ['18662', 'London', 1, 124, []],
  CNTRY_L: ['18544', 'Luxembourg', 1, 125, []],
  CNTRY_MCU: ['18689', 'Macau', 1, 126, []],
  CNTRY_MK: ['18554', 'Macedonia', 1, 127, []],
  CNTRY_RM: ['18573', 'Madagascar', 1, 128, []],
  CNTRY_MDR: ['18690', 'Madeira', 1, 129, []],
  CNTRY_MW: ['18556', 'Malawi', 1, 130, []],
  CNTRY_MAL: ['18615', 'Malaysia', 1, 131, []],
  CNTRY_MLD: ['18691', 'Maldives', 1, 132, []],
  CNTRY_RMM: ['18574', 'Mali', 1, 133, []],
  CNTRY_M: ['18550', 'Malta', 1, 134, []],
  CNTRY_MGL: ['18742', 'Mangolia', 1, 135, []],
  CNTRY_MSI: ['18692', 'Marshall Islands', 1, 136, []],
  CNTRY_MTQ: ['18693', 'Martinique', 1, 137, []],
  CNTRY_RIM: ['18571', 'Mauritania', 1, 138, []],
  CNTRY_MS: ['18555', 'Mauritius', 1, 139, []],
  CNTRY_MEX: ['18553', 'Mexico', 1, 140, []],
  CNTRY_MCN: ['18688', 'Micronesia', 1, 141, []],
  CNTRY_MDV: ['18664', 'Moldova', 1, 142, []],
  CNTRY_MC: ['18552', 'Monaco', 1, 143, []],
  CNTRY_MG5: ['18730', 'Montenegro', 1, 144, []],
  CNTRY_MTS: ['18694', 'Monteserrat', 1, 145, []],
  CNTRY_MA: ['18551', 'Morocco', 1, 146, []],
  CNTRY_MZB: ['18695', 'Mozambique', 1, 147, []],
  CNTRY_BUR: ['18680', 'Myanmar', 1, 148, []],
  CNTRY_NMB: ['18700', 'Namibia', 1, 149, []],
  CNTRY_NAU: ['18696', 'Nauru', 1, 150, []],
  CNTRY_NEP: ['18620', 'Nepal', 1, 151, []],
  CNTRY_NL: ['18559', 'Netherlands', 1, 152, []],
  CNTRY_NCD: ['18697', 'New Caledonia', 1, 153, []],
  CNTRY_NZL: ['18736', 'New Zealand', 1, 154, []],
  CNTRY_NIC: ['18558', 'Nicaragua', 1, 155, []],
  CNTRY_RN: ['18575', 'Niger', 1, 156, []],
  CNTRY_WAN: ['18601', 'Nigeria', 1, 157, []],
  CNTRY_NIU: ['18699', 'Niue', 1, 158, []],
  CNTRY_NK: ['18665', 'North Korea', 1, 159, []],
  CNTRY_NIR: ['18698', 'Northern Ireland', 1, 160, []],
  CNTRY_N: ['18557', 'Norway', 1, 161, []],
  CNTRY_OMA: ['18619', 'Oman', 1, 162, []],
  CNTRY_OTH: ['18743', 'Other', 1, 163, []],
  CNTRY_PK: ['18562', 'Pakistan', 1, 164, []],
  CNTRY_PLU: ['18702', 'Palau', 1, 165, []],
  CNTRY_PLS: ['18701', 'Palestine', 1, 166, []],
  CNTRY_PA: ['18616', 'Panama', 1, 167, []],
  CNTRY_PNG: ['18703', 'Papua New guinea', 1, 168, []],
  CNTRY_PY: ['18564', 'Paraguay', 1, 169, []],
  CNTRY_PE: ['18561', 'Peru', 1, 170, []],
  CNTRY_RP: ['18579', 'Philippines', 1, 171, []],
  CNTRY_PL: ['18563', 'Poland', 1, 172, []],
  CNTRY_P: ['18560', 'Portugal', 1, 173, []],
  CNTRY_PUR: ['18704', 'Puerto Rico', 1, 174, []],
  CNTRY_QTR: ['18705', 'Qatar', 1, 175, []],
  CNTRY_RS: ['18731', 'RSA', 1, 176, []],
  CNTRY_ROC: ['18707', 'Republic of Congo', 1, 177, []],
  CNTRY_ROK: ['18577', 'Republic of Korea', 1, 178, []],
  CNTRY_REU: ['18706', 'Reunion', 1, 179, []],
  CNTRY_RO: ['18576', 'Romania', 1, 180, []],
  CNTRY_RUS: ['18581', 'Russia', 1, 181, []],
  CNTRY_RWA: ['18582', 'Rwanda', 1, 182, []],
  CNTRY_WS: ['18604', 'Samoa', 1, 183, []],
  CNTRY_RSM: ['18580', 'San Marino', 1, 184, []],
  CNTRY_STP: ['18715', 'Sao Principe and Tome', 1, 185, []],
  CNTRY_SA: ['18621', 'Saudi Arabia', 1, 186, []],
  CNTRY_SCL: ['18708', 'Scotland', 1, 187, []],
  CNTRY_SN: ['18587', 'Senegal', 1, 188, []],
  CNTRY_SRB: ['18714', 'Serbia', 1, 189, []],
  CNTRY_SY: ['18589', 'Seychelles', 1, 190, []],
  CNTRY_WAL: ['18600', 'Sierra Leone', 1, 191, []],
  CNTRY_SGP: ['18618', 'Singapore', 1, 192, []],
  CNTRY_SK: ['18585', 'Slovakia', 1, 193, []],
  CNTRY_SLV: ['18711', 'Slovenia', 1, 194, []],
  CNTRY_SMI: ['18713', 'Solomon Islands', 1, 195, []],
  CNTRY_SP: ['18588', 'Somalia', 1, 196, []],
  CNTRY_ZA: ['18608', 'South Africa', 1, 197, []],
  CNTRY_SKA: ['18744', 'South Korea', 1, 198, []],
  CNTRY_SSUD: ['127606', 'South Sudan?', 1, 199, []],
  CNTRY_E: ['18510', 'Spain', 1, 200, []],
  CNTRY_CL: ['18685', 'Sri Lanka', 1, 201, []],
  CNTRY_SKN: ['18709', 'St Kitts and Nevis', 1, 202, []],
  CNTRY_SLU: ['18710', 'St Lucia', 1, 203, []],
  CNTRY_SMA: ['18712', 'St Martin', 1, 204, []],
  CNTRY_SVG: ['18717', 'St Vincent and Grenadines', 1, 205, []],
  CNTRY_SUD: ['18716', 'Sudan', 1, 206, []],
  CNTRY_SME: ['18586', 'Surinam', 1, 207, []],
  CNTRY_SW: ['18661', 'Swansea', 1, 208, []],
  CNTRY_SD: ['18584', 'Swaziland', 1, 209, []],
  CNTRY_S: ['18583', 'Sweden', 1, 210, []],
  CNTRY_CH: ['18683', 'Switzerland', 1, 211, []],
  CNTRY_SYR: ['18590', 'Syria', 1, 212, []],
  CNTRY_THT: ['18719', 'Tahiti', 1, 213, []],
  CNTRY_TAI: ['18611', 'Taiwan', 1, 214, []],
  CNTRY_TJK: ['18720', 'Tajikistan', 1, 215, []],
  CNTRY_EAT: ['18512', 'Tanzania', 1, 216, []],
  CNTRY_T: ['18591', 'Thailand', 1, 217, []],
  CNTRY_TBT: ['18718', 'Tibet', 1, 218, []],
  CNTRY_TG: ['18592', 'Togo', 1, 219, []],
  CNTRY_TKL: ['18721', 'Tokelau', 1, 220, []],
  CNTRY_TNG: ['18722', 'Tonga', 1, 221, []],
  CNTRY_TT: ['18596', 'Trinidad and Tobago', 1, 222, []],
  CNTRY_TN: ['18594', 'Tunisia', 1, 223, []],
  CNTRY_TR: ['18595', 'Turkey', 1, 224, []],
  CNTRY_TMN: ['18593', 'Turkmenistan', 1, 225, []],
  CNTRY_TUC: ['18723', 'Turks and Caicos', 1, 226, []],
  CNTRY_TVL: ['18724', 'Tuvalu', 1, 227, []],
  CNTRY_USV: ['110593', 'US Virgin Islands', 1, 228, []],
  CNTRY_EAU: ['18513', 'Uganda', 1, 229, []],
  CNTRY_UA: ['18597', 'Ukraine', 1, 230, []],
  CNTRY_UAE: ['18622', 'United Arab Emirates', 1, 231, []],
  CNTRY_UKG: ['18725', 'United Kingdom', 1, 232, []],
  CNTRY_USA: ['18598', 'United States of America', 1, 233, []],
  CNTRY_ROU: ['18578', 'Uruguay', 1, 234, []],
  CNTRY_UZB: ['18726', 'Uzbekistan', 1, 235, []],
  CNTRY_VAN: ['18727', 'Vanuatu', 1, 236, []],
  CNTRY_VATCN: ['110592', 'Vatican', 1, 237, []],
  CNTRY_YV: ['18606', 'Venezuela', 1, 238, []],
  CNTRY_VN: ['18599', 'Vietnam', 1, 239, []],
  CNTRY_W96: ['18663', 'Watford', 1, 240, []],
  CNTRY_WE: ['18733', 'West Africa', 1, 241, []],
  CNTRY_WSA: ['18728', 'Western Sahara', 1, 242, []],
  CNTRY_ADN: ['18667', 'Yemen', 1, 243, []],
  CNTRY_YU: ['18605', 'Yugoslavia', 1, 244, []],
  CNTRY_ZRE: ['18609', 'Zaire', 1, 245, []],
  CNTRY_Z: ['18607', 'Zambia', 1, 246, []],
  CNTRY_ZW: ['18610', 'Zimbabwe', 1, 247, []],
};
var GOPS_OTH_COUNTRY = {
  CNTRY_AFG: ['18613', 'Afghanistan', 1, 1, []],
  CNTRY_AL: ['18668', 'Albania', 1, 2, []],
  CNTRY_GBA: ['18524', 'Alderney', 1, 3, []],
  CNTRY_DZ: ['18509', 'Algeria', 1, 4, []],
  CNTRY_AND: ['18669', 'Andorra', 1, 5, []],
  CNTRY_AGO: ['18624', 'Angola', 1, 6, []],
  CNTRY_AGU: ['18625', 'Anguilla', 1, 7, []],
  CNTRY_ABB: ['18623', 'Antigua and Barbuda', 1, 8, []],
  CNTRY_RA: ['18565', 'Argentina', 1, 9, []],
  CNTRY_ARM: ['18627', 'Armenia', 1, 10, []],
  CNTRY_ARB: ['18626', 'Aruba', 1, 11, []],
  CNTRY_AUS: ['18670', 'Australia', 1, 12, []],
  CNTRY_A: ['18612', 'Austria', 1, 13, []],
  CNTRY_AZB: ['18628', 'Azerbaijan', 1, 14, []],
  CNTRY_BS: ['18679', 'Bahamas', 1, 15, []],
  CNTRY_BRN: ['18678', 'Bahrain', 1, 16, []],
  CNTRY_BD: ['18672', 'Bangladesh', 1, 17, []],
  CNTRY_BDS: ['18673', 'Barbados', 1, 18, []],
  CNTRY_BLR: ['18632', 'Belarus', 1, 19, []],
  CNTRY_B: ['18671', 'Belgium', 1, 20, []],
  CNTRY_BH: ['18675', 'Belize', 1, 21, []],
  CNTRY_DY: ['18508', 'Benin', 1, 22, []],
  CNTRY_BER: ['18629', 'Bermuda', 1, 23, []],
  CNTRY_BHU: ['18630', 'Bhutan', 1, 24, []],
  CNTRY_BOL: ['18676', 'Bolivia', 1, 25, []],
  CNTRY_BSN: ['18636', 'Bosnia', 1, 26, []],
  CNTRY_RB: ['18566', 'Botswana', 1, 27, []],
  CNTRY_BR: ['18677', 'Brazil', 1, 28, []],
  CNTRY_BRT: ['18635', 'Britain', 1, 29, []],
  CNTRY_BVI: ['18637', 'British Virgin Islands', 1, 30, []],
  CNTRY_BNI: ['18745', 'Brunei', 1, 31, []],
  CNTRY_BG: ['18674', 'Bulgaria', 1, 32, []],
  CNTRY_BKF: ['18631', 'Burkina Faso', 1, 33, []],
  CNTRY_BRM: ['18634', 'Burma', 1, 34, []],
  CNTRY_BRD: ['18633', 'Burundi', 1, 35, []],
  CNTRY_K: ['18542', 'Cambodia', 1, 36, []],
  CNTRY_CMR: ['18639', 'Cameroon', 1, 37, []],
  CNTRY_CDN: ['18682', 'Canada', 1, 38, []],
  CNTRY_CNI: ['18641', 'Canary Islands', 1, 39, []],
  CNTRY_CTN: ['18737', 'Cape Town', 1, 40, []],
  CNTRY_CPV: ['18642', 'Cape Verde', 1, 41, []],
  CNTRY_CYI: ['65586', 'Cayman Islands', 1, 42, []],
  CNTRY_RCA: ['18567', 'Central African Republic', 1, 43, []],
  CNTRY_CHD: ['18638', 'Chad', 1, 44, []],
  CNTRY_RCH: ['18569', 'Chile', 1, 45, []],
  CNTRY_CHN: ['18738', 'China', 1, 46, []],
  CNTRY_CO: ['18502', 'Colombia', 1, 47, []],
  CNTRY_COM: ['18640', 'Comoros', 1, 48, []],
  CNTRY_RCB: ['18568', 'Congo', 1, 49, []],
  CNTRY_CR: ['18503', 'Costa Rica', 1, 50, []],
  CNTRY_CV9: ['18666', 'Cote dIvoire', 1, 51, []],
  CNTRY_HR: ['18531', 'Croatia', 1, 52, []],
  CNTRY_C: ['18681', 'Cuba', 1, 53, []],
  CNTRY_CRC: ['18643', 'Curacao', 1, 54, []],
  CNTRY_CY: ['18504', 'Cyprus', 1, 55, []],
  CNTRY_CZH: ['18739', 'Czech', 1, 56, []],
  CNTRY_IC: ['18734', 'Czech Republic', 1, 57, []],
  CNTRY_DPC: ['18645', 'Democratic Republic of Congo', 1, 58, []],
  CNTRY_DK: ['18506', 'Denmark', 1, 59, []],
  CNTRY_DJI: ['18644', 'Djibouti', 1, 60, []],
  CNTRY_WD: ['18602', 'Dominica', 1, 61, []],
  CNTRY_DOM: ['18507', 'Dominican Republic', 1, 62, []],
  CNTRY_EA1: ['18732', 'East Africa', 1, 63, []],
  CNTRY_EA: ['18729', 'EastTimor', 1, 64, []],
  CNTRY_EC: ['18514', 'Ecuador', 1, 65, []],
  CNTRY_ET: ['18516', 'Egypt', 1, 66, []],
  CNTRY_ES: ['18515', 'El Salvador', 1, 67, []],
  CNTRY_ENG: ['18646', 'England', 1, 68, []],
  CNTRY_EQG: ['18647', 'Equitorial Guinea', 1, 69, []],
  CNTRY_ERT: ['18648', 'Eritrea', 1, 70, []],
  CNTRY_EW: ['18518', 'Estonia', 1, 71, []],
  CNTRY_ETH: ['18517', 'Ethiopia', 1, 72, []],
  CNTRY_FLI: ['18649', 'Falkland Islands', 1, 73, []],
  CNTRY_FJI: ['18521', 'Fiji', 1, 74, []],
  CNTRY_FIN: ['18520', 'Finland', 1, 75, []],
  CNTRY_F: ['18519', 'France', 1, 76, []],
  CNTRY_FRG: ['18650', 'French Guiana', 1, 77, []],
  CNTRY_FRP: ['18651', 'French Polynesia', 1, 78, []],
  CNTRY_GBN: ['18652', 'Gabon', 1, 79, []],
  CNTRY_GMB: ['18740', 'Gambia', 1, 80, []],
  CNTRY_TH: ['18735', 'Gambia/ The Gambia', 1, 81, []],
  CNTRY_GRG: ['18656', 'Georgia', 1, 82, []],
  CNTRY_D: ['18505', 'Germany', 1, 83, []],
  CNTRY_GH: ['18527', 'Ghana', 1, 84, []],
  CNTRY_GBZ: ['18525', 'Gibraltar', 1, 85, []],
  CNTRY_GB: ['18523', 'Great Britain', 1, 86, []],
  CNTRY_GR: ['18528', 'Greece', 1, 87, []],
  CNTRY_GNL: ['18655', 'Greenland', 1, 88, []],
  CNTRY_WG: ['18603', 'Grenada', 1, 89, []],
  CNTRY_GDL: ['18654', 'Guadeloupe', 1, 90, []],
  CNTRY_GUM: ['18658', 'Guam', 1, 91, []],
  CNTRY_GCA: ['18526', 'Guatemala', 1, 92, []],
  CNTRY_GUI: ['18657', 'Guinea', 1, 93, []],
  CNTRY_GBS: ['18653', 'Guinea bissau', 1, 94, []],
  CNTRY_GUY: ['18529', 'Guyana', 1, 95, []],
  CNTRY_RH: ['18570', 'Haiti', 1, 96, []],
  CNTRY_HDR: ['18659', 'Honduras', 1, 97, []],
  CNTRY_HK: ['18614', 'Hong Kong', 1, 98, []],
  CNTRY_H: ['18530', 'Hungary', 1, 99, []],
  CNTRY_IS: ['18538', 'Iceland', 1, 100, []],
  CNTRY_IND: ['18534', 'India', 1, 101, []],
  CNTRY_RI: ['18617', 'Indonesia', 1, 102, []],
  CNTRY_IR: ['18535', 'Iran', 1, 103, []],
  CNTRY_IRQ: ['18537', 'Iraq', 1, 104, []],
  CNTRY_IRL: ['18536', 'Ireland', 1, 105, []],
  CNTRY_IL: ['18533', 'Israel', 1, 106, []],
  CNTRY_I: ['18532', 'Italy', 1, 107, []],
  CNTRY_CI: ['18684', 'Ivory Coast', 1, 108, []],
  CNTRY_JA: ['18540', 'Jamaica', 1, 109, []],
  CNTRY_J: ['18539', 'Japan', 1, 110, []],
  CNTRY_JOR: ['18541', 'Jordan', 1, 111, []],
  CNTRY_KSN: ['18741', 'Kazhakistan', 1, 112, []],
  CNTRY_EAK: ['18511', 'Kenya', 1, 113, []],
  CNTRY_KIR: ['18686', 'Kiribati', 1, 114, []],
  CNTRY_KWT: ['18543', 'Kuwait', 1, 115, []],
  CNTRY_KGZ: ['18660', 'Kyrgyzstan', 1, 116, []],
  CNTRY_LAO: ['18545', 'Laos', 1, 117, []],
  CNTRY_LV: ['18549', 'Latvia', 1, 118, []],
  CNTRY_RL: ['18572', 'Lebanon', 1, 119, []],
  CNTRY_LS: ['18547', 'Lesotho', 1, 120, []],
  CNTRY_LBR: ['18687', 'Liberia', 1, 121, []],
  CNTRY_LAR: ['18546', 'Libya', 1, 122, []],
  CNTRY_FL: ['18522', 'Liechtenstein', 1, 123, []],
  CNTRY_LT: ['18548', 'Lithuania', 1, 124, []],
  CNTRY_WC: ['18662', 'London', 1, 125, []],
  CNTRY_L: ['18544', 'Luxembourg', 1, 126, []],
  CNTRY_MCU: ['18689', 'Macau', 1, 127, []],
  CNTRY_MK: ['18554', 'Macedonia', 1, 128, []],
  CNTRY_RM: ['18573', 'Madagascar', 1, 129, []],
  CNTRY_MDR: ['18690', 'Madeira', 1, 130, []],
  CNTRY_MW: ['18556', 'Malawi', 1, 131, []],
  CNTRY_MAL: ['18615', 'Malaysia', 1, 132, []],
  CNTRY_MLD: ['18691', 'Maldives', 1, 133, []],
  CNTRY_RMM: ['18574', 'Mali', 1, 134, []],
  CNTRY_M: ['18550', 'Malta', 1, 135, []],
  CNTRY_MGL: ['18742', 'Mangolia', 1, 136, []],
  CNTRY_MSI: ['18692', 'Marshall Islands', 1, 137, []],
  CNTRY_MTQ: ['18693', 'Martinique', 1, 138, []],
  CNTRY_RIM: ['18571', 'Mauritania', 1, 139, []],
  CNTRY_MS: ['18555', 'Mauritius', 1, 140, []],
  CNTRY_MEX: ['18553', 'Mexico', 1, 141, []],
  CNTRY_MCN: ['18688', 'Micronesia', 1, 142, []],
  CNTRY_MDV: ['18664', 'Moldova', 1, 143, []],
  CNTRY_MC: ['18552', 'Monaco', 1, 144, []],
  CNTRY_MG5: ['18730', 'Montenegro', 1, 145, []],
  CNTRY_MTS: ['18694', 'Monteserrat', 1, 146, []],
  CNTRY_MA: ['18551', 'Morocco', 1, 147, []],
  CNTRY_MZB: ['18695', 'Mozambique', 1, 148, []],
  CNTRY_BUR: ['18680', 'Myanmar', 1, 149, []],
  CNTRY_NMB: ['18700', 'Namibia', 1, 150, []],
  CNTRY_NAU: ['18696', 'Nauru', 1, 151, []],
  CNTRY_NEP: ['18620', 'Nepal', 1, 152, []],
  CNTRY_NL: ['18559', 'Netherlands', 1, 153, []],
  CNTRY_NCD: ['18697', 'New Caledonia', 1, 154, []],
  CNTRY_NZL: ['18736', 'New Zealand', 1, 155, []],
  CNTRY_NIC: ['18558', 'Nicaragua', 1, 156, []],
  CNTRY_RN: ['18575', 'Niger', 1, 157, []],
  CNTRY_WAN: ['18601', 'Nigeria', 1, 158, []],
  CNTRY_NIU: ['18699', 'Niue', 1, 159, []],
  CNTRY_NK: ['18665', 'North Korea', 1, 160, []],
  CNTRY_NIR: ['18698', 'Northern Ireland', 1, 161, []],
  CNTRY_N: ['18557', 'Norway', 1, 162, []],
  CNTRY_OMA: ['18619', 'Oman', 1, 163, []],
  CNTRY_OTH: ['18743', 'Other', 1, 164, []],
  CNTRY_PK: ['18562', 'Pakistan', 1, 165, []],
  CNTRY_PLU: ['18702', 'Palau', 1, 166, []],
  CNTRY_PLS: ['18701', 'Palestine', 1, 167, []],
  CNTRY_PA: ['18616', 'Panama', 1, 168, []],
  CNTRY_PNG: ['18703', 'Papua New guinea', 1, 169, []],
  CNTRY_PY: ['18564', 'Paraguay', 1, 170, []],
  CNTRY_PE: ['18561', 'Peru', 1, 171, []],
  CNTRY_RP: ['18579', 'Philippines', 1, 172, []],
  CNTRY_PL: ['18563', 'Poland', 1, 173, []],
  CNTRY_P: ['18560', 'Portugal', 1, 174, []],
  CNTRY_PUR: ['18704', 'Puerto Rico', 1, 175, []],
  CNTRY_QTR: ['18705', 'Qatar', 1, 176, []],
  CNTRY_RS: ['18731', 'RSA', 1, 177, []],
  CNTRY_ROC: ['18707', 'Republic of Congo', 1, 178, []],
  CNTRY_ROK: ['18577', 'Republic of Korea', 1, 179, []],
  CNTRY_REU: ['18706', 'Reunion', 1, 180, []],
  CNTRY_RO: ['18576', 'Romania', 1, 181, []],
  CNTRY_RUS: ['18581', 'Russia', 1, 182, []],
  CNTRY_RWA: ['18582', 'Rwanda', 1, 183, []],
  CNTRY_WS: ['18604', 'Samoa', 1, 184, []],
  CNTRY_RSM: ['18580', 'San Marino', 1, 185, []],
  CNTRY_STP: ['18715', 'Sao Principe and Tome', 1, 186, []],
  CNTRY_SA: ['18621', 'Saudi Arabia', 1, 187, []],
  CNTRY_SCL: ['18708', 'Scotland', 1, 188, []],
  CNTRY_SN: ['18587', 'Senegal', 1, 189, []],
  CNTRY_SRB: ['18714', 'Serbia', 1, 190, []],
  CNTRY_SY: ['18589', 'Seychelles', 1, 191, []],
  CNTRY_WAL: ['18600', 'Sierra Leone', 1, 192, []],
  CNTRY_SGP: ['18618', 'Singapore', 1, 193, []],
  CNTRY_SK: ['18585', 'Slovakia', 1, 194, []],
  CNTRY_SLV: ['18711', 'Slovenia', 1, 195, []],
  CNTRY_SMI: ['18713', 'Solomon Islands', 1, 196, []],
  CNTRY_SP: ['18588', 'Somalia', 1, 197, []],
  CNTRY_ZA: ['18608', 'South Africa', 1, 198, []],
  CNTRY_SKA: ['18744', 'South Korea', 1, 199, []],
  CNTRY_SSUD: ['127606', 'South Sudan?', 1, 200, []],
  CNTRY_E: ['18510', 'Spain', 1, 201, []],
  CNTRY_CL: ['18685', 'Sri Lanka', 1, 202, []],
  CNTRY_SKN: ['18709', 'St Kitts and Nevis', 1, 203, []],
  CNTRY_SLU: ['18710', 'St Lucia', 1, 204, []],
  CNTRY_SMA: ['18712', 'St Martin', 1, 205, []],
  CNTRY_SVG: ['18717', 'St Vincent and Grenadines', 1, 206, []],
  CNTRY_SUD: ['18716', 'Sudan', 1, 207, []],
  CNTRY_SME: ['18586', 'Surinam', 1, 208, []],
  CNTRY_SW: ['18661', 'Swansea', 1, 209, []],
  CNTRY_SD: ['18584', 'Swaziland', 1, 210, []],
  CNTRY_S: ['18583', 'Sweden', 1, 211, []],
  CNTRY_CH: ['18683', 'Switzerland', 1, 212, []],
  CNTRY_SYR: ['18590', 'Syria', 1, 213, []],
  CNTRY_THT: ['18719', 'Tahiti', 1, 214, []],
  CNTRY_TAI: ['18611', 'Taiwan', 1, 215, []],
  CNTRY_TJK: ['18720', 'Tajikistan', 1, 216, []],
  CNTRY_EAT: ['18512', 'Tanzania', 1, 217, []],
  CNTRY_T: ['18591', 'Thailand', 1, 218, []],
  CNTRY_TBT: ['18718', 'Tibet', 1, 219, []],
  CNTRY_TG: ['18592', 'Togo', 1, 220, []],
  CNTRY_TKL: ['18721', 'Tokelau', 1, 221, []],
  CNTRY_TNG: ['18722', 'Tonga', 1, 222, []],
  CNTRY_TT: ['18596', 'Trinidad and Tobago', 1, 223, []],
  CNTRY_TN: ['18594', 'Tunisia', 1, 224, []],
  CNTRY_TR: ['18595', 'Turkey', 1, 225, []],
  CNTRY_TMN: ['18593', 'Turkmenistan', 1, 226, []],
  CNTRY_TUC: ['18723', 'Turks and Caicos', 1, 227, []],
  CNTRY_TVL: ['18724', 'Tuvalu', 1, 228, []],
  CNTRY_USV: ['110593', 'US Virgin Islands', 1, 229, []],
  CNTRY_EAU: ['18513', 'Uganda', 1, 230, []],
  CNTRY_UA: ['18597', 'Ukraine', 1, 231, []],
  CNTRY_UAE: ['18622', 'United Arab Emirates', 1, 232, []],
  CNTRY_UKG: ['18725', 'United Kingdom', 1, 233, []],
  CNTRY_USA: ['18598', 'United States of America', 1, 234, []],
  CNTRY_ROU: ['18578', 'Uruguay', 1, 235, []],
  CNTRY_UZB: ['18726', 'Uzbekistan', 1, 236, []],
  CNTRY_VAN: ['18727', 'Vanuatu', 1, 237, []],
  CNTRY_VATCN: ['110592', 'Vatican', 1, 238, []],
  CNTRY_YV: ['18606', 'Venezuela', 1, 239, []],
  CNTRY_VN: ['18599', 'Vietnam', 1, 240, []],
  CNTRY_W96: ['18663', 'Watford', 1, 241, []],
  CNTRY_WE: ['18733', 'West Africa', 1, 242, []],
  CNTRY_WSA: ['18728', 'Western Sahara', 1, 243, []],
  CNTRY_ADN: ['18667', 'Yemen', 1, 244, []],
  CNTRY_YU: ['18605', 'Yugoslavia', 1, 245, []],
  CNTRY_ZRE: ['18609', 'Zaire', 1, 246, []],
  CNTRY_Z: ['18607', 'Zambia', 1, 247, []],
  CNTRY_ZW: ['18610', 'Zimbabwe', 1, 248, []],
};
var GOPS_C2P_COUNTRY = {
  CNTRY_AND: ['18669', 'Andorra', 1, 1, []],
  CNTRY_AGU: ['18625', 'Anguilla', 1, 2, []],
  CNTRY_ABB: ['18623', 'Antigua and Barbuda', 1, 3, []],
  CNTRY_ARB: ['18626', 'Aruba', 1, 4, []],
  CNTRY_AUS: ['18670', 'Australia', 1, 5, []],
  CNTRY_A: ['18612', 'Austria', 1, 6, []],
  CNTRY_BS: ['18679', 'Bahamas', 1, 7, []],
  CNTRY_BRN: ['18678', 'Bahrain', 1, 8, []],
  CNTRY_BDS: ['18673', 'Barbados', 1, 9, []],
  CNTRY_BLR: ['18632', 'Belarus', 1, 10, []],
  CNTRY_B: ['18671', 'Belgium', 1, 11, []],
  CNTRY_BER: ['18629', 'Bermuda', 1, 12, []],
  CNTRY_BHU: ['18630', 'Bhutan', 1, 13, []],
  CNTRY_BR: ['18677', 'Brazil', 1, 14, []],
  CNTRY_BVI: ['18637', 'British Virgin Islands', 1, 15, []],
  CNTRY_BNI: ['18745', 'Brunei', 1, 16, []],
  CNTRY_CDN: ['18682', 'Canada', 1, 17, []],
  CNTRY_CPV: ['18642', 'Cape Verde', 1, 18, []],
  CNTRY_CYI: ['65586', 'Cayman Islands', 1, 19, []],
  CNTRY_CR: ['18503', 'Costa Rica', 1, 20, []],
  CNTRY_HR: ['18531', 'Croatia', 1, 21, []],
  CNTRY_CRC: ['18643', 'Curacao', 1, 22, []],
  CNTRY_CY: ['18504', 'Cyprus', 1, 23, []],
  CNTRY_CZH: ['18739', 'Czech', 1, 24, []],
  CNTRY_DK: ['18506', 'Denmark', 1, 25, []],
  CNTRY_EW: ['18518', 'Estonia', 1, 26, []],
  CNTRY_FIN: ['18520', 'Finland', 1, 27, []],
  CNTRY_FRG: ['18650', 'French Guiana', 1, 28, []],
  CNTRY_FRP: ['18651', 'French Polynesia', 1, 29, []],
  CNTRY_GR: ['18528', 'Greece', 1, 30, []],
  CNTRY_WG: ['18603', 'Grenada', 1, 31, []],
  CNTRY_GDL: ['18654', 'Guadeloupe', 1, 32, []],
  CNTRY_GUM: ['18658', 'Guam', 1, 33, []],
  CNTRY_HK: ['18614', 'Hong Kong', 1, 34, []],
  CNTRY_H: ['18530', 'Hungary', 1, 35, []],
  CNTRY_IS: ['18538', 'Iceland', 1, 36, []],
  CNTRY_IND: ['18534', 'India', 1, 37, []],
  CNTRY_IRL: ['18536', 'Ireland', 1, 38, []],
  CNTRY_JA: ['18540', 'Jamaica', 1, 39, []],
  CNTRY_J: ['18539', 'Japan', 1, 40, []],
  CNTRY_JOR: ['18541', 'Jordan', 1, 41, []],
  CNTRY_KWT: ['18543', 'Kuwait', 1, 42, []],
  CNTRY_LV: ['18549', 'Latvia', 1, 43, []],
  CNTRY_FL: ['18522', 'Liechtenstein', 1, 44, []],
  CNTRY_LT: ['18548', 'Lithuania', 1, 45, []],
  CNTRY_L: ['18544', 'Luxembourg', 1, 46, []],
  CNTRY_MLD: ['18691', 'Maldives', 1, 47, []],
  CNTRY_M: ['18550', 'Malta', 1, 48, []],
  CNTRY_MSI: ['18692', 'Marshall Islands', 1, 49, []],
  CNTRY_MTQ: ['18693', 'Martinique', 1, 50, []],
  CNTRY_MS: ['18555', 'Mauritius', 1, 51, []],
  CNTRY_MCN: ['18688', 'Micronesia', 1, 52, []],
  CNTRY_MC: ['18552', 'Monaco', 1, 53, []],
  CNTRY_BUR: ['18680', 'Myanmar', 1, 54, []],
  CNTRY_NAU: ['18696', 'Nauru', 1, 55, []],
  CNTRY_NL: ['18559', 'Netherlands', 1, 56, []],
  CNTRY_NCD: ['18697', 'New Caledonia', 1, 57, []],
  CNTRY_NZL: ['18736', 'New Zealand', 1, 58, []],
  CNTRY_N: ['18557', 'Norway', 1, 59, []],
  CNTRY_OMA: ['18619', 'Oman', 1, 60, []],
  CNTRY_PLU: ['18702', 'Palau', 1, 61, []],
  CNTRY_PL: ['18563', 'Poland', 1, 62, []],
  CNTRY_P: ['18560', 'Portugal', 1, 63, []],
  CNTRY_QTR: ['18705', 'Qatar', 1, 64, []],
  CNTRY_RO: ['18576', 'Romania', 1, 65, []],
  CNTRY_RSM: ['18580', 'San Marino', 1, 66, []],
  CNTRY_SA: ['18621', 'Saudi Arabia', 1, 67, []],
  CNTRY_SRB: ['18714', 'Serbia', 1, 68, []],
  CNTRY_SY: ['18589', 'Seychelles', 1, 69, []],
  CNTRY_SGP: ['18618', 'Singapore', 1, 70, []],
  CNTRY_SLV: ['18711', 'Slovenia', 1, 71, []],
  CNTRY_SMI: ['18713', 'Solomon Islands', 1, 72, []],
  CNTRY_ZA: ['18608', 'South Africa', 1, 73, []],
  CNTRY_SKA: ['18744', 'South Korea', 1, 74, []],
  CNTRY_CL: ['18685', 'Sri Lanka', 1, 75, []],
  CNTRY_SKN: ['18709', 'St Kitts and Nevis', 1, 76, []],
  CNTRY_SLU: ['18710', 'St Lucia', 1, 77, []],
  CNTRY_SVG: ['18717', 'St Vincent and Grenadines', 1, 78, []],
  CNTRY_SME: ['18586', 'Surinam', 1, 79, []],
  CNTRY_S: ['18583', 'Sweden', 1, 80, []],
  CNTRY_CH: ['18683', 'Switzerland', 1, 81, []],
  CNTRY_TAI: ['18611', 'Taiwan', 1, 82, []],
  CNTRY_TNG: ['18722', 'Tonga', 1, 83, []],
  CNTRY_TT: ['18596', 'Trinidad and Tobago', 1, 84, []],
  CNTRY_TUC: ['18723', 'Turks and Caicos', 1, 85, []],
  CNTRY_TVL: ['18724', 'Tuvalu', 1, 86, []],
  CNTRY_UAE: ['18622', 'United Arab Emirates', 1, 87, []],
  CNTRY_VATCN: ['110592', 'Vatican', 1, 88, []],
};
var GOPS_PRODUCT = {
  EALPTP: ['EALPTP', 'HDFC Life ClassicAssure Plus', 1, 1, ['SVNG']],
  EALPTPE: ['EALPTPE', 'HDFC Life ClassicAssure Plus', 1, 2, ['SVNG']],
  GPP: ['GPP', 'HDFC Life Guaranteed Pension Plan', 1, 3, ['PENS']],
  GPPE: ['GPPE', 'HDFC Life Guaranteed Pension Plan', 1, 4, ['PENS']],
  SIPPAR: ['SIPPAR', 'HDFC Life Super Income Plan', 1, 5, ['SVNG']],
  SIPPARE: ['SIPPARE', 'HDFC Life Super Income Plan', 1, 6, ['SVNG']],
  LIFEPAR: ['LIFEPAR', 'HDFC Life Super Savings Plan', 1, 7, ['SVNG']],
  LIFEPARE: ['LIFEPARE', 'HDFC Life Super Savings Plan', 1, 8, ['SVNG']],
  PENPAR: ['PENPAR', 'HDFC Life Personal Pension Plus', 1, 9, ['PENS']],
  UL8LPT2: ['UL8LPT2', 'HDFC SL Crest', 1, 10, ['INVT']],
  UL8LPT2E: ['UL8LPT2E', 'HDFC SL Crest', 1, 11, ['INVT']],
  UL8EA: ['UL8EA', 'HDFC SL ProGrowth Super II', 1, 12, ['INVT']],
  UL8EAE: ['UL8EAE', 'HDFC SL ProGrowth Super II', 1, 13, ['INVT']],
  UL8ESP3: [
    'UL8ESP3',
    'HDFC SL ProGrowth Maximiser - Free Asset',
    1,
    14,
    ['INVT'],
  ],
  UL8ESP3E: [
    'UL8ESP3E',
    'HDFC SL ProGrowth Maximiser - Free Asset',
    1,
    15,
    ['INVT'],
  ],
  UL8EA2: ['UL8EA2', 'HDFC Life ProGrowth Plus', 1, 16, ['INVT']],
  UL8EA1: ['UL8EA1', 'HDFC SL ProGrowth Flexi', 1, 17, ['INVT']],
  UL8WI1: ['UL8WI1', 'HDFC Life Invest Wise Plan', 1, 18, ['INVT']],
  IANP1: ['IANP1', 'HDFC Life New Immediate Annuity Plan', 1, 19, ['PENS']],
  UL8NPR1: ['UL8NPR1', 'HDFC Life Pension Super Plus', 1, 20, ['PENS']],
  UL8NPR2: ['UL8NPR2', 'HDFC Life Pension Super Plus', 1, 21, ['PENS']],
  T2P: ['T2P', 'HDFC Life Click 2 Protect', 1, 22, ['PROT']],
  UL8NPS4: [
    'UL8NPS4',
    'HDFC Life Single Premium Pension Super',
    1,
    23,
    ['PENS'],
  ],
  UL8YS1: ['UL8YS1', 'HDFC SL YoungStar Super Premium', 1, 24, ['CHLD']],
  UL8YSE1: ['UL8YSE1', ' HDFC SL YoungStar Super Premium', 1, 25, ['CHLD']],
  UL8WP1: ['UL8WP1', 'HDFC Life Smart Woman Plan', 1, 26, ['INVT']],
  SANCH: ['SANCH', 'HDFC Life Sanchay', 1, 27, ['SVNG']],
  SANCHE: ['SANCHE', 'HDFC Life Sanchay', 1, 28, ['SVNG']],
  UL8WP2: ['UL8WP2', 'HDFC Life Smart Woman Plan', 1, 29, ['INVT']],
  UL8WP3: ['UL8WP3', 'HDFC Life Smart Woman Plan', 1, 30, ['INVT']],
  IANP2: ['IANP2', 'HDFC Life New Immediate Annuity Plan', 1, 31, ['PENS']],
  YSACE: ['YSACE', 'HDFC Life YoungStar Udaan', 1, 32, ['CHLD']],
  YSASE: ['YSASE', 'HDFC Life YoungStar Udaan', 1, 33, ['CHLD']],
  YSCAE: ['YSCAE', 'HDFC Life YoungStar Udaan', 1, 34, ['CHLD']],
  HRN: ['HRN', 'HDFC Life Health Assure Plan', 1, 35, ['HLTH']],
  IANP3: ['IANP3', 'HDFC Life New Immediate Annuity Plan', 1, 36, ['PENS']],
  IANP4: ['IANP4', 'HDFC Life New Immediate Annuity Plan', 1, 37, ['PENS']],
  IANP5: ['IANP5', 'HDFC Life New Immediate Annuity Plan', 1, 38, ['PENS']],
  UL8C2I: ['UL8C2I', 'HDFC Life Click 2 Invest - ULIP', 1, 39, ['INVT']],
  C2PPER: ['C2PPER', 'HDFC Life Click2Protect Plus', 1, 40, ['PROT']],
  C2PPEL: ['C2PPEL', 'HDFC Life Click2Protect Plus', 1, 41, ['PROT']],
  C2PPES: ['C2PPES', 'HDFC Life Click2Protect Plus', 1, 42, ['PROT']],
  C2PPR: ['C2PPR', 'HDFC Life Click2Protect Plus', 1, 43, ['PROT']],
  C2PPL: ['C2PPL', 'HDFC Life Click2Protect Plus', 1, 44, ['PROT']],
  C2PPS: ['C2PPS', 'HDFC Life Click2Protect Plus', 1, 45, ['PROT']],
  IANP6: ['IANP6', 'HDFC Life New Immediate Annuity Plan', 1, 46, ['PENS']],
  IANP7: ['IANP7', 'HDFC Life New Immediate Annuity Plan', 1, 47, ['PENS']],
  IANP8: ['IANP8', 'HDFC Life New Immediate Annuity Plan', 1, 48, ['PENS']],
  IANP9: ['IANP9', 'HDFC Life New Immediate Annuity Plan', 1, 49, ['PENS']],
  IANP10: ['IANP10', 'HDFC Life New Immediate Annuity Plan', 1, 50, ['PENS']],
  YSUD: ['YSUD', 'HDFC Life YoungStar Udaan', 1, 51, ['CHLD']],
  YSUDE: ['YSUDE', 'HDFC Life YoungStar Udaan', 1, 52, ['CHLD']],
  SAPLUSE: ['SAPLUSE', 'HDFC Life Sampoorn Samridhi Plus', 1, 53, ['SVNG']],
  SAPLUSEE: ['SAPLUSEE', 'HDFC Life Sampoorn Samridhi Plus', 1, 54, ['SVNG']],
  HUDAYE: ['HUDAYE', 'HDFC Life Uday', 1, 55, ['SVNG']],
  CANC: ['CANC', 'HDFC Life Cancer Care', 1, 59, ['HLTH']],
  UL8NIVR: ['UL8NIVR', 'HDFC Life Sampoorn Nivesh', 1, 60, ['INVT']],
  UL8NIVL: ['UL8NIVL', 'HDFC Life Sampoorn Nivesh', 1, 61, ['INVT']],
  UL8NIVS: ['UL8NIVS', 'HDFC Life Sampoorn Nivesh', 1, 62, ['INVT']],
  UL8NIVER: ['UL8NIVER', 'HDFC Life Sampoorn Nivesh', 1, 63, ['INVT']],
  UL8NIVEL: ['UL8NIVEL', 'HDFC Life Sampoorn Nivesh', 1, 64, ['INVT']],
  UL8NIVES: ['UL8NIVES', 'HDFC Life Sampoorn Nivesh', 1, 65, ['INVT']],
  CANCE: ['CANCE', 'HDFC Life Cancer Care', 1, 66, ['HLTH']],
  UL8C2R: ['UL8C2R', 'HDFC Life Click 2 Retire', 1, 67, ['PENS']],
  EAHT: ['EAHT', 'HDFC Life Easy Health', 1, 68, ['HLTH']],
  UL8CG: ['UL8CG', 'HDFC Life Capital Shield', 1, 69, ['SVNG']],
  UL8CGE: ['UL8CGE', 'HDFC Life Capital Shield', 1, 70, ['SVNG']],
  C2P3DPER: ['C2P3DPER', 'HDFC Life Click 2 Protect 3D Plus', 1, 71, ['PROT']],
  C2P3DPEL: ['C2P3DPEL', 'HDFC Life Click 2 Protect 3D Plus', 1, 72, ['PROT']],
  C2P3DPES: ['C2P3DPES', 'HDFC Life Click 2 Protect 3D Plus', 1, 73, ['PROT']],
  C2PH: ['C2PH', 'Click 2 Protect Health', 1, 75, ['COMB']],
  C2PHR: ['C2PHR', 'Click 2 Protect Health', 1, 76, ['COMB']],
  C2PHL: ['C2PHL', 'Click 2 Protect Health', 1, 77, ['COMB']],
  C2PHS: ['C2PHS', 'Click 2 Protect Health', 1, 78, ['COMB']],
  PGNP1: ['PGNP1', 'HDFC Life Pension Guaranteed Plan', 1, 79, ['PENS']],
  PGNP2: ['PGNP2', 'HDFC Life Pension Guaranteed Plan', 1, 80, ['PENS']],
  PGNP3: ['PGNP3', 'HDFC Life Pension Guaranteed Plan', 1, 81, ['PENS']],
  PGNP4: ['PGNP4', 'HDFC Life Pension Guaranteed Plan', 1, 82, ['PENS']],
  PGNP5: ['PGNP5', 'HDFC Life Pension Guaranteed Plan', 1, 83, ['PENS']],
  PGNP6: ['PGNP6', 'HDFC Life Pension Guaranteed Plan', 1, 84, ['PENS']],
  PGNP7: ['PGNP7', 'HDFC Life Pension Guaranteed Plan', 1, 85, ['PENS']],
  PGNP8: ['PGNP8', 'HDFC Life Pension Guaranteed Plan', 1, 86, ['PENS']],
  PGNP9: ['PGNP9', 'HDFC Life Pension Guaranteed Plan', 1, 87, ['PENS']],
  PGNP10: ['PGNP10', 'HDFC Life Pension Guaranteed Plan', 1, 88, ['PENS']],
  PGNP11: ['PGNP11', 'HDFC Life Pension Guaranteed Plan', 1, 89, ['PENS']],
  PGNP12: ['PGNP12', 'HDFC Life Pension Guaranteed Plan', 1, 90, ['PENS']],
  PGNP13: ['PGNP13', 'HDFC Life Pension Guaranteed Plan', 1, 91, ['PENS']],
  PGNP14: ['PGNP14', 'HDFC Life Pension Guaranteed Plan', 1, 92, ['PENS']],
  CDAC: ['CDAC', 'HDFC Life Cardiac Care', 1, 93, ['HLTH']],
  C2PHER: ['C2PHER', 'Click 2 Protect Health', 1, 94, ['COMB']],
  C2PHEL: ['C2PHEL', 'Click 2 Protect Health', 1, 95, ['COMB']],
  C2PHES: ['C2PHES', 'Click 2 Protect Health', 1, 96, ['COMB']],
  IUNOX: ['IUNOX', 'HDFC Life Classic One', 1, 97, ['INVT']],
  IUNOY: ['IUNOY', 'HDFC Life Classic One', 1, 98, ['INVT']],
  IUNOXE: ['IUNOXE', 'HDFC Life Classic One', 1, 99, ['INVT']],
  IUNOYE: ['IUNOYE', 'HDFC Life Classic One', 1, 100, ['INVT']],
  UL8CIP: ['UL8CIP', 'HDFC Life Click 2 Wealth', 1, 101, ['INVT']],
  UL8CIPG: ['UL8CIPG', 'HDFC Life Click 2 Wealth', 1, 102, ['INVT']],
  UL8CIPP: ['UL8CIPP', 'HDFC Life Click 2 Wealth', 1, 103, ['INVT']],
  SANCHP: ['SANCHP', 'HDFC Life Sanchay Plus', 1, 104, ['SVNG']],
  SANCHPE: ['SANCHPE', 'HDFC Life Sanchay Plus', 1, 105, ['SVNG']],
  C2TC: ['C2TC', 'Click 2 Protect Health', 1, 106, ['COMB']],
  SANPAR: ['SANPAR', 'HDFC Life Sanchay Par Advantage', 1, 107, ['SVNG']],
  SANPARE: ['SANPARE', 'HDFC Life Sanchay Par Advantage', 1, 108, ['SVNG']],
  EALPTPV9: ['EALPTPV9', 'HDFC Life ClassicAssure Plus', 1, 109, ['SVNG']],
  EALPTPV9E: ['EALPTPV9E', 'HDFC Life ClassicAssure Plus', 1, 110, ['SVNG']],
  SAPLUSEV9: [
    'SAPLUSEV9',
    'HDFC Life Sampoorn Samridhi Plus',
    1,
    111,
    ['SVNG'],
  ],
  SAPLUSEV9E: [
    'SAPLUSEV9E',
    'HDFC Life Sampoorn Samridhi Plus',
    1,
    112,
    ['SVNG'],
  ],
  SIPPARV9: ['SIPPARV9', 'HDFC Life Super Income Plan', 1, 113, ['SVNG']],
  SIPPARV9E: ['SIPPARV9E', 'HDFC Life Super Income Plan', 1, 114, ['SVNG']],
  SANCHV9E: ['SANCHV9E', 'HDFC Life Sanchay', 1, 115, ['SVNG']],
  C2P3DPV9ER: [
    'C2P3DPV9ER',
    'HDFC Life Click 2 Protect 3D Plus',
    1,
    116,
    ['PROT'],
  ],
  C2P3DPV9EL: [
    'C2P3DPV9EL',
    'HDFC Life Click 2 Protect 3D Plus',
    1,
    117,
    ['PROT'],
  ],
  C2P3DPV9ES: [
    'C2P3DPV9ES',
    'HDFC Life Click 2 Protect 3D Plus',
    1,
    118,
    ['PROT'],
  ],
  GSPV9: ['GSPV9', 'HDFC Life Guaranteed Savings Plan', 1, 119, ['SVNG']],
  EAGP: ['EAGP', 'HDFC Life Assured Gain Plus', 1, 323, ['SVNG']],
  EAGPE: ['EAGPE', 'HDFC Life Assured Gain Plus', 1, 323, ['SVNG']],
  GSPV9E: ['GSPV9E', 'HDFC Life Guaranteed Savings Plan', 1, 120, ['SVNG']],
  SANCHV9L: ['SANCHV9L', 'HDFC Life Sanchay', 1, 121, ['SVNG']],
  SANCHV9S: ['SANCHV9S', 'HDFC Life Sanchay', 1, 122, ['SVNG']],
  SANCHV9EL: ['SANCHV9EL', 'HDFC Life Sanchay', 1, 123, ['SVNG']],
  SANCHV9ES: ['SANCHV9ES', 'HDFC Life Sanchay', 1, 124, ['SVNG']],
  C2TCV9R: ['C2TCV9R', 'Click 2 Protect Health', 1, 125, ['COMB']],
  C2TCV9L: ['C2TCV9L', 'Click 2 Protect Health', 1, 126, ['COMB']],
  C2TCV9S: ['C2TCV9S', 'Click 2 Protect Health', 1, 127, ['COMB']],
  C2PSAL: ['C2PSAL', 'HDFC Life Click 2 protect return', 1, 128, ['PROT']],
  C2PSAS: ['C2PSAS', 'HDFC Life Click 2 protect return', 1, 129, ['PROT']],
  C2PPV9ER: ['C2PPV9ER', 'HDFC Life Click 2 Protect Plus', 1, 130, ['PROT']],
  C2PPV9EL: ['C2PPV9EL', 'HDFC Life Click 2 Protect Plus', 1, 131, ['PROT']],
  C2PPV9ES: ['C2PPV9ES', 'HDFC Life Click 2 Protect Plus', 1, 132, ['PROT']],
  C2PPV9E: ['C2PPV9E', 'HDFC Life Click 2 Protect Plus', 1, 133, ['PROT']],
  P1C2PL: ['P1C2PL', 'HDFC Life Click 2 Protect Life', 1, 134, ['PROT']],
  P1C2PLE: ['P1C2PLE', 'HDFC Life Click 2 Protect Life(spl)', 1, 135, ['PROT']],
  UL8APP: ['UL8APP', 'HDFC Life Assured Pension', 1, 136, ['PENS']],
  UL8APPE: ['UL8APPE', 'HDFC Life Assured Pension(spl)', 1, 137, ['PENS']],
  HUDAYV9: ['HUDAYV9', 'HDFC Life Uday', 1, 138, ['SVNG']],
  HUDAYV9E: ['HUDAYV9E', 'HDFC Life Uday(spl)', 1, 139, ['SVNG']],
  SUPH: ['SUPH', 'HDFC Life Sanchay Fixed Maturity', 1, 140, ['SVNG']],
  SUPHE: ['SUPHE', 'HDFC Life Sanchay Fixed Maturity(spl)', 1, 141, ['SVNG']],
  SARLP: ['SARLP', 'HDFC Life Saral Pension', 1, 140, ['SVNG']],
  PRAGATHIV9: ['PRAGATHIV9', 'HDFC Life Pragati', 1, 138, ['SVNG']],
  EIAP: ['EIAP', 'HDFC Life Income Advantage Plan', 1, 138, ['SVNG']],
  EIAPE: ['EIAPE', 'HDFC Life Income Advantage Plan(spl)', 1, 139, ['SVNG']],
  PRAGATHIV9E: ['PRAGATHIV9E', 'HDFC Life Pragati(spl)', 1, 139, ['SVNG']],
  SRP: ['SRP', 'HDFC Life Systematic Retirement Plan', 1, 140, ['PENS']],
  SPP: ['SPP', 'HDFC Life Systematic Pension Plan', 1, 140, ['PENS']],
  MAIP: ['MAIP', 'HDFC Life My Assured Income Plan', 1, 140, ['EXIDE']],
  MAIPE: ['MAIPE', 'HDFC Life My Assured Income Plan(spl)', 1, 141, ['EXIDE']],
  ESRB: ['ESRB', 'HDFC Life Saral Jeevan', 1, 142, ['SVNG']],
  ESRBE: ['ESRBE', 'HDFC Life Saral Jeevan(spl)', 1, 143, ['SVNG']],
  SMPP: ['SMPP', 'HDFC Life Smart Pension Plus', 1, 144, ['PENS']],
  ESPP: ['ESPP', 'HDFC Life Smart Pension Plan', 1, 140, ['PENS']],
  P1C2PS: ['P1C2PS', 'HDFC Life Click 2 Protect Super', 1, 142, ['PROT']],
  P1C2PSE: ['P1C2PSE', 'HDFC Life Click 2 Protect Super', 1, 143, ['PROT']],
  ESPP: ['ESPP', 'HDFC Life Smart Pension Plan', 1, 144, ['PENS']],
  ESPPE: ['ESPPE', 'HDFC Life Smart Pension Plan(spl)', 1, 145, ['PENS']],
  EGII: [
    'EGII',
    'HDFC Life Guaranteed Income Insurance Plan',
    1,
    144,
    ['SVNG'],
  ],
  EGIIE: [
    'EGIIE',
    'HDFC Life Guaranteed Income Insurance Plan(spl)',
    1,
    145,
    ['SVNG'],
  ],
  ESIP: ['ESIP', 'HDFC Life Smart Income Plan', 1, 145, ['SVNG']],
  ESIPE: ['ESIPE', 'HDFC Life Smart Income Plan(spl)', 1, 145, ['SVNG']],
  P1C2PSE: ['P1C2PSE', 'HDFC Life Click 2 Protect Super', 1, 143, ['PROT']],
  ESRB: ['ESRB', 'HDFC Life Saral Jeevan', 1, 146, ['SVNG']],
  ESRBE: ['ESRBE', 'HDFC Life Saral Jeevan(spl)', 1, 147, ['SVNG']],
  ESJ: ['ESJ', 'HDFC Life Sampoorna Jeevan', 1, 148, ['SVNG']],
  ESJE: ['ESJE', 'HDFC Life Sampoorna Jeevan(spl)', 1, 149, ['SVNG']],
  UL9SPP: ['UL9SPP', 'HDFC Life Smart Protect Plan', 1, 148, ['INVT']],
  EGWP: [
    'EGWP',
    'HDFC Life Guaranteed Wealth Plus Plan',
    1,
    144,
    ['SVNG'],
  ],
  EGWPE: [
    'EGWPE',
    'HDFC Life Guaranteed Wealth Plus Plan(spl)',
    1,
    145,
    ['SVNG'],
  ],
};
var GOPS_PROD_CATEGORY = {
  CHLD: ['CHLD', 'Children', 1, 1, []],
  COMB: ['COMB', 'Combi', 1, 2, []],
  COMBO: ['COMBO', 'Combo', 1, 3, []],
  HLTH: ['HLTH', 'Health', 1, 4, []],
  INVT: ['INVT', 'Investment', 1, 5, []],
  MYMIX_COMBO: ['MYMIX_COMBO', 'Mymix Combo', 1, 6, []],
  PENS: ['PENS', 'Pension', 1, 7, []],
  PROT: ['PROT', 'Protection', 1, 8, []],
  SVNG: ['SVNG', 'Savings', 1, 9, []],
};
var GOPS_LA_CODE = {
  C2P: ['C2P3DPV9R', 'FULLUW', 1, 190, []],
  PRQ: ['PENPARV9', 'NONUW', 1, 4, []],
  UP6: ['UL9APPE', 'NONUW', 1, 5, []],
  UP5: ['UL9APP', 'NONUW', 1, 6, []],
  UR2: ['UL9C2R', 'NONUW', 1, 7, []],
  P7F: ['GPPV9E', 'NONUW', 1, 8, []],
  P7S: ['GPPV9', 'NONUW', 1, 9, []],
  CTP: ['C2P3DPR', 'FULLUW', 1, 239, []],
  IAY: ['PGNP9', 'NONUW', 1, 18, []],
  IAX: ['PGNP1', 'NONUW', 1, 26, []],
  EAH: ['EAHT', 'NONUW', 1, 27, []],
  UP4: ['UL8APPE', 'NONUW', 1, 28, []],
  UP3: ['UL8APP', 'NONUW', 1, 29, []],
  UR1: ['UL8C2R', 'NONUW', 1, 30, []],
  CAN: ['CANC', 'NONUW', 1, 32, []],
  IAS: ['IANP10', 'NONUW', 1, 33, []],
  IAQ: ['IANP9', 'NONUW', 1, 34, []],
  IAR: ['IANP8', 'NONUW', 1, 35, []],
  IAM: ['IANP7', 'NONUW', 1, 36, []],
  IAL: ['IANP6', 'NONUW', 1, 37, []],
  IAH: ['IANP5', 'NONUW', 1, 38, []],
  IAF: ['IANP4', 'NONUW', 1, 39, []],
  IAG: ['IANP3', 'NONUW', 1, 40, []],
  IAB: ['IANP2', 'NONUW', 1, 41, []],
  UAT: ['UL8NPS4', 'NONUW', 1, 42, []],
  UAS: ['UL8NPS3', 'NONUW', 1, 43, []],
  UPT: ['UL8NPR2', 'NONUW', 1, 44, []],
  UPV: ['UL8NPR1', 'NONUW', 1, 45, []],
  IAA: ['IANP1', 'NONUW', 1, 46, []],
  PRR: ['PENPAR', 'NONUW', 1, 47, []],
  P7E: ['GPPE', 'NONUW', 1, 48, []],
  P7R: ['GPP', 'NONUW', 1, 49, []],
  U08: ['UL8NIVER', 'LTDUW', 1, 50, []],
  U04: ['UL8NIVS', 'LTDUW', 1, 51, []],
  U06: ['UL8NIVL', 'LTDUW', 1, 52, []],
  U02: ['UL8NIVR', 'LTDUW', 1, 53, []],
  CU5: ['HUDAYE', 'LTDUW', 1, 54, []],
  CU2: ['HUDAY', 'LTDUW', 1, 55, []],
  MBZ: ['SAPLUSEE', 'LTDUW', 1, 56, []],
  MBQ: ['SAPLUSE', 'LTDUW', 1, 57, []],
  UC2: ['UL8C2I', 'LTDUW', 1, 58, []],
  MBW: ['YSCAE', 'LTDUW', 1, 59, []],
  MBG: ['YSCA', 'LTDUW', 1, 60, []],
  MBX: ['YSASE', 'LTDUW', 1, 61, []],
  MBH: ['YSAS', 'LTDUW', 1, 62, []],
  MNQ: ['YSACE', 'LTDUW', 1, 63, []],
  MBF: ['YSAC', 'LTDUW', 1, 64, []],
  UMJ: ['UL8WP3', 'LTDUW', 1, 65, []],
  UMH: ['UL8WP2', 'LTDUW', 1, 66, []],
  EGU: ['SANCHE', 'LTDUW', 1, 67, []],
  EEU: ['SANCH', 'LTDUW', 1, 68, []],
  UMF: ['UL8WP1', 'LTDUW', 1, 69, []],
  USW: ['UL8YSE1', 'LTDUW', 1, 70, []],
  USV: ['UL8YS1', 'LTDUW', 1, 71, []],
  U8T: ['UL8WI1', 'LTDUW', 1, 72, []],
  UGO: ['UL8ESP3E', 'LTDUW', 1, 73, []],
  UGN: ['UL8ESP3', 'LTDUW', 1, 74, []],
  UEF: ['UL8EAE', 'LTDUW', 1, 75, []],
  UEE: ['UL8EA', 'LTDUW', 1, 76, []],
  UCU: ['UL8LPT2E', 'LTDUW', 1, 77, []],
  UCS: ['UL8LPT2', 'LTDUW', 1, 78, []],
  EAW: ['LIFEPARE', 'LTDUW', 1, 79, []],
  EAU: ['LIFEPAR', 'LTDUW', 1, 80, []],
  MBV: ['SIPPARE', 'LTDUW', 1, 81, []],
  MBT: ['SIPPAR', 'LTDUW', 1, 82, []],
  E7E: ['EALPTPE', 'LTDUW', 1, 83, []],
  E7L: ['EALPTP', 'LTDUW', 1, 84, []],
  ECP: ['SANPARL', 'LTDUW', 1, 86, []],
  UCZ: ['UL9CGE', 'LTDUW', 1, 87, []],
  UCW: ['UL9CG', 'LTDUW', 1, 88, []],
  MAW: ['YSCAV9E', 'LTDUW', 1, 89, []],
  MAG: ['YSCAV9', 'LTDUW', 1, 90, []],
  MAS: ['YSASV9E', 'LTDUW', 1, 91, []],
  MAH: ['YSASV9', 'LTDUW', 1, 92, []],
  MAP: ['YSACV9E', 'LTDUW', 1, 93, []],
  MAF: ['YSACV9', 'LTDUW', 1, 94, []],
  UBJ: ['UL9WP3', 'LTDUW', 1, 95, []],
  UBH: ['UL9WP2', 'LTDUW', 1, 96, []],
  UBE: ['UL9WP1', 'LTDUW', 1, 97, []],
  MSV: ['SIPPARV9ES', 'LTDUW', 1, 98, []],
  MST: ['SIPPARV9S', 'LTDUW', 1, 99, []],
  EMU: ['SANCHV9EL', 'LTDUW', 1, 101, []],
  EKU: ['SANCHV9L', 'LTDUW', 1, 103, []],
  UFE: ['UL9YSE1', 'LTDUW', 1, 104, []],
  UFD: ['UL9YS1', 'LTDUW', 1, 105, []],
  CV5: ['HUDAYV9E', 'LTDUW', 1, 106, []],
  CV2: ['HUDAYV9', 'LTDUW', 1, 107, []],
  MNV: ['SIPPARV9E', 'LTDUW', 1, 108, []],
  MNT: ['SIPPARV9', 'LTDUW', 1, 109, []],
  MZ1: ['SAPLUSEV9E', 'LTDUW', 1, 110, []],
  MQ1: ['SAPLUSEV9', 'LTDUW', 1, 111, []],
  E9E: ['EALPTPV9E', 'LTDUW', 1, 112, []],
  E9L: ['EALPTPV9', 'LTDUW', 1, 113, []],
  UDU: ['UL9LPT2E', 'LTDUW', 1, 114, []],
  UDS: ['UL9LPT2', 'LTDUW', 1, 115, []],
  ECM: ['SANPAR', 'LTDUW', 1, 117, []],
  EAD: ['SANCHPV9E', 'LTDUW', 1, 119, []],
  U25: ['UL9CIPG', 'LTDUW', 1, 122, []],
  U26: ['UL9CIPP', 'LTDUW', 1, 121, []],
  U22: ['UL9C2I', 'LTDUW', 1, 123, []],
  UEJ: ['UL9EAE', 'LTDUW', 1, 124, []],
  UEI: ['UL9EA', 'LTDUW', 1, 125, []],
  U38: ['UL9NIVES', 'LTDUW', 1, 126, []],
  U40: ['UL9NIVEL', 'LTDUW', 1, 127, []],
  U36: ['UL9NIVER', 'LTDUW', 1, 128, []],
  U32: ['UL9NIVS', 'LTDUW', 1, 129, []],
  U34: ['UL9NIVL', 'LTDUW', 1, 130, []],
  U30: ['UL9NIVR', 'LTDUW', 1, 131, []],
  EIU: ['SANCHP', 'LTDUW', 1, 133, []],
  UC9: ['UL8CIPP', 'LTDUW', 1, 134, []],
  UC7: ['UL8CIP', 'LTDUW', 1, 136, []],
  UXL: ['IUNOY', 'LTDUW', 1, 139, []],
  USK: ['IUNOX', 'LTDUW', 1, 140, []],
  CRC: ['CDAC', 'FULLUW', 1, 230, []],
  UCQ: ['UL8CGE', 'LTDUW', 1, 145, []],
  UCK: ['UL8CG', 'LTDUW', 1, 146, []],
  U10: ['UL8NIVES', 'LTDUW', 1, 147, []],
  U12: ['UL8NIVEL', 'LTDUW', 1, 148, []],
  C2F: ['P1C2PL', 'FULLUW', 1, 150, []],
  CP7: ['C2PPV9ER', 'FULLUW', 1, 157, []],
  ECN: ['SANPARL', 'FULLUW', 1, 154, []],
  CP9: ['C2PPV9ES', 'FULLUW', 1, 155, []],
  CP8: ['C2PPV9EL', 'FULLUW', 1, 156, []],
  CPZ: ['C2PPV9S', 'FULLUW', 1, 158, []],
  CPY: ['C2PPV9L', 'FULLUW', 1, 159, []],
  CPX: ['C2PPV9R', 'FULLUW', 1, 160, []],
  UCX: ['UL9CGE', 'FULLUW', 1, 161, []],
  UCJ: ['UL9CG', 'FULLUW', 1, 162, []],
  MAM: ['YSCAV9E', 'FULLUW', 1, 163, []],
  MAC: ['YSCAV9', 'FULLUW', 1, 164, []],
  MAN: ['YSASV9E', 'FULLUW', 1, 165, []],
  MAD: ['YSASV9', 'FULLUW', 1, 166, []],
  MAL: ['YSACV9E', 'FULLUW', 1, 167, []],
  MAB: ['YSACV9', 'FULLUW', 1, 168, []],
  UBI: ['UL9WP3', 'FULLUW', 1, 169, []],
  UBG: ['UL9WP2', 'FULLUW', 1, 170, []],
  UBD: ['UL9WP1', 'FULLUW', 1, 171, []],
  MSU: ['SIPPARV9ES', 'FULLUW', 1, 172, []],
  MSS: ['SIPPARV9S', 'FULLUW', 1, 173, []],
  ELU: ['SANCHV9EL', 'FULLUW', 1, 178, []],
  EJU: ['SANCHV9L', 'FULLUW', 1, 180, []],
  UFC: ['UL9YSE1', 'FULLUW', 1, 181, []],
  UFB: ['UL9YS1', 'FULLUW', 1, 182, []],
  CV4: ['HUDAYV9E', 'FULLUW', 1, 183, []],
  CV1: ['HUDAYV9', 'FULLUW', 1, 184, []],
  MNU: ['SIPPARV9E', 'FULLUW', 1, 191, []],
  MNS: ['SIPPARV9', 'FULLUW', 1, 192, []],
  MY1: ['SAPLUSEV9E', 'FULLUW', 1, 193, []],
  MO1: ['SAPLUSEV9', 'FULLUW', 1, 194, []],
  E9H: ['EALPTPV9E', 'FULLUW', 1, 195, []],
  E9U: ['EALPTPV9', 'FULLUW', 1, 196, []],
  UDV: ['UL9LPT2E', 'FULLUW', 1, 197, []],
  UDT: ['UL9LPT2', 'FULLUW', 1, 198, []],
  ECF: ['SANPAR', 'FULLUW', 1, 200, []],
  EAC: ['SANCHPV9E', 'FULLUW', 1, 202, []],
  U27: ['UL9CIPG', 'FULLUW', 1, 209, []],
  UXB: ['IUNOY1', 'FULLUW', 1, 205, []],
  USF: ['IUNOX1', 'FULLUW', 1, 207, []],
  U28: ['UL9CIPP', 'FULLUW', 1, 208, []],
  U21: ['UL9C2I', 'FULLUW', 1, 210, []],
  UNP: ['UL9EAE', 'FULLUW', 1, 211, []],
  UNO: ['UL9EA', 'FULLUW', 1, 212, []],
  UGS: ['UL9EA2', 'FULLUW', 1, 213, []],
  UNL: ['UL9EA1', 'FULLUW', 1, 214, []],
  U37: ['UL9NIVES', 'FULLUW', 1, 215, []],
  U39: ['UL9NIVEL', 'FULLUW', 1, 216, []],
  U35: ['UL9NIVER', 'FULLUW', 1, 217, []],
  U31: ['UL9NIVS', 'FULLUW', 1, 218, []],
  U33: ['UL9NIVL', 'FULLUW', 1, 219, []],
  U29: ['UL9NIVR', 'FULLUW', 1, 220, []],
  EIV: ['SANCHP', 'FULLUW', 1, 222, []],
  UIZ: ['UL8CIPP', 'FULLUW', 1, 223, []],
  UIY: ['UL8CIP', 'FULLUW', 1, 225, []],
  UXR: ['IUNOY', 'FULLUW', 1, 228, []],
  USQ: ['IUNOX', 'FULLUW', 1, 229, []],
  UCM: ['UL8CGE', 'FULLUW', 1, 240, []],
  UCG: ['UL8CG', 'FULLUW', 1, 241, []],
  U09: ['UL8NIVES', 'FULLUW', 1, 242, []],
  U11: ['UL8NIVEL', 'FULLUW', 1, 243, []],
  U07: ['UL8NIVER', 'FULLUW', 1, 244, []],
  U03: ['UL8NIVS', 'FULLUW', 1, 245, []],
  U05: ['UL8NIVL', 'FULLUW', 1, 246, []],
  U01: ['UL8NIVR', 'FULLUW', 1, 247, []],
  CU4: ['HUDAYE', 'FULLUW', 1, 248, []],
  CU1: ['HUDAY', 'FULLUW', 1, 249, []],
  MBY: ['SAPLUSEE', 'FULLUW', 1, 250, []],
  MBO: ['SAPLUSE', 'FULLUW', 1, 251, []],
  CP6: ['C2PPS', 'FULLUW', 1, 252, []],
  CP5: ['C2PPL', 'FULLUW', 1, 253, []],
  CP4: ['C2PPR', 'FULLUW', 1, 254, []],
  CP3: ['C2PPES', 'FULLUW', 1, 255, []],
  CP2: ['C2PPEL', 'FULLUW', 1, 256, []],
  CPP: ['C2PPER', 'FULLUW', 1, 257, []],
  UC1: ['UL8C2I', 'FULLUW', 1, 258, []],
  HRN: ['HRN', 'FULLUW', 1, 259, []],
  MBM: ['YSCAE', 'FULLUW', 1, 260, []],
  MBC: ['YSCA', 'FULLUW', 1, 261, []],
  MBN: ['YSASE', 'FULLUW', 1, 262, []],
  MBD: ['YSAS', 'FULLUW', 1, 263, []],
  MBL: ['YSACE', 'FULLUW', 1, 264, []],
  MBB: ['YSAC', 'FULLUW', 1, 265, []],
  UMI: ['UL8WP3', 'FULLUW', 1, 266, []],
  UMG: ['UL8WP2', 'FULLUW', 1, 267, []],
  EFU: ['SANCHE', 'FULLUW', 1, 268, []],
  EDU: ['SANCH', 'FULLUW', 1, 269, []],
  UME: ['UL8WP1', 'FULLUW', 1, 270, []],
  HRI: ['HASP', 'FULLUW', 1, 271, []],
  UAZ: ['UL8YSE1', 'FULLUW', 1, 272, []],
  UAX: ['UL8YS1', 'FULLUW', 1, 273, []],
  T2P: ['T2P', 'FULLUW', 1, 274, []],
  U8S: ['UL8WI1', 'FULLUW', 1, 275, []],
  UNH: ['UL8EA1', 'FULLUW', 1, 276, []],
  UPS: ['UL8EA2', 'FULLUW', 1, 277, []],
  URV: ['UL8ESP3E', 'FULLUW', 1, 278, []],
  URU: ['UL8ESP3', 'FULLUW', 1, 279, []],
  UNJ: ['UL8EAE', 'FULLUW', 1, 280, []],
  UNI: ['UL8EA', 'FULLUW', 1, 281, []],
  UCV: ['UL8LPT2E', 'FULLUW', 1, 282, []],
  UCT: ['UL8LPT2', 'FULLUW', 1, 283, []],
  EAV: ['LIFEPARE', 'FULLUW', 1, 284, []],
  EAT: ['LIFEPAR', 'FULLUW', 1, 285, []],
  MBU: ['SIPPARE', 'FULLUW', 1, 286, []],
  MBS: ['SIPPAR', 'FULLUW', 1, 287, []],
  E7H: ['EALPTPE', 'FULLUW', 1, 288, []],
  E7U: ['EALPTP', 'FULLUW', 1, 289, []],
  ECO: ['SANPARL', 'SUW', 1, 323, []],
  CU3: ['HUDAY', 'SUW', 1, 291, []],
  CV6: ['HUDAYV9E', 'SUW', 1, 292, []],
  CV3: ['HUDAYV9', 'SUW', 1, 293, []],
  EGT: ['GSPV9', 'SUW', 1, 295, []],
  EA1: ['PRAGATHIV9E', 'SUW', 1, 296, []],
  EA2: ['PRAGATHIV9', 'SUW', 1, 297, []],
  ECH: ['SANPAR', 'SUW', 1, 299, []],
  EAB: ['SANCHPV9E', 'SUW', 1, 301, []],
  U23: ['UL9CIPG', 'SUW', 1, 308, []],
  UXA: ['IUNOY1', 'SUW', 1, 304, []],
  USB: ['IUNOX1', 'SUW', 1, 306, []],
  U24: ['UL9CIPP', 'SUW', 1, 307, []],
  EHU: ['SANCHP', 'SUW', 1, 310, []],
  UC6: ['UL8CIPP', 'SUW', 1, 311, []],
  UC5: ['UL8CIP', 'SUW', 1, 313, []],
  EGS: ['GSPE', 'SUW', 1, 315, []],
  UXO: ['IUNOY', 'SUW', 1, 318, []],
  USO: ['IUNOX', 'SUW', 1, 319, []],
  EAY: ['PRAGATHIE', 'SUW', 1, 320, []],
  EAZ: ['PRAGATHI', 'SUW', 1, 321, []],
  CU6: ['HUDAYE', 'SUW', 1, 322, []],
};
var GPOS_RIDER = {
  RIDER_ACCIDENTAL_DEATH_CANCER_COVER: [
    'RIDER_ACCIDENTAL_DEATH_CANCER_COVER',
    'Accidental Death & Cancer Cover',
    1,
    1,
    [],
  ],
  RIDER_ACCIDENTAL_DEATH_COVER: [
    'RIDER_ACCIDENTAL_DEATH_COVER',
    'Accidental Death Cover',
    1,
    2,
    [],
  ],
  RIDER_CANCER_COVER: ['RIDER_CANCER_COVER', 'Cancer Cover', 1, 3, []],
  RIDER_CRITICAL_ILLNESS: [
    'RIDER_CRITICAL_ILLNESS',
    'HDFC Life Critical Illness Plus Rider',
    1,
    4,
    [],
  ],
  RIDER_EXTRA_DISABLE: ['RIDER_EXTRA_DISABLE', 'Extra Disability', 1, 5, []],
  RIDER_EXTRA_HEALTH: ['RIDER_EXTRA_HEALTH', 'Extra Health', 1, 6, []],
  RIDER_EXTRA_LIFE: ['RIDER_EXTRA_LIFE', 'Extra Life', 1, 7, []],
  RIDER_EXTRA_LIFE_DISABILITY: [
    'RIDER_EXTRA_LIFE_DISABILITY',
    'Extra Life & Disability',
    1,
    8,
    [],
  ],
  RIDER_EXTRA_LIFE_HEALTH: [
    'RIDER_EXTRA_LIFE_HEALTH',
    'Extra Life & Health ',
    1,
    9,
    [],
  ],
  RIDER_EXTRA_LIFE_HEALTH_DISABILITY: [
    'RIDER_EXTRA_LIFE_HEALTH_DISABILITY',
    'Extra Life & Health & Disability',
    1,
    10,
    [],
  ],
  RIDER_EXTRA_LIFE_INCOME: [
    'RIDER_EXTRA_LIFE_INCOME',
    'Extra Life Income',
    1,
    11,
    [],
  ],
  RIDER_INCOME_BENEFIT: [
    'RIDER_INCOME_BENEFIT',
    'Income Benefit on Accidental Disability Rider',
    1,
    12,
    [],
  ],
  RIDER_INCOME_BENEFIT_CRITICAL_ILLNESS: [
    'RIDER_INCOME_BENEFIT_CRITICAL_ILLNESS',
    'Income Benefit & Critical Illness',
    1,
    13,
    [],
  ],
  RIDER_LIFE: ['RIDER_LIFE', 'Life', 1, 14, []],
  RIDER_LIFE_DISABILITY: [
    'RIDER_LIFE_DISABILITY',
    'Life & Disability',
    1,
    15,
    [],
  ],
  RIDER_LIFE_HEALTH: ['RIDER_LIFE_HEALTH', 'Life & Health', 1, 16, []],
  RIDER_LIFE_HEALTH_DISABILITY: [
    'RIDER_LIFE_HEALTH_DISABILITY',
    'Life & Health & Disability  ',
    1,
    17,
    [],
  ],
  RIDER_PENSION_PLUS_POLICY_FEE: [
    'RIDER_PENSION_PLUS_POLICY_FEE',
    'Pension Plus Policy fee',
    1,
    18,
    [],
  ],
  RIDER_PERSONAL_ACCIDENT_CANCER_COVER: [
    'RIDER_PERSONAL_ACCIDENT_CANCER_COVER',
    'Personal Accident & Cancer Cover',
    1,
    19,
    [],
  ],
  RIDER_PERSONAL_ACCIDENT_COVER: [
    'RIDER_PERSONAL_ACCIDENT_COVER',
    'Personal Accident Cover',
    1,
    20,
    [],
  ],
  RIDER_POLICY_FEE: ['RIDER_POLICY_FEE', 'Policy Fee', 1, 21, []],
  RIDER_RESTORE_BENEFIT: [
    'RIDER_RESTORE_BENEFIT',
    'Restore Benefit',
    1,
    22,
    [],
  ],
  RIDER_ROOM_RENT_ENHANCEMENT: [
    'RIDER_ROOM_RENT_ENHANCEMENT',
    'Room Rent Enhancement',
    1,
    23,
    [],
  ],
  RIDER_SANCHAY: ['RIDER_SANCHAY', 'HDFC Life Sanchay', 1, 24, []],
};
var GSCR_PARTY_ROLE = {
  '27581': ['APPOINTEE', 'Appointee', 1, 1, []],
  '27583': ['ASSIGNEE', 'Assignee', 1, 2, []],
  '27576': ['BENEFICIARY', 'Beneficiary', 1, 3, []],
  '121594': ['EXTERNALLIFEASSURED', 'External Life Assured', 1, 4, []],
  '27577': ['LIFEASSURED', 'Life Assured', 1, 5, []],
  '27580': ['NOMINEE', 'Nominee', 1, 6, []],
  '27574': ['OCCUP_CUST_CD', 'Custom & Excise Officer', 1, 7, []],
  '27579': ['PAYOR', 'Payor', 1, 8, []],
  '29414': ['PCVC_ROLE', 'PCVC_ROLE', 1, 9, []],
  '27578': ['PROPOSER', 'Proposer', 1, 10, []],
  '27575': ['TREX_THRYR_CD', '25-30 Years', 1, 11, []],
  '27582': ['TRUSTEE', 'Trustee', 1, 12, []],
};
var GPOS_OCCUPATIONTYPE = {
  OCCT_SALR: ['OCCT_SALR', 'Salaried', 1, 1, []],
  OCCT_SEBS: ['OCCT_SEBS', 'Self employed/ Business', 1, 2, []],
  OCCT_AGCT: ['OCCT_AGCT', 'Agriculture', 1, 3, []],
  OCCT_STUD: ['OCCT_STUD', 'Student', 1, 4, []],
  OCCT_UEMP: ['OCCT_UEMP', 'Unemployed', 1, 5, []],
  OCCT_HOWF: ['OCCT_HOWF', 'Housewife', 1, 6, []],
  OCCT_RETD: ['OCCT_RETD', 'Retired', 1, 7, []],
  OCCT_OTHR: ['OCCT_OTHR', 'Others', 1, 8, []],
};

function removeCommas(t) {
  return -1 != t.toString().indexOf(',')
    ? parseInt(t.split(',').join('')) + ''
    : t;
}
function checkNull(t, e) {
  return !(!t || '' === t) || (QNIAPP.ERR.push(QNIAPP.CONSTS.ERRMAND + e), !1);
}
function isValid_D(t) {
  return !!/^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/((19|[2-9]\d)\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/((19|[2-9]\d)\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/((19|[2-9]\d)\d{2}))|(29\/02\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$/.test(
    t
  );
}
function clearMessageDisplay(portletmsgDiv) {
  $('#' + portletmsgDiv + '> #error-msg').remove();
  $('#' + portletmsgDiv + '> #success-msg').remove();
}
function isFutureDate(t) {
  if (void 0 !== QNIAPP.IN.touchpoint && 'OPS' == !QNIAPP.IN.touchpoint) {
    var e = new Date();
    return e.setHours(0, 0, 0, 0), e < t;
  }
}
function isDateWithinFinYear(t) {
  var e = null,
    r = new Date();
  return (
    r.setHours(0, 0, 0, 0),
    !(
      t < r &&
      ((e =
        0 <= r.getMonth() && r.getMonth() < 3
          ? r.getFullYear() - 1
          : r.getFullYear()),
        t < new Date('04/01/' + e))
    )
  );
}
function checkDateVal(t) {
  isValid_D(t)
    ? isFutureDate((t = convertStrToMMDDYYYY(t))) &&
    QNIAPP.ERR.push(QNIAPP.CONSTS.ERRFUTDT)
    : QNIAPP.ERR.push(QNIAPP.CONSTS.ERRINVDT);
}
function getMstr_pk(mstrObj, code) {
  for (var pk in mstrObj) {
    if (mstrObj[pk][0] === code) {
      return pk;
    }
  }
  return null;
}
function calcAge(t, e, r) {
  var o = 0;
  if (isValid_D(t)) {
    t = t.split('/');
    var n = new Date(t[2], 1 * parseInt(parseFloat(t[1])) - 1, t[0]);
    return (
      (r = 'string' == typeof r ? convertStrToDDMMYYYY(r) : r).getMonth() ==
        n.getMonth() && r.getDate() == n.getDate()
        ? (o = r.getFullYear() - n.getFullYear())
        : 1 <= (o = (r.getTime() - n.getTime()) / 315576e5) &&
        (o = Math.floor(o)),
      e || (QNIAPP.IN.Qt.qtdtls.age = o),
      $.each(QNIAPP.ERR, function (t, e) {
        e == QNIAPP.CONSTS.ERRDOBAGE && QNIAPP.ERR.splice(t, 1);
      }),
      o
    );
  }
}
function validateFieldFormat(form_field) {
  var field_val = form_field.value;
  return (
    '' === field_val ||
    eval(
      'isValid_' + form_field.getAttribute('ctype') + "('" + field_val + "')"
    )
  );
}
function isValid_N(t) {
  return !!isNumber(t) && -1 == t.toString().indexOf('.');
}
function isValid_F(t) {
  return isNumber(t);
}
function isNumber(t) {
  return !isNaN(parseFloat(t)) && isFinite(t);
}
function checkNull(t, e) {
  return !(!t || '' === t) || (QNIAPP.ERR.push(QNIAPP.CONSTS.ERRMAND + e), !1);
}
function dobCheck(t, e, r) {
  var o = 0;
  return (
    t && '' !== t
      ? isValid_D(t)
        ? isFutureDate(convertStrToMMDDYYYY(t))
          ? (QNIAPP.ERR.push(QNIAPP.CONSTS.ERRFUTDT),
            QNIAPP.IN.Qt.qtdtls.age && (QNIAPP.IN.Qt.qtdtls.age = 0))
          : (o = calcAge(t, e, r))
        : (QNIAPP.ERR.push(QNIAPP.CONSTS.ERRFMTDT),
          QNIAPP.IN.Qt.qtdtls.age && (QNIAPP.IN.Qt.qtdtls.age = 0))
      : QNIAPP.IN.Qt.qtdtls.age && '' !== QNIAPP.IN.Qt.qtdtls.age
        ? isValid_N(QNIAPP.IN.Qt.qtdtls.age) ||
        QNIAPP.ERR.push(QNIAPP.CONSTS.ERRAGEFMT)
        : QNIAPP.ERR.push(QNIAPP.CONSTS.ERRDOBAGE),
    o
  );
}
function convertStrToDDMMYYYY(t) {
  return 'string' == typeof t
    ? ((t = t.split('/')), new Date(t[2] + '/' + t[1] + '/' + t[0]))
    : 'object' == typeof t
      ? t
      : null;
}
function convertStrToMMDDYYYY(t) {
  return 'string' == typeof t
    ? ((t = t.split('/')), new Date(t[1] + '/' + t[0] + '/' + t[2]))
    : 'object' == typeof t
      ? t
      : null;
}
function convertStrToDDMonYYYY(t) {
  if ('string' != typeof t)
    return 'object' == typeof date_str ? date_str : null;
  var e = convertStrToMMDDYYYY(t);
  return QNIAPP.COMM_CALC.getDDMonYYYYStr(e);
}
function getSysDtDDMMYYYYString() {
  var t = new Date();
  return (
    (t.getDate() < 10 ? '0' + t.getDate() : t.getDate()) +
    '/' +
    (t.getMonth() + 1 < 10 ? '0' + (t.getMonth() + 1) : t.getMonth() + 1) +
    '/' +
    t.getFullYear()
  );
}
function compareTwoParties_ops() {
  var t = QNIAPP.IN.Qt.qtdtls;
  return (
    null != t.fname &&
    (null != t.gender && null != t.pgender
      ? t.fname === t.pfname &&
      t.lname === t.plname &&
      t.dob === t.pdob &&
      t.gender === t.pgender
      : t.fname === t.pfname && t.lname === t.plname && t.dob === t.pdob)
  );
}
function LaNotEqualToProposer() {
  clearMessageDisplay('qni-quoteinput-messages'), (QNIAPP.ERR = []);
  var t = '';
  compareTwoParties_ops() &&
    ((t = '*Proposer details should be different from life assured details'),
      QNIAPP.ERR.push(t));
}
function checkNull(t, e) {
  return !(!t || '' === t) || (QNIAPP.ERR.push(QNIAPP.CONSTS.ERRMAND + e), !1);
}
//function to initialize jquery calendar
function Init_calender(dateArray) {
  var dateIDs = dateArray || '';
  autoAddSlash(['.datePick']);
}
var dropdown_lovs = function () { };
var GOPS_C2P_COUNTRY = [];
var TCS_CONSTANTS = {};
$.fn.selectmenu = function () { };
$.fn.tooltip = function () { };
window.exports = {};

QNIAPP.C2PP_PRATE = (function () {
  function P() { }
  return (
    (P.getLPrate = function (P, t, e, r) {
      var N = 'rate';
      N = N + QNIAPP.IN.Qt.qtdtls.gender ? 'm' : 'f';
      var A =
        QNIAPP.C2PP_PLANOPTS.getMappedVal(QNIAPP.IN.Qt.qtdtls.option) +
        P +
        ('B1' == P ? '' : t);
      return QNIAPP.C2PP_PRATE_L.get(A, P);
    }),
    (P.getRPrate = function (P, t, e, r) {
      var N = 'rate';
      N = N + QNIAPP.IN.Qt.qtdtls.gender ? 'm' : 'f';
      var A =
        QNIAPP.C2PP_PLANOPTS.getMappedVal(QNIAPP.IN.Qt.qtdtls.option) +
        P +
        ('B1' == P ? '' : t);
      return QNIAPP.C2PP_PRATE_R.get(A, P);
    }),
    (P.getSPrate = function (P, t, e, r) {
      var N = 'rate';
      N = N + QNIAPP.IN.Qt.qtdtls.gender ? 'm' : 'f';
      var A =
        QNIAPP.C2PP_PLANOPTS.getMappedVal(QNIAPP.IN.Qt.qtdtls.option) +
        P +
        ('B1' == P ? '' : t);
      return QNIAPP.C2PP_PRATE_S.get(A, P);
    }),
    (P.getINADrate = function (P, t, e) {
      return QNIAPP.INAD_PRATE.get(P, t, e);
    }),
    P
  );
})();

function autoAddSlash(e) {
  if (void 0 !== e)
    for (var i = 0; i < e.length && 'undefined' != e[i]; i++)
      $(e[i]).on('keyup', function (e) {
        -1 !== $.inArray(e.keyCode, [46, 8, 9, 27, 13, 110]) ||
          (65 === e.keyCode && (!0 === e.ctrlKey || !0 === e.metaKey)) ||
          (35 <= e.keyCode && e.keyCode <= 40) ||
          ((e.shiftKey || e.keyCode < 48 || 57 < e.keyCode) &&
            (e.keyCode < 96 || 105 < e.keyCode) &&
            e.preventDefault(),
            (2 !== $(this).val().length && 5 !== $(this).val().length) ||
            $(this).val($(this).val() + '/'));
      }),
        $(e[i]).on('focus', function (e) {
          $(this).attr('placeholder', 'DD/MM/YYYY');
        });
}
function static_get(e, t, r, n, a) {
  if (
    ('' != a && null != a && (e = a + e),
      isIE() && '' != remoteURL && null != remoteURL)
  ) {
    var o = new XDomainRequest();
    o &&
      ((o.onload = function () {
        $('#' + t).html(o.responseText), '' != r && null != r && r();
      }),
        (o.onerror = function () {
          '' != n && null != n && n();
        }),
        (o.ontimeout = function () { }),
        (o.onprogress = function () { }),
        o.open('GET', e),
        o.send());
  }
}
// exports.getSysDtDDMMYYYYString = getSysDtDDMMYYYYString,
// "undefined" == typeof exports ? this.getSysDtDDMMYYYYString = {} : exports,
// exports.convertStrToMMDDYYYY = convertStrToMMDDYYYY,
// "undefined" == typeof exports ? this.convertStrToMMDDYYYY = {} : exports,
// exports.checkNull = checkNull,
// "undefined" == typeof exports ? this.checkNull = {} : exports,
// exports.dobCheck = dobCheck,
// "undefined" == typeof exports ? this.dobCheck = {} : exports,
// exports.checkDateVal = checkDateVal,
// "undefined" == typeof exports ? this.checkDateVal = {} : exports,
// exports.isNumber = isNumber,
// "undefined" == typeof exports ? this.isNumber = {} : exports,
// exports.convertStrToDDMMYYYY = convertStrToDDMMYYYY,
// "undefined" == typeof exports ? this.convertStrToDDMMYYYY = {} : exports,
// exports.convertStrToDDMonYYYY = convertStrToDDMonYYYY,
// "undefined" == typeof exports ? this.convertStrToDDMonYYYY = {} : exports,
// exports.calcAge = calcAge,
// "undefined" == typeof exports ? this.calcAge = {} : exports;

function getScript(scriptURL, remoteURL, callbackFnName) {
  if (remoteURL != '' && remoteURL != null) {
    scriptURL = remoteURL + scriptURL;
  }
  if (isIE()) {
    /*for local calling the below code does not work, hence adding remote condition*/
    var s = document.createElement('script');
    s.src = scriptURL;
    document.body.appendChild(s);
    s.onreadystatechange = function () {
      if (this.readyState === 'loaded' || this.readyState === 'complete') {
        if (typeof callbackFnName === 'function' && callbackFnName != null) {
          callbackFnName();
        }
      }
    };
  } else {
    // $.ajaxSetup({
    //     cache: true
    // });
    // $.getScript(scriptURL).done(function() {
    //     if (typeof callbackFnName === "function" && callbackFnName != "" && callbackFnName != null) {
    //         callbackFnName();
    //     }
    // });
  }
}
function loadDependentScripts(arrScriptURL, remoteURL, callbackFnName) {
  if (arrScriptURL.length == 2) {
    getScript(arrScriptURL[0], remoteURL, function () {
      getScript(arrScriptURL[1], remoteURL, callbackFnName);
    });
  }
}
function isIE() {
  var v = 3,
    div = document.createElement('div'),
    all = div.getElementsByTagName('i');
  while (
    ((div.innerHTML = '<!--[if gt IE ' + ++v + ']><i></i><![endif]-->'), all[0])
  );
  if (v > 4) {
    /*check for IE 10*/
    return true;
  } else {
    return false;
  }
}
function Awesomplete() {
  this.FILTER_STARTSWITH = '';
  return this;
}

// date validations
function isValid_D(date_val) {
  var reg_exp = /^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/((19|[2-9]\d)\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/((19|[2-9]\d)\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/((19|[2-9]\d)\d{2}))|(29\/02\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$/;
  if (!reg_exp.test(date_val)) {
    return false;
  }
  return true;
}
function isFutureDate(date_val) {
  if (typeof QNIAPP.IN.touchpoint != "undefined" && !QNIAPP.IN.touchpoint == "OPS") { // IM1088177 - server date

    var sys_dt = new Date();//mmddyyyy
    sys_dt.setHours(0, 0, 0, 0);
    if (date_val > sys_dt) {
      return true;
    }
    return false;
  }
}
function isDateWithinFinYear(date_val) {
  var fin_year = null;
  var base_fin_dt = null;
  var today = new Date();
  today.setHours(0, 0, 0, 0);
  if (date_val < today) {
    fin_year = (today.getMonth() >= 0 && today.getMonth() < 3) ? (today.getFullYear() - 1) : today.getFullYear();
    base_fin_dt = new Date('04' + '/' + '01' + '/' + fin_year);
    if (date_val < base_fin_dt) {
      return false;
    }
  }
  return true;
}
function checkDateVal(date_val) {
  if (isValid_D(date_val)) {
    date_val = convertStrToMMDDYYYY(date_val);
    //check for date not a future one
    if (!isFutureDate(date_val)) {
      /*if(!isDateWithinFinYear(date_val) && QNIAPP.IN.Qt.touchpoint!=="UW"){ // there should be no financial year validation for UW
        QNIAPP.ERR.push(QNIAPP.CONSTS.ERRFINYR);
      }	*/
    }
    else {
      QNIAPP.ERR.push(QNIAPP.CONSTS.ERRFUTDT);
    }
  }
  else {
    QNIAPP.ERR.push(QNIAPP.CONSTS.ERRINVDT);
  }
}

function calcAge(dob_val, is_dep, start_dt) {
  var age = 0;
  if (isValid_D(dob_val)) {
    dob_val = dob_val.split('/');
    var tempdob_val = new Date(dob_val[2], (parseInt(parseFloat(dob_val[1])) * 1) - 1, dob_val[0]);//yyyy mm dd
    start_dt = ((typeof (start_dt) == 'string') ? convertStrToDDMMYYYY(start_dt) : start_dt);

    if (start_dt.getMonth() == tempdob_val.getMonth() && start_dt.getDate() == tempdob_val.getDate()) {
      age = (start_dt.getFullYear() - tempdob_val.getFullYear());
    }
    else {
      age = ((start_dt.getTime() - tempdob_val.getTime()) / (365.25 * 24 * 60 * 60 * 1000));
      if (age >= 1) {
        age = Math.floor(age);
      }

    }
    if (!is_dep) {
      QNIAPP.IN.Qt.qtdtls.age = age;
    }
    $.each(QNIAPP.ERR, function (index, prop) {
      if (prop == QNIAPP.CONSTS.ERRDOBAGE) {
        QNIAPP.ERR.splice(index, 1);
      }
    });
    return age;

  }
}
function calculateMonths(calculate_from, calculate_upto) {

  if (isValid_D(calculate_from)) {
    var totalMon = 0;
    calculate_from = calculate_from.split('/');
    calculate_upto = calculate_upto.split('/');

    var yearDiff = parseInt(calculate_upto[2])
      - parseInt(calculate_from[2]);

    var monDiff = parseInt(calculate_upto[1])
      - parseInt(calculate_from[1]);

    var dayDiff = parseInt(calculate_upto[0])
      - parseInt(calculate_from[0]);

    var totalMon = yearDiff * 12 + monDiff + dayDiff / 30;

    if (totalMon >= 1) {
      totalMon = parseInt(totalMon);
    }

    return totalMon;
  }

}


function calculateDays(incpdt, annpaydate) {
  var PYFREQ_PD_MAP = { 'Monthly': { "pd": 1 }, 'Half Yearly': { "pd": 6 }, 'Quarterly': { "pd": 3 }, 'Annual': { "pd": 12 } };
  var ann_freq = (QNIAPP.IN.Qt.qtdtls.pyfrequency) ? (QNIAPP.IN.Qt.qtdtls.pyfrequency) : 'Annual';
  var fac = PYFREQ_PD_MAP[ann_freq].pd;
  var def_end_date = new Date(convertStrToDDMMYYYY(annpaydate));
  def_end_date = new Date(def_end_date.setMonth(def_end_date.getMonth() - fac));
  var day = def_end_date.getDate();
  var month = (def_end_date.getMonth() + 1);
  var year = def_end_date.getFullYear();
  if (day < 10) {
    day = "0" + day;
  }
  if (month < 10) {
    month = "0" + month;
  }
  def_end_date = day + '/' + month + '/' + year;
  QNIAPP.IN.Qt.qtdtls.defEndDt = def_end_date;
  var incpdate = (incpdt);
  incpdate = new Date(incpdate.split('/')[2], incpdate.split('/')[1] - 1, incpdate.split('/')[0]);
  var defdate = def_end_date;
  defdate = new Date(defdate.split('/')[2], defdate.split('/')[1] - 1, defdate.split('/')[0]);
  var timeDiff = (defdate.getTime() - incpdate.getTime());
  var diffDays = (timeDiff / (1000 * 3600 * 24));
  diffDays = (diffDays + 1) / (365.25);
  diffDays = diffDays.toFixed(2);
  return diffDays;
}

function validateFieldFormat(form_field) {
  var field_val = form_field.value;
  if (field_val !== '') {
    return (eval("isValid_" + form_field.getAttribute('ctype') + "('" + field_val + "')"));
  }
  else {
    return true;
  }

}

function isValid_N(elem) {
  if (isNumber(elem)) {
    if (elem.toString().indexOf('.') != -1) {
      return false;
    }
  }
  else {
    return false;
  }
  return true;
}
/*
function isValid_A(elem){
  return (/^[a-zA-Z ]*$/i.test(elem));
}

function isValid_PH(elem){
  return (elem.match(/^[789][0-9]{9}/));
}

function isValid_EC(elem){
  return ((/^[a-zA-Z][\w\.-]*@[a-zA-Z][\w\.-]*\.[\w]+$/).test(elem));
}
*/
function isValid_F(elem) {

  return (isNumber(elem));

}
function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}

function checkNull(field_val, field_name) {
  if (!field_val || field_val === '') // Change 4-9-2013
  {
    console.log('inside checkNull');
    QNIAPP.ERR.push(QNIAPP.CONSTS.ERRMAND + field_name);
    return false;
  }
  return true;
}
function dobCheck(date_val, is_dep, start_dt) {
  var age = 0;
  if (date_val && date_val !== '') {
    if (isValid_D(date_val)) {
      if (!isFutureDate(convertStrToMMDDYYYY(date_val))) {
        age = calcAge(date_val, is_dep, start_dt);
      }
      else {
        QNIAPP.ERR.push(QNIAPP.CONSTS.ERRFUTDT);
        if (QNIAPP.IN.Qt.qtdtls.age) {
          QNIAPP.IN.Qt.qtdtls.age = 0;
        }
      }
    }
    else {
      QNIAPP.ERR.push(QNIAPP.CONSTS.ERRFMTDT);
      if (QNIAPP.IN.Qt.qtdtls.age) {
        QNIAPP.IN.Qt.qtdtls.age = 0;
      }
    }
  }
  else {
    if (QNIAPP.IN.Qt.qtdtls.age && QNIAPP.IN.Qt.qtdtls.age !== '') {
      if (!isValid_N(QNIAPP.IN.Qt.qtdtls.age)) {
        QNIAPP.ERR.push(QNIAPP.CONSTS.ERRAGEFMT);
      }
    }
    else {
      QNIAPP.ERR.push(QNIAPP.CONSTS.ERRDOBAGE);
    }
  }
  return age;
}

function convertStrToDDMMYYYY(date_str) {
  if (typeof (date_str) === 'string') {
    date_str = date_str.split('/'); //getting in dd/mm/yyyy format
    return new Date(date_str[2] + "/" + date_str[1] + "/" + date_str[0]);
  }
  else if (typeof (date_str) === 'object') {
    return date_str;
  }
  return null;
}

function convertStrToMMDDYYYY(date_str) {
  if (typeof (date_str) === 'string') {
    date_str = date_str.split('/');
    return (new Date(date_str[1] + '/' + date_str[0] + '/' + date_str[2]));
  }
  else if (typeof (date_str) === 'object') {
    return date_str;
  }
  return null;
}

function convertStrToDDMonYYYY(str_val) {
  if (typeof (str_val) === 'string') {
    var date_obj = convertStrToMMDDYYYY(str_val);
    return QNIAPP.COMM_CALC.getDDMonYYYYStr(date_obj);
  }
  else if (typeof (date_str) === 'object') {
    return date_str;
  }
  return null;
}

function getSysDtDDMMYYYYString() {
  var sys_date = new Date();
  var sys_date_str = ((sys_date.getDate() < 10) ? ('0' + sys_date.getDate()) : sys_date.getDate()) + "/" + (((sys_date.getMonth() + 1) < 10) ? ('0' + (sys_date.getMonth() + 1)) : (sys_date.getMonth() + 1)) + "/" + sys_date.getFullYear();
  return sys_date_str;
}


//Redmine 2157 - Nominee & Appointee Related Validations starts- Zabi
function compareTwoParties_ops() {
  var qniAppDat = QNIAPP.IN.Qt.qtdtls;
  if (qniAppDat.fname == undefined) {
    return false;
  } else if (qniAppDat.gender != undefined && qniAppDat.pgender != undefined) {
    return ((qniAppDat.fname) === (qniAppDat.pfname) && (qniAppDat.lname) === (qniAppDat.plname) && (qniAppDat.dob) === (qniAppDat.pdob) && (qniAppDat.gender) === (qniAppDat.pgender));
  } else {
    return ((qniAppDat.fname) === (qniAppDat.pfname) && (qniAppDat.lname) === (qniAppDat.plname) && (qniAppDat.dob) === (qniAppDat.pdob));
  }
}
function LaNotEqualToProposer() {
  var flag = true;                   //redmine 3381 - by shankar
  clearMessageDisplay("qni-quoteinput-messages");
  QNIAPP.ERR = [];
  var errorMsgs = "";
  var same = compareTwoParties_ops();
  if (same) {
    flag = false;
    errorMsgs = "*Proposer details should be different from life assured details";
    QNIAPP.ERR.push(errorMsgs);
  }
  return flag;
}


//Redmine 2157 - Nominee & Appointee Related Validations ends- Zabi


exports.getSysDtDDMMYYYYString = getSysDtDDMMYYYYString;
(typeof exports === 'undefined' ? this['getSysDtDDMMYYYYString'] = {} : exports);

exports.convertStrToMMDDYYYY = convertStrToMMDDYYYY;
(typeof exports === 'undefined' ? this['convertStrToMMDDYYYY'] = {} : exports);

exports.checkNull = checkNull;
(typeof exports === 'undefined' ? this['checkNull'] = {} : exports);

exports.dobCheck = dobCheck;
(typeof exports === 'undefined' ? this['dobCheck'] = {} : exports);

exports.checkDateVal = checkDateVal;
(typeof exports === 'undefined' ? this['checkDateVal'] = {} : exports);

exports.isNumber = isNumber;
(typeof exports === 'undefined' ? this['isNumber'] = {} : exports);

exports.convertStrToDDMMYYYY = convertStrToDDMMYYYY;
(typeof exports === 'undefined' ? this['convertStrToDDMMYYYY'] = {} : exports);

exports.convertStrToDDMonYYYY = convertStrToDDMonYYYY;
(typeof exports === 'undefined' ? this['convertStrToDDMonYYYY'] = {} : exports);

exports.calcAge = calcAge;
(typeof exports === 'undefined' ? this['calcAge'] = {} : exports);

exports.calculateMonths = calculateMonths;
(typeof exports === 'undefined' ? this['calculateMonths'] = {} : exports);

exports.calculateDays = calculateDays;
(typeof exports === 'undefined' ? this['calculateDays'] = {} : exports);

/*!========================================================== Copyright @ Technology Solutions (INDIA), Tata Consultancy Services Ltd ============================================================*/

var TCS_CONSTANTS = { TRUE: '1', FALSE: '0', BOTH: 'BOTH' };
function disableEntitledElems(el) {
  try {
    el.disabled = true;
  } catch (E) { }
  if (el.childNodes && el.childNodes.length > 0) {
    for (var x = 0; x < el.childNodes.length; x++) {
      disableEntitledElems(el.childNodes[x]);
    }
  }
}
function dropdown(selectid, values) {
  $('#' + selectid).empty();
  if (values != null) {
    var selectOptions = '<option value="">--Select--</option>';
    for (var i = 0; i < values.length; i++) {
      selectOptions +=
        '<option value="' + values[i][0] + '">' + values[i][1] + '</option>';
    }
    $("select[id='" + selectid + "']").html(selectOptions);
  }
}
/*checks if JSON object is empty*/ function isEmptyObject(obj) {
  if (
    JSON.stringify(obj) == '{}' ||
    obj == null ||
    typeof obj === 'undefined'
  ) {
    return true;
  } else {
    return false;
  }
}
function showpopup(divid) {
  $('html, body').animate({ scrollTop: 0 }, 400);
  var width = $(document).width();
  var height = $(document).height();
  $('.overlay-sheet').css({ width: width, height: height });
  $('.' + divid + ', .overlay-sheet').css('display', 'block');
}
function hidepopup(divid) {
  $('.overlay-sheet,.' + divid + '').css('display', 'none');
}
function renderpopup(divid, jsonRowObj, rowindex, formid) {
  if (rowindex == '' && rowindex != '0') {
    /*addition*/ var form = document.getElementById(formid);
    var inputs = form.getElementsByTagName('input');
    for (var i = 0; i < inputs.length; i++) {
      if (inputs[i].type == 'text') {
        var id = inputs[i].id;
        form.elements[id].value = '';
      }
    }
    $('#' + divid)
      .find('#rowindex')
      .val('');
    flag = true;
  } else {
    /*existing row*/ $.each(jsonRowObj, function (inputfield, inputValue) {
      /*if &nbsp is present then insert space in its place*/ if (
      inputValue.indexOf('&nbsp') != -1
    ) {
      inputValue = inputValue.replace('&nbsp', ' ');
    }
    $('#' + divid)
      .find('#' + inputfield)
      .val(inputValue);
    flag = true;
  });
    $('#' + divid)
      .find('#rowindex')
      .val(rowindex);
  }
  if (flag == true) {
    showpopup(divid);
    return false;
  }
}
function applyClass(id) {
  var $active,
    $links = $('.nav li a');
  var classname = 'nav-active';
  $active = $($links.filter('[class="' + classname + '"]'));
  $active.removeClass('nav-active');
  $('#' + id).addClass(classname);
  $('#' + id)
    .parents('.nav > li')
    .find('a:first')
    .addClass(classname);
}
/*function generateBreadcrumb(pageid, pageparam){ var allowedBreadcrumbs = 2; if($("#_breadcrumb ul li a").length >= GFWK_BREADCRUMB_LIMT){ //$("#breadcrumb ul li").remove(); // remove all breadcrumb links and start appending the newly clicked tabs $("#_breadcrumb ul li:not(:first)").remove(); // do not remove the first link and appends the newly clicked tab } $("#_breadcrumb ul li").removeAttr("class"); var breadcrumbLabel = GFWK_PAGELABELS[pageid]; if(breadcrumbLabel != "" && breadcrumbLabel !== undefined){ var prevBreadcrumbLabel = $("#_breadcrumb ul li:last").text(); if($("#_breadcrumb ul").length == 0){ $("#_breadcrumb").append('<ul><li class="last-bread"><a href=# onclick=clearBreadcrumbsuccessors(\''+pageid+'\',\''+pageparam+'\') >'+breadcrumbLabel+' </a> </li></ul>'); } else if($("#_breadcrumb ul li").length == 0){ $("#_breadcrumb ul").append('<li class="last-bread"><a href=# onclick=clearBreadcrumbsuccessors(\''+pageid+'\',\''+pageparam+'\') >'+breadcrumbLabel+' </a> </li>'); } else if($.trim(prevBreadcrumbLabel) != $.trim(breadcrumbLabel)){ $("#_breadcrumb ul").append(' <li>>></li> <li class="last-bread"><a href=# onclick=clearBreadcrumbsuccessors(\''+pageid+'\',\''+pageparam+'\') >'+breadcrumbLabel+' </a> </li>'); } } }*/ /*function showBreadcrumb(){ var ulTag = $("#_breadcrumb ul"); var existingBreadcrumb = ulTag.html(); if(_BREADCRUM !== "") { if(existingBreadcrumb !== undefined){ ulTag.append(_BREADCRUM); } else { document.getElementById("_breadcrumb").innerHTML = _BREADCRUM; } } } var _BREADCRUM; function generateBreadcrumb(pageid, pageparam){ _BREADCRUM = ""; //var allowedBreadcrumbs = 2; if($("#_breadcrumb ul li a").length >= GFWK_BREADCRUMB_LIMT){ //$("#breadcrumb ul li").remove(); // remove all breadcrumb links and start appending the newly clicked tabs $("#_breadcrumb ul li:not(:first)").remove(); // do not remove the first link and appends the newly clicked tab } $("#_breadcrumb ul li").removeAttr("class"); var breadcrumbLabel = GFWK_PAGELABELS[pageid]; if(breadcrumbLabel != "" && breadcrumbLabel !== undefined){ var prevBreadcrumbLabel = $("#_breadcrumb ul li:last").text(); if($("#_breadcrumb ul").length == 0){ //$("#_breadcrumb").append('<ul><li class="last-bread"><a href=# onclick=clearBreadcrumbsuccessors(\''+pageid+'\',\''+pageparam+'\') >'+breadcrumbLabel+' </a> </li></ul>'); _BREADCRUM = '<ul><li class="last-bread"><a href=# onclick=clearBreadcrumbsuccessors(\''+pageid+'\',\''+pageparam+'\') >'+breadcrumbLabel+' </a> </li></ul>'; } else if($("#_breadcrumb ul li").length == 0){ //$("#_breadcrumb ul").append('<li class="last-bread"><a href=# onclick=clearBreadcrumbsuccessors(\''+pageid+'\',\''+pageparam+'\') >'+breadcrumbLabel+' </a> </li>'); _BREADCRUM = '<li class="last-bread"><a href=# onclick=clearBreadcrumbsuccessors(\''+pageid+'\',\''+pageparam+'\') >'+breadcrumbLabel+' </a> </li>'; showBreadcrumb(); } else if($.trim(prevBreadcrumbLabel) != $.trim(breadcrumbLabel)){ //$("#_breadcrumb ul").append(' <li>>></li> <li class="last-bread"><a href=# onclick=clearBreadcrumbsuccessors(\''+pageid+'\',\''+pageparam+'\') >'+breadcrumbLabel+' </a> </li>'); _BREADCRUM = ' <li>>></li> <li class="last-bread"><a href=# onclick=clearBreadcrumbsuccessors(\''+pageid+'\',\''+pageparam+'\') >'+breadcrumbLabel+' </a> </li>'; showBreadcrumb(); } } }*/ /*function clearBreadcrumbsuccessors(pageid, pageparam){ $('#_breadcrumb ul li a').live('click', function(){ $(this).parent().nextAll('li').remove(); $(this).parent().addClass("last-bread"); }); page_get(pageid,pageparam); }*/ function showBreadcrumb() {
  if (
    _BREADCRUM != '' &&
    document.getElementById('_breadcrumb') != null &&
    document.getElementById('_breadcrumb') != undefined
  ) {
    $('#_breadcrumb').html(_BREADCRUM);
    _BREADCRUM = '';
  }
}
var _BREADCRUM;
function generateBreadcrumb(pageid, pageparam) {
  _BREADCRUM = '';
  var breadCrumArray = new Array();
  var breadKey = GFWK_APP_ID + 'BREADCRUM';
  sessionStorage.getItem(breadKey);
  if (
    sessionStorage.getItem(breadKey) != undefined &&
    sessionStorage.getItem(breadKey) != null
  ) {
    breadCrumArray = sessionStorage.getItem(breadKey).split('@~@');
  }
  var breadPosReverse = 0;
  var curbreadcrumbLabel = '';
  var newstoreBreadCum = '';
  var breadCumInnerHtml = '';
  if (GFWK_PAGELABELS[pageid] != null && GFWK_PAGELABELS[pageid].length > 0) {
    curbreadcrumbLabel = GFWK_PAGELABELS[pageid][0];
  }
  if (curbreadcrumbLabel != '' && curbreadcrumbLabel != undefined) {
    if ($.trim(curbreadcrumbLabel).indexOf('{dynaLabel}') != -1) {
      if (pageparam != null && pageparam.indexOf('name=') != -1) {
        var labelVal = getLabelParamValue(pageparam);
        curbreadcrumbLabel = curbreadcrumbLabel.replace(
          '{dynaLabel}',
          labelVal
        );
      }
    }
    newstoreBreadCum +=
      pageid +
      '#~#' +
      pageparam +
      '#~#' +
      curbreadcrumbLabel +
      '#~#' +
      document.URL;
    /*breadCumInnerHtml += '<li class="last-bread" ><a href=# onclick=clearBreadcrumbsuccessors('+breadPosReverse+',\''+encodeURIComponent(pageid)+'\',\''+encodeURIComponent(pageparam)+'\')>'+curbreadcrumbLabel+' </a> </li>';*/ breadCumInnerHtml +=
      '<li class="last-bread" >' + curbreadcrumbLabel + ' </li>';
    breadPosReverse++;
  }
  var arIndex = 0;
  while (arIndex < breadCrumArray.length) {
    if (
      breadPosReverse == GFWK_BREADCRUMB_LIMT - 1 &&
      arIndex <= breadCrumArray.length - 2 &&
      (arIndex != 0 ||
        (arIndex == 0 && GFWK_BREADCRUMB_LIMT == 2 && breadPosReverse == 1))
    ) {
      /* Skip the second position if limit is reached*/ arIndex++;
      continue;
    }
    var pageDetAr = breadCrumArray[arIndex].split('#~#');
    var temppageid = '';
    var temppageparam = '';
    var prevbreadcrumbLabel = '';
    var temppageURL = '';
    if (pageDetAr != null && pageDetAr.length > 0) {
      temppageid = pageDetAr[0];
      if (pageDetAr.length > 1) {
        temppageparam = pageDetAr[1];
      }
      if (pageDetAr.length > 2) {
        prevbreadcrumbLabel = pageDetAr[2];
      }
      if (pageDetAr.length > 3) {
        temppageURL = pageDetAr[3];
      }
    }
    if (
      prevbreadcrumbLabel != '' &&
      prevbreadcrumbLabel != undefined &&
      $.trim(prevbreadcrumbLabel) != $.trim(curbreadcrumbLabel)
    ) {
      if (newstoreBreadCum != '') {
        newstoreBreadCum += '@~@';
        breadCumInnerHtml = ' <li>>></li> ' + breadCumInnerHtml;
      }
      newstoreBreadCum +=
        temppageid +
        '#~#' +
        temppageparam +
        '#~#' +
        prevbreadcrumbLabel +
        '#~#' +
        temppageURL;
      var strquotes = /'/g;
      breadCumInnerHtml =
        "<li ><a href=# onclick='clearBreadcrumbsuccessors(" +
        breadPosReverse +
        ',"' +
        encodeURIComponent(temppageid) +
        '","' +
        temppageparam.replace(/ /g, '%20').replace(strquotes, "\\\\'") +
        '" , "' +
        temppageURL +
        '" )\'>' +
        prevbreadcrumbLabel +
        '</a> </li>' +
        breadCumInnerHtml;
      curbreadcrumbLabel = prevbreadcrumbLabel;
      breadPosReverse++;
    }
    prevbreadcrumbLabel = '';
    arIndex++;
  }
  _BREADCRUM = '<ul>' + breadCumInnerHtml + '</ul>';
  sessionStorage.setItem(breadKey, newstoreBreadCum);
  showBreadcrumb(); /* for full page again will get call ;*/
}
function clearBreadcrumbsuccessors(arIndex, pageid, pageparam, pageURL) {
  var breadKey = GFWK_APP_ID + 'BREADCRUM';
  breadCrumArray = sessionStorage.getItem(breadKey).split('@~@');
  breadCrumArray = breadCrumArray.slice(arIndex + 1);
  sessionStorage.setItem(breadKey, breadCrumArray.join('@~@'));
  var fullPageFlag = '0';
  if (GFWK_PAGELABELS[pageid] != null && GFWK_PAGELABELS[pageid].length > 1) {
    fullPageFlag = GFWK_PAGELABELS[pageid][1];
  }
  if ($.trim(fullPageFlag) == '1') {
    /*full_page_get(GFWK_PORTAL_ID , pageid , pageparam);*/ doPageHref(pageURL);
  } else {
    page_get(pageid, pageparam);
  }
}
function pageClick(obj) {
  var completeurl = $(obj).attr('completeurl');
  if (completeurl != null && completeurl.length > 1) {
    /*for non-portal urls*/ doPageHref(completeurl);
  } else {
    var portalid = $(obj).attr('portalid');
    var pageid = $(obj).attr('id');
    var querystr = $(obj).attr('querystr');
    var webapp = $(obj).attr('webapp');
    if (webapp != null && webapp.length > 1) {
      var rooturl = $(obj).attr('rooturl');
      if (rooturl != null && rooturl.length > 1) {
        completeurl =
          rooturl +
          webapp +
          '/portal.do?_portalid=' +
          portalid +
          '&_pageid=' +
          pageid;
      } else {
        completeurl = 'portal.do?_portalid=' + portalid + '&_pageid=' + pageid;
      }
      doPageHref(completeurl);
    } else {
      var fullPage = $(obj).attr('fullpage');
      if (fullPage != null && fullPage == 'true') {
        full_page_get(portalid, pageid, querystr);
      } else {
        page_get(pageid, querystr);
      }
    }
  }
}
/*private function referred by dropdown/radio/checkbox lovs function to select required rows from master data*/ function populate_LOVs(
  mstrObj,
  dependentVal,
  flag,
  index,
  container,
  lovType,
  name
) {
  var filteredMstrObj = {};
  for (var key in mstrObj) {
    var printFlag = false;
    if (dependentVal.length > 0) {
      /* checks if there is any dependency*/ var matchCount = 0;
      /*holds the dependency match count*/ for (var i in index) {
        /* handles array of array condition*/ if (
          typeof mstrObj[key][4][index[i]] != 'undefined'
        ) {
          if (mstrObj[key][4][index[i]] instanceof Array) {
            for (var arrIndex in mstrObj[key][4][index[i]]) {
              if (flag == TCS_CONSTANTS.BOTH) {
                if (dependentVal[i] == mstrObj[key][4][index[i]][arrIndex]) {
                  matchCount++;
                }
              } else if (
                flag == TCS_CONSTANTS.TRUE ||
                flag == TCS_CONSTANTS.FALSE
              ) {
                if (
                  dependentVal[i] == mstrObj[key][4][index[i]][arrIndex] &&
                  flag == mstrObj[key][2]
                ) {
                  matchCount++;
                }
              }
            }
          } else {
            if (flag == TCS_CONSTANTS.BOTH) {
              if (dependentVal[i] == mstrObj[key][4][index[i]]) {
                matchCount++;
              }
            } else if (
              flag == TCS_CONSTANTS.TRUE ||
              flag == TCS_CONSTANTS.FALSE
            ) {
              if (
                dependentVal[i] == mstrObj[key][4][index[i]] &&
                flag == mstrObj[key][2]
              ) {
                matchCount++;
              }
            }
          }
        }
      }
      if (dependentVal.length == matchCount) {
        printFlag = true;
      }
    } else {
      if (flag == TCS_CONSTANTS.BOTH) {
        printFlag = true;
      } else if (flag == TCS_CONSTANTS.TRUE || flag == TCS_CONSTANTS.FALSE) {
        if (flag == mstrObj[key][2]) {
          printFlag = true;
        }
      }
    }
    if (printFlag) {
      filteredMstrObj[key] = mstrObj[key];
    }
  }
  if (lovType == 'other') {
    return filteredMstrObj;
  }
  /*convert the results into 2D array of key and sort order*/ var filtered_array = convertToArray(
    filteredMstrObj
  );
  /*sort this array based on the cort order value in the master data object*/ filtered_array.sort(
    function (a, b) {
      return a[1] - b[1];
    }
  );
  /*iterate through the sorted array and generate htmls for the fields*/ for (
    var arrIndex = 0, arrLen = filtered_array.length;
    arrIndex < arrLen;
    arrIndex++
  ) {
    var key = filtered_array[arrIndex][0];
    switch (lovType) {
      case 'dropdown':
        dropdown_html(
          filteredMstrObj[key][0],
          key,
          filteredMstrObj[key][1],
          container
        );
        break;
      case 'checkbox':
        checkbox_html(
          filteredMstrObj[key][0],
          key,
          filteredMstrObj[key][1],
          container,
          name
        );
        break;
      case 'radio':
        radio_html(
          filteredMstrObj[key][0],
          key,
          filteredMstrObj[key][1],
          container,
          name
        );
        break;
      case 'textbox':
        textbox_html(
          filteredMstrObj[key][0],
          key,
          filteredMstrObj[key][1],
          container
        );
        break;
    }
  }
}
/*to be called by developers when the dropdown needs to show the first value as the default one instead of "--select--"*/ function dropdown_lovs_with_defaultVal(
  mstrObj,
  dependentVal,
  activeflag,
  index,
  selectid
) {
  $("select[id='" + selectid + "']").empty();
  /*does not work with autocomplete code*/ $("select[id='" + selectid + "']")
    .next()
    .find($('input.ui-autocomplete-input'))
    .val('');
  var container = document.getElementById(selectid);
  /*var opt = document.createElement('option'); opt.value = ""; opt.innerHTML = "--Select--"; //can come from constants container.appendChild(opt);*/ populate_LOVs(
    mstrObj,
    dependentVal,
    activeflag,
    index,
    container,
    'dropdown',
    null
  );
}
/* to be called by developers*/ function dropdown_lovs(
  mstrObj,
  dependentVal,
  activeflag,
  index,
  selectid
) {
  var container = document.getElementById(selectid);
  if (container == null || typeof container === 'undefined') {
    return;
  }
  $("select[id='" + selectid + "']").empty();
  /*does not work with autocomplete code*/ $("select[id='" + selectid + "']")
    .next()
    .find($('input.ui-autocomplete-input'))
    .val('');
  var opt = document.createElement('option');
  opt.value = '';
  opt.innerHTML = '--Select--';
  /*can come from constants*/ container.appendChild(opt);
  populate_LOVs(
    mstrObj,
    dependentVal,
    activeflag,
    index,
    container,
    'dropdown',
    null
  );
}
/*private function referred by populate_LOVs*/ function dropdown_html(
  code,
  value,
  description,
  targetSelect
) {
  var opt = document.createElement('option');
  opt.setAttribute('ccode', code);
  opt.value = value;
  opt.innerHTML = description;
  targetSelect.appendChild(opt);
}
/*to be called by developers*/ function checkbox_lovs(
  mstrObj,
  dependentVal,
  activeflag,
  index,
  divid,
  name
) {
  $('#' + divid).innerHTML = '';
  /*var selectEl = document.createElement('select'),*/ var container = document.getElementById(
    divid
  );
  populate_LOVs(
    mstrObj,
    dependentVal,
    activeflag,
    index,
    container,
    'checkbox',
    name
  );
}
/*private function referred by populate_LOVs*/ function checkbox_html(
  code,
  value,
  description,
  targetDiv,
  name
) {
  var label = document.createElement('label');
  var desc = document.createTextNode(description);
  var checkbox = document.createElement('input');
  checkbox.type = 'checkbox';
  checkbox.name = name;
  checkbox.value = value;
  checkbox.ccode = code;
  checkbox.id = name;
  targetDiv.appendChild(checkbox);
  label.appendChild(desc);
  targetDiv.appendChild(label);
}
/*to be called by developers*/ function radio_lovs(
  mstrObj,
  dependentVal,
  activeflag,
  index,
  divid,
  name
) {
  $('#' + divid).innerHTML = '';
  var container = document.getElementById(divid);
  populate_LOVs(
    mstrObj,
    dependentVal,
    activeflag,
    index,
    container,
    'radio',
    name
  );
}
/*private function referred by populate_LOVs*/ function radio_html(
  code,
  value,
  description,
  targetDiv,
  name
) {
  var label = document.createElement('label');
  var desc = document.createTextNode(description);
  var radioButton = document.createElement('input');
  radioButton.type = 'radio';
  radioButton.name = name;
  radioButton.value = value;
  radioButton.ccode = code;
  radioButton.id = name;
  targetDiv.appendChild(radioButton);
  label.appendChild(desc);
  targetDiv.appendChild(label);
}
/*to be called by developers*/ function textbox_lovs(
  mstrObj,
  dependentVal,
  activeflag,
  index,
  txtid
) {
  $("input[id='" + txtid + "']").empty();
  var container = document.getElementById(txtid);
  populate_LOVs(
    mstrObj,
    dependentVal,
    activeflag,
    index,
    container,
    'textbox',
    null
  );
}
/*private function referred by populate_LOVs*/ function textbox_html(
  code,
  value,
  description,
  targetTextBox
) {
  targetTextBox.setAttribute('value', value);
  targetTextBox.setAttribute('ccode', code);
}
function convertToArray(obj) {
  var objArray = [];
  var sortOrderCol = 3;
  for (var key in obj) {
    objArray.push([key, obj[key][sortOrderCol]]);
  }
  return objArray;
}
function getMstr_row(mstrObj, pk) {
  if (typeof mstrObj[pk] === 'undefined') {
    return null;
  } else {
    return mstrObj[pk];
  }
}
function getMstr_code(mstrObj, pk) {
  if (typeof mstrObj[pk] === 'undefined') {
    return null;
  } else {
    return mstrObj[pk][0];
  }
}
function getMstr_desc(mstrObj, pk) {
  if (typeof mstrObj[pk] === 'undefined') {
    return null;
  } else {
    return mstrObj[pk][1];
  }
}
function getMstr_activeFlag(mstrObj, pk) {
  if (typeof mstrObj[pk] === 'undefined') {
    return null;
  } else {
    return mstrObj[pk][2];
  }
}
function getMstr_depCols(mstrObj, pk) {
  if (typeof mstrObj[pk] === 'undefined') {
    return null;
  } else {
    return mstrObj[pk][4];
  }
}
function getMstr_addtnlCols(mstrObj, pk) {
  if (typeof mstrObj[pk] === 'undefined') {
    return null;
  } else {
    return mstrObj[pk][5];
  }
}
function getMstr_pk(mstrObj, code) {
  for (var pk in mstrObj) {
    if (mstrObj[pk][0] === code) {
      return pk;
    }
  }
  return null;
}
function getMstr_code_from_desc(mstrObj, desc) {
  for (var pk in mstrObj) {
    if (mstrObj[pk][1] === desc) {
      return pk;
    }
  }
  return null;
}
function getMstr_dependents(mstrObj, dependentVal, activeflag, index) {
  return populate_LOVs(
    mstrObj,
    dependentVal,
    activeflag,
    index,
    '',
    'other',
    ''
  );
}
/* The Main function to be called, Processes the JSON string ; Input jsonString and formId */ function populateFieldsFromJson(
  jsonString,
  formId,
  searchFunc
) {
  var elemProc = new Array();
  var json_data = JSON.parse(jsonString);
  for (itemkey in json_data) {
    var arrElementName = new Array();
    arrElementName[0] = itemkey;
    arrElementName[1] = itemkey;
    var srchFunc = null;
    if (searchFunc == null || typeof searchFunc == 'undefined') {
      srchFunc = searchElemInFormByName;
    } else {
      srchFunc = searchFunc;
    }
    if (typeof json_data[itemkey] == 'string') {
      var elementValue = json_data[itemkey];
      var foundElem = false;
      for (
        var elemIndex = 0;
        elemIndex < arrElementName.length && !foundElem;
        elemIndex++
      ) {
        var inpElemt = srchFunc(formId, arrElementName[elemIndex]);
        if (inpElemt != null && typeof inpElemt != 'undefined') {
          foundElem = populateFormField(
            inpElemt,
            elementValue,
            arrElementName[elemIndex],
            elemProc
          );
        }
      }
      foundElem = false;
    } else {
      processJsonItem(
        arrElementName,
        json_data[itemkey],
        formId,
        elemProc,
        srchFunc
      );
    }
  }
  elemProc = null;
}
function processJsonItem(
  elementNames,
  jsonObj,
  formId,
  elemProc,
  searchElemFunc
) {
  var multiValueFlag = false;
  for (var itemkey in jsonObj) {
    if (multiValueFlag) {
      return;
    }
    var arrElementName = new Array();
    var isArrayFlag = false;
    if (Object.prototype.toString.call(jsonObj) == '[object Array]') {
      /* If the JSON obeject is array*/ arrElementName[0] = elementNames[0];
      arrElementName[1] = elementNames[1] + '[' + itemkey + ']';
      isArrayFlag = true;
    } else {
      arrElementName[0] = elementNames[0] + '.' + itemkey;
      arrElementName[1] = elementNames[1] + '.' + itemkey;
    }
    if (typeof jsonObj[itemkey] == 'object') {
      processJsonItem(
        arrElementName,
        jsonObj[itemkey],
        formId,
        elemProc,
        searchElemFunc
      ); /* Recursively calls the function with next object*/
    } else {
      /* Search the input element and put the value*/ var elementValue = '';
      if (isArrayFlag) {
        multiValueFlag = true;
        /*Value is array Type*/ elementValue = jsonObj.join();
        arrElementName[1] =
          elementNames[1]; /*Dont add index for last name of the field*/
      } else {
        elementValue = jsonObj[itemkey];
      }
      var foundElem = false;
      for (
        var elemIndex = 0;
        elemIndex < arrElementName.length && !foundElem;
        elemIndex++
      ) {
        var inpElemt = searchElemFunc(formId, arrElementName[elemIndex]);
        if (inpElemt != null && typeof inpElemt != 'undefined') {
          foundElem = populateFormField(
            inpElemt,
            elementValue,
            arrElementName[elemIndex],
            elemProc
          );
        }
      }
      foundElem = false;
    }
  }
}
function populateFormField(inpElemt, elemvalue, elemName, elemProc) {
  var foundElem = false;
  elemIndex = 0;
  var processElem = null;
  var nodeNameElem = inpElemt.nodeName;
  /*if( (inpElemt.length == null || inpElemt.length == "undefined")  ){*/ if (
    nodeNameElem == 'SELECT' ||
    nodeNameElem == 'INPUT'
  ) {
    processElem = inpElemt;
  } else if (inpElemt.length != null && inpElemt.length != 'undefined') {
    if (elemProc[elemName] != null) {
      elemIndex = elemProc[elemName];
    }
    processElem = inpElemt[elemIndex];
  }
  if (processElem != null && typeof processElem != 'undefined') {
    if (processElem.type == 'text' || processElem.type == 'email') {
      processElem.value = elemvalue;
    } else if (processElem.type.indexOf('select') >= 0) {
      var tempArrVal = elemvalue.split(',');
      for (var ii = 0; ii < processElem.options.length; ii++) {
        for (var jj = 0; jj < tempArrVal.length; jj++) {
          if (processElem.options[ii].value == tempArrVal[jj]) {
            processElem.options[ii].selected = true;
            break;
          }
        }
      }
    } else if (processElem.type == 'checkbox') {
      /*Only One checkbox value, And it can not be multuvalue*/ if (
        inpElemt.length == null ||
        inpElemt.length == 'undefined'
      ) {
        processElem.checked = true;
      } else {
        var tempArrVal = elemvalue.split(',');
        for (var ii = 0; ii < inpElemt.length; ii++) {
          /*Checkbox are group with same name*/ for (
            var jj = 0;
            jj < tempArrVal.length;
            jj++
          ) {
            if (inpElemt[ii].value == tempArrVal[jj]) {
              inpElemt[ii].checked = true;
            }
          }
        }
      }
    } else if (inpElemt[elemIndex].type == 'radio') {
      if (inpElemt.length == null || inpElemt.length == 'undefined') {
        processElem.checked = true;
      } else {
        var tempArrVal = elemvalue.split(',');
        /* Radio button value will never be array type in real*/ for (
          var ii = 0;
          ii < inpElemt.length;
          ii++
        ) {
          /*Radio button are group with same name*/ for (
            var jj = 0;
            jj < tempArrVal.length;
            jj++
          ) {
            if (inpElemt[ii].value == tempArrVal[jj]) {
              inpElemt[ii].checked = true;
            }
          }
        }
      }
    }
    elemProc[elemName] = ++elemIndex;
    foundElem = true;
  }
  return foundElem;
}
function getLabelParamValue(pageparam) {
  var paramArr = pageparam.split('&');
  var nmInd = 0;
  var labelVal = null;
  for (nmInd = 0; nmInd < paramArr.length; nmInd++) {
    if (paramArr[nmInd].indexOf('=') >= 0) {
      var paramItemAr = paramArr[nmInd].split('=');
      if (labelVal != null) {
        break; /*found equals after name so break ;*/
      }
      if (paramItemAr[0] == 'name') {
        labelVal = paramItemAr[1];
      }
    } else if (labelVal != null) {
      labelVal += '&' + paramArr[nmInd];
    }
  }
  if (labelVal != null) {
    labelVal = labelVal.replace(/#!_/g, "'");
    labelVal = labelVal.replace(/_!@/g, '&');
  }
  return labelVal;
}
/* * Requires to be loaded in <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script> * @address : Complete address * callbackFn : function which will take array has parameter. (array['lat'] , array['lng']) */ function getLatitudeLongitude(
  address,
  callbackFn
) {
  var geocoder = new google.maps.Geocoder();
  geocoder.geocode({ address: address }, function (results, status) {
    if (status == google.maps.GeocoderStatus.OK) {
      if (results != null && results.length > 0) {
        var latitude = results[0].geometry.location.lat();
        var longitude = results[0].geometry.location.lng();
        var cordArr = new Array();
        cordArr['lat'] = latitude;
        cordArr['lng'] = longitude;
        callbackFn(cordArr);
      }
    }
  });
}
function dropdown_append_lovs(
  mstrObj,
  dependentVal,
  activeflag,
  index,
  selectid
) {
  /*//$("select[id='"+selectid+"']").empty(); //does not work with autocomplete code //$("select[id='"+selectid+"']").next().find($("input.ui-autocomplete-input")).val(""); */ var container = document.getElementById(
  selectid
);
  var opt = document.createElement('option');
  opt.value = '';
  opt.innerHTML = '--Select--';
  /*can come from constants*/ container.appendChild(opt);
  populate_LOVs(
    mstrObj,
    dependentVal,
    activeflag,
    index,
    container,
    'dropdown',
    null
  );
}
function extractStatusVOMessages(statusVOErrorJSON, portletmsgDiv) {
  /*parse the statusVOErrorJSON. Create array of error msgs*/ var error = [];
  var success = [];
  var proceedFlag = true;
  if (!isEmptyObject(statusVOErrorJSON)) {
    var jsonErrorObj = $.parseJSON(statusVOErrorJSON);
    if (!isEmptyObject(jsonErrorObj)) {
      if (!isEmptyObject(jsonErrorObj.errors)) {
        $.each(jsonErrorObj.errors, function (errorcode, errorCodeObj) {
          $.each(errorCodeObj, function (errorKey, errorValue) {
            if (errorKey == 'err') {
              error.push(errorValue);
            }
          });
        });
      }
      if (!isEmptyObject(jsonErrorObj.result)) {
        var resultVal = jsonErrorObj.result;
        var msgList = [];
        $.each(jsonErrorObj.msgs, function (index, msgObj) {
          $.each(msgObj, function (msgKey, msgVal) {
            if (msgKey == 'msg') {
              msgList.push(msgVal);
            }
          });
        });
        if (resultVal != null && $.trim(resultVal) == 'success') {
          success = msgList;
        } else {
          error = msgList;
        }
      }
    }
  }
  if (
    (error != null && error.length > 0) ||
    (success != null && success.length > 0)
  ) {
    displayMessages(error, success, portletmsgDiv);
    if (error != null && error.length > 0) {
      proceedFlag = false;
    }
  }
  return proceedFlag;
}
function clearMessageDisplay(portletmsgDiv) {
  $('#' + portletmsgDiv + '> #error-msg').remove();
  $('#' + portletmsgDiv + '> #success-msg').remove();
}
function displayMessages(listErrorMsgs, successMsg, portletmsgDiv) {
  clearMessageDisplay(portletmsgDiv);
  /*create div with class=error-msg for each error in the portletmsgDiv*/ if (
    listErrorMsgs != null
  ) {
    for (var i = 0; i < listErrorMsgs.length; i++) {
      $('#' + portletmsgDiv).append(
        '<div id="error-msg"><span class="error-msg-content" id="error-msg-content"></span></div>'
      );
      $('#' + portletmsgDiv + '> #error-msg')
        .last()
        .addClass('error-msg');
      $('#' + portletmsgDiv + ' > #error-msg > #error-msg-content')
        .last()
        .html(listErrorMsgs[i]);
    }
  }
  /*create div with class=success-msg in the portletmsgDiv*/ if (
    successMsg != null
  ) {
    var successMsgList = [];
    if (typeof successMsg == 'string') {
      successMsgList = [successMsg];
    } else {
      successMsgList = successMsg;
    }
    for (var i = 0; i < successMsgList.length; i++) {
      $('#' + portletmsgDiv).append(
        '<div id="success-msg"><span class="success-msg-content" id="success-msg-content"></span></div>'
      );
      $('#' + portletmsgDiv + '> #success-msg').addClass('success-msg');
      $('#' + portletmsgDiv + '> #success-msg > #success-msg-content').html(
        successMsgList[i]
      );
    }
  }
}

/*if (!Array.prototype.indexOf)
{
  Array.prototype.indexOf = function(elt , from)
  {
    var len = this.length >>> 0;

    var from = Number(arguments[1]) || 0;
    from = (from < 0)
         ? Math.ceil(from)
         : Math.floor(from);
    if (from < 0)
      from += len;

    for (; from < len; from++)
    {
      if (from in this &&
          this[from] === elt)
        return from;
    }
    return -1;
  };
}*/
if (!String.prototype.trim) {
  String.prototype.trim = function () { return this.replace(/^\s+|\s+$/g, ''); };
}
if (!String.prototype.lpad) {
  String.prototype.lpad = function (inputStr, padString, length) {
    var str = inputStr;
    while (str.length < length)
      str = padString + str;
    return str;
  };
}
QNIAPP.CONSTS = {
  AC: "Academia",
  AS: "Aspiration",
  CA: "Career",
  SB: 'Save',
  SNB: 'Save-n-Gain',
  ECS_SI: 'SI/ECS',
  MA: 'M',
  MAL: 'Male',
  FE: 'F',
  FEM: 'Female',
  M: 'Monthly',
  A: 'Annual',
  Q: 'Quarterly',
  H: 'Half Yearly',
  S: 'Single',
  LIM: 'Limited',
  REG: 'Regular',
  HR: 'High',
  LR: 'Low',
  EL: 'Extra Life',
  ED: 'Extra Disability',
  EH: 'Extra Health',
  L: 'Life',
  EP: 'Extra Protection',
  EHL: '',
  C: 'Classic',
  CP: 'Classic Plus',
  CW: 'Classic Waiver',
  CEL: 'Classic Extra Life',
  EDW: 'Endowment',
  EDWLIFE: 'Endowment with Whole Life',
  SJ75: 'Sampoorna Jeevan 75',
  SJ100: 'Sampoorna Jeevan 100',
  LBO: 'Lump sum Option',
  RIBO: 'Income Option',
  L1RI: 'Lump Sum with Income Option',
  RI1L: 'Income with Lump sum Option',
  SRB: 'Simple Reversionary Bonus (SRB) for Term',
  SRIB: 'Simple Reversionary Income Bonus (SRIB)',
  CB: 'Cash Bonus',
  SRBDPPTCBT: 'Simple Reversionary Bonus during Premium Payment Term and Cash Bonus thereafter',
  SRIBCB: 'Simple Reversionary Income Bonus (SRIB) and Cash Bonus (CB)',
  MB: 'Main Benefit',
  PENPARBENEFIT: 'Personal Pension Plus',
  LIFE1: 'Life 1',
  FF: 'Family Floater',
  SL: 'Single Life',
  I: 'Income Option',
  IP: 'Income Plus Option',
  LI: 'Level Income',
  II: 'Increasing Income',
  IND1: 'Individual 1 year',
  IND2: 'Individual 2 years',
  FLOAT1: 'Floater 1 year',
  FLOAT2: 'Floater 2 years',
  INDV: 'Individual',
  FLOAT: 'Floater',
  FAM: 'Family',
  OPTSEC: 'Optima Secure',
  OPTSUPSEC: 'Optima Super Secure',
  SP: 'Spouse',
  SU: 'spouse',
  SELF: 'Self',
  DGTR: 'Daughter',
  DTR: 'daughter',
  SON: 'Son',
  SN: 'Son',
  MOM: 'Mother',
  MM: 'mother',
  POP: 'Father',
  PP: 'father',
  HU: 'Husband',
  HB: 'husband',
  WI: 'Wife',
  WF: 'wife',
  MIL: 'Mother-in-law',
  FIL: 'Father-in-law',
  MILW: 'mother_in_law',
  FILW: 'father_in_law',
  GF: 'Grandfather',
  GM: 'Grandmother',
  PA: 'Primary Annuitant',
  JA: 'Joint Annuitant',
  LIFE2: 'Life 2',
  SI: 'Silver',
  G: 'Gold',
  PLT: 'Platinum',
  DHCB: 'Daily Hospital Cash Benefit',
  SBO: 'Surgical Benefit',
  CIBO: 'Critical Illness Benefit',
  DAILYHOSP: 'DHCB',
  SURGBEN: 'SB',
  CRITILL: 'CI',
  ONLINECH: 'Online',
  DIRECTCH: 'Direct',
  EXIDEDIRECTCH: 'Exide Direct',
  PROTECTCH: 'HDFC Life Protection Vertical',
  DSCCH: 'DSC',
  DEFENCECH: 'Defence',
  PNBCH: 'PNB Housing',
  HI: 'Health Insurance',
  WORKSITECH: 'Worksite(direct)',
  EMPLOYEESCH: 'Employees',
  LOYALTYCH: 'loyalty (direct)',
  DIRSALESCH: 'Direct Sales Force (Direct)',
  GROUPSALESCH: 'Group Sales',
  AGENCYCH: 'Agency',
  EXIDEAGENCYCH: 'Exide Agency',
  IDFCBANKCH: 'IDFC Bank',
  BAJAJFINANCECH: 'Bajaj Finance Ltd',
  BRSALESCH: 'Branch Sales Channel(direct)',
  LWCCCH: 'TSCRM',
  SPECSALE: 'Speciality Sales',
  HDFCSALESCH: 'HDFC Sales',
  VAKRANGEECH: 'Vakrangee',
  QRN: 'Q',
  APPNO: 'A',
  LTS: 'LTS-Portal',
  CRMLTS: 'LTS-CRM',
  POS: 'POS',
  OPS: 'OPS',
  CLB: 'Classic',
  PRB: 'Premier',
  ELB: 'Elite',
  PREM: 'Instalment Premium without GST',
  PREMWITHTAX: 'Instalment Premium with First Year GST',
  PREMWITH2YRTAX: 'Instalment Premium with GST 2nd Year Onwards',
  IAAD: 'Life Annuity',
  IABD: 'Life Annuity with Return of Purchase Price',
  IAGC: 'Life Annuity with Return of Purchase Price on diagnosis of Critical Illness',
  IAFD: 'Lifetime Annuity with return of purchase price in parts',
  IACD: 'Lifetime Annuity with Return of Balance of Purchase Price',
  IAED: 'Lifetime Annuity increasing at a simple rate of 5% p.a',
  IALD: 'Life Annuity',
  IAMD: 'Life Annuity with Return of Purchase Price',
  IARC: 'Life Annuity with Return of Purchase Price on diagnosis of Critical Illness',
  IAQD: 'Lifetime Annuity with return of purchase price in parts',
  IAND: 'Lifetime Annuity with Return of Balance of Purchase Price',
  IAPD: 'Lifetime Annuity increasing at a simple rate of 5% p.a.',
  IADD: 'Lifetime Annuity Guaranteed for 5 or 10 or 15 or 20 years ',
  IAOD: 'Lifetime Annuity Guaranteed for 5 or 10 or 15 or 20 years ',
  IAHD: 'Joint Life 100% to secondary with ROPP',
  IASD: 'Joint Life 100% to secondary with ROPP',
  IAID: 'Joint Life, Last Survivor with 50% annuity to the secondary annuitant',
  IATD: 'Joint Life, Last Survivor with 50% annuity to the secondary annuitant',
  IAJD: 'Joint Life, Last Survivor with 100% annuity to the secondary annuitant',
  IAUD: 'Joint Life, Last Survivor with 100% annuity to the secondary annuitant',
  IAKD: 'Joint Life, Last Survivor with 50% annuity to secondary annuitant and return of purchase price',
  IAVD: 'Joint Life, Last Survivor with 50% annuity to secondary annuitant and return of purchase price',
  CUST_EXIST: 'Are you an existing customer?',
  RRE: 'Room Rent Enhancement',
  RB: 'Restore Benefit',
  INAD: 'Income Benefit on Accidental Disability Rider',
  INADRIDER: 'HDFC Life Income Benefit on Accidental Disability Rider',
  C4CI: 'HDFC Life Critical Illness Plus Rider',
  ECI4: 'HDFC Life Critical Illness(4 Illnesses Covered)',
  ECI25: 'HDFC Life Critical Illness(25 Illnesses Covered)',
  ETR: 'HDFC Life Term Rider',
  ADDDB: 'HDFC Life Accidental Death Disability , Dismemberment Benefit',
  PPR: 'HDFC Life Protect Plus Rider',
  PAC: 'Personal Accident Cover',
  ADC: 'Accidental Death Cover',
  CC: 'Cancer Cover',
  PPR_PAC: 'Personal Accident Cover',
  PPR_ADC: 'Accidental Death Cover',
  PPR_CC: 'Cancer Cover',
  RIDER_INCOME_BENEFIT: 'HDFC Life Income Benefit on Accidental Disability Rider',
  RIDER_CRITICAL_ILLNESS: 'HDFC Life Critical Illness Plus Rider',
  RIDER_PERSONAL_ACCIDENT_COVER: 'Personal Accident Cover',
  RIDER_ACCIDENTAL_DEATH_COVER: 'Accidental Death Cover',
  RIDER_CANCER_COVER: 'Cancer Cover',
  RIDER_CRITICAL_ILLNESS_4: 'HDFC Life Critical Illness(4 Illnesses Covered)',
  RIDER_CRITICAL_ILLNESS_25: 'HDFC Life Critical Illness(25 Illnesses Covered)',
  RIDER_TERM: 'HDFC Life Term Rider',
  RIDER_ACCIDENTAL_DEATH_DISABILITY: 'HDFC Life Accidental Death Disability , Dismemberment Benefit',
  TDL: '3D Life',
  ELI: 'Extra Life Income',
  IR: 'Income Replacement',
  ROP: 'Return of Premium',
  LLP: 'Life Long Protection',
  TDLP: '3D Life Long Protection',
  HOSPB: 'Hospitalization Benefit',
  INDB: 'Indexation Benefit',
  ICB: 'Income Benefit',
  WL: 'Whole-Life',
  LUM: 'Lumpsum',
  LUMMI: 'Lumpsum-MI',
  LUMMOB: 'Lumpsum-MOB',
  LUMMIMOB: 'Lumpsum-MIMOB',
  //PGNP
  PGNP: 'PGNP',
  PGPL: 'Immediate Life Annuity',
  PGPR: 'Immediate Life Annuity ROPP',
  PGPD: 'Deferred Life Annuity  ROPP',
  //SRP
  SRP: 'SRP',
  SRPL: 'Life Annuity',
  SRPR: 'Life Annuity with Return of Premiums',
  SARLPROP: 'Life Annuity with Return of Purchase Price',
  PGPT: 'Temporary Annuity',
  PGPROPS: 'Immediate Life Annuity with Return of Purchase Price',
  PGPDOPS: 'Deferred Life Annuity with Return of Purchase Price',
  SM: 'Simple',
  CPD: 'Compound',
  SMPP: 'SMPP',
  SMPPL: 'Life Annuity',
  SMPPRTP: 'Life Annuity with Return of % of Total Premiums Paid',
  SMPPER: 'Life Annuity with Early Return',
  SMPPIA: 'Increasing Annuity',
  ROPP50_75: '50% Return of Premiums Paid at Age 75',
  ROPP100_75: '100% Return of Premiums Paid at Age 75',
  ROPP50_80: '50% Return of Premiums Paid at Age 80',
  ROPP100_80: '100% Return of Premiums Paid at Age 80',
  ROPP100_76_95: '100% Return of Premiums Paid between Ages 76 to 95',
  PASI: 'Simple Increase',
  PACI: 'Compound Increase',
  //C2P3DP Default values
  DEFLPSM: 10000,//default lumpsum
  DEFANIN: 10000,//default annual income
  DEFADBPERCENT: 100,
  DEFIRINCPER: 10,//default income percentage for income replacement option
  DEFIRMI: 1000000,
  //IUNO Default values
  UNO: 'IUNO',
  NWC: "NEWCUS (New customer)",
  ALC: "ALRCUS (Already a customer)",

  // UL8CIP benefits
  IPO: 'Invest Plus Option',
  PWO: 'Premium Waiver Option',
  GYBO: 'Golden Years Benefit Option',
  CIP: 'UL8CIP',

  // SANPAR
  SANPAR: 'SANPAR',
  SANPARII: 'Immediate Income',
  SANPARDI: 'Deferred Income',
  /*//Help text for product categories
  Investment:'Unit linked and Single Premium whole of life products',
  Protection:'Term insurance products',
  Savings:'Traditional, Endowment Money-back or unit linked products',
  Pension:'Pension and Annuity products',
  Children:'Products that are issued for the benefit of children',
  JointLife:'Products covering more than one life',
  Health:'Products that covers the risk of illness',*/

  //err msg related to age and date
  ERRFINYR: 'Please provide the Inception date within the financial year',
  ERRFUTDT: 'Date cannot be future Dated',
  ERRINVDT: 'Date provided is Invalid',
  ERRFMTDT: 'Please provide valid D.O.B in DD/MM/YYYY format',
  ERRSARR: 'Sum assured cannot be less than 5Lakhs for Room Rent Enhancement benefit',
  ERRAGEMIN: 'Minimum age for this plan is 30 days ',
  ERRAGE30DAYSMIN: 'Valid Age Range for the product is from 30 days to ',
  ERRAGE90DAYSMIN: 'Valid Age Range for the product is from 90 days to ',
  ERRMATAGE: 'Maturity age range for the product is ',
  ERRMATRIDAGE: 'Maximum Maturity age for the product with ',
  ERRRIDSA: 'Enter Sum Assured for rider ',
  ERRPLANOPT: 'Please select plan option',
  ERRRIDSAVAL: 'Sum Assured for rider and Main benefit should be equal',
  ERRAGE: 'Valid Age Range for the product is from ',
  ERRAGEPROPSER: 'Maximum age for proposer is 65',
  ERRAGEFMT: 'Please provide age in numeric format ',
  ERRDOBAGE: 'Please provide D.O.B ',
  ERRPAYOUTOPT: 'Currently, you have not selected any Payout option. Please select one or more Payout option to see results.',
  ERRSAGE: 'Age of spouse should be within ',
  ERRSMATAGE: 'Maturity age of spouse should be within ',
  ERRSDETAILS: 'Please Submit Spouse Details',
  ERRFFAGE: 'Please provide at least one life who is a not a minor',
  ERRMULTSP: 'You are not allowed to add the two spouses in the same policy',
  ERRDEP: 'Minimum 2 lives should be present in Family Floater Plan',
  ERRDEPSA: 'Minimum 2 lives should be present For 10 Lacs or 7 Lacs SumAssured',
  ERRDEPNO: 'Maximum 9 lives are allowed excluding Self',
  ERRSIDEP: 'Only one life assured can be added for Single Life Plan.',
  ERRSADULT: 'Maximum 2 lives are allowed for Floater and 4 lives are allowed for Individual including Self ',
  ERRSINDADULT: 'Maximum 4 Adults are allowed for Individual plan ',
  ERRSFLTADULT: 'Maximum 2 Adults are allowed for Floater plan ',
  ERRSOPTSECINDADULT: 'Maximum 6 Adults are allowed for Individual plan ',
  ERRSOPTSECFLTADULT: 'Maximum 4 Adults are allowed for Floater plan ',
  ERRSOPTSECINDFKID: 'Maximum 6 Kids are allowed',
  ERRSOPTSECINDMAXLA: 'Maximum 12 Life Assureds are allowed for Individual',
  ERRSOPTSECFMAXADULT: 'Maximum 10 Life Assureds are allowed for Floater',
  ERRSKID: 'Maximum 5 Kids are allowed',
  ERRSMAXLA: 'Maximum 6 Life Assureds are allowed including Adults and Kids',
  ERRSCOMBMAXLA: 'Maximum 5 Life Assureds are allowed including Adults and Kids',
  ERRSADULF: 'Maximum 2 lives are allowed for Floater and 4 lives are allowed for Individual including Self ',
  ERRSIDEP: 'Only one life assured can be added for Single Life Plan.',
  ERRFFDOB: 'Please provide D.O.B for the dependants added',
  ERRSMAXADULT: 'Maximum 2 Adults are allowed for both Individual and Floater plans ',
  ERRSCORKID: 'Maximum 3 Kids are allowed',
  ERRSCORINDKID: 'Maximum 4 Kids are allowed',
  ERRPRP: 'Proposer cannot be minor',
  ERRRELNCNT: 'You are not allowed to add 2 ',
  ERRAGEFF: 'Minimum age for this plan is',
  ERRLIDOB: 'Please provide D.O.B for the Life Insured added',
  ERRLA: 'Please select a Life Insure',
  ERRAGE_JL: 'Valid Joint Life Age Range for the product is from ',//29072014 added
  ERRSAPREMDEP: 'Sum Assured and Premium Amount  are Dependent Mandatory ',
  ERRVRL: 'Please enter valid age for dependants',
  ERRPRL: 'Please select valid Life Insured Relationship With Proposer',
  ERRVRLCIP: 'Please enter valid age for Life Assured',
  ERRPIL: 'Parents or Parents-In-Laws cannot be minor',
  ERRSPAGE: 'Spouse cannot be minor',
  ERRDEPNAME: 'Please enter dependent name',
  ERRBKDTDIFF: 'Differance between quote creation date and back date should be of minimum 30 days',
  //err msg on Sum assured
  ERRSAFMT: 'Please provide Sum assured in numeric format',
  ERRMANMINSAVAL: 'Please provide Sum assured between ',
  ERRMAXSA: 'Provided Sum assured amount is greater than the maximum allowed ',
  ERRMAXSA_OPS: 'The maximum eligible Sum Insured for you is',
  ERRMAXSA_OPS_HLTH: 'Provided sum insured amount is greater than the maximum allowed ',
  ERRSAFMT_OPS_HLTH: 'Please provide sum insured in numeric format',
  ERRMINSA_OPS_HLTH: 'Provided sum insured amount is less than the minimum allowed ',
  ERRMINSA: 'Provided Sum assured amount is less than the minimum allowed ',
  ERRCALCSAMAX: 'Calculated Sum assured amount is greater than the maximum allowed ',
  ERRCALCSAMIN: 'Calculated Sum assured amount is less than the minimum allowed ',
  ERRSAVAL: 'Sum assured amount should be either ',
  ERRSA: 'Allowed Sum assured for premium ',
  ERRSAZERO: 'Sum assured amount should be zero',
  ERRINPUT1: 'Sorry, there are no suggestions for the given inputs.',
  ERRINPUT2: 'Please verify your inputs and try again.',
  ERRMAXBSA: 'Please change Sum Assured(SA)',
  //err msg on premium
  ERRPFMT: 'Please provide Premium in numeric format',
  ERRMANMINPREM: 'Minimum Premium is ',
  ERRMINPR: 'Please provide premium amount more than minimum premium ',
  ERRCALCPR: 'Calculated premium is less than minimum premium ',
  ERRCALCPRPPT5: 'Calculated annnual premium is less than the minimum annual premium ',
  ERRMAXPR: 'Entered premium is greater than maximum premium required ',
  ERRCALCMAXPR: 'Calculated premium is greater than maximum premium required ',
  ERRCALCSARNG: 'Calculated SumAssured for the entered Premium is beyond the allowed range of SumAssured',
  ERRCALCPR1: 'Calculated premium',
  ERRCALCPR2: 'for the entered SumAssured is less than minimum premium ',
  ERRCOMB: 'Choosen combination of lumpsum/annual income/sumassued and ADB percentage is not valid',
  ERRMINLMI: 'Enter higher Lumpsum or Monthly Income',
  ERRMINMI: 'Enter higher Monthly Income',
  ERRMINELMI: 'Enter higher Lumpsum or Monthly Income or Extra Life Benefit Percentage',
  ERRMAXELMI: 'Enter lower Lumpsum or Monthly Income or Extra Life Benefit Percentage',
  ERRPARCHECK: 'The combination of your chosen premium, sum assured, premium paying term, policy term and age has resulted in a projected maturity value is lower than the total premiums paid by you. This means that you are likely to have a contract that delivers high protection but lower savings. We recommend that you review your input selections - in particular, increase the premium paying term or reduce the sum assured',

  //err msg related to annuity
  ERRPPAA: 'Please provide either Annuity amount or Purchase price',
  ERRMINAA: 'Annuity amount provided is less than the min annuity amount',
  ERRCALCAA: 'Calculated Annuity amount for the purchase price provided is less than the minimum',
  ERRPP: 'Please enter Purchase Price greater than ',
  ERRAP: 'For the selected payout frequency, the minimum annuity payout is',

  //other err msg
  ERRPYOT: 'Payout Term not available for the Product',
  ERRPREMSA: 'Please provide either sum assured amount or premium amount',
  ERRPREMSABOTH: 'Please provide sum assured and premium amount',
  ERRPREMSAVALID: 'Enter valid Sum assured amount or Premium amount',
  ERRBLNK: 'Please provide ',
  ERRINV: 'Invalid format for ',
  ERRMAND: 'Mandatory field :: ',
  ERRMINOR: 'Sum assured amount should be less than 500000 for age below 11yrs',
  ERRPOLEXP: 'Policy Expiry date for the product is ',
  ERRFFRELN: 'Relationship with proposer is mandatory',
  ERRDISRIDERTERM: 'Term should be less than 25 years for Extra Disability rider',
  ERRRIDERSA: 'Maximum Sum Assured available for the selected Option/Rider is ',
  ERRELRIDERSA: 'The available cover amount is Rs. 3 Crore and below',
  ERRDSCHK: 'Disclaimer check is mandatory.',
  ERRMDLPNT: 'Above combination is not available. Please change the Policy Term',
  ERRTERM: 'Valid term for the product is from',
  ERRPTPPTCOMBI: 'The selected Premium Payment Term & Policy Term combination is not allowed.',
  //err msg for fund and top up
  ERRFNDOPT: 'Sum of all selected funds should be 100',
  ERRFNDOPTNEG: 'Fund options cannot have negative values',
  ERRFUND: 'Allocation to atleast one Fund is mandatory',
  ERRTPUPFMT: 'Please provide Top Up amounts in numeric format',
  ERRTOPUP: 'Please provide Top Up amounts between ',
  ERRMINTOPUP: 'Minimum Top Up Amount is ',
  ERRTOPUPLIMIT: 'Top up allowed only for ',
  ERREXTOPUP: 'Sum of Top Ups cannot be greater than Premium amount',
  ERRTOPUPNA: 'Top-Up is not available for the selected term',

  //err msg for incorrect parameters
  ERRF: 'Frequency is not available for the Product',
  ERRT: 'Term is not available for the Product',
  ERRPPT: 'PPT is not available for the Product',
  ERRPPTA: 'PPT is not available for the age choosen',
  ERRPAY: 'Payment method is not available for the frequency chosen',
  ERRAO: 'Annuity option is not available for the Product',
  ERRRID: 'Rider Not Available for Product',
  ERRPLAN: 'Plan is not available for the Product',
  ERRRELN: 'Relationship is not available for the Product',
  ERRNRI: 'Product unavailable to NRI',
  ERRPRODAGEINVALID: 'Please Enter valid age',
  ERRPRODAGERNG: 'Selected product is unavailable for the given age. Please Click on the "Products-Age Limit" Link for the list of applicable products for the given age.',
  ERRNOPRODFORAGE: 'No Product is available for this Age ',
  ERRLEAD: 'Lead ID is Mandatory',
  ERRPPTINVALID: 'Invalid Premium Paying Term',
  ERRPPTINVALIDTERM: 'Combination of Term and PPT entered is not valid',
  ERROPT: 'Please choose a valid option',
  ERRTERMNIVESH: 'Term is greater than maximum allowed value ',
  ERRSUBOPT: 'Please choose a valid sub option',
  ERRPERCENT: 'percentage out of range,should be from range 1 to 100',

  //err message for health
  ERRPORTIN: 'Port-in cases cannot be processed in TEBT. Please proceed through the existing Offline system.',
  ERRPORTMAND: 'Port-in is mandatory',
  ERRCDACNRI: 'This Product is available only for India and United Arab Emirates',

  //err msg for IRR
  ERRIRR: 'The combination of your chosen premium, sum assured, premium paying term, policy term and age has resulted in a projected fund value at maturity that is less than the sum of the premiums expected over the life time of the contract.	' +
    'This means that you are likely to have a contract that delivers high protection but low savings. HDFC Life does not illustrate such contracts.' +
    'Please review your input selections - in particular, increase the premium paying term or reduce the sum assured.',
  ERRIRRS: 'The combination of your chosen premium, sum assured, premium paying term, policy term and age has resulted in a projected fund value at maturity that is only a small amount higher than the single premium. ' +
    'This means that you are likely to have a contract that delivers high protection but lower savings. ' +
    'We recommend that you review your input selections - in particular, increase the premium paying term or reduce the sum assured.',
  IRRFOUND: 'Found IRR',
  ERRMSGOPS: 'Please fill all the fields and accept the privacy policy stated as under.',
  ERRMSGUPSELL: 'Smart Option is not available for the inputs provided',
  //err msg for PGNP
  ERRJLTEMPOPT: 'Temporary Annuity not applicable for joint life',
  ERRSAITEMPOPT: 'Temporary Annuity not applicable for this Source of Annuity Investment',
  ERRINCVALMIN: 'Increase value(or)Percentage should be greater than zero',
  ERRINCVALCOM: 'Increase Percentage should be below 100 for compound',
  ERRINCVALFOR: 'Please provide Increase Value(or)Percentage value in correct format',
  ERRANNAMT: 'Please provide Annuity Amount in correct format',
  ERRDEFPER: 'Invalid Deferment Period',
  //err msg for sysTransPlan(iuno)
  ERRTRNSAMT: 'Allowed Transfer Amount for premium ',
  ERRTRNSAMTFMT: 'Please provide Transfer Amount in numeric format',
  ERRSRCFND: 'Selected Fund is not available for Source fund',
  ERRTRGTFND: 'Selected Fund is not available for Target fund',
  ERRCNSVTFND: 'Selected source fund not available for choosen combination of funds',
  //SUCCESS MSG
  QTSUCCESS: 'Quote is Saved Successfully',
  //msg
  MSG8PCNT: '<sup>#</sup>Calculated at 8% Assumed Rate',
  // quote invalid
  QTINVALIDAGE: 'is no longer valid as the age of life assured(s) has changed since its generation. Kindly generate a new one.',
  //STATUS
  NEW: "New",
  FINZ: "Finalized",
  ARCV: "Archived",
  //default
  DEFAULTAGE: '32',
  DEFAULTSRPAGE: '45',
  MINADULTAGE: 18,
  DEFMAXPREM: 50000000,
  DEFMAXPROSA: 50000000,
  DEFMAXL: 1000000000,
  DEFMAXMI: 50000000,
  DEFGPPAGE: '47',//term reduced from 10 to 8,so GPP DEFGPPAGE is 47.
  DEFPENAGE: '45',
  DEFMULT: 10000,
  DEFSANCHMULT: 1052940000,
  //Sanchp old version date
  SANCHP_OLD_VDATE: "09/06/2023",
  EGII_OLD_VDATE: "09/06/2023",
  EGWP_OLD_VDATE: "06/07/2023",
  SUPH_OLD_VDATE: "09/06/2023",
  P1C2PS_OLD_VDATE_F: "13/07/2023",
  // To display msg if any question is unanswered in medical section CANC OPS
  ANSALL: "Please answer all the questions to continue",
  ERRDMAND: "Mandatory field",
  ERRC2ITERM: "years policy term is not allowed under Limited investment term",
  HouseholdDepDt: "05/16/2018",
  AGENT_CODE: "00399206",
  IDFCDepDt: "05/20/2016",
  SOURCE_CODE: "Online",
  DEFAULT_AGENT_CODE: "",
  DEFAULT_SOURCE_CODE: "",
  IANP_Age_min: "30",
  IANP_Age_max: "54",
  IANP_Age_MIN: "55",
  IANP_Age_MAX: "85",
  PROTS: "Protect Plus with Sanchay(A Combination Solution of HDFC Life Click 2 Protect Plus and HDFC Life Sanchay)",
  C2PRN: "Click2Protect with Returns(A combination solution of HDFC Life Click 2 Protect 3D Plus and HDFC Life Sanchay)",
  SANMAX: "Sanchay Maximiser (A combination solution of HDFC Life Sanchay Par Advantage and HDFC Life Sanchay Plus)",
  C2INSFMP: "HDFC Life C2I-N-Sanchay Fixed Maturity Plan",
  HDFCSALEPAYCODE: "51446471",
  //HDFC Life Click 2 Protect Life start
  LICIR: "Life & CI Rebalance",
  INPR: "Insta Protect",
  LIPR: "Life Protect",
  INPL: "Income Plus",
  FT: "Fixed Term",
  WHLI: "Whole Life",
  C2PL: "P1C2PL",
  //HDFC Life Click 2 Protect Life end
  //HDFC Life Click 2 Protect Super start
  LIF: "Life",
  LIFP: "Life Plus",
  LIFG: "Life Goal",
  LIFD: "Life Disability",
  LEVEL: "Level Cover",
  AMRTZ: "Amortization",
  SILI: "Single Life",
  SPLI: "Spouse Life"
  //HDFC Life Click 2 Protect Super end
};
QNIAPP.PROP_MAP = {
  'incpDt': 'Inception Date',
  'gender': 'Gender',
  'freq': 'Frequency',
  'term': 'Term',
  'ppt': 'PPT',
  'paymethod': 'Payment Method',
  'premium': 'Premium',
  'sumAssured': 'SumAssured',
  'option': 'Option',
  'benefit': 'Benefit',
  'plan': 'Plan',
  'name': 'Spouse Name',
  'dob': 'Spouse DOB',
  'age': 'Spouse Age',
  'fname': 'Spouse First Name',
  'lname': 'Spouse Last Name',
  'jldob': 'Joint Life DOB',
  'jlgender': 'Joint Life Gender',
  'jlage': 'Joint Life Age',
  'suboption': 'Sub Option',
  'isAlrCustomer': 'Type of Customer',
  'jlflag': 'Joint Life Flag',
  'pptOption': 'Premium Payment Term Option',
  'deathBenefitMultiple': 'Death Benefit Multiple'
};

QNIAPP.COMM_PARMS = function () {
  function COMM_PARMS() { };

  COMM_PARMS.getfundChoices = function () {
    var LOCAL_FUNDOPT = ['Income Fund', 'Balanced Fund', 'Blue Chip Fund', 'Opportunities Fund'];
    return LOCAL_FUNDOPT;
  };

  COMM_PARMS.getPayMthd = function (isECS) {
    //var LOCAL_PAYMTHD = ['SI/ECS','Cash','Cheque','Draft','Online Payment','Credit Card','Debit Card','Other'];
    var LOCAL_PAYMTHD_ECS = ['SI/ECS'];
    return LOCAL_PAYMTHD_ECS;
  };

  COMM_PARMS.getFreq = function (isNRI) {
    var LOCAL_FREQ = ['Annual', 'Half Yearly', 'Quarterly', 'Monthly'];
    var FISDOM_SAATHI_AGENTCD = ['01054541', '01064247', '01096975'];
    if (QNIAPP.IN.Qt.qtdtls.touchpoint == QNIAPP.CONSTS.OPS && (QNIAPP.IN.id == 'SANCHV9')) {
      LOCAL_FREQ = ['Annual', 'Half Yearly', 'Quarterly', 'Monthly', 'Single'];
      $('#ciridershortjourney').hide();
    }
    if (QNIAPP.IN.Qt.qtdtls.touchpoint == QNIAPP.CONSTS.OPS && (QNIAPP.IN.id == 'SIPPARE' || QNIAPP.IN.id == 'SIPPARV9' || QNIAPP.IN.id == 'SIPPARV9E')) {
      LOCAL_FREQ = ['Annual', 'Half Yearly', 'Quarterly', 'Monthly', 'Single'];
    }
    var LOCAL_FREQ_NRI = ['Annual'];
    /*if(QNIAPP.IN.Qt.qtdtls.nfpFlag==='Y'){
      LOCAL_FREQ=['Monthly'];
    }*/
    //Redmine 17732 starts
    if ((FISDOM_SAATHI_AGENTCD.indexOf(QNIAPP.IN.Qt.qtdtls.agentcode) > -1) && QNIAPP.IN.Qt.qtdtls.agentcode != null && QNIAPP.IN.Qt.qtdtls.agentcode != "" && QNIAPP.IN.Qt.qtdtls.agentcode != undefined &&
      QNIAPP.IN.Qt.qtdtls.touchpoint == QNIAPP.CONSTS.OPS && (QNIAPP.IN.id.indexOf('YSUD') != -1 || QNIAPP.IN.id.indexOf('SIPPAR') != -1 || QNIAPP.IN.id.indexOf('EALPTP') != -1 || QNIAPP.IN.id.indexOf('SAPLUS') != -1)) {
      LOCAL_FREQ = ['Annual'];
    }
    //Redmine 17732 ends
    return ((isNRI === '1') ? LOCAL_FREQ_NRI : LOCAL_FREQ);
  };

  COMM_PARMS.getIGCTaxRt = function (type, prop) {
    var LOCAL_IGC = {
      'tx': {
        'jk': 0.180,
        'njk': 0.180,
        'nri': 0.180
      }
    };
    return LOCAL_IGC[type] && LOCAL_IGC[type][prop] ? LOCAL_IGC[type][prop] : 0;
  };

  //getting the maximum and minimum sumAssured range of products having topUp.
  COMM_PARMS.getSaRange = function (samax_val, topupSum) {
    var premium = removeCommas(QNIAPP.IN.Qt.qtdtls.premium);
    var freq = QNIAPP.IN.Qt.qtdtls.freq;
    var age = QNIAPP.IN.Qt.qtdtls.age;
    var minsa = 0;
    var maxsa = 0;
    var saObj = {};
    var freq_map = (freq !== "Single") ? 'Other' : freq;

    var LOCAL_TOPUP_FACTOR = {
      'Single': {
        'limit1': { 'rt_top_min': 1.25, 'rt_top_max': 1.25, 'rt_prem_min': 1.25, 'mnage': 0, 'mxage': 44 },
        'limit2': { 'rt_top_min': 1.1, 'rt_top_max': 1.1, 'rt_prem_min': 1.1, 'mnage': 45, 'mxage': Number.MAX_VALUE }
      },
      'Other': {
        'limit1': { 'rt_top_min': 1.25, 'rt_top_max': 1.25, 'rt_prem_min': 10, 'mnage': 0, 'mxage': 44 },
        'limit2': { 'rt_top_min': 1.1, 'rt_top_max': 1.1, 'rt_prem_min': 7, 'mnage': 45, 'mxage': Number.MAX_VALUE }
      }
    };
    for (var key in LOCAL_TOPUP_FACTOR[freq_map]) {
      if (LOCAL_TOPUP_FACTOR[freq_map][key]['mnage'] <= age && LOCAL_TOPUP_FACTOR[freq_map][key]['mxage'] >= age) {
        minsa = Math.round((topupSum * LOCAL_TOPUP_FACTOR[freq_map][key]['rt_top_min']) + (premium * LOCAL_TOPUP_FACTOR[freq_map][key]['rt_prem_min']));
        maxsa = Math.round(LOCAL_TOPUP_FACTOR[freq_map][key]['rt_top_max'] * topupSum);
      }
    }
    maxsa = maxsa + samax_val;
    saObj['minsa'] = minsa;
    saObj['maxsa'] = maxsa;
    return saObj;
  };

  COMM_PARMS.getFreqMultiplier = function () {
    var freq_mult = { 'Monthly': 12, 'Half Yearly': 2, 'Quarterly': 4, 'Annual': 1, 'Single': 1 };
    return freq_mult;
  };

  COMM_PARMS.getVersion8UIN = function (product) {
    var v8uin = {
      'SANCHP': '101N134V02',
      'SANCHPE': '101N134V02',
      'UL8NIVR': '101L103V01',
      'UL8NIVL': '101L103V01',
      'UL8NIVS': '101L103V01',
      'UL8NIVER': '101L103V01',
      'UL8NIVEL': '101L103V01',
      'UL8NIVES': '101L103V01',
      'UL8LPT2': '101L064V02',
      'UL8LPT2E': '101L064V02',
      'INAD': '101B013V02',
      'C4CI': '101B014V01',
      'C2P3DPR': '101N115V04',
      'C2P3DPL': '101N115V04',
      'C2P3DPS': '101N115V04',
      'C2P3DPER': '101N115V04',
      'C2P3DPEL': '101N115V04',
      'C2P3DPES': '101N115V04',
      'UL8CIP': '101L133V01',
      'UL8CIPP': '101L133V01',
      'UL8CIPG': '101L133V01',
      'UL8APP': '101L109V04',
      'UL8APPE': '101L109V04',
      'UL8YS1': '101L068V02',
      'UL8YSE1': '101L068V02',
      'UL8EA1': '101L072V04',
      'UL8EA2': '101L081V04',
      'UL8EA': '101L066V03',
      'UL8C2I': '101L100V02',
      'UL8WP1': '101L082V02',
      'UL8WP2': '101L082V02',
      'UL8WP3': '101L082V02',
      'UL8CG': '101L112V01',
      'UL8CGE': '101L112V01',
      'YSAC': '101N099V03',
      'YSACE': '101N099V03',
      'YSAS': '101N099V03',
      'YSASE': '101N099V03',
      'YSCA': '101N099V03',
      'YSCAE': '101N099V03',
    };
    return v8uin[product];
  };

  COMM_PARMS.getFreqFactor = function () {
    var freq_fact = { 'Monthly': 1, 'Half Yearly': 6, 'Quarterly': 3, 'Annual': 12 };
    return freq_fact;
  };

  COMM_PARMS.getGrossIncomeDescSTP = function (gross_income) {
    var LOCAL_GROSS_INCOME = {

      '1': 'Less than 50000',
      '2': '50000-100000',
      '3': '100000-300000',
      '4': '300000-500000',
      '5': '500000-750000',
      '6': '750000-1000000',
      '7': '1000000-1500000',
      '8': '1500000-2500000',
      '9': '1500000-2500000',
      '10': '2500000-5000000',
      '11': '5000000-10000000',
      '12': 'More than 10000000'
    };

    var arr = [];
    for (key in LOCAL_GROSS_INCOME) {
      arr.push(key);
    }

    QNIAPP.IN.bankincRecordSlab = arr;

    return LOCAL_GROSS_INCOME[gross_income];
  };

  COMM_PARMS.getAnnualIncomeHouseHold = function (frequency, age, incomerange) {
    var LOCAL_ANNUALINCOME_HOUSEHOLD = {
      '1': {
        '<60': 0.1,
        '>=60': 0.1
      },
      '2': {
        '<60': 0.25,
        '>=60': 0.20
      },
      '3': {
        '<60': 0.30,
        '>=60': 0.25
      },
      '4': {
        '<60': 0.35,
        '>=60': 0.25
      },
      '5': {
        '<60': 0.40,
        '>=60': 0.25
      },
      '6': {
        '<60': 0.5,
        '>=60': 0.25
      },
    };
    var age = (parseInt(QNIAPP.IN.Qt.qtdtls.age) < 60) ? '<60' : '>=60';
    return LOCAL_ANNUALINCOME_HOUSEHOLD[incomerange][age];
  };

  COMM_PARMS.GrossIncomeValSTP = function (gross_income) {

    var LOCAL_GROSS_INCOME = {

      '1': {
        'min': 0,
        'max': 500000
      },
      '2': {
        'min': 500001,
        'max': 1000000
      },
      '3': {
        'min': 1000001,
        'max': 1500000
      },
      '4': {
        'min': 1500001,
        'max': 2000000
      },
      '5': {
        'min': 2000001,
        'max': 3000000
      },
      '6': {
        'min': 3000001,

      }


    };

    for (var key in LOCAL_GROSS_INCOME) {
      if (LOCAL_GROSS_INCOME[key]['min'] <= parseInt(gross_income)) {
        if (LOCAL_GROSS_INCOME[key]['max']) {
          if (LOCAL_GROSS_INCOME[key]['max'] >= parseInt(gross_income)) {
            return key;
          }
        } else {
          return key;
        }
      }
    }


  };


  COMM_PARMS.getTxRt = function (type, prop) {
    var LOCAL_RIDER_STRT = {
      'st_rt': {
        'C4CI': 0.180,
        'INAD': 0.180,
        'Extra Life': 0.180,
        'Extra Life Income': 0.180

      },
      'ec_rt': {
        'C4CI': 0,
        'INAD': 0,
        'Extra Life': 0,
        'Extra Life Income': 0
      },
      'gst_rt': {
        'C4CI': 0.180,
        'INAD': 0.180,
        'Extra Life': 0.180,
        'Extra Life Income': 0.180
      },
      'ktax': {
        'C4CI': 0.01,
        'INAD': 0.01,
        'Extra Life': 0.01,
        'Extra Life Income': 0.01
      }
    };
    return LOCAL_RIDER_STRT[type] && LOCAL_RIDER_STRT[type][prop] ? LOCAL_RIDER_STRT[type][prop] : 0;
  };

  COMM_PARMS.isProductDiscontinued = function (product) {
    var LCL_DISCONTINUED_ARR = ['UL7NPR1', 'LIFEPAR', 'UL7NPS3'];
    if (jQuery.inArray(product, LCL_DISCONTINUED_ARR) != -1) {
      return true;
    }
    return false;
  };

  COMM_PARMS.filterOfflineFund = function (riskprofile) {

    var fund_arr = {
      'INV_RISK_CON': {
        'UL8C2I': ['Income Fund', 'Bond Fund', 'Conservative Fund'],
        'UL7EA1': ['Income Fund'],
        'UL7EA2': ['Income Fund'],
        'UL7LPT2': ['Income Fund'],
        'UL7EA': ['Income Fund'],
        'IUNO': ['Income Fund', 'Bond Fund', 'Conservative Fund']

      },
      'INV_RISK_MOD': {
        'UL8C2I': ['Income Fund', 'Bond Fund', 'Conservative Fund', 'Balanced Fund'],
        'UL7EA1': ['Income Fund', 'Balanced Fund'],
        'UL7EA2': ['Income Fund', 'Balanced Fund'],
        'UL7LPT2': ['Income Fund', 'Balanced Fund'],
        'UL7EA': ['Income Fund', 'Balanced Fund'],
        'IUNO': ['Income Fund', 'Bond Fund', 'Conservative Fund', 'Balanced Fund'],

      }

    };

    return (fund_arr[riskprofile] && fund_arr[riskprofile][QNIAPP.IN.id]) ? fund_arr[riskprofile][QNIAPP.IN.id] : eval('QNIAPP.' + QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'fund_opt') + '.getfundChoices()');

  };


  COMM_PARMS.isTransgenderApplicable = function (id) {
    var LOCAL_TRANSGENDER_PRODUCT = ['HUDAYV9', 'HUDAYV9E', 'UL7LPT2', 'UL7LPT2E', 'SARJB', 'SARJBE', 'UL8NIV', 'UL8NIVE', 'SANPAR', 'SANPARE', 'P1C2PL', 'P1C2PLE', 'SANCHP', 'SANCHPE'];
    if (jQuery.inArray(id, LOCAL_TRANSGENDER_PRODUCT) != -1) {
      return true;
    }
    return false;
  };

  COMM_PARMS.getMymixcombo = function () {
    var LOCAL_MYMIX_COMBO = ['SANCHAY and C2W', 'C2P3DP and SANCHAY'];
    return LOCAL_MYMIX_COMBO;
  };

  COMM_PARMS.getMymixIndex = function (comb) {
    var LOCAL_BASE_COMBI_MAPPING = {

      'SANCHAY and C2W': 'comb1',
      'C2P3DP and SANCHAY': 'comb2'

    };
    return LOCAL_BASE_COMBI_MAPPING[comb] ? LOCAL_BASE_COMBI_MAPPING[comb] : comb;

  };
  COMM_PARMS.getINADDefaultSAProds = function () {
    var LOCAL_INAD_DEFAULT_PRODS = ['C2P3DP', 'C2PP', 'SANPAR', 'SANPARE', 'SANCHP', 'SANCHPE', 'SANCHV9', 'EALPTPV9', 'SAPLUSEV9', 'SIPPARV9', 'UL7EA2', 'UL7EA1', 'UL7EA', 'P1C2PL', 'P1C2PLE'];
    return LOCAL_INAD_DEFAULT_PRODS;

  };
  COMM_PARMS.getPPRADCDefaultSAProds = function () {
    var LOCAL_PPR_ADC_DEFAULT_PRODS = ['C2P3DP', 'C2PP', 'SANPAR', 'SANPARE', 'SANCHP', 'SANCHPE', 'P1C2PL', 'P1C2PLE'];
    return LOCAL_PPR_ADC_DEFAULT_PRODS;

  };
  COMM_PARMS.getPPRCCDefaultSAProds = function () {
    var LOCAL_PPR_CC_DEFAULT_PRODS = ['C2P3DP', 'C2PP', 'P1C2PL', 'P1C2PLE'];
    return LOCAL_PPR_CC_DEFAULT_PRODS;

  };
  COMM_PARMS.getBaseProdCd = function (product) {
    var LOCAL_BASE_COMBI_MAPPING = {
      'C2PCK': 'C2P3DP',
      'C2POS': 'P1C2PL',
      'C2PCS': 'P1C2PL'
    };
    return LOCAL_BASE_COMBI_MAPPING[product] ? LOCAL_BASE_COMBI_MAPPING[product] : product;

  };


  COMM_PARMS.getCombiProdCd = function (product) {
    var LOCAL_COMBI_BASE_MAPPING = {
      'C2P3DP': 'C2PCK',
      'P1C2PL': 'C2POS',
      'P1C2PL': 'C2PCS'
    };
    return LOCAL_COMBI_BASE_MAPPING[product] ? LOCAL_COMBI_BASE_MAPPING[product] : product;

  };

  COMM_PARMS.CORONAK_QUES_MAP = {
    'CORONAK_QUES1': 'Do you have COVID or COVID-like symptoms? ',
    'CORONAK_QUES2': 'Have you ever been tested for Covid-19?',
    'CORONAK_QUES3': 'Do you have any pre existing disease?',
    'CORONAK_QUES4': 'Do you smoke any cigarettes/Biddi/Tobacco products?',
    'CORONAK_QUES5': 'Are you Medical Health worker?',
    'CORONAK_QUES6': 'Please provide height weight below to calculate BMI(16-31)?',
    'CORONAK_QUES7': 'Are you currently undergoing any medication /treatment?',
    'CORONAK_QUES8': 'Are you scheduled for any surgery?',
    'CORONAK_QUES9': 'Have you been advised any investigation or further tests?'
  };
  COMM_PARMS.CORONASH_QUES_MAP = {
    'CORONASH_QUES2': 'Have you ever been tested for Covid-19? If yes, please mention the date of last test taken',
    'CORONASH_QUES3': 'Have you ever suffered from / are  currently suffering from any medical condition/ or disability/ deformity?',
    'CORONASH_QUES4': 'Do you or any of the person to be insured Smoke Cigarettes/Biddi/tobacco products?'
  };
  COMM_PARMS.YESBANK_MYMIX_MAP = {
    '3X': 'SANMAX',
    'SANMAXFIS': 'SANMAX'

  };
  COMM_PARMS.YESBANK_MYMIX_COMBI_MAP = {
    'SANMAX': 'SANMAXFIS'

  };
  COMM_PARMS.OWNMIX_DISCLAIMERS = {
    'UL7YS1': ' is a Unit Linked Non-Participating Life Insurance Plan',
    'UL7LPT2': ' is a Unit Linked Non-Participating Life Insurance Plan',
    'GPP': ' is a Non-Linked Non-Participating Pension Plan',
    'SAPLUSE': ' is a Non-Linked, Participating, Life Insurance Plan',
    'SANCHP': ' is a Non-Participating, Non-Linked Savings Insurance Plan',
    'UL7EA1': ' is a Unit Linked Non-Participating Life Insurance Plan',
    'UL8C2I': ' is a Unit Linked Non-Participating Life Insurance Plan',
    'UL7EA': ' is a Unit Linked Non-Participating Life Insurance Plan',
    'SANPAR': ' is a Non-Linked Participating Life Insurance Plan',
    'P1C2PL': ' is a Non Linked, Non-Participating, Individual, Pure Risk Premium/Savings Life Insurance Plan.',
    'SIPPARV9': ' is a Non-Linked Participating Money Back Life Insurance Plan',
    'UL8CG': ' is a Unit Linked Non-Participating Life Insurance Plan',
    'SARJB': ' is a Non-Linked, Non-Participating, Individual, Pure Risk Premium Life Insurance Plan',
    'UL7ESP3': ' is a Unit Linked Non-Participating Life Insurance Plan',
    'CDAC': ' is a Non-Linked Non Participating Health Insurance Plan',
    'SUPH': ' is a Non-Linked, Non-Participating, Individual, Savings, Life Insurance Plan'
  };
  COMM_PARMS.AVAILABLE_PRODUCTS_OWNMIX = function () {
    if (QNIAPP.IN.chnlptnr == "HDFC Securities") {
      var AVAILABLE_PRODUCTS_OWNMIX_PRODS = ['UL7YS1', 'UL7YSE1', 'UL7LPT2', 'UL7LPT2E', 'GPP', 'GPPE', 'SAPLUSE', 'SAPLUSEV9', 'SAPLUSEV9E', 'SANCHP', 'SANCHPE', 'UL7EA1', 'UL7EA', 'UL7EAE', 'SANPAR', 'SANPARE', 'P1C2PL', 'P1C2PLE', 'SIPPAR', 'SIPPARV9', 'SIPPARE', 'SIPPARV9E', 'UL8CG', 'UL8CGE', 'SARJB', 'SARJBE', 'UL7ESP3', 'UL7ESP3E', 'CDAC', 'CDACE', 'SUPH', 'SUPHE', 'UL8NIV', 'SMPPL', 'SMPPR', 'SMPPE', 'SMPPI'];
      return AVAILABLE_PRODUCTS_OWNMIX_PRODS;
    }
    else {
      var AVAILABLE_PRODUCTS_OWNMIX_PRODS = ['UL7YS1', 'UL7YSE1', 'UL7LPT2', 'UL7LPT2E', 'GPP', 'GPPE', 'SAPLUSE', 'SAPLUSEV9', 'SAPLUSEV9E', 'SANCHP', 'SANCHPE', 'UL7EA1', 'UL8C2I', 'UL7EA', 'UL7EAE', 'SANPAR', 'SANPARE', 'P1C2PL', 'P1C2PLE', 'SIPPAR', 'SIPPARV9', 'SIPPARE', 'SIPPARV9E', 'UL8CG', 'UL8CGE', 'SARJB', 'SARJBE', 'UL7ESP3', 'UL7ESP3E', 'CDAC', 'CDACE', 'SUPH', 'SUPHE', 'SMPPL', 'SMPPR', 'SMPPE', 'SMPPI'];
      return AVAILABLE_PRODUCTS_OWNMIX_PRODS;
    }

  };
  COMM_PARMS.getIsnpMinPremLimit = function (ctg, freq) {
    var LOCAL_ISNP_MIN_PREM_LIMIT = {
      'Savings': {
        'Annual': {
          "p_min": 300000
        },
        'Monthly': {
          "p_min": 25000
        },
        'Half Yearly': {
          "p_min": 150000
        },
        'Quarterly': {
          "p_min": 75000
        }
      }
    };
    if (QNIAPP.IN.id == "IANP" || QNIAPP.IN.id == "PGNP") {
      return 3000000;
    } else {
      return (LOCAL_ISNP_MIN_PREM_LIMIT[ctg] && LOCAL_ISNP_MIN_PREM_LIMIT[ctg][freq] && LOCAL_ISNP_MIN_PREM_LIMIT[ctg][freq]["p_min"]) ? LOCAL_ISNP_MIN_PREM_LIMIT[ctg][freq]["p_min"] : 0;
    }
  };
  return COMM_PARMS;
}();
if (QNIAPP.IN.isservice === "N") {
  getScript("static-mod/qni/js/common/qni_common_calc.js", remoteURL, "");//TBD::pass remoteURL
}
// All calculations common across most products
QNIAPP.COMM_CALC = function () {
  function COMM_CALC() { };
  COMM_CALC.sortArray = function (a, b) {
    return (parseInt(a) - parseInt(b)) + "";
  };

  //get all the keys in a json
  COMM_CALC.getKeys = function (json_obj) {
    var keys_arr = [];
    for (key in json_obj)
      keys_arr.push(key);
    return keys_arr;
  };
  //IDFC Product Restriction Validation
  COMM_CALC.idfcValidation = function () {
    age = QNIAPP.IN.Qt.qtdtls.age;
    if (QNIAPP.IN.id == "UL7LPT2") {
      QNIAPP.IN.Qt.qtdtls.sumAssured = $("#" + QNIAPP.IN.id + "_sumAssuredid").val();
    }
    if (QNIAPP.IN.chnlptnr == "IDFC Bank" && (QNIAPP.IN.id == "SIPPARV9" || QNIAPP.IN.id == "SAPLUSEV9" || QNIAPP.IN.id == "HUDAYV9") && age > 50) {
      QNIAPP['ERR'].push("Given age is not valid for idfc, please provide age less than or equal to 50 years.");
      displayPortletMessages("Given age is not valid for idfc, please provide age less than or equal to 50 years.", 'qni-quoteinput-messages');
    }
    else if (QNIAPP.IN.chnlptnr == "IDFC Bank" && QNIAPP.IN.id == "UL8C2I" && age > 55) {
      QNIAPP['ERR'].push("Given age is not valid for idfc, please provide age less than or equal to 55 years.");
      displayPortletMessages("Given age is not valid for idfc, please provide age less than or equal to 55 years.", 'qni-quoteinput-messages');
    }
    else if (QNIAPP.IN.chnlptnr == "IDFC Bank" && (QNIAPP.IN.id == "UL7EA2" || QNIAPP.IN.id == "UL7EA1" || QNIAPP.IN.id == "UL7EA" || QNIAPP.IN.id == "UL7LPT2") && age >= 45) {
      if (QNIAPP.IN.Qt.qtdtls.sumAssured < (10 * QNIAPP.IN.Qt.qtdtls.premium)) {
        QNIAPP['ERR'].push("Given age is not valid for idfc, please provide age less than 45 years.");
        displayPortletMessages("Given age is not valid for idfc, please provide age less than 45 years.", 'qni-quoteinput-messages');
      }
    }
    if (QNIAPP.ERR.length > 0) {
      return false;
    }
    return true;


  };

  COMM_CALC.YesBankValidation = function () {

    if (QNIAPP.IN.yesBankClient != 'Yes') {
      return true;
    }
    if (QNIAPP.IN.Qt.qtdtls.term != '' && QNIAPP.IN.Qt.qtdtls.term < 5) {
      QNIAPP['ERR'].push("For Policy Term less than 5 years, Life Insurance products are not recommended.");
      displayPortletMessages("For Policy Term less than 5 years, Life Insurance products are not recommended.", 'qni-quoteinput-messages');
    }
    if (QNIAPP.ERR.length > 0) {
      return false;
    }
    return true;
  };



  //Policy holder capture changes
  COMM_CALC.checkProposer = function () {
    if (((["PGNP", "GPP", "GPPE", "PENPAR", "IANP", "UL8APP", "UL8APPE", "UL8C2R", "UL7NPR1", "UL7NPR2", "UL7NPS3", "UL7NPS4", "UL7YS1", "UL7YSE1", "SRP", "SPP", "SMPP", "SMPPR", "SMPPL", "SMPPE", "SMPPI", "ESPP", "ESPPE"].indexOf(QNIAPP.IN.id) > -1) || ((QNIAPP.IN.id == "IUNO" || QNIAPP.IN.id == "SUPH" || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE") && QNIAPP.IN.Qt.qtdtls.jlflag == "Y")) && QNIAPP.IN.Qt.qtdtls.proposerBuyingForItself == 'No') {
      QNIAPP['ERR'].push("LifeAssured different from Proposer, is not allowed for the selected product");
      displayPortletMessages("LifeAssured different from Proposer, is not allowed for the selected product", 'qni-quoteinput-messages');
    }
    if (QNIAPP.ERR.length > 0) {
      return false;
    }
    return true;


  };
  COMM_CALC.setBenefitStringForMagnum = function () {
    var rider_json = { "Extra Life": "ADB", "Extra Health": "CI", "Extra Disability": "TPD", "Extra Protection": "EP", "Income Benefit on Accidental Disability Rider": "TPD", "HDFC Life Critical Illness Plus Rider": "CI", "Extra Life Income": "ADB", "PERSONAL ACCIDENT COVER": "PAC", "ACCIDENTAL DEATH COVER": "ADC", "CANCER COVER": "CC", "HDFC Life Critical Illness(4 Illnesses Covered)": "ECI4", "HDFC Life Critical Illness(25 Illnesses Covered)": "ECI25", "HDFC Life Term Rider": "ETR", "HDFC Life Accidental Death Disability , Dismemberment Benefit": "ADDDB" };
    var ben_string = QNIAPP.CONSTS.L;
    // adding benefit in the MagnumBenefit key commented
    /*if(QNIAPP.IN.Qt.qtdtls.benefit){
      var benefit = QNIAPP.IN.Qt.qtdtls.benefit;
      benefit = (benefit.indexOf("Benefit") >= 0)?benefit.replace("Benefit",""):benefit;
      benefit = (benefit.indexOf(" ") >= 0)?benefit.replace(" ",""):benefit;
      ben_string = ben_string + "," +benefit;
    }*/
    if (QNIAPP.IN.id == "HRN" || QNIAPP.IN.id == "CANC" || QNIAPP.IN.id == "EAHT" || QNIAPP.IN.id == "CDAC") {
      ben_string = "MEDEX";
    }
    else if (QNIAPP.IN.Qt.qtdtls.options && QNIAPP.IN.id !== "CANC" && QNIAPP.IN.id !== "EAHT" && QNIAPP.IN.id !== "CDAC") {
      ben_string = ben_string + "," + QNIAPP.IN.Qt.qtdtls.options;
    }
    if (QNIAPP.IN.id == 'UL8NIV') {
      ben_string = QNIAPP.CONSTS.L;
      if (QNIAPP.IN.Qt.qtdtls.suboption && QNIAPP.IN.Qt.qtdtls.suboption === QNIAPP.CONSTS.EL) {
        ben_string = ben_string + "," + rider_json[QNIAPP.CONSTS.EL];
      }
    }
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.id !== "HRN" && QNIAPP.IN.id !== "UL9SPP") {
      var len = QNIAPP.IN.Qt.qtdtls.rider.length;
      for (var i = 0; i < len; i++) {
        var rider_elem = QNIAPP.IN.Qt.qtdtls.rider[i];
        if (rider_elem.name == 'PPR_PAC')
          rider_name = 'PERSONAL ACCIDENT COVER';
        if (rider_elem.name == 'PPR_ADC')
          rider_name = 'ACCIDENTAL DEATH COVER';
        if (rider_elem.name == 'PPR_CC')
          rider_name = 'CANCER COVER';
        if (rider_elem.name == 'ECI4')
          rider_name = 'HDFC Life Critical Illness(4 Illnesses Covered)';
        if (rider_elem.name == 'ECI25')
          rider_name = 'HDFC Life Critical Illness(25 Illnesses Covered)';
        if (rider_elem.name == 'ETR')
          rider_name = 'HDFC Life Term Rider';
        if (rider_elem.name == 'ADDDB')
          rider_name = 'HDFC Life Accidental Death Disability , Dismemberment Benefit';
        if (rider_elem.name == 'PPR_PAC' || rider_elem.name == 'PPR_ADC' || rider_elem.name == 'PPR_CC' || rider_elem.name == 'ECI4' || rider_elem.name == 'ECI25' || rider_elem.name == 'ETR' || rider_elem.name == 'ADDDB')
          ben_string = ben_string + "," + rider_json[rider_name];
        if (!(rider_elem.name == 'PPR_PAC' || rider_elem.name == 'PPR_ADC' || rider_elem.name == 'PPR_CC' || rider_elem.name == 'ECI4' || rider_elem.name == 'ECI25' || rider_elem.name == 'ETR' || rider_elem.name == 'ADDDB'))
          ben_string = ben_string + "," + rider_json[QNIAPP.CONSTS[rider_elem.name] ? QNIAPP.CONSTS[rider_elem.name] : rider_elem.name];

      }
    }

    QNIAPP.IN.Qt.qtdtls['MagnumBenefit'] = ben_string;
  };

  //search an arrayto find the band in which the given search_val lies
  COMM_CALC.getMaxFromKey = function (arr, search_val) {
    arr = arr.sort(QNIAPP.COMM_CALC.sortArray);
    var prev_val = "";
    var arr_len_val = (arr !== undefined && arr !== null) ? arr.length : 0;
    for (var index = 0; index < arr_len_val; index++) {
      if (parseInt(search_val) >= parseInt(arr[index]))
        prev_val = arr[index];
      else {
        if (index === 0)
          return false;
        else
          return prev_val;
      }
    }
    return prev_val;
  };
  //addition for remove commas format 09052014 starts
  COMM_CALC.removeFormat = function () {
    if (QNIAPP.IN.Qt.qtdtls.premium) {
      QNIAPP.IN.Qt.qtdtls.premium = removeCommas(QNIAPP.IN.Qt.qtdtls.premium);
    }
    if (QNIAPP.IN.Qt.qtdtls.sumAssured) {
      QNIAPP.IN.Qt.qtdtls.sumAssured = removeCommas(QNIAPP.IN.Qt.qtdtls.sumAssured);
    }

  };
  //get premium allocation tax
  COMM_CALC.calcPremAllocTax = function (prod_obj, alloc_val, jk_flag, nri_flag) {
    var tx_fac = (nri_flag === '1') ? prod_obj.getTax('tx', 'nri') : prod_obj.getTax('tx', (jk_flag === '1') ? 'jk' : 'njk');
    if (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0") {
      tx_fac = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ktax');
    }
    return (alloc_val * (tx_fac));
  };

  //get policy admin tax
  COMM_CALC.calcPolicyAdmTax = function (prod_obj, fee_val, jk_flag, nri_flag) {
    var tx_fac = (nri_flag === '1') ? prod_obj.getTax('tx', 'nri') : prod_obj.getTax('tx', (jk_flag === '1') ? 'jk' : 'njk');
    if (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0") {
      tx_fac = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ktax');
    }
    return (fee_val * (tx_fac));
  };
  // get fmc tax
  COMM_CALC.calcFMCTax = function (prod_obj, fmc_val, jk_flag, nri_flag) {
    var tx_fac = (nri_flag === '1') ? prod_obj.getTax('tx', 'nri') : prod_obj.getTax('tx', (jk_flag === '1') ? 'jk' : 'njk');
    if (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0") {
      tx_fac = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ktax');
    }
    return (fmc_val * tx_fac);
  };
  // get igc tax
  COMM_CALC.calcIGCTax = function (igc_val, jk_flag, nri_flag) {
    var tx_fac = (nri_flag === '1') ? QNIAPP.COMM_PARMS.getIGCTaxRt('tx', 'nri') : QNIAPP.COMM_PARMS.getIGCTaxRt('tx', (jk_flag === '1') ? 'jk' : 'njk');
    if (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0") {
      tx_fac = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ktax');
    }
    return (igc_val * tx_fac);
  };
  // check against the cap value and get the min
  COMM_CALC.getMinCap = function (tot_prem, fee_rt, max_cap1, max_cap2) {
    return ((max_cap2 === 0) ? (Math.min(tot_prem * fee_rt, max_cap1)) : (Math.min(tot_prem * fee_rt, max_cap1 * tot_prem, max_cap2)));
  };

  //get Risk charges tax
  COMM_CALC.calcRRTax = function (prod_obj, mort_val, jk_flag, nri_flag) {
    var tx_fac = (nri_flag === '1') ? prod_obj.getTax('tx', 'nri') : prod_obj.getTax('tx', (jk_flag === '1') ? 'jk' : 'njk');
    if (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0") {
      tx_fac = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ktax');
    }
    return (mort_val * (tx_fac));
  };

  //get DC tax
  COMM_CALC.calcDCTax = function (prod_obj, ann_prem, fund_val, pyr, jk_flag, nri_flag) {
    var dc_rt = prod_obj.get(ann_prem, pyr, 'rt');
    var dc_tx = (nri_flag === '1') ? (prod_obj.getTax('tx', 'nri')) : (prod_obj.getTax('tx', (jk_flag === '1') ? 'jk' : 'njk'));
    if (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0") {
      dc_tx = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ktax');
    }
    var dc_cap = prod_obj.get(ann_prem, pyr, 'cap');
    return ((Math.min(dc_cap, (Math.min(ann_prem, fund_val) * dc_rt))) * (1 + dc_tx));
  };

  //get commission rate
  COMM_CALC.getCommRate = function (comm_json, band, yr, term, amt, prop) {
    var ret_val = 0;
    if (comm_json[band]) {
      yr = COMM_CALC.getMaxFromKey(COMM_CALC.getKeys(comm_json[band]), yr);
      if (comm_json[band][yr]) {
        term = COMM_CALC.getMaxFromKey(COMM_CALC.getKeys(comm_json[band][yr]), term);
        if (comm_json[band][yr][term]) {
          amt = COMM_CALC.getMaxFromKey(COMM_CALC.getKeys(comm_json[band][yr][term]), amt);
          ret_val = comm_json[band][yr][term][amt][prop] ? comm_json[band][yr][term][amt][prop] : 0;
        }
      }
    }

    return ret_val;
  };

  //get Commission
  COMM_CALC.calcComm = function (comm_json, band, yr, term, prem, top_up) {
    var tp_comm_rt = 0;
    var ret_val = 0;
    var pr_comm_rt = QNIAPP.COMM_CALC.getCommRate(comm_json, band, yr, term, prem, 'rpc');
    ret_val = (parseFloat(prem) * QNIAPP.COMM_CALC.roundNum((pr_comm_rt * ((QNIAPP.IN.Qt.qtdtls.freq === 'Monthly' && yr === 0) ? ((QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'mon_comm_rt')) ? (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'mon_comm_rt')) : 1) : 1)) / 100, 4));
    if (top_up && top_up !== 0) {
      tp_comm_rt = QNIAPP.COMM_CALC.getCommRate(comm_json, band, yr, term, top_up, 'sptc');
      ret_val += (parseFloat(top_up) * tp_comm_rt) / 100;
    }
    return ret_val;
  };

  //get IGC value
  COMM_CALC.calcIGC = function (fund_gwth_val) {
    var igc_rt = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'igc_rt');
    return fund_gwth_val * (1 - Math.pow(Math.pow((1 - (igc_rt / 365)), 365), (1 / 12)));
  };
  //get Fund after growth
  COMM_CALC.calcFundAftGrowth = function (fund_val, rate) {
    return fund_val * Math.pow((1 + rate), (1 / 12));
  };
  //get fmc val
  COMM_CALC.calcFMC = function (json_obj, fund_gwth_val) {
    var fmc_rt = json_obj.get('rt');
    return fund_gwth_val * (1 - Math.pow(Math.pow((1 - (fmc_rt / 365)), 365), (1 / 12)));
  };
  //display illustration based on IRR value
  COMM_CALC.processForIRR = function (l_cash_flow_arr, h_cash_flow_arr, prod_id, prod_obj) {

    if (COMM_CALC.computeIRR(l_cash_flow_arr, h_cash_flow_arr, null, true)) {
      l_cash_flow_arr = []; h_cash_flow_arr = [];
      //with taxes , igc zero
      l_cash_flow_arr = prod_obj.calcIllustrationBenefits(QNIAPP.CONSTS.LR, QNIAPP.PRODUCT_DETAILS.get(prod_id, 'assm_rt')[0], 0, 1);
      h_cash_flow_arr = prod_obj.calcIllustrationBenefits(QNIAPP.CONSTS.HR, QNIAPP.PRODUCT_DETAILS.get(prod_id, 'assm_rt')[1], 0, 1);
      //third time making all taxes , igc and mort_val zero
      h_cash_flow_arr_zero = prod_obj.calcIllustrationBenefits(QNIAPP.CONSTS.HR, QNIAPP.PRODUCT_DETAILS.get(prod_id, 'assm_rt')[1], 0, 0);

      return (COMM_CALC.computeIRR(l_cash_flow_arr, h_cash_flow_arr, h_cash_flow_arr_zero, false));
    }
    return false;
  };
  //IRR calc
  COMM_CALC.computeIRR = function (cash_flow_arr_low, cash_flow_arr_high, cash_flow_arr_high_zero, is_tax_applied) {
    //fund val at end of term
    var fund_val_high = cash_flow_arr_high[cash_flow_arr_high.length - 1];
    var fund_val_low = cash_flow_arr_low[cash_flow_arr_low.length - 1];

    var fund_val_high_zero = (!is_tax_applied) ? cash_flow_arr_high_zero[cash_flow_arr_high_zero.length - 1] : null;
    //assumed start and end rate for high
    var GUESS_HIGH_ST = -0.05;
    var GUESS_HIGH_END = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'id'), 'assm_rt')[1];
    //assumed start and end rate for low
    var GUESS_LOW_ST = -0.05;
    var GUESS_LOW_END = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'id'), 'assm_rt')[0];

    //irr calc for both high and low rates
    var calc_l_irr_arr = QNIAPP.COMM_CALC.getIRR(cash_flow_arr_low, fund_val_low, GUESS_LOW_ST, GUESS_LOW_END);
    var calc_h_irr_arr = QNIAPP.COMM_CALC.getIRR(cash_flow_arr_high, fund_val_high, GUESS_HIGH_ST, GUESS_HIGH_END);

    var calc_h_irr_arr_zero = (!is_tax_applied) ? QNIAPP.COMM_CALC.getIRR(cash_flow_arr_high_zero, fund_val_high_zero, GUESS_HIGH_ST, GUESS_HIGH_END) : null;

    if ((QNIAPP.IN.id == 'UL9SPP') && (calc_h_irr_arr_zero != null)) {
      if (calc_h_irr_arr_zero[1] == 0.08) {
        var calc_h_irr_arr_zero = (!is_tax_applied) ? QNIAPP.COMM_CALC.getIRR(cash_flow_arr_high_zero, fund_val_high_zero, GUESS_HIGH_ST, 0.095) : null;
      }
    }

    if ((calc_l_irr_arr[0] === QNIAPP.CONSTS.ERRIRR || calc_h_irr_arr[0] === QNIAPP.CONSTS.ERRIRR) && QNIAPP.IN.id != 'UL9SPP') {
      return false;
    }

    if (is_tax_applied && !QNIAPP.IN.override_flag && QNIAPP.IN.id != 'UL9SPP') {
      var show_error = (((calc_l_irr_arr[1] * 100) < -2) || ((calc_h_irr_arr[1] * 100) < 0));
      if (show_error) {
        return false;
      }
    }
    return (!is_tax_applied) ? QNIAPP.COMM_CALC.processIRRWithOutTaxes(GUESS_HIGH_END, GUESS_LOW_END, calc_l_irr_arr[1], calc_h_irr_arr[1], calc_h_irr_arr_zero[1]) : true;
  };

  // process the computed IRR values when taxes are 0
  COMM_CALC.processIRRWithOutTaxes = function (assm_h, assm_l, irr_l_val, irr_h_val, irr_h_val1) {
    var l_riy_val = (assm_l - irr_l_val).toFixed(4);
    var h_riy_val = (assm_h - irr_h_val).toFixed(4);
    var term_val = QNIAPP.IN.Qt.qtdtls.term;

    QNIAPP.OUT['IRR'] = (((h_riy_val) > (assm_h * (2 / 3))) || ((l_riy_val) > (assm_l))) ? 1 : 0;
    QNIAPP.OUT['IRR_h'] = Math.max(((term_val <= 10) ? 5.00 : ((term_val > 10 && term_val <= 12) ? 5.25 : ((term_val > 12 && term_val <= 14) ? 5.50 : 5.75))), irr_h_val1 * 100);
    if (QNIAPP.OUT.IRR_h && QNIAPP.OUT.IRR_h.toString() && QNIAPP.OUT.IRR_h.toString().split('.')[1] && QNIAPP.OUT.IRR_h.toString().split('.')[1].length > 2) {
      QNIAPP.OUT.IRR_h = QNIAPP.OUT.IRR_h.toFixed(2);
    }
    return true;
  };

  //calculate Future Value
  COMM_CALC.calcFV = function (cashflow_arr, guess, term_val) {
    var freq_mult = { 'Monthly': 12, 'Half Yearly': 2, 'Quarterly': 4, 'Annual': 1, 'Single': '1' };
    var future_value = 0;
    for (var j = 0; j < cashflow_arr.length - 1; j++) {
      future_value += cashflow_arr[j] * Math.pow((Math.pow((1 + guess), (1 / freq_mult[QNIAPP.IN.Qt.qtdtls.freq]))), (parseInt(term_val) * freq_mult[QNIAPP.IN.Qt.qtdtls.freq]) - j);
    }
    return future_value;
  };

  //calculate IRR
  COMM_CALC.getIRR = function (cashflow_arr, tgt_fund_val, stval_l, stval_h) {
    var precision = 0.000005;
    var guess_l = stval_l;
    var guess_h = stval_h;
    var cnt = 0;
    var FV = 0;
    var guess = 0;
    var msg = '';
    var term_val = QNIAPP.IN.Qt.qtdtls.term;
    do {
      cnt++;
      FV = 0;
      guess = guess_l;
      FV = QNIAPP.COMM_CALC.calcFV(cashflow_arr, guess, term_val);

      if (FV < tgt_fund_val) {
        guess = guess_h;
        FV = QNIAPP.COMM_CALC.calcFV(cashflow_arr, guess, term_val);
      }
      else if (!(QNIAPP && QNIAPP.other && QNIAPP.other.touchpoint && QNIAPP.other.touchpoint === "UW")) {
        msg = QNIAPP.CONSTS.ERRIRR;
        break;
      }
      if (FV > tgt_fund_val) {
        guess = (guess_h + guess_l) / 2;
        FV = QNIAPP.COMM_CALC.calcFV(cashflow_arr, guess, term_val);
      }
      else if (!(QNIAPP && QNIAPP.other && QNIAPP.other.touchpoint && QNIAPP.other.touchpoint === "UW")) {
        msg = QNIAPP.CONSTS.ERRIRR;
        break;
      }
      if (FV !== 0 && FV < tgt_fund_val) {
        guess_l = guess;
      }
      else if (FV !== 0 && FV > tgt_fund_val) {
        guess_h = guess;
      }

      if (Math.abs(FV - tgt_fund_val) < precision) {
        msg = QNIAPP.CONSTS.IRRFOUND;
        break;
      }
    } while ((cnt < 10000));
    return [msg, guess];
  };

  //convert the date to str in DD-Mon-YYYY format
  COMM_CALC.getDDMonYYYYStr = function (date_obj) {
    var dt_obj = date_obj;
    if (typeof (date_obj) === 'string') {
      // date is always coming as dd/mm/yyyy
      var mmddyyyyobj = convertStrToMMDDYYYY(date_obj);
      dt_obj = new Date(mmddyyyyobj);
    }
    var temp_val = dt_obj.toDateString().split(" ");
    var date_str = temp_val[2] + "-" + temp_val[1] + "-" + temp_val[3];
    return date_str;
  };

  //convert the date to str in DD/MM/YYYY format
  COMM_CALC.getDDMMYYYYStr = function (date_val) {
    var date_obj = "";
    if (typeof (date_val) === "string") { // date str is always a dd/mm/yyyy
      var mmddyyyyobj = convertStrToMMDDYYYY(date_val);
      date_obj = new Date(mmddyyyyobj);
    }
    else {
      date_obj = date_val;
    }
    return [date_obj.getDate() > 9 ? date_obj.getDate() : "0" + date_obj.getDate(), date_obj.getMonth() + 1 > 9 ? date_obj.getMonth() + 1 : "0" + (date_obj.getMonth() + 1), date_obj.getFullYear()].join('/');

  };

  //convert the date to str in DD-Mon-YYYY format
  COMM_CALC.getDDMonthYYYYStr = function (date_obj) {
    var month_json = {
      'Jan': 'January',
      'Feb': 'February',
      'Mar': 'March',
      'Apr': 'April',
      'May': 'May',
      'Jun': 'June',
      'Jul': 'July',
      'Aug': 'August',
      'Sep': 'September',
      'Oct': 'October',
      'Nov': 'November',
      'Dec': 'December'
    };

    var temp_val = (typeof (date_obj) === 'object') ? date_obj.toDateString().split(" ") : (convertStrToMMDDYYYY(date_obj).toDateString().split(" "));
    date_str = temp_val[2] + " " + (month_json[temp_val[1]] ? month_json[temp_val[1]] : temp_val[1]) + " " + temp_val[3];

    return date_str;
  };

  COMM_CALC.getDatetimeString = function () {
    var sec = "";
    var def_dt_str = "2001/01/01 00:00:00";
    var curr_date = new Date();
    var refDate = new Date(def_dt_str);
    sec = Math.round(Math.abs((curr_date.getTime() - refDate.getTime()) / (1000)));
    return (sec.toString(36));
  };

  //convvert date in MM/DD/YYYY fromat
  COMM_CALC.getDatMMDDYYYFormat = function (inputDate) {

    var myDate = inputDate;
    var Date = myDate.split('/');

    var formattedDate = Date[1] + '/' + Date[0] + '/' + Date[2];
    return formattedDate;
  };

  //convvert date in DD/MM/YYYY fromat from YYYY-MM-DD for aadhar and bfl stp
  COMM_CALC.getDateDDMMYYYFormat = function (inputDate) {

    var myDate = inputDate;
    var Date = myDate.split('-');

    var formattedDate = Date[0] + '/' + Date[1] + '/' + Date[2];
    return formattedDate;
  };


  //maturity date calculation
  COMM_CALC.calcDateOfMaturity = function (date_incp, term_val) {
    //str to date
    if (typeof date_incp == 'string') { date_incp = convertStrToDDMMYYYY(date_incp); }
    var mat_date = new Date((date_incp.getMonth() + 1) + '/' + date_incp.getDate() + '/' + date_incp.getFullYear());
    mat_date = new Date(new Date(mat_date.setFullYear(date_incp.getFullYear() + parseInt(term_val))));
    return QNIAPP.COMM_CALC.getDDMonYYYYStr(mat_date);
  };


  //compute backdate difference
  COMM_CALC.getBackdateDiff = function (incp_dt, qt_dt) {
    var bdiff = new Number(0);

    if (qt_dt.getFullYear() === incp_dt.getFullYear()) {
      if (qt_dt.getDate() >= incp_dt.getDate()) {
        bdiff = qt_dt.getMonth() - incp_dt.getMonth();
      }
      else {
        bdiff = (qt_dt.getMonth() - incp_dt.getMonth()) - 1;
      }
    }
    else {
      var init_m = incp_dt.getMonth();
      while (init_m <= 11) {
        init_m++;
        bdiff++;
      }
      var tgt_m = qt_dt.getMonth();
      while (tgt_m > 0) {
        bdiff++;
        tgt_m--;
      }
      if (incp_dt.getDate() >= qt_dt.getDate()) {
        bdiff--;
      }
    }
    return bdiff;
  };

  //compute the back date tax and the interest
  COMM_CALC.calcBackDateFactor = function (freq_fac, prod_id, st_rt, ec_rt, pol_fee, prem) {
    var bkdt_int = 0;
    var tx_bkdt = 0;
    var jktax = 0;
    var date = new Date();
    date = QNIAPP.IN.Qt.qtdtls.qtDt;
    if (QNIAPP.IN.Qt.qtdtls.qtbkDt) {

      var qtbkDt = QNIAPP.IN.Qt.qtdtls.qtbkDt.split('/');
      var day = qtbkDt[0];
      var month = qtbkDt[1];
      var year = qtbkDt[2];
      date = new Date(year, month - 1, day, '00', '00', '00');
    }

    var bkdt_diff = QNIAPP.COMM_CALC.getBackdateDiff(QNIAPP.IN.Qt.qtdtls.incpDt, date);
    var x;
    var app_fac = 1;
    if (bkdt_diff === 0) {
      return 0;
    }
    for (x = 0; x <= bkdt_diff; x = x + (12 / freq_fac)) {
      if (bkdt_diff - x < 0) {

        app_fac = 0;
        break;
      }
      bkdt_int += QNIAPP.COMM_CALC.roundNum(Math.pow((1 + (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'bkdt_rt'))), ((bkdt_diff - x) / 12)) * app_fac, 3);
      /*	tx_bkdt +=  (st_rt+ec_rt)*app_fac;
        console.log("tx_bkdt="+tx_bkdt);*/
    }


    var premium = prem * bkdt_int;
    var st_rate = QNIAPP.IN.id == "C2P3DP" ? st_rt : QNIAPP.PRODUCT_DETAILS.get(prod_id, 'st_rt');
    st_rt = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round((premium - pol_fee) * st_rate) + Math.round(pol_fee * st_rate) : 0;
    ec_rt = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round((premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) : 0;
    jktax = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? Math.round((premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) : 0;
    var ktax = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) : 0;
    if (QNIAPP.IN.id == "C2P3DP") {
      ktax = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((premium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ktax')]['get']().ktax)) + (pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ktax')]['get']().ktax)) : 0;
    }
    tx_bkdt = (st_rt + ec_rt + jktax + ktax) * app_fac;

    QNIAPP.OUT.txBkDt = tx_bkdt;
    return bkdt_int;

  };

  COMM_CALC.calcRiderBackDateFactor = function (freq_fac, prod_id, st_rt, ec_rt, pol_fee) {
    var bkdt_int = 0;
    var ridertx_bkdt = 0;
    var jktax = 0;
    var date = new Date();
    date = QNIAPP.IN.Qt.qtdtls.qtDt;
    if (QNIAPP.IN.Qt.qtdtls.qtbkDt) {

      var qtbkDt = QNIAPP.IN.Qt.qtdtls.qtbkDt.split('/');
      var day = qtbkDt[0];
      var month = qtbkDt[1];
      var year = qtbkDt[2];
      date = new Date(year, month - 1, day, '00', '00', '00');
    }
    var bkdt_diff = QNIAPP.COMM_CALC.getBackdateDiff(QNIAPP.IN.Qt.qtdtls.incpDt, date);
    var x;
    var app_fac = 1;
    var pol_fee = 0;
    var prod_id = QNIAPP.IN.id;
    if (bkdt_diff === 0) {
      return 0;
    }
    for (x = 0; x <= bkdt_diff; x = x + (12 / freq_fac)) {
      if (bkdt_diff - x < 0) {
        app_fac = 0;
        break;
      }
      bkdt_int += QNIAPP.COMM_CALC.roundNum(Math.pow((1 + (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'bkdt_rt'))), ((bkdt_diff - x) / 12)) * app_fac, 3);
      /*	tx_bkdt +=  (st_rt+ec_rt)*app_fac;
        console.log("tx_bkdt="+tx_bkdt);*/
    }
    return bkdt_int;
  };

  //rounding the number to decimal places
  COMM_CALC.roundNum = function (number, decimal_points) {
    return (Math.round(number * Math.pow(10, decimal_points)) / Math.pow(10, decimal_points));
  };

  //next premium date calculation
  COMM_CALC.calcNextPremiumDt = function (add_fct) {//next premium due date
    var nxt_prem_ddt = new Date(QNIAPP.IN.Qt.qtdtls.incpDt);
    if (typeof QNIAPP.IN.Qt.qtdtls.incpDt == "string") {
      nxt_prem_ddt = new Date(convertStrToDDMMYYYY(QNIAPP.IN.Qt.qtdtls.incpDt));
    }
    var no_of_premiums_for_login = 3;
    if (QNIAPP.IN.Qt.qtdtls.freq == QNIAPP.CONSTS.M && QNIAPP.IN.chnlptnr == "Online" && (["UL7EA2", "C2P3DP", "C2PP", "CANC", "UL8C2R", "SANCHP", "SANPAR"].indexOf(QNIAPP.IN.id) > -1)) {

      if (QNIAPP.IN.Qt.qtdtls.prmmulfactor != undefined && QNIAPP.IN.Qt.qtdtls.prmmulfactor != "") {
        no_of_premiums_for_login = QNIAPP.IN.Qt.qtdtls.prmmulfactor;
      }
      if (QNIAPP.OUT.POD != undefined) {
        QNIAPP.OUT.POD.prmmulfactor = QNIAPP.IN.Qt.qtdtls.prmmulfactor;
      }
    }
    do {
      nxt_prem_ddt = new Date(nxt_prem_ddt.setMonth(nxt_prem_ddt.getMonth() + add_fct));
    } while (nxt_prem_ddt <= QNIAPP.IN.Qt.qtdtls.qtDt)

    if (QNIAPP.IN.Qt.qtdtls.freq == QNIAPP.CONSTS.M && !(QNIAPP.IN.touchpoint === QNIAPP.CONSTS.OPS && (["SANCH", "SANCHE", "SANCHV9", "SANCHV9E"].indexOf(QNIAPP.IN.id) > -1))) {
      do {
        nxt_prem_ddt = new Date(nxt_prem_ddt.setMonth(nxt_prem_ddt.getMonth() + ((no_of_premiums_for_login - 1) * add_fct)));
      } while (nxt_prem_ddt <= QNIAPP.IN.Qt.qtdtls.qtDt)
    }
    QNIAPP.OUT.nextPremDDt = convertStrToDDMonYYYY(nxt_prem_ddt.getDate() + '/' + (nxt_prem_ddt.getMonth() + 1) + '/' + nxt_prem_ddt.getFullYear());
  };
  //calc next due date for hasp and ianp
  COMM_CALC.calcNextDueDt = function (add_fct) {
    var nxt_prem_ddt = new Date(QNIAPP.IN.Qt.qtdtls.incpDt);
    var deferment_period_flag = (QNIAPP.IN.id == QNIAPP.CONSTS.PGNP && QNIAPP.IN.Qt.qtdtls.defermentPeriod != undefined) ? true : false;
    if (deferment_period_flag) {
      nxt_prem_ddt = new Date(nxt_prem_ddt.setMonth(nxt_prem_ddt.getMonth() + QNIAPP.IN.Qt.qtdtls.defermentPeriod * 12));
    }
    do {
      nxt_prem_ddt = new Date(nxt_prem_ddt.setMonth(nxt_prem_ddt.getMonth() + add_fct));
    } while (nxt_prem_ddt <= QNIAPP.IN.Qt.qtdtls.qtDt)

    QNIAPP.OUT.nextPremDDt = convertStrToDDMonYYYY(nxt_prem_ddt.getDate() + '/' + (nxt_prem_ddt.getMonth() + 1) + '/' + nxt_prem_ddt.getFullYear());
  };

  COMM_CALC.calcAnnPayDt = function () { // FOR SRP annuity paydt in illustration
    if ((QNIAPP.IN.id === "SMPPR" || QNIAPP.IN.id === "SMPPL" || QNIAPP.IN.id === "SMPPE" || QNIAPP.IN.id === "SMPPI") && QNIAPP.IN.Qt.qtdtls.plan === "Immediate Annuity" && QNIAPP.IN.Qt.qtdtls.pptOption === "Single") {
      calculateAnnPayDt(QNIAPP.IN.Qt.qtdtls.incpDt, QNIAPP.IN.Qt.qtdtls.defermentPeriod);
    }
    var nxt_prem_ddt = QNIAPP.IN.Qt.qtdtls.annpaydate;
    if (typeof QNIAPP.IN.Qt.qtdtls.annpaydate == "string") {
      nxt_prem_ddt = new Date(convertStrToDDMMYYYY(QNIAPP.IN.Qt.qtdtls.annpaydate));
    }
    else {
      nxt_prem_ddt = new Date(QNIAPP.IN.Qt.qtdtls.annpaydate);
    }
    do {
      nxt_prem_ddt = new Date(nxt_prem_ddt.setMonth(nxt_prem_ddt.getMonth()));
    } while (nxt_prem_ddt <= QNIAPP.IN.Qt.qtdtls.qtDt)
    QNIAPP.OUT.nextAnnPDt = convertStrToDDMonYYYY(nxt_prem_ddt.getDate() + '/' + (nxt_prem_ddt.getMonth() + 1) + '/' + nxt_prem_ddt.getFullYear());
  };


  COMM_CALC.calcAnnualPremium = function (freq_fac) //annual premium
  {
    QNIAPP.OUT.annPremium = QNIAPP.OUT.premium * (freq_fac);
  };

  COMM_CALC.calcTotalPremium = function () //total premium including tax
  {
    QNIAPP.OUT.totPremium = Math.round((QNIAPP.IN.id == "C2P3DP" ? QNIAPP.OUT.combinedPremium : QNIAPP.OUT.premium) + ((QNIAPP.OUT.appTax) ? QNIAPP.OUT.appTax : 0));
    //QNIAPP.OUT.threeMnthPrem=0;
    //if(QNIAPP.IN.Qt.qtdtls.freq===QNIAPP.CONSTS.M){
    //	QNIAPP.OUT.threeMnthPrem=Math.round(QNIAPP.OUT.totPremium * 3);
    //}

    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
      QNIAPP.OUT.totPrem = (QNIAPP.IN.id == "C2P3DP" ? QNIAPP.OUT.combinedPremium : QNIAPP.OUT.premium) + QNIAPP.OUT.appTax + QNIAPP.OUT.totPremiumWithRider;
    } else {
      QNIAPP.OUT.totPremium = Math.round((QNIAPP.IN.id == "C2P3DP" ? QNIAPP.OUT.combinedPremium : QNIAPP.OUT.premium) + ((QNIAPP.OUT.appTax) ? QNIAPP.OUT.appTax : 0));
    }

    if (QNIAPP.IN.Qt.qtdtls.freq === QNIAPP.CONSTS.M) {
      if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
        QNIAPP.OUT.threeMnthPrem = QNIAPP.OUT.totPrem * 3;
        QNIAPP.OUT.twoMnthPrem = QNIAPP.OUT.totPrem * 2;
      } else {
        QNIAPP.OUT.threeMnthPrem = QNIAPP.OUT.totPremium * 3;
        QNIAPP.OUT.twoMnthPrem = QNIAPP.OUT.totPremium * 2;
      }
    }
    if (QNIAPP.IN.combID && QNIAPP.IN.combID == 'C2PCS') {
      QNIAPP.OUT.totPremium = Math.round(QNIAPP.OUT.premium + ((QNIAPP.OUT.appTax) ? QNIAPP.OUT.appTax : 0) + ((QNIAPP.OUT.COMB) ? QNIAPP.OUT.COMB.ext_prem_with_tx : 0));
    }
  };
  COMM_CALC.checkBackdatediff = function (qt_dt, incp_dt) {

    var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*millisecond
    var formatted_incp_date = QNIAPP.COMM_CALC.getDatMMDDYYYFormat(incp_dt);
    var formatted_qt_Date = QNIAPP.COMM_CALC.getDatMMDDYYYFormat(qt_dt);
    var firstDate = new Date(formatted_qt_Date);
    var secondDate = new Date(formatted_incp_date);
    var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
    if (diffDays < 30) {
      QNIAPP['ERR'].push(QNIAPP.CONSTS.ERRBKDTDIFF);
    }

  };
  COMM_CALC.calcQuote = function (prod_id, pol_fee) {

    var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };
    var st_rate = (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE" || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE" || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE" || QNIAPP.IN.id == "SUPH" || QNIAPP.IN.id == "SUPHE") ? window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'st_rt')]['get']().firstyearpremiumtax : QNIAPP.PRODUCT_DETAILS.get(prod_id, 'st_rt');
    var ST_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round((QNIAPP.OUT.premium - pol_fee) * st_rate) + Math.round(pol_fee * st_rate) : 0;
    var EC_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round((QNIAPP.OUT.premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) : 0;
    var GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? Math.round((QNIAPP.OUT.premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) : 0;
    var KTAX = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((QNIAPP.OUT.premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) : 0;
    if (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE" || QNIAPP.IN.id == "SUPH" || QNIAPP.IN.id == "SUPHE") {
      GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? Math.round((QNIAPP.OUT.premium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) + Math.round(pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) : 0;
      KTAX = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((QNIAPP.OUT.premium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ktax')]['get']().ktax)) + Math.round(pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ktax')]['get']().ktax)) : 0;
    }
    if (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE") {
      GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? Math.round((QNIAPP.OUT.premium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) + Math.round(pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) : 0;
      KTAX = 0;
    }
    if (QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE") {
      GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? Math.round((QNIAPP.OUT.premium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) + Math.round(pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) : 0;
      KTAX = 0;
    }
    //str to date

    QNIAPP.IN.Qt.qtdtls.qtDt = convertStrToDDMMYYYY(QNIAPP.IN.Qt.qtdtls.qtDt);
    QNIAPP.IN.Qt.qtdtls.incpDt = convertStrToDDMMYYYY(QNIAPP.IN.Qt.qtdtls.incpDt);

    QNIAPP.OUT.backdtpremium = 0;
    QNIAPP.OUT.backdttax = 0;
    QNIAPP.OUT.txBkDt = 0;
    QNIAPP.OUT.bkdttax_rider = 0;
    QNIAPP.OUT.firstriderPremium = 0;
    if (QNIAPP.IN.Qt.qtdtls.qtDt > QNIAPP.IN.Qt.qtdtls.incpDt && (QNIAPP.IN.Qt.qtdtls.incpbackDt && QNIAPP.IN.Qt.qtdtls.incpbackDt !== '')) {
      QNIAPP.COMM_CALC.calcBkDtFirstPremium(FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f, prod_id, ST_RT, EC_RT, pol_fee, QNIAPP.OUT.premium);
      if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && !QNIAPP.IN.todo_rateup_for_rider) {
        QNIAPP.COMM_CALC.calcRiderBkDtFirstPremium(FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f, prod_id, QNIAPP.PRODUCT_DETAILS.get(prod_id, 'st_rt'), QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt'), pol_fee);

      }
    }

    if (QNIAPP.OUT.backdtpremium && QNIAPP.OUT.backdtpremium != 0) {
      QNIAPP.IN.Qt.qtdtls.backdtpremium = QNIAPP.OUT.backdtpremium;
    } else
      QNIAPP.IN.Qt.qtdtls.backdtpremium = undefined;


    if (QNIAPP.OUT.backdttax && QNIAPP.OUT.backdttax != 0) {
      QNIAPP.IN.Qt.qtdtls.backdttax = QNIAPP.OUT.backdttax;
      QNIAPP.IN.Qt.qtdtls.bkdttax_rider = QNIAPP.OUT.bkdttax_rider;

    } else {
      QNIAPP.IN.Qt.qtdtls.backdttax = undefined;
      QNIAPP.IN.Qt.qtdtls.bkdttax_rider = undefined;
    }


    QNIAPP.COMM_CALC.calcAnnualPremium(FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f);
    //Applied taxes

    //Individual rates
    QNIAPP.OUT.ST_RT = ST_RT;
    QNIAPP.OUT.EC_RT = EC_RT;
    QNIAPP.OUT.GST_RT = GST_RT;
    QNIAPP.OUT.KTAX = KTAX;


    QNIAPP.OUT.appTax = ST_RT + EC_RT + GST_RT + KTAX;
    QNIAPP.COMM_CALC.calcTotalPremium();
    //taxes from 2nd year onwards
    if (QNIAPP.OUT.firstPremium) {
      var backDateAmount = QNIAPP.OUT.firsttotAnnPremium + QNIAPP.OUT.txBkDt - QNIAPP.OUT.appTax;
      QNIAPP.OUT.totAnnPremium = (QNIAPP.OUT.totPremium * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f) + backDateAmount;
    } else {
      QNIAPP.OUT.totAnnPremium = QNIAPP.OUT.totPremium * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
    }
    QNIAPP.OUT.nxtYrTax = (QNIAPP.OUT.appTax == '0') ? 0 : (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktx_2yr_rt'))) : Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'tx_2yr_rt')));
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
      QNIAPP.OUT['nxtYrRiderTax'] = 0;
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) {
          QNIAPP.OUT['nxtYrRiderTax'] += Math.round(parseInt(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'premium') * (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'st_rt'))));	 // will change if rider premium is to be considered
        }
      }
      QNIAPP.OUT.nxtYrTax = QNIAPP.OUT.nxtYrTax + QNIAPP.OUT['nxtYrRiderTax'];
    }


    (QNIAPP.COMM_CALC.isSingleMonthApplicable(QNIAPP.IN.chnlptnr)) ? QNIAPP.COMM_CALC.calcNextPremiumDt_Month(FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].pd) : QNIAPP.COMM_CALC.calcNextPremiumDt(FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].pd);
    //replacing date into str again as throwing error in multiple runs
    QNIAPP.IN.Qt.qtdtls.qtDt = QNIAPP.COMM_CALC.getDDMMYYYYStr(QNIAPP.IN.Qt.qtdtls.qtDt);
    QNIAPP.IN.Qt.qtdtls.incpDt = QNIAPP.COMM_CALC.getDDMMYYYYStr(QNIAPP.IN.Qt.qtdtls.incpDt);
    if (QNIAPP.IN.Qt.qtdtls.agentcode && QNIAPP.IN.Qt.qtdtls.agentcode != undefined && typeof QNIAPP.IN.Qt.qtdtls.agentcode != "undefined" && QNIAPP.IN.Qt.qtdtls.agentcode != "") {
      if ((QNIAPP.IN.Qt.qtdtls.touchpoint == "OPS" || QNIAPP.IN.Qt.qtdtls.touchpoint == "OCP" || QNIAPP.IN.Qt.touchpoint == "OPS" || QNIAPP.IN.Qt.touchpoint == "OCP") && (GFWK_APP_ID && GFWK_APP_ID !== 'wms')) {
        var prodcat_arr = ["UL8C2I", "UL9C2I", "UL7EA", "UL8EA", "UL9EA", "UL7EA2", "UL8EA2", "UL9EA2", "UL7EA1", "UL8EA1", "UL9EA1", "UL7WI1", "UL8WI1", "UL7ESP3", "UL8ESP3", "UL7WP1", "UL8WP3", "UL8WP2", "UL8WP1", "UL9WP1", "UL9WP2", "UL9WP3", "UL7LPT2", "UL8LPT2", "UL9LPT2", "UL7ENT", "UL8ENT", "UL7EAE", "UL8EAE", "UL9EAE", "UL7ESP3E", "UL8ESP3E", "UL7LPT2E", "UL8LPT2E", "UL9LPT2E", "UL7ENTE", "UL8ENTE", "UL8NIV", "UL8NIVR", "UL8NIVL", "UL8NIVS", "UL9NIVR", "UL9NIVL", "UL9NIVS", "UL8NIVE", "UL8NIVER", "UL8NIVEL", "UL8NIVES", "UL9NIVER", "UL9NIVEL", "UL9NIVES", "IUNO", "IUNOX", "IUNOXE", "IUNOY", "IUNOYE", "IUNOX1", "IUNOX1E", "IUNOY1", "IUNOY1E", "UL8CIP", "UL8CIPP", "UL8CIPG", "UL9CIP", "UL9CIPP", "UL9CIPG", "UL10CIP", "UL10CIPP", "UL10CIPG", "LIFEPAR", "LIFEPARE", "EALPTPV9", "EALPTPV9E", "SIPPAR", "SIPPARE", "SIPPARV9", "SIPPARV9S", "SIPPARV9E", "SIPPARV9ES", "SANCHV9", "SANCHV9L", "SANCHV9S", "SANCHV9E", "SANCHV9EL", "SANCHV9ES", "SAPLUSEV9", "SAPLUSEV9E", "HUDAYV9", "HUDAYV9E", "PRAGATHIV9", "PRAGATHIV9E", "GSPV9", "GSPV9E", "SANCHP", "SANCHPV9", "SANCHPE", "SANCHPV9E", "SANPAR", "SANPARL", "SANPARE", "SANPARLE", "SUPH", "SUPHX", "SUPHY", "SUPHE", "SUPHXE", "SUPHYE"];
        var aggentcd_arr = ["00702814", "00760495", "00663694", "00760528", "00730068", "00533648", "00663721", "00488537", "00663727", "00663712", "00760548", "00760550", "00702802", "00760586", "00760568", "00702810", "00702805", "00702813", "00702798", "00663718", "00663708", "00617752", "00760640", "00760641", "00663748", "00533643", "00663707", "00760556", "00617721", "00760507", "00663753", "00760544", "00760564", "00663719", "00617729", "00760531", "00663696", "00760532", "00663723", "00760657", "00760562", "00617742", "00663697", "00663706", "00617725", "00760502", "00663695", "00760571", "00617746", "00760493", "00775277", "00786192", "00760676", "00760677", "00663751", "00617740", "00760533", "00663733", "00663728", "00617720", "00760494", "00760518", "00760561", "00837281", "00760497", "00663720", "00663731", "00760658", "00760589", "00895565", "00663713", "00760573", "00760679", "00895559", "00663726", "00760519", "00663699", "00760682", "00925222", "00925223", "00925224", "00925225", "00730075", "00738444", "00760592", "00702816", "00760542", "00663750", "00617738", "00754929", "00760560", "00702804", "00760525", "00663702", "00760504", "00663705", "00533640", "00760551", "00702812", "00730069", "00760515", "00760578", "00730070", "00760639", "00760498", "00702803", "00760616", "00663730", "00617727", "00895557", "00895563", "00617734", "00760496", "00803932", "00760545", "00895558", "00760513", "00895567", "00760559", "00730078", "00617748", "00760605", "00663734", "00663715", "00760572", "00663703", "00760543", "00617724", "00760526", "00895569", "00663704", "00760521", "00760648", "00617730", "00617723", "00760680", "00730067", "00730076", "00617743", "00617753", "00663717", "00760567", "00760678", "00663700", "00663710", "00617744", "00702809", "00760501", "00533647", "00533645", "00760492", "00702815", "00760594", "00730072", "00760593", "00702811", "00760523", "00760622", "00760621", "00748958", "00533644", "00755723", "00755724", "00730073", "00760520", "00760510", "00760620", "00755725", "00755726", "00755727", "00760522", "00473413", "00760500", "00533650", "00760563", "00663701", "00702801", "00617726", "00760591", "00728029", "00760534", "00760508", "00617728", "00760509", "00837280", "00837279", "00663742", "00730074", "00760530", "00760681", "00760524", "00533649", "00760554", "00760506", "00760555", "00760505", "00663698", "00730065", "00617751", "00760565", "00730077", "00760649", "00663729", "00662729", "00617749", "00760517", "00702808", "00760511", "00617754", "00663732", "00760570", "00617747", "00760558", "00760557", "00730066", "00617741", "00760516", "00895568", "00663725", "00844215", "00760529", "00760527", "00533646", "00895564", "00663722", "00774104", "00837542", "00760514", "00760546", "00740058", "00663743", "00663716", "00773787", "00625432", "00760595", "00663724", "00760512", "00760535", "00760536", "00760537", "00895570", "00895571", "00895573", "00895574", "00760538", "00895575", "00895576", "00895577", "00956926", "00895578", "00843477", "00895587", "00895588", "00895510", "00760612", "00909636", "00760575", "00903775", "00895346", "00895590", "00895581", "00895593", "00895579", "00895589", "00895591", "00895584"];
        var agent_code = ["01034307"];
        var aggentcd_arrP = ['01398072', '01398057'];
        var TURTLEMINT_agent = ["01101619"];
        var prod_codes = ["P1C2PL", "P1C2PLE", "SARJB", "SARJBL", "SARJBS", "SARJBER", "SARJBEL", "SARJBES", "UL8CIP", "UL9CIP", "UL10CIP", "SANPAR", "SANPARL", "SANPARE", "SANPARLE", "SANCHP", "SANCHPE"];
        //Redmine 17813
        var newagent_arr = ["00895590", "00956927", "00956925", "00895581", "00895593", "00760663", "00760623", "00760623", "00895579", "00895510", "00843477", "00895589", "00760612", "00760617", "00760575", "00895591", "00895587", "00895588", "00996906", "00895600", "00895584", "00895580", "00846281", "01040265", "01043882", "01037666", "01038581", "01053010", "01053245", "01059394", "01059395"];
        var newprodcd_arr = ["UL8C2I", "UL9C2I", "UL7EA", "UL8EA", "UL9EA", "UL7EA2", "UL8EA2", "UL9EA2", "UL7EA1", "UL8EA1", "UL9EA1", "UL7WI1", "UL8WI1", "UL7ESP3", "UL8ESP3", "UL7WP1", "UL8WP3", "UL8WP2", "UL8WP1", "UL9WP1", "UL9WP2", "UL9WP3", "UL7LPT2", "UL8LPT2", "UL9LPT2", "UL7ENT", "UL8ENT", "UL7EAE", "UL8EAE", "UL9EAE", "UL7ESP3E", "UL8ESP3E", "UL7LPT2E", "UL8LPT2E", "UL9LPT2E", "UL7ENTE", "UL8ENTE", "UL8NIV", "UL8NIVR", "UL8NIVL", "UL8NIVS", "UL9NIVR", "UL9NIVL", "UL9NIVS", "UL8NIVE", "UL8NIVER", "UL8NIVEL", "UL8NIVES", "UL9NIVER", "UL9NIVEL", "UL9NIVES", "IUNO", "IUNOX", "IUNOXE", "IUNOY", "IUNOYE", "IUNOX1", "IUNOX1E", "IUNOY1", "IUNOY1E", "UL8CIP", "UL8CIPP", "UL8CIPG", "UL9CIP", "UL9CIPP", "UL9CIPG", "UL10CIP", "UL10CIPP", "UL10CIPG", "LIFEPAR", "LIFEPARE", "EALPTPV9", "EALPTPV9E", "SIPPAR", "SIPPARE", "SIPPARV9", "SIPPARV9S", "SIPPARV9E", "SIPPARV9ES", "SANCHV9", "SANCHV9L", "SANCHV9S", "SANCHV9E", "SANCHV9EL", "SANCHV9ES", "SAPLUSEV9", "SAPLUSEV9E", "HUDAYV9", "HUDAYV9E", "PRAGATHIV9", "PRAGATHIV9E", "GSPV9", "GSPV9E", "SANCHP", "SANCHPV9", "SANCHPE", "SANCHPV9E", "SANPAR", "SANPARL", "SANPARE", "SANPARLE", "SUPH", "SUPHX", "SUPHY", "SUPHE", "SUPHXE", "SUPHYE", "P1C2PL", "P1C2PLE", "SARJB", "SARJBR", "SARJBL", "SARJBS", "SARJBER", "SARJBEL", "SARJBES"];
        //Redmine 17813
        if (((prodcat_arr.indexOf(QNIAPP.IN.id) > -1) && (aggentcd_arr.indexOf(QNIAPP.IN.Qt.qtdtls.agentcode) > -1)) || ((prod_codes.indexOf(QNIAPP.IN.id) > -1) && (agent_code.indexOf(QNIAPP.IN.Qt.qtdtls.agentcode) > -1)) || ((newprodcd_arr.indexOf(QNIAPP.IN.id) > -1) && (newagent_arr.indexOf(QNIAPP.IN.Qt.qtdtls.agentcode) > -1))) {
          if (QNIAPP.IN.Qt.qtdtls.freq == QNIAPP.CONSTS.M) {
            QNIAPP.IN.Qt.qtdtls.prmmulfactor = "2";
            QNIAPP.IN.Qt.qtdtls.prmmulflagchange = "Y";
            if (QNIAPP.IN.Qt.qtdtls.agentcode == "01040265" && QNIAPP.IN.id == "P1C2PL") {
              QNIAPP.IN.Qt.qtdtls.prmmulfactor = "1";
              QNIAPP.IN.Qt.qtdtls.prmmulflagchange = "N";
            }
            if ((QNIAPP.IN.id == "SANCHP" || QNIAPP.IN.id == "SANPAR" || QNIAPP.IN.id == "UL8CIP") && (QNIAPP.IN.Qt.qtdtls.agentcode == "00895510" || QNIAPP.IN.Qt.qtdtls.agentcode == "01034307")) {
              QNIAPP.IN.Qt.qtdtls.prmmulfactor = "1";
              QNIAPP.IN.Qt.qtdtls.prmmulflagchange = "N";
            }
          }
          else if (QNIAPP.IN.Qt.qtdtls.prmmulfactor == undefined) {
            QNIAPP.IN.Qt.qtdtls.prmmulfactor = "1";
          }
        }
        if (TURTLEMINT_agent.indexOf(QNIAPP.IN.Qt.qtdtls.agentcode) > -1) {
          if (QNIAPP.IN.Qt.qtdtls.freq == QNIAPP.CONSTS.M) {
            QNIAPP.IN.Qt.qtdtls.prmmulfactor = "2";
            QNIAPP.IN.Qt.qtdtls.prmmulflagchange = "Y";
          }
        }

        //Redmine 22885 Start
        if ((aggentcd_arrP.indexOf(QNIAPP.IN.Qt.qtdtls.agentcode) > -1)) {
          if (QNIAPP.IN.Qt.qtdtls.freq == QNIAPP.CONSTS.M) {
            QNIAPP.IN.Qt.qtdtls.prmmulfactor = "2";
            QNIAPP.IN.Qt.qtdtls.prmmulflagchange = "Y";
          }
        }
        //Redmine 22885 END
      }
    }
  };

  COMM_CALC.calcBkDtFirstPremium = function (freq_fac, prod_id, st_rt, ec_rt, pol_fee, premium) {
    var backDateFlg = QNIAPP.COMM_CALC.backdateFycheck();
    if (backDateFlg) {
      QNIAPP.OUT.firstPremium = 0;
      var bkdt_int_fct = QNIAPP.COMM_CALC.calcBackDateFactor(freq_fac, prod_id, st_rt, ec_rt, pol_fee, premium);
      if (bkdt_int_fct !== 0) {
        QNIAPP.OUT.firstPremium = Math.round(premium * bkdt_int_fct + QNIAPP.OUT.txBkDt);
        QNIAPP.OUT.backdtpremium = QNIAPP.OUT.firstPremium - premium - QNIAPP.OUT.txBkDt;
        var pol_fee = 0;
        var backdtpremium = QNIAPP.OUT.backdtpremium;
        var st_rate = QNIAPP.IN.id == "C2P3DP" ? st_rt : QNIAPP.PRODUCT_DETAILS.get(prod_id, 'st_rt');
        var st_rt = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round((backdtpremium - pol_fee) * st_rate) + Math.round(pol_fee * st_rate) : 0;
        var ec_rt = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round((backdtpremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) : 0;
        var jktax = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? Math.round((backdtpremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) : 0;
        var ktax = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((backdtpremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) : 0;
        if (QNIAPP.IN.id == "C2P3DP") {
          ktax = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((backdtpremium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ktax')]['get']().ktax)) + (pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ktax')]['get']().ktax)) : 0;
        }
        tx_bkdt = st_rt + ec_rt + jktax + ktax;
        QNIAPP.OUT.backdttax = tx_bkdt;
        QNIAPP.OUT.firsttotAnnPremium = (QNIAPP.OUT.firstPremium - (premium * parseInt(bkdt_int_fct)) - QNIAPP.OUT.txBkDt);
      }
    }

  };

  COMM_CALC.calcRiderBkDtFirstPremium = function (freq_fac, prod_id, st_rt, ec_rt, pol_fee) {
    var backDateFlg = QNIAPP.COMM_CALC.backdateFycheck();
    if (backDateFlg) {
      var bkdt_int_fct = QNIAPP.COMM_CALC.calcRiderBackDateFactor(freq_fac, prod_id, st_rt, ec_rt, pol_fee);
      if (bkdt_int_fct !== 0) {
        var firstridertotPremium = 0;
        var riderpremium = 0;
        var ridertx_bkdt = 0;
        var bkdttax_rider = 0;
        var riderBkdtPremium = 0;
        var prod_id = QNIAPP.IN.id;
        QNIAPP.OUT.firstriderPremium = 0;
        QNIAPP.OUT.bkdttax_rider = 0;
        var pol_fee = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'policy_fee');
        for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
          if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) {
            QNIAPP.OUT.bkdt_int_fct = bkdt_int_fct;
            riderpremium = COMM_CALC.getValueFromQtDtls("rider")[i].premium * bkdt_int_fct;
            st_rt = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round((riderpremium - pol_fee) * QNIAPP.COMM_PARMS.getTxRt('st_rt', COMM_CALC.getValueFromQtDtls("rider")[i].name)) + Math.round(pol_fee * QNIAPP.COMM_PARMS.getTxRt('st_rt', COMM_CALC.getValueFromQtDtls("rider")[i].name)) : 0;
            ec_rt = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round((riderpremium - pol_fee) * QNIAPP.COMM_PARMS.getTxRt('ec_rt', COMM_CALC.getValueFromQtDtls("rider")[i].name)) + Math.round(pol_fee * QNIAPP.COMM_PARMS.getTxRt('ec_rt', COMM_CALC.getValueFromQtDtls("rider")[i].name)) : 0;
            jktax = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? Math.round((riderpremium - pol_fee) * QNIAPP.COMM_PARMS.getTxRt('gst_rt', COMM_CALC.getValueFromQtDtls("rider")[i].name)) + Math.round(pol_fee * QNIAPP.COMM_PARMS.getTxRt('gst_rt', COMM_CALC.getValueFromQtDtls("rider")[i].name)) : 0;
            ktax = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((riderpremium - pol_fee) * QNIAPP.COMM_PARMS.getTxRt('ktax', COMM_CALC.getValueFromQtDtls("rider")[i].name)) + Math.round(pol_fee * QNIAPP.COMM_PARMS.getTxRt('ktax', COMM_CALC.getValueFromQtDtls("rider")[i].name)) : 0;
            ridertx_bkdt = (st_rt + ec_rt + jktax + ktax);
            QNIAPP.IN.Qt.qtdtls.rider[i].st_rt = st_rt;
            QNIAPP.IN.Qt.qtdtls.rider[i].ec_rt = ec_rt;
            QNIAPP.IN.Qt.qtdtls.rider[i].ktax = ktax;
            QNIAPP.IN.Qt.qtdtls.rider[i].tax = ridertx_bkdt;
            firstridertotPremium = Math.round((riderpremium)) + (parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].tax));
            QNIAPP.IN.Qt.qtdtls.rider[i].riderBkdtPremium = Math.round(riderpremium - COMM_CALC.getValueFromQtDtls("rider")[i].premium);
            QNIAPP.OUT.riderBkdtPremium = QNIAPP.IN.Qt.qtdtls.rider[i].riderBkdtPremium;
            QNIAPP.OUT.firstriderPremium = QNIAPP.OUT.firstriderPremium + firstridertotPremium;
            riderBkdtPremium = riderBkdtPremium + QNIAPP.IN.Qt.qtdtls.rider[i].riderBkdtPremium;
          }
        }
        var st_rate = QNIAPP.IN.id == "C2P3DP" ? window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'st_rt')]['get']().firstyearpremiumtax : QNIAPP.PRODUCT_DETAILS.get(prod_id, 'st_rt');
        st_rt = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round((riderBkdtPremium - pol_fee) * st_rate) + Math.round(pol_fee * st_rate) : 0;
        ec_rt = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round((riderBkdtPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) : 0;
        jktax = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? Math.round((riderBkdtPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) : 0;
        ktax = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((riderBkdtPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) : 0;
        if (QNIAPP.IN.id == "C2P3DP") {
          ktax = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((riderBkdtPremium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ktax')]['get']().ktax)) + (pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ktax')]['get']().ktax)) : 0;
        }
        bkdttax_rider = (st_rt + ec_rt + jktax + ktax);
        QNIAPP.OUT.bkdttax_rider = bkdttax_rider;
        QNIAPP.IN.Qt.qtdtls.bkdttax_rider = QNIAPP.OUT.bkdttax_rider;
      }
    }
  };

  COMM_CALC.getMonthsInTerm = function () {
    var mon_arr = [];
    for (var i = 0; i < (parseInt(QNIAPP.IN.Qt.qtdtls.term) * 12); i++) {
      mon_arr.push(i);
    }
    return mon_arr;
  };

  COMM_CALC.validateFundChoices = function () {
    var sum = 0;
    for (var f = 0; f < QNIAPP.IN.Qt.qtdtls.fund.length; f++) {
      var fund_val = parseFloat(QNIAPP.IN.Qt.qtdtls.fund[f].percent);
      if (fund_val < 0) {
        QNIAPP['ERR'].push(QNIAPP.CONSTS.ERRFNDOPTNEG);
      }
      sum = sum + parseFloat(fund_val);
    }
    //need to confirm if this a mandatory field
    if (sum === 0) {
      QNIAPP['ERR'].push(QNIAPP.CONSTS.ERRFUND);
    }
    else if (sum !== 100) {
      QNIAPP['ERR'].push(QNIAPP.CONSTS.ERRFNDOPT);
    }
  };

  COMM_CALC.getDepsDetails = function (detailsArr, prop) {
    for (var key in detailsArr) {
      for (var key1 in detailsArr[key]) {
        if (prop === key1) {
          return detailsArr[key][key1];
        }

      }
    }
    return '';
  };

  COMM_CALC.calcParms = function (prod_id, freq) {
    var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };
    var SC_RT = QNIAPP.PRODUCT_DETAILS.get(prod_id, 'sc_rt');
    var EC_RT = QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt');
    var KTAX = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax') : 0;

    QNIAPP.OUT.appTax = SC_RT + KTAX + EC_RT;
    QNIAPP.IN.Qt.qtdtls.qtDt = convertStrToDDMMYYYY(QNIAPP.IN.Qt.qtdtls.qtDt);
    QNIAPP.IN.Qt.qtdtls.incpDt = convertStrToDDMMYYYY(QNIAPP.IN.Qt.qtdtls.incpDt);
    QNIAPP.COMM_CALC.calcNextDueDt(FREQ_PD_MAP[freq].pd);
    if (QNIAPP.IN.id == "SRP" || QNIAPP.IN.id == "SMPP" || QNIAPP.IN.id == "SMPPR" || QNIAPP.IN.id == "SMPPL" || QNIAPP.IN.id === "SMPPE" || QNIAPP.IN.id === "SMPPI") {
      QNIAPP.COMM_CALC.calcAnnPayDt();
    }

    //replacing date into str again as throwing error in multiple runs
    QNIAPP.IN.Qt.qtdtls.qtDt = QNIAPP.COMM_CALC.getDDMMYYYYStr(QNIAPP.IN.Qt.qtdtls.qtDt);
    QNIAPP.IN.Qt.qtdtls.incpDt = QNIAPP.COMM_CALC.getDDMMYYYYStr(QNIAPP.IN.Qt.qtdtls.incpDt);

  };

  COMM_CALC.createDepsObj = function (id) {
    //(QNIAPP.IN.id==='HRN')?QNIAPP.HRN_ACT.createDepsObj():QNIAPP.UL7WP1_ACT.createDepsObj(id);
    //(QNIAPP.IN.id==='HRN' || QNIAPP.IN.id==='C2PH')?window['QNIAPP'][QNIAPP.IN.id+"_ACT"]['createDepsObj']():QNIAPP.UL7WP1_ACT.createDepsObj(id);
    if (QNIAPP.IN.id === 'HRN' || QNIAPP.IN.id === 'C2PH') {
      window['QNIAPP'][QNIAPP.IN.id + "_ACT"]['createDepsObj']();
    } else if (typeof QNIAPP.CORONAK_ACT !== "undefined" && QNIAPP.IN.combID && QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.combID)) {
      QNIAPP.CORONAK_ACT.createDepsObj();
    }
    else if (typeof QNIAPP.UL7WP1_ACT !== "undefined") {
      QNIAPP.UL7WP1_ACT.createDepsObj(id);
    } else if (typeof QNIAPP.AMHI_ACT !== "undefined" && QNIAPP.IN.combID && QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.combID) && QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.combID, 'sub_ctg') == 'New') {
      QNIAPP.AMHI_ACT.createDepsObj();
    } else if (typeof QNIAPP.C2PCS_ACT !== "undefined" && QNIAPP.IN.combID && QNIAPP.IN.combID == "C2PCS" && QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.combID)) {
      QNIAPP.C2PCS_ACT.createDepsObj();
    } else if (typeof QNIAPP.C2POS_ACT !== "undefined" && QNIAPP.IN.combID && QNIAPP.IN.combID == "C2POS" && QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.combID)) {
      QNIAPP.C2POS_ACT.createDepsObj();
    }
  };


  COMM_CALC.generateRandomNum = function (/*min_val,max_val*/ len_val, curr_val) {
    /*var num =0;
    num = Math.floor(Math.random() * (max_val - min_val + 1)) + min_val;
    return num;*/
    curr_val = curr_val ? curr_val : '';
    return len_val ? QNIAPP.COMM_CALC.generateRandomNum(--len_val, "0123456789abcdefghijklmnopqrstuvwxyz".charAt(Math.floor(Math.random() * 35)) + curr_val) : curr_val;
  };
  COMM_CALC.generateRandomLetters = function (num_of_times) {
    var temp_str = "";
    temp_str = QNIAPP.COMM_CALC.getDatetimeString();
    var letter_range = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for (var i = 0; i < num_of_times; i++) {
      temp_str += letter_range.charAt(Math.floor(Math.random() * letter_range.length));
    }
    return temp_str;
  };

  COMM_CALC.generateQuoteNo = function (isQuote) {
    var temp_str = "";
    var random_len = 6;
    temp_str = QNIAPP.COMM_CALC.generateRandomNum(random_len, '');
    temp_str = (QNIAPP.COMM_CALC.getDatetimeString()) + temp_str;
    if (isQuote === "a" && (typeof isNewEditQuoteFlow != 'undefined' && isNewEditQuoteFlow)) {
      temp_str = 'q' + temp_str;
    } else {
      temp_str = isQuote + temp_str;
    }
    if (isQuote === "q") {
      QNIAPP.IN.Qt.qtdtls.quoteid = temp_str;
      QNIAPP.IN.Qt.quoteid = temp_str;
      QNIAPP.IN.Qt.appnum = "";
    } else if (isQuote === "a" && (typeof isNewEditQuoteFlow != 'undefined' && isNewEditQuoteFlow)) {
      QNIAPP.IN.Qt.qtdtls.quoteid = temp_str;
      QNIAPP.IN.Qt.quoteid = temp_str;
    } else {
      QNIAPP.IN.Qt.appnum = temp_str;
    }
    //(isQuote === "q") ? QNIAPP.IN.Qt.quoteid=temp_str : QNIAPP.IN.Qt.appnum=temp_str;
  };

  COMM_CALC.generateMyMixIdForCombo = function () {
    var sec = "";
    var id = QNIAPP.IN.id;
    var def_dt_str = "2001/01/01 00:00:00";
    var curr_date = new Date();
    var refDate = new Date(def_dt_str);
    sec = QNIAPP.IN.logeduserid + id + Math.round(Math.abs((curr_date.getTime() - refDate.getTime()) / (1000)));
    return sec;
  };

  COMM_CALC.generateAppNo = function (prodCat, source) {
    var appnum = "";
    var randomLen = 4;
    var items = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
    var def_dt_str = "2015/01/01 00:00:00";
    var refDate = new Date(def_dt_str);
    var curr_date = new Date();
    var diffMs = curr_date - refDate;
    appnum = Math.round(diffMs / 60000) + "";
    while (appnum.length !== 7) {
      appnum = "0" + appnum;
    }
    for (var i = 0; i < randomLen; i++) {
      appnum = items[Math.floor(Math.random() * items.length)] + appnum;
    };
    switch (source) { // 1- POS,2 - OPS,3-Mobility,4 -OCP,5- Big Channel Partners
      case "Mobility": appnum = "3" + appnum; break;
      default: break;
    }
    switch (prodCat) { // 1- Life,2 - Health,3- Pension
      case "Pension": appnum = "3" + appnum; break;
      case "Health": appnum = "2" + appnum; break;
      default: appnum = "1" + appnum; break;
    }
    return appnum;
  };
  COMM_CALC.getProductCategory = function (product) {
    var prodcat = QNIAPP.PRODUCT_DETAILS.getProductCategory();
    for (var index = 0; index < prodcat.length; index++) {
      var cat = prodcat[index];
      if (jQuery.inArray(product, QNIAPP.PRODUCT_DETAILS.getProdListByCategory(cat, "Other", "")) !== -1) {
        return cat;
      }
    }
  };
  COMM_CALC.checkRiderMaxSumAssured = function (sumassured) {
    if (window['QNIAPP'][QNIAPP.IN.id + "_RIDERS"] && window['QNIAPP'][QNIAPP.IN.id + "_RIDERS"]['getRiderMaxSA']) {
      var max_sa_rider = window['QNIAPP'][QNIAPP.IN.id + "_RIDERS"]['getRiderMaxSA'](QNIAPP.IN.Qt.qtdtls.rider);
      if (max_sa_rider && sumassured > max_sa_rider) {
        QNIAPP.ERR.push(QNIAPP.CONSTS.ERRRIDERSA + max_sa_rider);
      }
    }
  };
  COMM_CALC.setSplAndPosRates = function () {
    if (GFWK_APP_ID === 'ops') {
      if (typeof QNIAPP.IN.Qt.qtdtls.source != "undefined" && QNIAPP.IN.Qt.qtdtls.source != "aops" && QNIAPP.IN.Qt.qtdtls.source != "aopstwo" && typeof QNIAPP.IN.Qt.qtdtls.ccdccrFlag != "undefined" && QNIAPP.IN.Qt.qtdtls.ccdccrFlag != null
        && QNIAPP.IN.Qt.qtdtls.ccdccrFlag != "" && QNIAPP.IN.Qt.qtdtls.ccdccrFlag == "Y") {
        QNIAPP.IN.Qt.qtdtls.useposrates = 'Y';
        QNIAPP.IN.Qt.qtdtls.spl = '-';
        QNIAPP.IN.spl = QNIAPP.IN.Qt.qtdtls.spl;
        QNIAPP.IN.useposrates = QNIAPP.IN.Qt.qtdtls.useposrates;
      } else {
        for (var prop in GCOM_AGENT_CODES) {
          if (typeof QNIAPP.IN.Qt.qtdtls.agentcode != "undefined" && GCOM_AGENT_CODES[prop][0] == QNIAPP.IN.Qt.qtdtls.agentcode && (QNIAPP.IN.Qt.qtdtls.product).indexOf(GCOM_AGENT_CODES[prop][1]) > -1) {
            QNIAPP.IN.Qt.qtdtls.useposrates = 'Y';
            QNIAPP.IN.Qt.qtdtls.spl = '-';
            QNIAPP.IN.spl = QNIAPP.IN.Qt.qtdtls.spl;
            QNIAPP.IN.useposrates = QNIAPP.IN.Qt.qtdtls.useposrates;
            break;
          }
        }
      }
    }
  };
  COMM_CALC.setAdditionalInputs = function (jsonObj, name) {

    QNIAPP.COMM_CALC.setSplAndPosRates();

    if (QNIAPP.IN.touchpoint === QNIAPP.CONSTS.OPS) {
      //Temp change
      //if(QNIAPP.IN.id == "UL7NPR1"){
      //if(['window']['QNIAPP.UL7NPR1_FUNDOPT.getfundChoices()){
      jsonObj.qtdtls['NDNC_flg'] = 'Y';
      if (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "fund_opt")] && window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "fund_opt")]['getfundChoices']()) {
        var fund_arr = window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "fund_opt")]['getfundChoices']();
        if (["UL8CIP", "UL8C2I", "UL9SPP", "ESPP"].indexOf(QNIAPP.IN.id) == -1 && (!(QNIAPP.IN.Qt.qtdtls.sampoornrvmpfundops == "Y" && typeof QNIAPP.IN.Qt.qtdtls.sampoornrvmpfundops != "undefined" && QNIAPP.IN.Qt.qtdtls.sampoornrvmpfundops != ""))) {
          jsonObj.qtdtls['fund'] = [];
          for (var i = 0; i < fund_arr.length; i++) {
            jsonObj.qtdtls['fund'][i] = {};
            jsonObj.qtdtls['fund'][i]['name'] = fund_arr[i];
            jsonObj.qtdtls.fund[i]['name_cd'] = getMstr_code(GQNI_FUND_OPT, jsonObj.qtdtls.fund[i]['name']);
            jsonObj.qtdtls['fund'][i]['percent'] = "";
          }
        }
        if (QNIAPP.IN.id == "UL9SPP" && QNIAPP.IN.Qt.qtdtls.fundcap == "Y" && QNIAPP.IN.Qt.qtdtls.proceedtofund == "Y") {
          var fund_arr = window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "fund_opt")]['getfundChoices']();
          jsonObj.qtdtls['fund'] = QNIAPP.IN.Qt.qtdtls.fund;
          for (var i = 0; i < fund_arr.length; i++) {
            //jsonObj.qtdtls['fund'][i]={};
            jsonObj.qtdtls['fund'][i]['name'] = fund_arr[i];
            jsonObj.qtdtls.fund[i]['name_cd'] = getMstr_code(GQNI_FUND_OPT, jsonObj.qtdtls.fund[i]['name']);
          }
        }
        if (QNIAPP.IN.id == "ESPP" && QNIAPP.IN.Qt.qtdtls.proceedtofund == "N") {
          var fund_arr = window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "fund_opt")]['getfundChoices']();
          jsonObj.qtdtls['fund'] = QNIAPP.IN.Qt.qtdtls.fund;
          for (var i = 0; i < fund_arr.length; i++) {
            jsonObj.qtdtls['fund'][i] = {};
            jsonObj.qtdtls['fund'][i]['name'] = fund_arr[i];
            jsonObj.qtdtls.fund[i]['name_cd'] = getMstr_code(GQNI_FUND_OPT, jsonObj.qtdtls.fund[i]['name']);
          }
        }
        if (QNIAPP.IN.id === 'UL8CG' || QNIAPP.IN.id === 'UL9CG') {
          QNIAPP.IN.Qt.qtdtls.fund[0]['percent'] = QNIAPP.UL8CG_FUND_Disp.getCG(QNIAPP.IN.Qt.qtdtls.age);
          QNIAPP.IN.Qt.qtdtls.fund[1]['percent'] = QNIAPP.UL8CG_FUND_Disp.getCS(QNIAPP.IN.Qt.qtdtls.age);
        }
        if (QNIAPP.IN.id === 'IUNO' || QNIAPP.IN.id === 'UL7EA' || QNIAPP.IN.id === 'UL7EA2' || QNIAPP.IN.id == 'UL7EA1' || QNIAPP.IN.id == 'UL7LPT2' || QNIAPP.IN.id == 'UL8NIV' || QNIAPP.IN.id == 'UL7YS1' || QNIAPP.IN.id == 'UL7WP1') {
          if (QNIAPP.IN.Qt.qtdtls.funddata && QNIAPP.IN.Qt.qtdtls.funddata.length > 0) {//8285
            for (var j = 0; j < QNIAPP.IN.Qt.qtdtls.funddata.length; j++) {
              for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.fund.length; i++) {
                if (QNIAPP.IN.Qt.qtdtls.funddata[j].name == QNIAPP.IN.Qt.qtdtls.fund[i].name_cd) {
                  QNIAPP.IN.Qt.qtdtls.fund[i].percent = QNIAPP.IN.Qt.qtdtls.funddata[j].percent;
                  break;
                }
              }
            }
          }
          for (var x in QNIAPP.IN.Qt.qtdtls.fund) {
            if (['EQUITY_PLUS_FUND', 'DIVERSIFIED_EQUITY_FUND', 'BLUE_CHIP_FUND', 'OPPORTUNITIES_FUND', 'DISCOVERY_FUND', 'EQUITY_ADVANTAGE_FUND'].indexOf(QNIAPP.IN.Qt.qtdtls.fund[x]['name_cd']) > -1) {
              QNIAPP.IN.Qt.qtdtls.fund[x]['type'] = 'Equity';
            } else if (['BOND_FUND', 'CONSERVATIVE_FUND', 'INCOME_FUND'].indexOf(QNIAPP.IN.Qt.qtdtls.fund[x]['name_cd']) > -1) {
              QNIAPP.IN.Qt.qtdtls.fund[x]['type'] = 'Debt';
            } else {
              QNIAPP.IN.Qt.qtdtls.fund[x]['type'] = 'Balanced';
            }
          }
        }
        if (QNIAPP.IN.id == 'UL8C2R' || QNIAPP.IN.id == 'UL9C2R') {
          var policyTerm = parseInt(QNIAPP.IN.Qt.qtdtls.term);
          if (policyTerm == 10) {
            QNIAPP.IN.Qt.qtdtls.fund[0]['percent'] = "30";
          }
          else if (policyTerm >= 15 && policyTerm <= 19) {
            QNIAPP.IN.Qt.qtdtls.fund[0]['percent'] = "40";
          }
          else if (policyTerm >= 20 && policyTerm <= 24) {
            QNIAPP.IN.Qt.qtdtls.fund[0]['percent'] = "50";
          }
          else if (policyTerm >= 25 && policyTerm <= 29) {
            QNIAPP.IN.Qt.qtdtls.fund[0]['percent'] = "60";
          }
          else if (policyTerm >= 30 && policyTerm <= 34) {
            QNIAPP.IN.Qt.qtdtls.fund[0]['percent'] = "70";
          }
          else if (policyTerm == 35) {
            QNIAPP.IN.Qt.qtdtls.fund[0]['percent'] = "80";
          }
          QNIAPP.IN.Qt.qtdtls.fund[1]['percent'] = "" + 100 - parseInt(QNIAPP.IN.Qt.qtdtls.fund[0]['percent']) + "";
          for (var i = 2; i < QNIAPP.IN.Qt.qtdtls.fund.length; i++) {
            QNIAPP.IN.Qt.qtdtls.fund[i]['percent'] = "0";
          }
        }
      }
    }

    if (QNIAPP.IN.Qt.isDyn == 0 || QNIAPP.IN.id == "UL9SPP") {
      if (jsonObj.qtdtls.fund && GQNI_FUND_OPT) {
        for (var i = 0; i < jsonObj.qtdtls.fund.length; i++) {

          jsonObj.qtdtls.fund[i]['name_cd'] = getMstr_code(GQNI_FUND_OPT, jsonObj.qtdtls.fund[i]['name']);
        }
      }
    }
    if (QNIAPP.IN.id === 'UL9SPP' && (QNIAPP.IN.touchpoint === QNIAPP.CONSTS.POS || QNIAPP.IN.touchpoint === QNIAPP.CONSTS.OPS)) {
      QNIAPP.IN.Qt.qtdtls['isEmpOfHdfc'] = 'NA';
      QNIAPP.IN.Qt.qtdtls['isSpouse'] = 'NA';
      QNIAPP.IN.Qt.qtdtls['isExCustomer'] = '1';
    }
    if (QNIAPP.IN.id === 'UL9SPP' && QNIAPP.IN.touchpoint === QNIAPP.CONSTS.OPS) {
      QNIAPP.IN.Qt.qtdtls['isExCustomer'] = '0';
    }
    if (QNIAPP.IN.touchpoint === QNIAPP.CONSTS.POS || QNIAPP.IN.chnlptnr === "Online") { // Added as part of 2717: UIN Number change for 3 Products : to show SFIN in illustration
      if (jsonObj.qtdtls.fund && GQNI_FUND_OPT) {
        for (var i = 0; i < jsonObj.qtdtls.fund.length; i++) {
          if (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "fund_sfin")] && window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "fund_sfin")]['getsfin'](jsonObj.qtdtls.fund[i]['name_cd'])) {
            jsonObj.qtdtls.fund[i]['sfin'] = window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "fund_sfin")]['getsfin'](jsonObj.qtdtls.fund[i]['name_cd']);
          }
          if (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "fund_rlvl")] && window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "fund_rlvl")]['getriskLvl'](jsonObj.qtdtls.fund[i]['name_cd'])) {
            jsonObj.qtdtls.fund[i]['risklvl'] = window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "fund_rlvl")]['getriskLvl'](jsonObj.qtdtls.fund[i]['name_cd']);

          }

        }
        QNIAPP.PRODUCT_DETAILS.getFundCategory();
      }

    }
    QNIAPP.IN.Qt.qtdtls['uin'] = QNIAPP.OUT['uin'];
    var id = (QNIAPP.IN.combID && QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.combID)) ? QNIAPP.IN.combID : QNIAPP.IN.id;
    jsonObj.qtdtls.prodcat = QNIAPP.COMM_CALC.getProductCategory(id);
    if (QNIAPP.IN.Qt.qtdtls.c2insfmpflag == "Y") {
      jsonObj.qtdtls.prodcat = QNIAPP.COMM_CALC.getProductCategory("SUPH");
    }
    jsonObj.qtdtls.prodcat_cd = getMstr_pk(GQNI_PRODCAT, jsonObj.qtdtls.prodcat);

    //jsonObj.gender = jsonObj.qtdtls.gender === "M" ? "GEN_M" : "GEN_F";
    if (jsonObj.qtdtls.rider && GQNI_RIDER && !$.isEmptyObject(GQNI_RIDER)) {
      for (var i = 0; i < jsonObj.qtdtls.rider.length; i++) {
        if (jsonObj.qtdtls.rider[i]['name'] === "EH" || jsonObj.qtdtls.rider[i]['name'] === QNIAPP.CONSTS.EH) {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.EH][0];
        } else if (jsonObj.qtdtls.rider[i]['name'] === "EL" || jsonObj.qtdtls.rider[i]['name'] === QNIAPP.CONSTS.EL) {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.EL][0];
        } else if (jsonObj.qtdtls.rider[i]['name'] === "ED" || jsonObj.qtdtls.rider[i]['name'] === QNIAPP.CONSTS.ED) {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.ED][0];
        } else if (jsonObj.qtdtls.rider[i]['name'] === "EP" || jsonObj.qtdtls.rider[i]['name'] === QNIAPP.CONSTS.EP) {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.EP][0];
        }
        else if (jsonObj.qtdtls.rider[i]['name'] === QNIAPP.CONSTS.RRE) {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.RRE][0];
        } else if (jsonObj.qtdtls.rider[i]['name'] === QNIAPP.CONSTS.RB) {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.RB][0];
        } else if (jsonObj.qtdtls.rider[i]['name'] === "INAD") {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.INAD][0];
        } else if (jsonObj.qtdtls.rider[i]['name'] === "C4CI") {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.C4CI][0];
        } else if (jsonObj.qtdtls.rider[i]['name'] === "PPR_PAC") {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.PAC][0];
        } else if (jsonObj.qtdtls.rider[i]['name'] === "PPR_ADC") {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.ADC][0];
        } else if (jsonObj.qtdtls.rider[i]['name'] === "PPR_CC") {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.CC][0];
        } else if (jsonObj.qtdtls.rider[i]['name'] === QNIAPP.CONSTS.ELI) {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.ELI][0];
        } else if (jsonObj.qtdtls.rider[i]['name'] === "ECI4") {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.ECI4][0];
        }
        else if (jsonObj.qtdtls.rider[i]['name'] === "ECI25") {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.ECI25][0];
        }
        else if (jsonObj.qtdtls.rider[i]['name'] === "ETR") {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.ETR][0];
        }
        else if (jsonObj.qtdtls.rider[i]['name'] === "ADDDB") {
          jsonObj.qtdtls.rider[i]['name_cd'] = GQNI_RIDER[QNIAPP.CONSTS.ADDDB][0];
        }
      }
    }
    if (jsonObj.qtdtls.rider && QNIAPP.IN.id === 'HRN') {
      for (var i = 0; i < jsonObj.qtdtls.rider.length; i++) {
        if (jsonObj.qtdtls.rider[i]['name'] == QNIAPP.CONSTS.RRE) {
          jsonObj.qtdtls.rider[i]['premium'] = jsonObj.qtdtls.rrepremium + "";
          jsonObj.qtdtls.rider[i]['sumassured'] = jsonObj.qtdtls.sumAssured + "";
          jsonObj.qtdtls.rider[i]['sumAssured'] = jsonObj.qtdtls.sumAssured + "";
          jsonObj.qtdtls.rider[i]['term'] = jsonObj.qtdtls.term + "";
        } else if (jsonObj.qtdtls.rider[i]['name'] == QNIAPP.CONSTS.RB) {
          jsonObj.qtdtls.rider[i]['premium'] = jsonObj.qtdtls.rbpremium + "";
          jsonObj.qtdtls.rider[i]['sumassured'] = jsonObj.qtdtls.sumAssured + "";
          jsonObj.qtdtls.rider[i]['sumAssured'] = jsonObj.qtdtls.sumAssured + "";
          jsonObj.qtdtls.rider[i]['term'] = jsonObj.qtdtls.term + "";
        }
      };
    }


    if (GQNI_FREQ) {
      jsonObj.qtdtls.freq_cd = jsonObj.qtdtls.freq ? getMstr_pk(GQNI_FREQ, jsonObj.qtdtls.freq) : "";
    }
    if (QNIAPP.IN.touchpoint == 'OPS') {
      if (!(QNIAPP.IN.Qt.qtdtls.source && QNIAPP.IN.Qt.qtdtls.source != undefined && typeof QNIAPP.IN.Qt.qtdtls.source != "undefined" && QNIAPP.IN.Qt.qtdtls.source != "")) {
        if (typeof sessionStorage != "undefined" && typeof sessionStorage.source != "undefined" && (sessionStorage.getItem('source') !== null)) {
          var opsSource = sessionStorage.getItem('source').trim();
          if (opsSource === null || opsSource === "") {
            opsSource = QNIAPP.CONSTS.DEFAULT_SOURCE_CODE;
          }
          jsonObj.qtdtls.source = opsSource;
        }
      } else {
        //Set back source if link is copy pasted to other tab
        if (typeof sessionStorage != "undefined" && typeof sessionStorage.source != "undefined" && (sessionStorage.getItem('source') !== null)) {
          sessionStorage.setItem('source', QNIAPP.IN.Qt.qtdtls.source);
        }
      }
      if (QNIAPP.IN.Qt.qtdtls.agentcode && QNIAPP.IN.Qt.qtdtls.agentcode != undefined && typeof QNIAPP.IN.Qt.qtdtls.agentcode != "undefined" && QNIAPP.IN.Qt.qtdtls.agentcode != "") {
        //Set back agentcode if link is copy pasted to other tab
        if (typeof sessionStorage != "undefined" && typeof sessionStorage.agentcode != "undefined" && (sessionStorage.getItem('agentcode') !== null)) {
          sessionStorage.setItem('agentcode', QNIAPP.IN.Qt.qtdtls.agentcode);
        }
      }
      //Save urlPassedFlag to quote details clob
      if (!(QNIAPP.IN.Qt.qtdtls.urlPassedFlag && QNIAPP.IN.Qt.qtdtls.urlPassedFlag != undefined && typeof QNIAPP.IN.Qt.qtdtls.urlPassedFlag != "undefined" && QNIAPP.IN.Qt.qtdtls.urlPassedFlag != "")) {
        if (typeof sessionStorage != "undefined" && typeof sessionStorage.urlPassedFlag != "undefined" && (sessionStorage.getItem('urlPassedFlag') !== null)) {
          var opsURLPassedFlag = sessionStorage.getItem('urlPassedFlag').trim();
          jsonObj.qtdtls.urlPassedFlag = opsURLPassedFlag;
        } else {
          jsonObj.qtdtls.urlPassedFlag = "";
        }
      } else {
        //Set back urlPassedFlag if link is copy pasted to other tab
        if (typeof sessionStorage != "undefined" && (sessionStorage.getItem('urlPassedFlag') == null || sessionStorage.getItem('urlPassedFlag') == "")) {
          sessionStorage.setItem('urlPassedFlag', QNIAPP.IN.Qt.qtdtls.urlPassedFlag);
        }
      }
      if (jsonObj.qtdtls.urlPassedFlag) {
        jsonObj.urlPassedFlag = jsonObj.qtdtls.urlPassedFlag;
      }
    }
    if (jsonObj.qtdtls.source) {
      jsonObj.source = jsonObj.qtdtls.source;
    }

    if (jsonObj.qtdtls.mobno) {
      jsonObj.mobno = jsonObj.qtdtls.mobno;
    }
    if (jsonObj.qtdtls.mobnopre) {
      jsonObj.mobnopre = jsonObj.qtdtls.mobnopre;
    }
    if (jsonObj.qtdtls.benefit) {
      jsonObj.benefit = jsonObj.qtdtls.benefit;
    }

    if (jsonObj.qtdtls.prodcat == 'Investment') {
      QNIAPP.OUT.ST_RT = '0';
      QNIAPP.OUT.EC_RT = '0';
      QNIAPP.OUT.KTAX = '0';
    }
    if (jsonObj.qtdtls.tobstatus) {
      jsonObj.tobaccostatus = (jsonObj.qtdtls.tobstatus != "") ? (jsonObj.qtdtls.tobstatus == "1" ? "Y" : "N") : "";
    }
    if (jsonObj.qtdtls.pptopt) {
      jsonObj.pptoption = jsonObj.qtdtls.pptopt;
    }
    if (jsonObj.qtdtls.externalterm) {
      jsonObj.extterm = jsonObj.qtdtls.externalterm;
    }
    if (jsonObj.qtdtls.externaloption) {
      jsonObj.extopt = jsonObj.qtdtls.externaloption;
    }
    if (jsonObj.qtdtls.externalfreq) {
      jsonObj.qtdtls.extfreq = jsonObj.qtdtls.externalfreq ? getMstr_pk(GQNI_FREQ, jsonObj.qtdtls.externalfreq) : "";
    }
    if (/*QNIAPP.IN.touchpoint === "POS" &&*/ QNIAPP.IN.id === "IANP" || QNIAPP.IN.id === "PGNP" || QNIAPP.IN.id === "SARLP" || QNIAPP.IN.id === "SRP" || QNIAPP.IN.id == "SMPP" || QNIAPP.IN.id == "SMPPR" || QNIAPP.IN.id == "SMPPL" || QNIAPP.IN.id == "SMPPE" || QNIAPP.IN.id == "SMPPI") {
      jsonObj.qtdtls.option_cd = QNIAPP.IN.Qt.qtdtls.optioncode;//getMstr_pk(GQNI_ANNUITY_OPT_SL,jsonObj.qtdtls.option);
      jsonObj.qtdtls.annuity = QNIAPP.IN.Qt.qtdtls.annuity + ""; //annuity added in string-saurav
    }
    if (QNIAPP.IN.touchpoint !== "OPS" && QNIAPP.IN.Qt.qtdtls.benefit && QNIAPP.IN.id != 'UL7WP1') {
      jsonObj.qtdtls.option_cd = getMstr_pk(GQNI_BEN_OPT, jsonObj.qtdtls.benefit);
    }
    if (QNIAPP.IN.touchpoint === "OPS" && QNIAPP.IN.Qt.qtdtls.benefit && (QNIAPP.IN.id === 'UL7YS1' || QNIAPP.IN.id === 'YSUD' || QNIAPP.IN.id === 'UL7WP1' || QNIAPP.IN.id === 'UL8CIP')) {//Changes for proposal form option_cd issue by Gireesh 18DEC15 : CCN0167
      jsonObj.qtdtls.option_cd = getMstr_pk(GQNI_BEN_OPT, jsonObj.qtdtls.benefit);
    }
    if (QNIAPP.IN.chnlptnr === "Online" && QNIAPP.IN.Qt.qtdtls.benefit && QNIAPP.IN.id === 'UL8CIP') {
      jsonObj.qtdtls.option = getMstr_pk(GQNI_BEN_OPT, jsonObj.qtdtls.benefit);
    }
    if (QNIAPP.IN.chnlptnr === "Online" && (QNIAPP.IN.id == 'SANCHP' || QNIAPP.IN.id == 'SANCHPE')) {
      QNIAPP.IN.Qt.qtdtls['productoptions'] = QNIAPP.IN.Qt.qtdtls.plan ? QNIAPP.IN.Qt.qtdtls.plan : "";
    }
    /*if(QNIAPP.IN.chnlptnr === "Online" && QNIAPP.IN.Qt.qtdtls.productoptions && QNIAPP.IN.id === 'SANCHP'){
      jsonObj.qtdtls.option = getMstr_pk(GQNI_BEN_OPT,jsonObj.qtdtls.productoptions);
      jsonObj.qtdtls.option_cd = getMstr_pk(GQNI_BEN_OPT,jsonObj.qtdtls.productoptions);
    }*/
    if (QNIAPP.IN.id === "SAPLUSE" || QNIAPP.IN.id === "SAPLUSEE" || QNIAPP.IN.id === "SAPLUSEV9" || QNIAPP.IN.id === "SAPLUSEV9E") {
      jsonObj.qtdtls.option_cd = getMstr_pk(GQNI_BEN_OPT, jsonObj.qtdtls.plan);
    }
    if (QNIAPP.IN.id == 'C2PP' || QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
      if (QNIAPP.IN.Qt.qtdtls.option && QNIAPP.IN.Qt.qtdtls.suboption) {
        jsonObj.qtdtls.option_cd = QNIAPP.IN.Qt.qtdtls.option + " - " + QNIAPP.IN.Qt.qtdtls.suboption;
      }
      else if (QNIAPP.IN.Qt.qtdtls.option) {
        jsonObj.qtdtls.option_cd = QNIAPP.IN.Qt.qtdtls.option;
      }
    }
    if (typeof QNIAPP.IN.Qt.qtdtls.sumAssured != "undefined") {
      jsonObj.qtdtls.sumassured = QNIAPP.IN.Qt.qtdtls.sumAssured + "";
    }
    if (QNIAPP.IN.id == 'C2P3DP' || QNIAPP.IN.id == 'C2PH') {
      if (QNIAPP.IN.Qt.qtdtls.option) {
        jsonObj.qtdtls.option_cd = QNIAPP.IN.Qt.qtdtls.option;
      }
      if (jsonObj.qtdtls.elSumAssured) {
        jsonObj.qtdtls.elSumAssured = QNIAPP.IN.Qt.qtdtls.elSumAssured + "";
      }
      if (jsonObj.qtdtls.elMonthlyIncome) {
        jsonObj.qtdtls.elMonthlyIncome = QNIAPP.IN.Qt.qtdtls.elMonthlyIncome + "";
      }
      if (jsonObj.qtdtls.lumpsum) {
        jsonObj.qtdtls.lumpsum = QNIAPP.IN.Qt.qtdtls.lumpsum + "";
      }
      if (jsonObj.qtdtls.elLumpSum) {
        jsonObj.qtdtls.elLumpSum = QNIAPP.IN.Qt.qtdtls.elLumpSum + "";
      }
      if (jsonObj.qtdtls.monthlyIncome) {
        jsonObj.qtdtls.monthlyIncome = QNIAPP.IN.Qt.qtdtls.monthlyIncome + "";
      }
      if (jsonObj.qtdtls.elBaseSumAssured) {
        jsonObj.qtdtls.elBaseSumAssured = QNIAPP.IN.Qt.qtdtls.elBaseSumAssured + "";
      }
      if (jsonObj.qtdtls.baseSumAssured) {
        jsonObj.qtdtls.baseSumAssured = QNIAPP.IN.Qt.qtdtls.baseSumAssured + "";
      }
      if (jsonObj.qtdtls.elTerm) {
        jsonObj.qtdtls.elTerm = QNIAPP.IN.Qt.qtdtls.elTerm + "";
      }
      if (jsonObj.qtdtls.elPpt) {
        jsonObj.qtdtls.elPpt = QNIAPP.IN.Qt.qtdtls.elPpt + "";
      }
      if (jsonObj.qtdtls.elPremium) {
        jsonObj.qtdtls.elPremium = QNIAPP.IN.Qt.qtdtls.elPremium + "";
      }
      if (jsonObj.qtdtls.combinedPremium) {
        jsonObj.qtdtls.combinedPremium = QNIAPP.IN.Qt.qtdtls.combinedPremium + "";
      }
      if (jsonObj.qtdtls.annualInc) {
        jsonObj.qtdtls.annualInc = QNIAPP.IN.Qt.qtdtls.annualInc + "";
      }
      if (jsonObj.qtdtls.elAnnualInc) {
        jsonObj.qtdtls.elAnnualInc = QNIAPP.IN.Qt.qtdtls.elAnnualInc + "";
      }
    }
    if (QNIAPP.IN.id === "UL8NIV") {
      jsonObj.qtdtls.option_cd = getMstr_pk(GQNI_BEN_OPT, jsonObj.qtdtls.option);
    }
    if (QNIAPP.IN.id === QNIAPP.CONSTS.C2PL) {
      jsonObj.qtdtls.option_cd = getMstr_pk(GQNI_BEN_OPT, QNIAPP.P1C2PL_OPTIONS.getOption());
      if (QNIAPP.IN.Qt.qtdtls.productoptions == "" || typeof QNIAPP.IN.Qt.qtdtls.productoptions == "undefined") {
        jsonObj.qtdtls.productoptions = QNIAPP.P1C2PL_OPTIONS.getOption();
      }
    }
    if (QNIAPP.IN.id === "P1C2PS" || QNIAPP.IN.id === "P1C2PSE") {
      jsonObj.qtdtls.option_cd = getMstr_pk(GQNI_BEN_OPT, QNIAPP.P1C2PS_OPTIONS.getOption());
      if (QNIAPP.IN.Qt.qtdtls.productoptions == "" || typeof QNIAPP.IN.Qt.qtdtls.productoptions == "undefined") {
        jsonObj.qtdtls.productoptions = QNIAPP.P1C2PS_OPTIONS.getOption();
      }
    }
    if (QNIAPP.IN.id === "P2C2PEL" || QNIAPP.IN.id === "P2C2PELE") {
      jsonObj.qtdtls.option_cd = getMstr_pk(GQNI_BEN_OPT, QNIAPP.P2C2PEL_OPTIONS.getOption());
      if (QNIAPP.IN.Qt.qtdtls.productoptions == "" || typeof QNIAPP.IN.Qt.qtdtls.productoptions == "undefined") {
        jsonObj.qtdtls.productoptions = QNIAPP.P2C2PEL_OPTIONS.getOption();
      }
    }
    if (QNIAPP.IN.Qt.isDyn == 0 && (QNIAPP.IN.touchpoint != 'OPS' || (QNIAPP.IN.Qt.qtdtls.paymethod_cd == undefined && QNIAPP.IN.Qt.qtdtls.paymethod_cd == ""))) {
      if (GPOS_MODEOFPAYMENT && QNIAPP.IN.Qt.qtdtls.paymethod) {
        for (var mode in GPOS_MODEOFPAYMENT) {
          if (GPOS_MODEOFPAYMENT[mode][1] === jsonObj.qtdtls.paymethod) {
            jsonObj.qtdtls.paymethod_cd = mode;
            break;
          }
        }
      }
    }
    if (QNIAPP.OUT.nextPremDDt) {
      jsonObj.qtdtls['nextPremDDt'] = QNIAPP.OUT.nextPremDDt;
    }
    if (QNIAPP.IN.id === "IANP" || QNIAPP.IN.id === "HRN" || QNIAPP.IN.id === "PGNP" || QNIAPP.IN.id === "SARLP" || QNIAPP.IN.id === "SRP" || QNIAPP.IN.id == "SMPP" || QNIAPP.IN.id == "SMPPR" || QNIAPP.IN.id == "SMPPL" || QNIAPP.IN.id == "SMPPE" || QNIAPP.IN.id == "SMPPI") {
      jsonObj.qtdtls['tottax'] = (QNIAPP.OUT.apptax && QNIAPP.OUT.apptax !== "") ? QNIAPP.OUT.apptax + "" : "0";
    }
    else if (QNIAPP.OUT.txBkDt > QNIAPP.OUT.appTax) {
      jsonObj.qtdtls['tottax'] = (QNIAPP.OUT.txBkDt && QNIAPP.OUT.txBkDt !== "") ? QNIAPP.OUT.txBkDt + "" : "0";
    }
    else if (QNIAPP.OUT.appTax) {
      jsonObj.qtdtls['tottax'] = (QNIAPP.OUT.appTax && QNIAPP.OUT.appTax !== "") ? QNIAPP.OUT.appTax + "" : "0";
    } else {
      jsonObj.qtdtls['tottax'] = "0";
    }
    jsonObj.leadid = jsonObj.qtdtls.leadid;
    jsonObj.term = jsonObj.qtdtls.term;
    if (jsonObj.qtdtls.ppt && jsonObj.qtdtls.ppt !== "") {
      jsonObj.ppt = jsonObj.qtdtls.ppt;
    }
    jsonObj.dob = jsonObj.qtdtls.dob;
    jsonObj.qtdtls.spl = QNIAPP.IN.spl;
    if (QNIAPP.IN.combID && QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.combID)) {
      jsonObj.qtdtls.ctg = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.combID, 'ctg');
    } else {
      jsonObj.qtdtls.ctg = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ctg');
    }

    //	if((jsonObj.qtdtls.premium == null || jsonObj.qtdtls.premium == "") && QNIAPP.OUT.premium !=""){

    //	}
    if (QNIAPP.OUT.premium && QNIAPP.OUT.premium !== '0' && QNIAPP.OUT.premium != "" && QNIAPP.OUT.premium !== null) {
      jsonObj.qtdtls.premium = QNIAPP.OUT.premium + "";
    }
    if (QNIAPP.IN.id == 'UL8C2R' && QNIAPP.IN.Qt.qtdtls.corpus && QNIAPP.IN.Qt.qtdtls.corpus !== '0' && QNIAPP.IN.Qt.qtdtls.corpus != "" && QNIAPP.IN.Qt.qtdtls.corpus !== null) {
      jsonObj.qtdtls.corpus = QNIAPP.IN.Qt.qtdtls.corpus + "";
    }
    /*jsonObj.premium=jsonObj.qtdtls.premium && jsonObj.qtdtls.premium != "" ? jsonObj.qtdtls.premium : QNIAPP.OUT.premium+"" ;*/ // handled inside particular product
    if (jsonObj.qtdtls.benefit) {
      jsonObj.qtdtls.planoption = (QNIAPP.IN.id != 'UL7WP1' && QNIAPP.IN.id != 'UL7EA') ? (getMstr_pk(GQNI_BEN_OPT, QNIAPP.IN.Qt.qtdtls.benefit)) : '';
    }
    if (jsonObj.qtdtls.plan && (QNIAPP.IN.id == 'SAPLUSE' || QNIAPP.IN.id == 'SAPLUSEV9')) {
      jsonObj.qtdtls.planoption = getMstr_pk(GQNI_BEN_OPT, QNIAPP.IN.Qt.qtdtls.plan);
    }
    jsonObj.premium = (jsonObj.premium && jsonObj.premium != "" && jsonObj.premium != null) ? jsonObj.premium : "0";
    if (QNIAPP.IN.id == "IANP" || QNIAPP.IN.id == "PGNP" || QNIAPP.IN.id === "SARLP" || QNIAPP.IN.id == "SRP" || QNIAPP.IN.id == "SMPP" || QNIAPP.IN.id == "SMPPR" || QNIAPP.IN.id == "SMPPL" || QNIAPP.IN.id == "SMPPE" || QNIAPP.IN.id == "SMPPI") { jsonObj.qtdtls.totPremium = jsonObj.premium; }

    // applicale for ULIP pension so applied in ULIP pension product
    jsonObj.sumassured = jsonObj.qtdtls.sumAssured ? jsonObj.qtdtls.sumAssured : "0";

    jsonObj.appnum = jsonObj.qtdtls.appnum;
    jsonObj.product = (QNIAPP.IN.spl && QNIAPP.IN.spl != "-") ? QNIAPP.IN.spl : QNIAPP.IN.id;
    jsonObj.qtdtls.product = jsonObj.product;
    jsonObj.touchpoint = QNIAPP.IN.touchpoint;
    jsonObj.lifeassuredname = (name !== null && name.trim() !== "") ? name.trim() : "";
    if (QNIAPP.IN.id == 'HRN' && jsonObj.touchpoint != 'OPS') {
      var i = (QNIAPP.IN.Qt.qtdtls.isInsured == 0) ? 0 : 1;
      for (i; i < jsonObj.qtdtls.deps.length; i++) {
        var depsfName = jsonObj.qtdtls.deps[i].fname ? jsonObj.qtdtls.deps[i].fname : "";
        var depslName = jsonObj.qtdtls.deps[i].lname ? jsonObj.qtdtls.deps[i].lname : "";
        jsonObj.qtdtls.deps[i].fname = (depsfName !== null && depsfName.trim() !== "") ? depsfName.trim() : "";
        jsonObj.qtdtls.deps[i].lname = (depslName !== null && depslName.trim() !== "") ? depslName.trim() : "";
      }
    }
    //jsonObj.touchpoint=jsonObj.qtdtls.touchpoint;
    jsonObj.touchpoint = QNIAPP.IN.touchpoint;
    jsonObj.qtdtls.touchpoint = QNIAPP.IN.touchpoint;
    jsonObj.upsellsaveflag = 'SAVE';
    jsonObj.decisionid = '';
    if (jsonObj.qtdtls.suboption) {
      jsonObj.suboption = jsonObj.qtdtls.suboption;
    }
    if (QNIAPP.IN.touchpoint != 'OPS') {
      jsonObj.qtdtls.prodname = (QNIAPP.IN.spl && QNIAPP.IN.spl != "-") ? QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.spl, 'name') : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'name');
    }
    else {
      var id = (QNIAPP.IN.spl && QNIAPP.IN.spl != "-") ? QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.spl, 'id') : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'id');
      var prodCode = '';
      for (var i in GOPS_PRODUCT) {
        if (jQuery.inArray(i, QNIAPP.PRODUCT_DETAILS.get(id, 'prod_versions')) != -1) {
          prodCode = i;
        }
      };
      id = (QNIAPP.PRODUCT_DETAILS.get(id, 'prod_versions')) ? prodCode : id;
      jsonObj.qtdtls.prodname = GOPS_PRODUCT[id][1];
      QNIAPP.OUT.prodname = jsonObj.qtdtls.prodname;
    }
    //jsonObj.qtdtls.inscat = QNIAPP.IN.id === "HRN" ? "Health" : "Life";

    //Replace with GPOS_APPTYPE VARIABLE
    jsonObj.qtdtls.inscat = (QNIAPP.IN.id === "HRN" || QNIAPP.IN.id === "CANC" || QNIAPP.IN.id === "EAHT" || QNIAPP.IN.id === "CDAC") ? "APP_TYP_HEALTH" : "APP_TYP_LIFE";

    jsonObj.inscat = jsonObj.qtdtls.inscat;
    //jsonObj.instype=jsonObj.qtdtls.instype;
    jsonObj.paymethod = jsonObj.qtdtls.paymethod ? jsonObj.qtdtls.paymethod : "";
    if (jsonObj.qtdtls.prodcat) {
      jsonObj.prodcat = jsonObj.qtdtls.prodcat;
    }
    if (QNIAPP.OUT.txBkDt && QNIAPP.IN.Qt.qtdtls.jnk == '0') {
      jsonObj.qtdtls.ST_RT = QNIAPP.OUT.txBkDt + "";
    }
    else if (QNIAPP.OUT.ST_RT || QNIAPP.OUT.ST_RT == '0') {
      jsonObj.qtdtls.ST_RT = QNIAPP.OUT.ST_RT + "";
    }

    if (QNIAPP.OUT.SC_RT || QNIAPP.OUT.SC_RT == '0') {
      jsonObj.qtdtls.SC_RT = QNIAPP.OUT.SC_RT + "";
    }
    if (QNIAPP.OUT.EC_RT || QNIAPP.OUT.EC_RT == '0') {
      jsonObj.qtdtls.EC_RT = QNIAPP.OUT.EC_RT + "";
    }
    if (QNIAPP.OUT.GST_RT || QNIAPP.OUT.GST_RT == '0') {
      jsonObj.qtdtls.GST_RT = QNIAPP.OUT.GST_RT + "";
    }
    if (QNIAPP.OUT.KTAX || QNIAPP.OUT.KTAX == '0') {
      jsonObj.qtdtls.KTAX = QNIAPP.OUT.KTAX + "";
    }
    if (QNIAPP.OUT.firstPremium) {
      jsonObj.qtdtls.totPremium = QNIAPP.OUT.firstPremium + "";
      if (QNIAPP.OUT.firstriderPremium) {
        jsonObj.qtdtls.totPremium = QNIAPP.OUT.firstPremium + QNIAPP.OUT.firstriderPremium + "";
      }
    }
    else if (QNIAPP.OUT.totPremium) {
      jsonObj.qtdtls.totPremium = QNIAPP.OUT.totPremium + "";
    }
    if (QNIAPP.OUT.totAnnPremium) {
      jsonObj.qtdtls.totAnnPremium = QNIAPP.OUT.totAnnPremium + "";
    } else if (QNIAPP.OUT.annPremium) {
      jsonObj.qtdtls.totAnnPremium = QNIAPP.OUT.annPremium + "";
    }

    //if(jsonObj.qtdtls.benefit){
    QNIAPP.COMM_CALC.setBenefitStringForMagnum();
    // jsonObj.benefit = jsonObj.qtdtls.benefit;
    //}
    jsonObj.qtdtls.qniproduct = (QNIAPP.IN.spl && QNIAPP.IN.spl !== "-") ? QNIAPP.IN.spl : jsonObj.product;
    jsonObj.qniproduct = jsonObj.qtdtls.qniproduct;
    var latest_prod = QNIAPP.PRODUCT_DETAILS.get(jsonObj.product, "prod_versions");
    latest_prod = latest_prod[latest_prod.length - 1];
    if (latest_prod && latest_prod != "" && latest_prod != null) {
      jsonObj.product = latest_prod;
      jsonObj.qtdtls.product = latest_prod;
    }
    if (QNIAPP.IN.id == 'UL7WP1') {
      jsonObj.product = QNIAPP.UL7WP1_PRCODE.get(QNIAPP.IN.Qt.qtdtls.benefit);
      jsonObj.qtdtls.product = jsonObj.product;
    };
    if (QNIAPP.IN.id == 'IANP') {
      jsonObj.product = QNIAPP.IANP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      jsonObj.qtdtls.product = jsonObj.product;
    };
    if (QNIAPP.IN.id == 'PGNP') {
      jsonObj.product = QNIAPP.PGNP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.id == 'SARLP') {
      jsonObj.product = QNIAPP.SARLP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.id == 'SRP') {
      jsonObj.product = QNIAPP.SRP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.id == 'SMPP') {
      jsonObj.product = QNIAPP.SMPP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.id == 'SMPPR') {
      jsonObj.product = QNIAPP.SMPPR_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.id == 'SMPPL') {
      jsonObj.product = QNIAPP.SMPPL_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.id == 'SMPPE') {
      jsonObj.product = QNIAPP.SMPPE_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.id == 'SMPPI') {
      jsonObj.product = QNIAPP.SMPPI_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.id == 'SPP') {
      jsonObj.product = QNIAPP.SPP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptOption);
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.id == 'SARJB') {
      jsonObj.product = QNIAPP.SARJB_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
      jsonObj.qtdtls.product = jsonObj.product;
      if (QNIAPP.IN.spl && QNIAPP.IN.spl == "SARJBE") {
        jsonObj.qtdtls.prodname = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'name');
      }
    };
    if (QNIAPP.IN.id == 'C2PP') {
      jsonObj.product = QNIAPP.C2PP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt, QNIAPP.IN.chnlptnr);
      jsonObj.qtdtls.product = jsonObj.product;
    };
    if (QNIAPP.IN.id == 'C2P3DP') {
      jsonObj.product = QNIAPP.C2P3DP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt, QNIAPP.IN.chnlptnr);
      jsonObj.qtdtls.product = jsonObj.product;
    };
    if (QNIAPP.IN.id == 'C2PH') {
      jsonObj.product = QNIAPP.C2PH_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
      jsonObj.qtdtls.product = jsonObj.product;
      if (QNIAPP.IN.comb == 'C2TC') {
        jsonObj.product = QNIAPP.C2TC_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
        jsonObj.qtdtls.product = jsonObj.product;
        jsonObj.qtdtls.qniproduct = QNIAPP.IN.comb;
        jsonObj.qniproduct = QNIAPP.IN.comb;
        //thin combi name as click to protect health in clob
        jsonObj.qtdtls.prodname = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'name');

      }
    };
    if (QNIAPP.IN.id == 'UL8NIV') {
      jsonObj.product = QNIAPP.UL8NIV_PRCODE.get(QNIAPP.IN.spl === '-' ? false : true, QNIAPP.IN.Qt.qtdtls.pptOption);
      jsonObj.qtdtls.product = jsonObj.product;
    };
    if (QNIAPP.IN.id == 'YSUD') {
      jsonObj.qtdtls.product = (QNIAPP.IN.spl && QNIAPP.IN.spl !== '-') ? QNIAPP.YSUD_PLNID.getSPL(QNIAPP.IN.Qt.qtdtls.plan) : QNIAPP.YSUD_PLNID.get(QNIAPP.IN.Qt.qtdtls.plan);
      jsonObj.qtdtls.qniproduct = jsonObj.qtdtls.product;
      jsonObj.qniproduct = jsonObj.qtdtls.product;
      jsonObj.product = jsonObj.qtdtls.product;
    }
    if (QNIAPP.IN.id === QNIAPP.CONSTS.UNO) {
      jsonObj.product = QNIAPP.IUNO_PRCODE.get();
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.id === "SUPH" || QNIAPP.IN.id === "SUPHE") {
      jsonObj.product = QNIAPP.SUPH_PRCODE.get();
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.id === QNIAPP.CONSTS.CIP) {
      jsonObj.product = QNIAPP.UL8CIP_PRCODE.get();
      jsonObj.qtdtls.product = jsonObj.product;
      if (QNIAPP.IN.Qt.qtdtls.benefit === QNIAPP.CONSTS.PWO) {
        jsonObj.qtdtls.UWParty = 'Yes';
      } else {
        jsonObj.qtdtls.UWParty = 'No';
      }
    }

    if (QNIAPP.IN.id === "SANCHV9") {
      jsonObj.product = QNIAPP.SANCHV9_PRCODE.get();
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.id === "SIPPARV9") {
      jsonObj.product = QNIAPP.SIPPARV9_PRCODE.get();
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.id === QNIAPP.CONSTS.SANPAR) {
      jsonObj.product = QNIAPP.SANPAR_PRCODE.get();
      jsonObj.qtdtls.product = jsonObj.product;
    }
    if (QNIAPP.IN.combID && QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.combID)) {
      if (QNIAPP.IN.combID == 'C2PCK') {
        jsonObj.product = QNIAPP.CORONAK_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
        jsonObj.qtdtls.product = jsonObj.product;
        jsonObj.qtdtls.qniproduct = QNIAPP.IN.combID;
        jsonObj.qtdtls.prodname = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.combID, 'name');
      }
      if (QNIAPP.IN.combID == 'C2PCS') {
        jsonObj.product = QNIAPP.C2PCS_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
        jsonObj.qtdtls.product = jsonObj.product;
        jsonObj.qtdtls.qniproduct = QNIAPP.IN.combID;
        jsonObj.qtdtls.prodname = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.combID, 'name');
      }
      if (QNIAPP.IN.combID == 'C2POS') {
        jsonObj.product = QNIAPP.C2POS_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
        jsonObj.qtdtls.product = jsonObj.product;
        jsonObj.qtdtls.qniproduct = QNIAPP.IN.combID;
        jsonObj.qtdtls.prodname = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.combID, 'name');
      }
      if (QNIAPP.IN.combID == 'C1C2PLH' || QNIAPP.IN.combID == 'C1C2PLHE') {
        if (QNIAPP.IN.spl && QNIAPP.IN.spl == "-") {
          QNIAPP.IN.combID = 'C1C2PLH';
        }
        jsonObj.product = QNIAPP.IN.combID;
        jsonObj.qtdtls.product = QNIAPP.IN.combID;
        jsonObj.qtdtls.qniproduct = QNIAPP.IN.combID;
        jsonObj.qtdtls.prodname = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.combID, 'name');
      }
    }

    if (QNIAPP.IN.Qt.qtdtls.leaddata && QNIAPP.IN.Qt.qtdtls.leaddata.subchnl && QNIAPP.IN.Qt.qtdtls.leaddata.subchnl == "CSRM") {
      if (QNIAPP.IN.Qt.qtdtls.freq == "Monthly") {
        jsonObj.qtdtls.prmmulfactor = "1";
      }
      else {
        jsonObj.qtdtls.prmmulfactor = "";
      }
    }

    if (jsonObj.qtdtls.prodcat === 'Investment' || QNIAPP.IN.id === 'UL7YS1') {

      if (QNIAPP.IN.id === 'UL7WP1' || QNIAPP.IN.id === 'UL7WI1' || QNIAPP.IN.id === 'UL7ENT') {
        if (window['QNIAPP'][QNIAPP.IN.id + "_MINSA"] && window['QNIAPP'][QNIAPP.IN.id + "_MINSA"]['get'](jsonObj.qtdtls.age, QNIAPP.OUT.annPremium)) {
          var min_sa = window['QNIAPP'][QNIAPP.IN.id + "_MINSA"]['get'](jsonObj.qtdtls.age, QNIAPP.OUT.annPremium);
          jsonObj.minfactor = min_sa / QNIAPP.OUT.annPremium + "";
          jsonObj.qtdtls.minfactor = jsonObj.minfactor;
        }
      } else {
        if (window['QNIAPP'][QNIAPP.IN.id + "_MINSA"] && window['QNIAPP'][QNIAPP.IN.id + "_MINSA"]['get'](jsonObj.qtdtls.age, jsonObj.qtdtls.term, QNIAPP.OUT.annPremium)) {
          var min_sa = window['QNIAPP'][QNIAPP.IN.id + "_MINSA"]['get'](jsonObj.qtdtls.age, jsonObj.qtdtls.term, QNIAPP.OUT.annPremium);
          jsonObj.minfactor = min_sa / QNIAPP.OUT.annPremium + "";
          jsonObj.qtdtls.minfactor = jsonObj.minfactor;
        } else {
          if (QNIAPP.IN.id === 'UL7ESP3') {
            jsonObj.minfactor = "1.25";
            jsonObj.qtdtls.minfactor = "1.25";
          } else if (QNIAPP.IN.id === 'UL8C2I') {
            jsonObj.minfactor = (QNIAPP.IN.Qt.qtdtls.sumAssured / QNIAPP.IN.Qt.qtdtls.premium) + "";
            jsonObj.qtdtls.minfactor = jsonObj.minfactor;
          } else if (QNIAPP.IN.id === QNIAPP.CONSTS.UNO) {
            jsonObj.minfactor = window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'sa_fac')]['get']('min_sa');
            jsonObj.qtdtls.minfactor = jsonObj.minfactor;
          } else if (QNIAPP.IN.id === 'UL8NIV') {
            jsonObj.minfactor = window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'minfactor')]['get']();
            jsonObj.qtdtls.minfactor = jsonObj.minfactor;
          } else {
            jsonObj.minfactor = "1";
            jsonObj.qtdtls.minfactor = "1";
          }
        }
      }
      jsonObj.annpremium = QNIAPP.OUT.annPremium + "";
    };

    if (QNIAPP.IN.id === 'UL8CG' || QNIAPP.IN.id === 'UL9CG') {
      var freq_mult = QNIAPP.COMM_PARMS.getFreqMultiplier();
      var ann_prem_val = freq_mult[QNIAPP.IN.Qt.qtdtls.freq] * (typeof (QNIAPP.IN.Qt.qtdtls.premium) === 'string' ? parseFloat(removeCommas(QNIAPP.IN.Qt.qtdtls.premium)) : QNIAPP.IN.Qt.qtdtls.premium);
      var sa_obj = QNIAPP.UL8CG_SA.getSALimits(QNIAPP.IN.Qt.qtdtls.age, QNIAPP.IN.Qt.qtdtls.term, ann_prem_val, QNIAPP.IN.Qt.qtdtls.pptOption);
      samin_val = sa_obj['min_sa'];
      jsonObj.minfactor = samin_val / QNIAPP.OUT.annPremium + "";
      jsonObj.qtdtls.minfactor = jsonObj.minfactor;
    }

    if (jsonObj.qtdtls.freq) {
      jsonObj.freq = jsonObj.qtdtls.freq;
    }
    //jsonObj.premium = jsonObj.qtdtls.totPremium ? jsonObj.qtdtls.totPremium : jsonObj.premium;
    if (QNIAPP.IN.id === "IANP" || QNIAPP.IN.id === "PGNP" || QNIAPP.IN.id === "SARLP" || QNIAPP.IN.id == "SRP" || QNIAPP.IN.id == "SMPP" || QNIAPP.IN.id == "SMPPR" || QNIAPP.IN.id == "SMPPL" || QNIAPP.IN.id == "SMPPE" || QNIAPP.IN.id == "SMPPI") {
      jsonObj.premium = jsonObj.qtdtls.premium;
      jsonObj.qtdtls.totPremium = jsonObj.qtdtls.premium;
    }
    //For Illustration Channel Name
    if (QNIAPP.IN.chnlptnr) {
      QNIAPP.OUT.chMap = QNIAPP.PRODUCT_DETAILS.getChMapForIllustration(QNIAPP.IN.chnlptnr);
    } else {
      QNIAPP.OUT.chMap = '';
    }
    if (QNIAPP.IN.id === "CANC") {
      QNIAPP.IN.Qt.plan = QNIAPP.IN.Qt.qtdtls.plan;
    }
    if (jsonObj.qtdtls.gstWaiver) {
      jsonObj.gstWaiver = jsonObj.qtdtls.gstWaiver;
    }
    if (jsonObj.qtdtls.isnpFlg) {
      jsonObj.isnpFlg = jsonObj.qtdtls.isnpFlg;
    }

  };

  COMM_CALC.getExtProductCode = function () {
    var prod = "";
    prod = (QNIAPP.IN.spl && QNIAPP.IN.spl != "-") ? QNIAPP.IN.spl : QNIAPP.IN.id;
    if (QNIAPP.IN.id == 'UL7WP1') {
      prod = QNIAPP.UL7WP1_PRCODE.get(QNIAPP.IN.Qt.qtdtls.benefit);

    } else if (QNIAPP.IN.id == 'IANP') {
      prod = QNIAPP.IANP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);

    } else if (QNIAPP.IN.id == 'PGNP') {
      prod = QNIAPP.PGNP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
    } else if (QNIAPP.IN.id == 'SARLP') {
      prod = QNIAPP.SARLP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
    } else if (QNIAPP.IN.id == 'SRP') {
      prod = QNIAPP.SRP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
    } else if (QNIAPP.IN.id == 'SMPP') {
      prod = QNIAPP.SMPP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
    } else if (QNIAPP.IN.id == 'SMPPR') {
      prod = QNIAPP.SMPPR_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
    } else if (QNIAPP.IN.id == 'SMPPL') {
      prod = QNIAPP.SMPPL_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
    } else if (QNIAPP.IN.id == 'SMPPE') {
      prod = QNIAPP.SMPPE_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
    } else if (QNIAPP.IN.id == 'SMPPI') {
      prod = QNIAPP.SMPPI_PRCODE.get(QNIAPP.IN.Qt.qtdtls.option);
    } else if (QNIAPP.IN.id == 'SARJB') {
      prod = QNIAPP.SARJB_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
    } else if (QNIAPP.IN.id == 'C2PP') {
      prod = QNIAPP.C2PP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
    } else if (QNIAPP.IN.id == 'C2P3DP') {
      if (QNIAPP.IN.combID && QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.combID)) {
        prod = QNIAPP.CORONAK_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
      } else {
        prod = QNIAPP.C2P3DP_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
      }
    } else if (QNIAPP.IN.id == 'UL8NIV') {
      prod = QNIAPP.UL8NIV_PRCODE.get(QNIAPP.IN.spl === '-' ? false : true, QNIAPP.IN.Qt.qtdtls.pptOption);
    }
    else if (QNIAPP.IN.id == 'C2PH') {
      prod = QNIAPP.C2PH_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
      prod = QNIAPP.C2TC_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
    } else if (QNIAPP.IN.id === QNIAPP.CONSTS.SANPAR) {
      prod = QNIAPP.SANPAR_PRCODE.get();
    } else if (QNIAPP.IN.id == 'P1C2PL' && QNIAPP.IN.combID && QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.combID)) {
      prod = QNIAPP.IN.combID;
      if (QNIAPP.IN.combID == "C2PCS") {
        prod = QNIAPP.C2PCS_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
      }
      if (QNIAPP.IN.combID == "C2POS") {
        prod = QNIAPP.C2POS_PRCODE.get(QNIAPP.IN.Qt.qtdtls.pptopt);
      }
    }
    else {
      var latest_prod = QNIAPP.PRODUCT_DETAILS.get(prod, "prod_versions");
      latest_prod = latest_prod[latest_prod.length - 1];
      if (latest_prod && latest_prod != "" && latest_prod != null) {
        prod = latest_prod;
      }
    }
    return prod;
  };
  COMM_CALC.getValueFromQtDtlsRider = function (key) {
    var premiumamt = 0;
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']) || QNIAPP.IN.id == 'C2P3DP' || QNIAPP.IN.id == 'C2PH' || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "EP") {
          premiumamt += parseFloat(COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], key));
        }
      }
    }
    return premiumamt;
  };

  COMM_CALC.getValuefromExternalObj = function (key) {
    if (QNIAPP.IN.Qt.qtdtls.externalOBJ && QNIAPP.IN.Qt.qtdtls.externalOBJ.length > 0) {
      return QNIAPP.IN.Qt.qtdtls.externalOBJ[0][key];
    } else {
      return '';
    }
  };

  COMM_CALC.calculateRiderPremiumandTax = function () {
    var riderPremium = 0;
    var ridertax = 0;
    var totamtnt = 0;
    var appTax = (QNIAPP.OUT.appTax) ? QNIAPP.OUT.appTax : 0;
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']) || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "EP") {
          riderPremium += parseInt(COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'premium'));
          ridertax += parseInt(COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'tax'));
        }
      }
    }
    if (QNIAPP.IN.id == "C2P3DP") {
      totamtnt = QNIAPP.OUT.combinedPremium + QNIAPP.OUT.appTax + riderPremium + ridertax;
    } else {
      totamtnt = QNIAPP.OUT.premium + appTax + riderPremium + ridertax;
    }
    QNIAPP.OUT.riderPremium = riderPremium;
    QNIAPP.OUT.ridertax = ridertax;
    QNIAPP.OUT.premiumwithRider = QNIAPP.OUT.premium + riderPremium;
    QNIAPP.OUT.appTaxRider = appTax + ridertax;
    QNIAPP.OUT.totPremiumWithRider = riderPremium + ridertax;
    QNIAPP.OUT.totamtnt = totamtnt;

    QNIAPP.OUT.nxtYrTax = (QNIAPP.OUT.appTax == '0') ? 0 : (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ktx_2yr_rt'))) : Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'tx_2yr_rt')));
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
      QNIAPP.OUT['nxtYrRiderTax'] = 0;
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) {
          QNIAPP.OUT['nxtYrRiderTax'] += Math.round(parseInt(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'premium') * (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'st_rt'))));	 // will change if rider premium is to be considered
        }
      }
      QNIAPP.OUT.nxtYrTax = QNIAPP.OUT.nxtYrTax + QNIAPP.OUT['nxtYrRiderTax'];
    }


    return totamtnt;
  };

  COMM_CALC.getValueFromQtDtls = function (key) {
    if (QNIAPP.IN.Qt.qtdtls[key] && QNIAPP.IN.Qt.qtdtls[key] !== "") {
      return QNIAPP.IN.Qt.qtdtls[key];
    } else if (QNIAPP.IN.Qt[key] && QNIAPP.IN.Qt[key] !== "") {
      return QNIAPP.IN.Qt[key];
    } else {
      return "";
    }
  };

  //Mymix Changes for OPS starts
  COMM_CALC.prepareMymixClobOPS = function (mymixObj) {
    mymixObj['head'] = {};
    mymixObj['body'] = {};
    mymixObj['head']['userid'] = "";
    mymixObj['body']['product'] = {};
    mymixObj['body']['mymixprod'] = (QNIAPP.IN.Qt.qtdtls.c2insaflag == "Y") ? "C2INSA" : (QNIAPP.IN.Qt.qtdtls.c2insfmpflag == "Y") ? "C2INSFMP" : (QNIAPP.IN.Qt.qtdtls.c2wnsaflag == "Y") ? "C2WNSA" : (QNIAPP.IN.Qt.qtdtls.sanmaxflag == "Y") ? "SANMAX" : (QNIAPP.IN.Qt.qtdtls.c2ppsancombo == "Y") ? "PROTS" : "C2PRN";
    mymixObj['body']['mymixquoteid'] = COMM_CALC.getValueFromQtDtls("mymixid");
    mymixObj['body']['DOB'] = COMM_CALC.getValueFromQtDtls("dob");
    mymixObj['body']['age'] = JSON.stringify(COMM_CALC.getValueFromQtDtls("age"));
    mymixObj['body']['qtdt'] = COMM_CALC.getValueFromQtDtls("qtDt");
    mymixObj['body']['gender'] = COMM_CALC.getValueFromQtDtls("gender");
    mymixObj['body']['name'] = COMM_CALC.getValueFromQtDtls("fname") + " " + COMM_CALC.getValueFromQtDtls("lname");
    mymixObj['body']['nationality'] = COMM_CALC.getValueFromQtDtls("nationality");
    mymixObj['body']['residentstatus'] = COMM_CALC.getValueFromQtDtls("residentstatus");
    mymixObj['body']['country'] = COMM_CALC.getValueFromQtDtls("cntry");
    mymixObj['body']['premiumbudget'] = COMM_CALC.getValueFromQtDtls("premium");
    mymixObj['body']['totpremium'] = JSON.stringify(COMM_CALC.getValueFromQtDtls("totalPremium"));
    mymixObj['body']['agentid'] = COMM_CALC.getValueFromQtDtls("agentcode");
    mymixObj['body']['agentname'] = "ABC";
    mymixObj['body']['state'] = "";
    mymixObj['body']['flodoxid'] = "";
    mymixObj['body']['chnlptnr'] = COMM_CALC.getValueFromQtDtls("chnlptnr");
    mymixObj['body']['email'] = COMM_CALC.getValueFromQtDtls("email");
    mymixObj['body']['mobileno'] = COMM_CALC.getValueFromQtDtls("mobno");
    mymixObj['body']['touchpoint'] = COMM_CALC.getValueFromQtDtls("touchpoint");
    mymixObj['body']['sumassured'] = JSON.stringify(COMM_CALC.getValueFromQtDtls("totalsumAssured"));
    var funds = COMM_CALC.getValueFromQtDtls("fund");
    /*for(var i =0;i<funds.length;i++){
      funds[i]['name'] = funds[i]['name'].replace(/([A-Z])/g, ' $1').trim()
    }*/
    mymixObj['body']['product'] = [
      {
        "prodcode": COMM_CALC.getValueFromQtDtls("parentProdcd"),
        "sumassured": COMM_CALC.getValueFromQtDtls("parentsumAssured"),
        "premium": COMM_CALC.getValueFromQtDtls("parentPremium"),
        "tax": COMM_CALC.getValueFromQtDtls("parentTax"),
        "totPremium": COMM_CALC.getValueFromQtDtls("parenttotPremium"),
        "premium1": COMM_CALC.getValueFromQtDtls(""),
        "premium2": COMM_CALC.getValueFromQtDtls(""),
        "planoption": (QNIAPP.IN.Qt.qtdtls.c2insfmpflag == "Y") ? COMM_CALC.getValueFromQtDtls("plan") : (QNIAPP.IN.Qt.qtdtls.sanmaxflag == "Y") ? COMM_CALC.getValueFromQtDtls("parentPlan") : COMM_CALC.getValueFromQtDtls("parentOption"),
        "ppt": COMM_CALC.getValueFromQtDtls("ppt"),
        "payoption": COMM_CALC.getValueFromQtDtls("pptopt"),
        "term": COMM_CALC.getValueFromQtDtls("term"),
        "payfreq": COMM_CALC.getValueFromQtDtls("freq"),
        "futurepaymethod": COMM_CALC.getValueFromQtDtls(""),
        "deathBenefitMultiple": COMM_CALC.getValueFromQtDtls("deathBenefitMultiple"),
        "jlflag": COMM_CALC.getValueFromQtDtls("jlflag"),
        "tobstatus": COMM_CALC.getValueFromQtDtls("tobstatus")
      },
      {
        "prodcode": COMM_CALC.getValueFromQtDtls("qniproduct"),
        "sumassured": COMM_CALC.getValueFromQtDtls("sumAssured"),
        "premium": COMM_CALC.getValueFromQtDtls("premium"),
        "tax": COMM_CALC.getValueFromQtDtls("tottax"),
        "totPremium": COMM_CALC.getValueFromQtDtls("totPremium"),
        "premium1": COMM_CALC.getValueFromQtDtls(""),
        "premium2": COMM_CALC.getValueFromQtDtls(""),
        "planoption": (QNIAPP.IN.Qt.qtdtls.sanmaxflag == "Y") ? COMM_CALC.getValueFromQtDtls("plan") : COMM_CALC.getValueFromQtDtls(""),
        "ppt": COMM_CALC.getValueFromQtDtls("ppt"),
        "payoption": COMM_CALC.getValueFromQtDtls("pptopt"),
        "term": COMM_CALC.getValueFromQtDtls("term"),
        "payfreq": COMM_CALC.getValueFromQtDtls("freq"),
        "futurepaymethod": COMM_CALC.getValueFromQtDtls(""),
        "fund": COMM_CALC.getValueFromQtDtls("fund"),
        //"rider": COMM_CALC.getValueFromQtDtls("rider"),
        "deathBenefitMultiple": COMM_CALC.getValueFromQtDtls("deathBenefitMultiple"),
        "jlflag": COMM_CALC.getValueFromQtDtls("jlflag"),
        "tobstatus": COMM_CALC.getValueFromQtDtls("tobstatus")
      }];
    if (QNIAPP.IN.Qt.qtdtls.sanmaxflag == "Y") {
      mymixObj['body']['product'][0]['term'] = COMM_CALC.getValueFromQtDtls("parentterm");
      mymixObj['body']['product'][0]['pyfrequency'] = COMM_CALC.getValueFromQtDtls("pyfrequency");
      mymixObj['body']['product'][0]['SurvPyOpt'] = COMM_CALC.getValueFromQtDtls("SurvPyOpt");
      mymixObj['body']['product'][1]['pyfrequency'] = COMM_CALC.getValueFromQtDtls("pyfrequency");
      mymixObj['body']['product'][1]['SurvPyOpt'] = COMM_CALC.getValueFromQtDtls("SurvPyOpt");
    }
  };

  //Mymix changes for OPS ends

  COMM_CALC.prepareProposerDetails = function (reqObj) {
    reqObj['body']['quote']['quotedtls']['lifeassured'] = reqObj['body']['lifeassured'];
    reqObj['body']['quote']['quotedtls']['proposer']['fname'] = COMM_CALC.getValueFromQtDtls("pfname");
    reqObj['body']['quote']['quotedtls']['proposer']['lname'] = COMM_CALC.getValueFromQtDtls("plname");
    reqObj['body']['quote']['quotedtls']['proposer']['mobno'] = COMM_CALC.getValueFromQtDtls("pmobno");
    reqObj['body']['quote']['quotedtls']['proposer']['pan_status'] = COMM_CALC.getValueFromQtDtls("pan_status");
    reqObj['body']['quote']['quotedtls']['proposer']['panno'] = COMM_CALC.getValueFromQtDtls("panno");
    reqObj['body']['quote']['quotedtls']['proposer']['mobnopre'] = COMM_CALC.getValueFromQtDtls("pmobnopre");
    reqObj['body']['quote']['quotedtls']['proposer']['email'] = COMM_CALC.getValueFromQtDtls("pemail");
    reqObj['body']['quote']['quotedtls']['proposer']['city'] = COMM_CALC.getValueFromQtDtls("pcity");
    reqObj['body']['quote']['quotedtls']['proposer']['state'] = COMM_CALC.getValueFromQtDtls("pstate");
    reqObj['body']['quote']['quotedtls']['proposer']['cntry'] = COMM_CALC.getValueFromQtDtls("pcntry");
    reqObj['body']['quote']['quotedtls']['proposer']['state_other'] = COMM_CALC.getValueFromQtDtls("pstate_other");
    reqObj['body']['quote']['quotedtls']['proposer']['city_other'] = COMM_CALC.getValueFromQtDtls("pcity_other");
    reqObj['body']['quote']['quotedtls']['proposer']['residentstatus'] = COMM_CALC.getValueFromQtDtls("presidentstatus");
    reqObj['body']['quote']['quotedtls']['proposer']['nationality'] = COMM_CALC.getValueFromQtDtls("pnationality");
    if (QNIAPP.IN.chnlptnr == 'Bancassurance - Yes Bank' && QNIAPP.IN.Qt.qtdtls.proposerBuyingForItself == 'No' && QNIAPP.IN.Qt.qtdtls.prodcat == 'Health' && Yes_Ins_Cat != 'BUS_INS' && Yes_Ins_Cat != 'NoCat') {
      reqObj['body']['quote']['quotedtls']['proposer']['residentstatus'] = _YESCustResults.body.customerDetails.residentialStatus;
      reqObj['body']['quote']['quotedtls']['proposer']['cntry'] = _YESCustResults.body.customerDetails.country;
      if (_YESCustResults.body.customerDetails.country == 'CNTRY_IND') {
        reqObj['body']['quote']['quotedtls']['proposer']['state'] = _YESCustResults.body.customerDetails.state;
      } else if (_YESCustResults.body.customerDetails.country != 'CNTRY_IND') {
        reqObj['body']['quote']['quotedtls']['proposer']['state_other'] = QNIAPP.IN.yesCustData.body.customerDetails.state;
      }
      reqObj['body']['quote']['quotedtls']['proposer']['city'] = _YESCustResults.body.customerDetails.city;
      //reqObj['body']['quote']['quotedtls']['proposer']['city_other']=_YESCustResults.body.customerDetails.city;
    }


  };
  COMM_CALC.prepareRequest = function (reqObj) {
    if (QNIAPP.IN.Qt.qtdtls.touchpoint == "OPS" && (GFWK_APP_ID && GFWK_APP_ID !== 'wms')) {
      if (QNIAPP.IN.Qt.qtdtls.nri == '1')
        QNIAPP.IN.Qt.qtdtls.residentstatus = "RESS_NRI";
      else {
        QNIAPP.IN.Qt.qtdtls.residentstatus = "RESS_RI";
        QNIAPP.IN.Qt.qtdtls.cntry = "CNTRY_IND";
      }
      QNIAPP.IN.Qt.qtdtls.nationality = "NATION_IND_CD";


      if (QNIAPP.IN.Qt.qtdtls.proposerBuyingForItself == "Yes") {
        QNIAPP.IN.Qt.qtdtls.pnri = QNIAPP.IN.Qt.qtdtls.nri;
      }
      if (QNIAPP.IN.Qt.qtdtls.pnri == '1')
        QNIAPP.IN.Qt.qtdtls.presidentstatus = "RESS_NRI";
      else {
        QNIAPP.IN.Qt.qtdtls.presidentstatus = "RESS_RI";
        QNIAPP.IN.Qt.qtdtls.pcntry = "CNTRY_IND";
      }


      QNIAPP.IN.Qt.qtdtls.pnationality = "NATION_IND_CD";
    };

    if (QNIAPP.IN.Qt.qtdtls.touchpoint == "OPS" && (GFWK_APP_ID && GFWK_APP_ID == 'wms')) {

      if (typeof QNIAPP.IN.Qt.qtdtls.residentstatus == undefined)
        QNIAPP.IN.Qt.qtdtls.residentstatus = "RESS_RI";

      if (typeof QNIAPP.IN.Qt.qtdtls.presidentstatus == undefined)
        QNIAPP.IN.Qt.qtdtls.presidentstatus = "RESS_RI";

      if (typeof QNIAPP.IN.Qt.qtdtls.nationality == undefined)
        QNIAPP.IN.Qt.qtdtls.nationality = "NATION_IND_CD";

      if (typeof QNIAPP.IN.Qt.qtdtls.pnationality == undefined)
        QNIAPP.IN.Qt.qtdtls.pnationality = "NATION_IND_CD";

    }
    reqObj['body'] = {};
    reqObj['body']['quote'] = {};
    reqObj['body']['quote']['quotedtls'] = {};
    reqObj['body']['optioncd'] = COMM_CALC.getValueFromQtDtls("option_cd");
    var top_up = COMM_CALC.getValueFromQtDtls("topup") !== "" ? COMM_CALC.getValueFromQtDtls("topup") : [];
    reqObj['body']['topup'] = [];
    QNIAPP.IN.Qt.qtdtls.uin = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'uin');
    reqObj['body']['quote']['quotedtls']['uin'] = QNIAPP.IN.Qt.qtdtls.uin;
    if (top_up.length > 0) {
      var topup_obj = {};
      for (var i = 1; i < top_up.length; i++) {   // i=1 : Top-Up starts from year 1
        topup_obj['year'] = i + "";
        topup_obj['amt'] = top_up[i] + "";
        if (isNaN(topup_obj['amt'])) {
          topup_obj['amt'] = "0";
        }
        reqObj['body']['topup'].push(topup_obj);
        topup_obj = {};
      }
    }

    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        $.each(QNIAPP.IN.Qt.qtdtls.rider[i], function (key, value) {
          if (key != 'name' && key != 'deleteflg' && key != 'pptopt' && key != 'deleteflg') {
            QNIAPP.IN.Qt.qtdtls.rider[i][key] = value.toString();
          }
        });
      }

    }
    if (QNIAPP.IN.id == "EGII" || QNIAPP.IN.id == "EGIIE") {
      if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
        QNIAPP.IN.Qt.qtdtls['baseRdrPrem'] = parseInt(QNIAPP.IN.Qt.qtdtls.nonDiscpremium) + (QNIAPP.OUT.RD.is_c4ci ? QNIAPP.OUT.c4ciPremWotDisc : 0) + (QNIAPP.OUT.RD.is_inad ? QNIAPP.COMM_CALC.getRiderDetailsbyCode('INAD', 'premium') : 0) + (QNIAPP.OUT.RD.is_pac ? QNIAPP.COMM_CALC.getRiderDetailsbyCode('PPR_PAC', 'premium') : 0) + (QNIAPP.OUT.RD.is_adc ? QNIAPP.COMM_CALC.getRiderDetailsbyCode('PPR_ADC', 'premium') : 0) + (QNIAPP.OUT.RD.is_cc ? QNIAPP.COMM_CALC.getRiderDetailsbyCode('PPR_CC', 'premium') : 0);
        QNIAPP.IN.Qt.qtdtls.baseRdrPrem = QNIAPP.IN.Qt.qtdtls.baseRdrPrem.toString();
      }
      else {
        QNIAPP.IN.Qt.qtdtls['baseRdrPrem'] = QNIAPP.IN.Qt.qtdtls.nonDiscpremium;
      }

    }
    if (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE") {
      debugger;
      var premWodis = 0;
      var nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(Math.round(QNIAPP.OUT.premwodisc) * (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt'] + QNIAPP.P1C2PS_KTAX.get()['ktax2yr'])) : Math.round(Math.round(QNIAPP.OUT.premwodisc) * (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt']));
      if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
        premWodis = QNIAPP.OUT.premwodisc;
        QNIAPP.IN.Qt.qtdtls['baseRdrPrem'] = (Math.round(premWodis) + parseInt(nxtyrtaxbase)) + (QNIAPP.OUT.RD.is_c4ci ? (QNIAPP.OUT.c4ciPremWotDisc + QNIAPP.OUT.c4ciTaxWotDisc) : 0) + (QNIAPP.OUT.RD.is_inad ? (QNIAPP.COMM_CALC.getRiderDetailsbyCode('INAD', 'premium') + QNIAPP.COMM_CALC.getRiderDetailsbyCode('INAD', 'tax')) : 0) + (QNIAPP.OUT.RD.is_pac ? (QNIAPP.COMM_CALC.getRiderDetailsbyCode('PPR_PAC', 'premium') + QNIAPP.COMM_CALC.getRiderDetailsbyCode('PPR_PAC', 'tax')) : 0) + (QNIAPP.OUT.RD.is_adc ? (QNIAPP.COMM_CALC.getRiderDetailsbyCode('PPR_ADC', 'premium') + QNIAPP.COMM_CALC.getRiderDetailsbyCode('PPR_ADC', 'tax')) : 0) + (QNIAPP.OUT.RD.is_cc ? (QNIAPP.COMM_CALC.getRiderDetailsbyCode('PPR_CC', 'premium') + QNIAPP.COMM_CALC.getRiderDetailsbyCode('PPR_CC', 'tax')) : 0);//+(QNIAPP.OUT.RD.is_cci?(QNIAPP.OUT.HprPremWotDisc+QNIAPP.OUT.HprTaxWotDisc):0);
        QNIAPP.IN.Qt.qtdtls.baseRdrPrem = QNIAPP.IN.Qt.qtdtls.baseRdrPrem.toString();
      }
      else {
        premWodis = QNIAPP.OUT.premwodisc;
        QNIAPP.IN.Qt.qtdtls['baseRdrPrem'] = (Math.round(premWodis) + parseInt(nxtyrtaxbase));
        QNIAPP.IN.Qt.qtdtls.baseRdrPrem = QNIAPP.IN.Qt.qtdtls.baseRdrPrem.toString();
      }

    }
    //Temporary
    if ((!(COMM_CALC.getValueFromQtDtls("totAnnPremium"))) && (QNIAPP.IN.id != 'IANP' && QNIAPP.IN.id != 'PGNP' && QNIAPP.IN.id != 'SARLP')) {
      var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };;
      QNIAPP.IN.Qt.qtdtls.totAnnPremium = COMM_CALC.getValueFromQtDtls("totPremium") * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
      QNIAPP.IN.Qt.totAnnPremium = COMM_CALC.getValueFromQtDtls("totPremium") * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
    }
    if (QNIAPP.IN.id !== 'UL7WP1') {
      reqObj['body']['lifeassured'] = QNIAPP.IN.Qt.qtdtls.deps ? JSON.parse(JSON.stringify(QNIAPP.IN.Qt.qtdtls.deps)) : [];
    } else {
      reqObj['body']['lifeassured'] = [];
    }
    if (QNIAPP.IN.id === 'UL7YS1' || QNIAPP.IN.id === 'YSUD') {
      reqObj['body']['options'] = QNIAPP.IN.Qt.qtdtls.benefit;
    }

    if (QNIAPP.IN.id === 'UL8NIV') {
      reqObj['body']['options'] = QNIAPP.IN.Qt.qtdtls.option;
    }
    if (QNIAPP.IN.isservice !== "Y" && QNIAPP.IN.touchpoint === 'POS' && QNIAPP.IN.Qt['qtstatus'] === QNIAPP.CONSTS.FINZ) {
      reqObj['body']['distsummary'] = (GFWK_APP_ID && GFWK_APP_ID !== 'wms') ? prepareDistRequest() : {};
      QNIAPP.IN.Qt.qtdtls.distsummary = reqObj['body']['distsummary'];
    }
    else if (QNIAPP.IN.touchpoint === 'OPS' && QNIAPP.IN.isservice == "Y") {
      reqObj['body']['distsummary'] = {};
      reqObj.body.distsummary['licencepersoncd'] = (QNIAPP.IN.Qt.qtdtls.agentcode) ? QNIAPP.IN.Qt.qtdtls.agentcode : QNIAPP.CONSTS.DEFAULT_AGENT_CODE;
      reqObj.body.distsummary['opsagencycd'] = (QNIAPP.IN.Qt.qtdtls.agentcode) ? QNIAPP.IN.Qt.qtdtls.agentcode : QNIAPP.CONSTS.DEFAULT_AGENT_CODE;
      reqObj.body.distsummary['agenttype'] = 'OM';
      reqObj.body.distsummary['channelcd'] = "Online";
      reqObj.body.distsummary['custid'] = (QNIAPP.IN.Qt.qtdtls.opscustomerid) ? QNIAPP.IN.Qt.qtdtls.opscustomerid : "";
      if (typeof QNIAPP.IN.Qt.qtdtls.ucicid != "undefined") reqObj.body.distsummary['custid'] = QNIAPP.IN.Qt.qtdtls.ucicid;
    }

    if (QNIAPP.IN.ismymix && QNIAPP.IN.Qt.qtdtls.primaryflg == 'Y') {
      QNIAPP.MyMix['Q1']['distsummary'] = QNIAPP.IN.Qt.qtdtls.distsummary;

    } else if (QNIAPP.IN.ismymix) {
      reqObj['body']['distsummary'] = QNIAPP.MyMix['Q1']['distsummary'];
      QNIAPP.IN.Qt.qtdtls.distsummary = QNIAPP.MyMix['Q1']['distsummary'];
    }


    reqObj['body']['age'] = COMM_CALC.getValueFromQtDtls("age");
    reqObj['body']['quoteid'] = COMM_CALC.getValueFromQtDtls("quoteid");
    reqObj['body']['gender'] = (QNIAPP.IN.Qt.qtdtls.gender && QNIAPP.IN.Qt.qtdtls.gender === 'M') ? 'GEN_M' : (QNIAPP.IN.Qt.qtdtls.gender && QNIAPP.IN.Qt.qtdtls.gender === 'F') ? 'GEN_F' : (QNIAPP.IN.Qt.qtdtls.gender && QNIAPP.IN.Qt.qtdtls.gender === 'R') ? 'GEN_R' : 'GEN_S';
    reqObj['body']['quoteid'] = COMM_CALC.getValueFromQtDtls("quoteid");
    reqObj['body']['quote']['quotedtls']['proposer'] = {};
    reqObj['body']['quote']['quotedtls']['leaddata'] = QNIAPP['leaddata'];
    if (QNIAPP['leaddata']) {
      QNIAPP.IN.Qt.qtdtls.paytype = QNIAPP.leaddata['paytype'];
      if (QNIAPP.leaddata['accnttype'] != undefined) {
        QNIAPP.IN.Qt.qtdtls.accnttype = QNIAPP.leaddata['accnttype'];
        QNIAPP.IN.Qt.qtdtls.hdfcbankcustid = QNIAPP.leaddata['hdfcbankcustid'];
        QNIAPP.IN.Qt.qtdtls.aannumber = QNIAPP.leaddata['aannumber'];
        QNIAPP.IN.Qt.qtdtls.relationshipid = QNIAPP.leaddata['relationshipid'];
        reqObj['body']['accnttype'] = QNIAPP.IN.Qt.qtdtls.accnttype;
        reqObj['body']['hdfcbankcustid'] = QNIAPP.IN.Qt.qtdtls.hdfcbankcustid;
        reqObj['body']['aannumber'] = QNIAPP.IN.Qt.qtdtls.aannumber;
        reqObj['body']['relationshipid'] = QNIAPP.IN.Qt.qtdtls.relationshipid;
        reqObj['body']['totAnnPremium'] = QNIAPP.IN.Qt.qtdtls.totAnnPremium;
      }

    }
    var planoption = "";
    if (QNIAPP.IN.id == 'SAPLUSE' || QNIAPP.IN.id == 'SAPLUSEV9' || QNIAPP.IN.id == 'SANPAR' || QNIAPP.IN.id == 'SANCHP') {
      planoption = getMstr_pk(GQNI_BEN_OPT, QNIAPP.IN.Qt.qtdtls.plan) ? getMstr_pk(GQNI_BEN_OPT, QNIAPP.IN.Qt.qtdtls.plan) : "";
    } else if (QNIAPP.IN.id === QNIAPP.CONSTS.C2PL) {
      planoption = getMstr_pk(GQNI_BEN_OPT, QNIAPP.P1C2PL_OPTIONS.getOption()) ? getMstr_pk(GQNI_BEN_OPT, QNIAPP.P1C2PL_OPTIONS.getOption()) : "";
    } else if (QNIAPP.IN.id === 'P1C2PS' || QNIAPP.IN.id === 'P1C2PSE') {
      planoption = getMstr_pk(GQNI_BEN_OPT, QNIAPP.P1C2PS_OPTIONS.getOption()) ? getMstr_pk(GQNI_BEN_OPT, QNIAPP.P1C2PS_OPTIONS.getOption()) : "";
    } else if (QNIAPP.IN.id === 'P2C2PEL' || QNIAPP.IN.id === 'P2C2PELE') {
      planoption = getMstr_pk(GQNI_BEN_OPT, QNIAPP.P2C2PEL_OPTIONS.getOption()) ? getMstr_pk(GQNI_BEN_OPT, QNIAPP.P2C2PEL_OPTIONS.getOption()) : "";
    } else if (QNIAPP.IN.id.indexOf("C2P") > -1 || QNIAPP.IN.id == 'UL8NIV') {
      planoption = getMstr_pk(GQNI_BEN_OPT, QNIAPP.IN.Qt.qtdtls.option) ? getMstr_pk(GQNI_BEN_OPT, QNIAPP.IN.Qt.qtdtls.option) : "";
    } else if (QNIAPP.IN.id == 'PGNP') {
      planoption = QNIAPP.IN.Qt.qtdtls.option ? QNIAPP.IN.Qt.qtdtls.option : "";
    } else if (QNIAPP.IN.id == 'IANP') {
      planoption = getMstr_pk(GQNI_BEN_OPT, QNIAPP.IN.Qt.qtdtls.option) ? getMstr_pk(GQNI_BEN_OPT, QNIAPP.IN.Qt.qtdtls.option) : "";
    } else if (QNIAPP.IN.id == 'CANC') {
      planoption = QNIAPP.IN.Qt.qtdtls.option ? QNIAPP.IN.Qt.qtdtls.option : "";
    } else if (QNIAPP.IN.id == 'CDAC') {
      if (QNIAPP.IN.Qt.qtdtls.option == "HOSPB_INDB" || QNIAPP.IN.Qt.qtdtls.option == "HOSPB_ICB" || QNIAPP.IN.Qt.qtdtls.option == "INDB_ICB" || QNIAPP.IN.Qt.qtdtls.option == "HOSPB_INDB_ICB") {
        planoption = QNIAPP.IN.Qt.qtdtls.option ? QNIAPP.IN.Qt.qtdtls.option : "";
      } else planoption = QNIAPP.IN.Qt.qtdtls.benefitsname[0] ? QNIAPP.IN.Qt.qtdtls.benefitsname[0] : "";
    } else if (QNIAPP.IN.id == 'EAHT') {
      planoption = QNIAPP.IN.Qt.qtdtls.option_cd ? QNIAPP.IN.Qt.qtdtls.option_cd : "";
    } else if (QNIAPP.IN.id == 'UL7WP1') {
      planoption = getMstr_pk(GQNI_BEN_OPT, QNIAPP.IN.Qt.qtdtls.benefit) ? getMstr_pk(GQNI_BEN_OPT, QNIAPP.IN.Qt.qtdtls.benefit) : "";
    } else if ((QNIAPP.IN.id != 'UL7WP1' && QNIAPP.IN.id != 'UL7EA' && QNIAPP.IN.id != 'CANC' && QNIAPP.IN.Qt.qtdtls.benefit)) {
      planoption = getMstr_pk(GQNI_BEN_OPT, QNIAPP.IN.Qt.qtdtls.benefit) ? getMstr_pk(GQNI_BEN_OPT, QNIAPP.IN.Qt.qtdtls.benefit) : "";
    } else if (QNIAPP.IN.id == 'UL7EA' || QNIAPP.IN.id == 'UL7EA1' || QNIAPP.IN.id == 'UL7EA2') {
      if (QNIAPP.IN.Qt.qtdtls.optionalriders) {
        planoption = QNIAPP.IN.Qt.qtdtls.optionalriders ? QNIAPP.IN.Qt.qtdtls.optionalriders : "";
      } else planoption = QNIAPP.IN.Qt.qtdtls.benefit ? QNIAPP.IN.Qt.qtdtls.benefit : (QNIAPP.IN.Qt.qtdtls.MagnumBenefit ? QNIAPP.IN.Qt.qtdtls.MagnumBenefit.substring(0, 4) : "");
    }
    reqObj['body']['prod'] = {
      "prodctgy": COMM_CALC.getValueFromQtDtls("prodcat_cd"),
      "prodname": COMM_CALC.getValueFromQtDtls("prodname"),
      "prodcode": COMM_CALC.getValueFromQtDtls("product"),
      "planoption": planoption,
      "plcyterm": COMM_CALC.getValueFromQtDtls("term")
    };
    reqObj['body']['lwcctype'] = QNIAPP.IN.Qt.qtdtls.lwcctype ? QNIAPP.IN.Qt.qtdtls.lwcctype : "";

    reqObj.body['lwcctype'] = QNIAPP.IN.Qt.qtdtls.lwcctype ? QNIAPP.IN.Qt.qtdtls.lwcctype : "";

    reqObj.body['leadtype'] = QNIAPP.IN.Qt.qtdtls.isPasa ? QNIAPP.IN.Qt.qtdtls.leadtype : "";

    if (QNIAPP.IN.touchpoint === 'OPS' && QNIAPP.IN.Qt.qtdtls.comboflg == 'Y') {
      //reqObj['body']['prod']={"comboprodcd":QNIAPP.IN.Qt.qtdtls.comboprodcd};
      reqObj.body.prod['comboprodcd'] = QNIAPP.IN.Qt.qtdtls.comboprodcd;
    }
    reqObj['body']['prod']['productclassification'] = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ctg');
    reqObj['body']['quote'] = {
      "quoteid": COMM_CALC.getValueFromQtDtls("quoteid"),
      "refquoteid": COMM_CALC.getValueFromQtDtls("refquoteid"),
      "telemode": COMM_CALC.getValueFromQtDtls("telemode"),
      "quotedt": COMM_CALC.getValueFromQtDtls("qtDt"),
      "lwcctype": COMM_CALC.getValueFromQtDtls("lwcctype") ? COMM_CALC.getValueFromQtDtls("lwcctype") : "",
      "quotestatus": COMM_CALC.getValueFromQtDtls("qtstatus"),
      "term_m": COMM_CALC.getValueFromQtDtls("term_m"),
      "isExqps": COMM_CALC.getValueFromQtDtls("isExqps") ? COMM_CALC.getValueFromQtDtls("isExqps") : "",
      "qps": COMM_CALC.getValueFromQtDtls("qps") ? COMM_CALC.getValueFromQtDtls("qps") : "",
      "quickprotectSA": COMM_CALC.getValueFromQtDtls("quickprotectSA") ? COMM_CALC.getValueFromQtDtls("quickprotectSA") : "",
      "rop": COMM_CALC.getValueFromQtDtls("rop"),
      "gstWaiver": COMM_CALC.getValueFromQtDtls("gstWaiver"),
      "isnpFlg": COMM_CALC.getValueFromQtDtls("isnpFlg"),
      "riderprmamt": COMM_CALC.getValueFromQtDtlsRider("premium") ? COMM_CALC.getValueFromQtDtlsRider("premium") : "",
      "ridertaxamt": COMM_CALC.getValueFromQtDtlsRider("tax") ? COMM_CALC.getValueFromQtDtlsRider("tax") : "",
      "hdfclbuddyid": COMM_CALC.getValueFromQtDtls("HDFCLBuddyId") ? COMM_CALC.getValueFromQtDtls("HDFCLBuddyId") : "",
      "doghadverseflag": COMM_CALC.getValueFromQtDtls("doghadverseflag"),
      "quotedtls": COMM_CALC.getValueFromQtDtls("qtdtls"),
      "payterm": COMM_CALC.getValueFromQtDtls("ppt"),
      "ppt": COMM_CALC.getValueFromQtDtls("ppt"),
      "ppt_m": COMM_CALC.getValueFromQtDtls("ppt_m"),
      "payfreq": COMM_CALC.getValueFromQtDtls("freq_cd"),
      "sumassured": COMM_CALC.getValueFromQtDtls("sumAssured"),
      //"premamt":(QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && COMM_CALC.getValueFromQtDtls("rider")[0].name === 'INAD')?(parseInt(COMM_CALC.getValueFromQtDtls("premium"))+parseInt(COMM_CALC.getValueFromQtDtls("rider")[0].premium)) : COMM_CALC.getValueFromQtDtls("premium"),
      "premamt": Math.round(parseFloat(COMM_CALC.getValueFromQtDtls("premium")) + parseFloat(COMM_CALC.getValueFromQtDtlsRider("premium"))),
      "payoutterm": COMM_CALC.getValueFromQtDtls("pyout"),
      "payoutamt": "",
      "payoutfreq": "",
      "applicabletax": "",
      "paycurrency": "",
      "backdtpremium": (QNIAPP.OUT.backdtpremium != 0) ? ((QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && QNIAPP.IN.Qt.qtdtls.rider[0].riderBkdtPremium) ? (parseInt(COMM_CALC.getValueFromQtDtls("backdtpremium")) + parseInt(COMM_CALC.getValueFromQtDtlsRider("riderBkdtPremium"))) : COMM_CALC.getValueFromQtDtls("backdtpremium")) : '',
      "paymode": COMM_CALC.getValueFromQtDtls("paymethod_cd"),
      "minfactor": COMM_CALC.getValueFromQtDtls("minfactor"),
      "touchpoint": COMM_CALC.getValueFromQtDtls("touchpoint"),
      //"incpDt":COMM_CALC.getValueFromQtDtls("incpDt"),
      "totpremium": COMM_CALC.getValueFromQtDtls("totPremium"),
      "totannpremium": COMM_CALC.getValueFromQtDtls("totAnnPremium"),
      //"tottax":(QNIAPP.IN.id == 'C2PP' && QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0)?(parseInt(COMM_CALC.getValueFromQtDtls("tottax"))+parseInt(COMM_CALC.getValueFromQtDtls("rider")[0].tax)) : COMM_CALC.getValueFromQtDtls("tottax"),//For C2PP with rider (tottax = basetax + rdrtax) in column
      "tottax": parseInt(COMM_CALC.getValueFromQtDtls("tottax")) + parseInt(COMM_CALC.getValueFromQtDtlsRider("tax")),
      //"tottax":(QNIAPP.IN.id == 'C2PP' && QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0)?(parseInt(COMM_CALC.getValueFromQtDtls("tottax"))+parseInt(COMM_CALC.getValueFromQtDtlsRider("tax"))) : COMM_CALC.getValueFromQtDtls("tottax"),//For C2PP with rider (tottax = basetax + rdrtax) in column
      "backdttax": (QNIAPP.OUT.backdttax != 0) ? ((QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && QNIAPP.IN.Qt.qtdtls.rider[0].riderBkdtPremium) ? (parseInt(COMM_CALC.getValueFromQtDtls("backdttax")) + parseInt(QNIAPP.IN.Qt.qtdtls.bkdttax_rider)) : COMM_CALC.getValueFromQtDtls("backdttax")) : '',//bkdttax_rider
      "addlprmamt": COMM_CALC.getValuefromExternalObj("premium") + COMM_CALC.getValuefromExternalObj("riderpremium"),
      "addltaxamt": COMM_CALC.getValuefromExternalObj("tax") + COMM_CALC.getValuefromExternalObj("ridertax"),
      "tobaccostatus": (COMM_CALC.getValueFromQtDtls("tobstatus") != "") ? (COMM_CALC.getValueFromQtDtls("tobstatus") == "1" ? "Y" : "N") : "",
      "pptoption": (COMM_CALC.getValueFromQtDtls("pptopt")),
      "extterm": (COMM_CALC.getValueFromQtDtls("externalterm")),
      "extopt": (COMM_CALC.getValueFromQtDtls("externaloption")),
      "extfreq": (COMM_CALC.getValueFromQtDtls("extfreq")),
      "mymixflg": (COMM_CALC.getValueFromQtDtls("mymixflg")),
      "mymixval": (COMM_CALC.getValueFromQtDtls("mymixval")),
      "mymixsrc": (COMM_CALC.getValueFromQtDtls("mymixsrc")),
      "mymixtype": (COMM_CALC.getValueFromQtDtls("mymixtype")),
      "combotype": (COMM_CALC.getValueFromQtDtls("combotype")),
      "combo_flag": (COMM_CALC.getValueFromQtDtls("combo_flag")),
      "ownmix_flag": (COMM_CALC.getValueFromQtDtls("ownmix_flag")),
      "mymix_New_Flow": (COMM_CALC.getValueFromQtDtls("mymix_New_Flow")),
      "sourceofBusiness": COMM_CALC.getValueFromQtDtls("sourceofBusiness"),
      "leadchannelcd": COMM_CALC.getValueFromQtDtls("leaddata")['chnl'] ? COMM_CALC.getValueFromQtDtls("leaddata")['chnl'] : '',
      "rider_critical_illness": QNIAPP.COMM_CALC.isRiderSelected("C4CI") ? QNIAPP.PRODUCT_DETAILS.get('C4CI', 'uin') : "",
      "rider_income_benefit": QNIAPP.COMM_CALC.isRiderSelected("INAD") ? QNIAPP.PRODUCT_DETAILS.get('INAD', 'uin') : "",
      "rider_accidental_death_cover": QNIAPP.COMM_CALC.isRiderSelected("PPR_ADC") ? QNIAPP.PRODUCT_DETAILS.get('PPR_ADC', 'uin') : "",
      "rider_cancer_cover": QNIAPP.COMM_CALC.isRiderSelected("PPR_CC") ? QNIAPP.PRODUCT_DETAILS.get('PPR_CC', 'uin') : "",
      "rider_personalaccident_cover": QNIAPP.COMM_CALC.isRiderSelected("PPR_PAC") ? QNIAPP.PRODUCT_DETAILS.get('PPR_PAC', 'uin') : ""
    };
    if (reqObj['body']['topup'] && reqObj['body']['topup'].length > 0) {
      reqObj['body']['quote']['quotedtls']['topup_obj'] = reqObj['body']['topup'];
    };
    reqObj['body']['optionalriders'] = COMM_CALC.getValueFromQtDtls("rider") !== "" ? COMM_CALC.getValueFromQtDtls("rider") : [];
    // Yes bank fix
    if (QNIAPP.PRODUCT_DETAILS.isSTPNBJOURNEYApplicable(QNIAPP.IN.chnlptnr)) {
      reqObj.body['ismatrixflag'] = 'N';
      QNIAPP.IN.Qt.qtdtls.ismatrixflag = 'N';
    } else {
      reqObj.body['ismatrixflag'] = 'Y';
      QNIAPP.IN.Qt.qtdtls.ismatrixflag = 'Y';
    }
    if (QNIAPP.IN.id === QNIAPP.CONSTS.C2PL) {
      reqObj['body']['quote']['is_ex_cust_disc_logic'] = QNIAPP.COMM_CALC.getValueFromQtDtls("isExCustomer");
      reqObj['body']['quote']['ci_sumassured'] = QNIAPP.COMM_CALC.getValueFromQtDtls("sumAssured");
    }
    reqObj['body']['quote']['pospflag'] = QNIAPP.COMM_CALC.getValueFromQtDtls("pospflag");
    if (QNIAPP.IN.touchpoint == "POS") {
      if (QNIAPP.IN.Qt.qtdtls.whatsappflag && QNIAPP.IN.Qt.qtdtls.whatsappflag == "Yes") {
        reqObj['body']['quote']['Whatsapp_flg'] = "Y";

      }
      else if (QNIAPP.IN.Qt.qtdtls.whatsappflag && QNIAPP.IN.Qt.qtdtls.whatsappflag == "No") {
        reqObj['body']['quote']['Whatsapp_flg'] = "N";

      }
    }
    if (QNIAPP.IN.id === "IANP") {
      reqObj['body']['prod']['prodoption'] = QNIAPP.IANP_ANNUITYCODE.get(QNIAPP.IN.Qt.qtdtls.option);/*getMstr_pk(GQNI_ANNUITY_OPT_SL,QNIAPP.IN.Qt.qtdtls.option);*/
    }
    if (QNIAPP.IN.id === 'P1C2PS' || QNIAPP.IN.id === 'P1C2PSE') {
      reqObj['body']['quote']['is_ex_cust_disc_logic'] = QNIAPP.COMM_CALC.getValueFromQtDtls("isExCustomer");
      reqObj['body']['quote']['ci_sumassured'] = QNIAPP.COMM_CALC.getValueFromQtDtls("sumAssured");
    }
    if (QNIAPP.IN.id === 'UL9SPP') {
      reqObj['body']['quote']['is_ex_cust_disc_logic'] = QNIAPP.COMM_CALC.getValueFromQtDtls("isExCustomer");
      reqObj['body']['quote']['ci_sumassured'] = QNIAPP.COMM_CALC.getValueFromQtDtls("sumAssured");
    }
    if (QNIAPP.IN.id === "P2C2PEL" || QNIAPP.IN.id === "P2C2PELE") {
      reqObj['body']['quote']['is_ex_cust_disc_logic'] = QNIAPP.COMM_CALC.getValueFromQtDtls("isExCustomer");
      reqObj['body']['quote']['ci_sumassured'] = QNIAPP.COMM_CALC.getValueFromQtDtls("sumAssured");
    }
    if (QNIAPP.IN.id === "SARJB") {
      reqObj['body']['quote']['is_ex_cust_disc_logic'] = QNIAPP.COMM_CALC.getValueFromQtDtls("isExCustomer");
    }
    if (QNIAPP.IN.id === "PGNP") {
      reqObj['body']['prod']['prodoption'] = QNIAPP.PGNP_ANNUITYCODE.get(QNIAPP.IN.Qt.qtdtls.option);
    }
    if (QNIAPP.IN.id === "SRP") {
      reqObj['body']['prod']['prodoption'] = QNIAPP.SRP_ANNUITYCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      reqObj['body']['quote']['sumassured'] = "0";
      reqObj['body']['quote']['sumAssured'] = "0";
    }
    if (QNIAPP.IN.id === "SMPP") {
      reqObj['body']['prod']['prodoption'] = QNIAPP.SMPP_ANNUITYCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      reqObj['body']['quote']['sumassured'] = "0";
      reqObj['body']['quote']['sumAssured'] = "0";
    }
    if (QNIAPP.IN.id === "SMPPR") {
      reqObj['body']['prod']['prodoption'] = QNIAPP.SMPPR_ANNUITYCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      reqObj['body']['quote']['sumassured'] = "0";
      reqObj['body']['quote']['sumAssured'] = "0";
    }
    if (QNIAPP.IN.id === "SMPPL") {
      reqObj['body']['prod']['prodoption'] = QNIAPP.SMPPL_ANNUITYCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      reqObj['body']['quote']['sumassured'] = "0";
      reqObj['body']['quote']['sumAssured'] = "0";
    }
    if (QNIAPP.IN.id === "SMPPE") {
      reqObj['body']['prod']['prodoption'] = QNIAPP.SMPPE_ANNUITYCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      reqObj['body']['quote']['sumassured'] = "0";
      reqObj['body']['quote']['sumAssured'] = "0";
    }
    if (QNIAPP.IN.id === "SMPPI") {
      reqObj['body']['prod']['prodoption'] = QNIAPP.SMPPI_ANNUITYCODE.get(QNIAPP.IN.Qt.qtdtls.option);
      reqObj['body']['quote']['sumassured'] = "0";
      reqObj['body']['quote']['sumAssured'] = "0";
    }
    if (QNIAPP.IN.id === "C2PP") {
      if (QNIAPP.IN.Qt.qtdtls.option && QNIAPP.IN.Qt.qtdtls.suboption) {
        reqObj['body']['prod']['prodoption'] = QNIAPP.IN.Qt.qtdtls.option + " - " + QNIAPP.IN.Qt.qtdtls.suboption;
      }
      else if (QNIAPP.IN.Qt.qtdtls.option) {
        reqObj['body']['prod']['prodoption'] = QNIAPP.IN.Qt.qtdtls.option;
      }
    }
    if (QNIAPP.IN.combID == 'C2POS') {
      QNIAPP.IN.Qt.qtdtls.txncd = typeof QNIAPP.OSAPIRESP != "undefined" && typeof QNIAPP.OSAPIRESP.TransactionID != "undefined" ? QNIAPP.OSAPIRESP.TransactionID : QNIAPP.IN.Qt.qtdtls.txncd;
      reqObj['body']['txncd'] = typeof QNIAPP.OSAPIRESP != "undefined" && typeof QNIAPP.OSAPIRESP.TransactionID != "undefined" ? QNIAPP.OSAPIRESP.TransactionID : QNIAPP.IN.Qt.qtdtls.txncd;
    }
    $.each(["fname", "lname", "dob", "mobnopre", "mobno", "email"], function (key, value) {
      reqObj['body'][value] = COMM_CALC.getValueFromQtDtls("p" + value) !== "" ? COMM_CALC.getValueFromQtDtls("p" + value) : COMM_CALC.getValueFromQtDtls(value);
    });
    if (QNIAPP.IN.touchpoint === "OPS") {
      reqObj['body']['quote']['quotedtls']['chnl'] = 'Online';

      if (!(QNIAPP.IN.Qt.qtdtls.agentcode && QNIAPP.IN.Qt.qtdtls.agentcode != undefined && typeof QNIAPP.IN.Qt.qtdtls.agentcode != "undefined" && QNIAPP.IN.Qt.qtdtls.agentcode != "")) {
        if (typeof sessionStorage != "undefined" && typeof sessionStorage.agentcode != "undefined" && (sessionStorage.getItem('agentcode') !== null)) {
          var opsAgentCd = sessionStorage.getItem('agentcode');
          //IM1008774 : Agency code without 00 prefix or Special Characters
          if (opsAgentCd === null || opsAgentCd === "") {
            opsAgentCd = QNIAPP.CONSTS.DEFAULT_AGENT_CODE;
          } else {
            opsAgentCd = opsAgentCd.replace(/[^0-9]/g, '');
            if (opsAgentCd.trim().length != 8) {
              opsAgentCd = opsAgentCd.replace(/^0+/, '');
              if (opsAgentCd.trim().length > 8)
                opsAgentCd = opsAgentCd.substring(0, 8);
              if (opsAgentCd.trim().length < 8) {
                var len = (8 - opsAgentCd.trim().length);
                for (var i = 0; i < len; i++) {
                  opsAgentCd = "0" + opsAgentCd;
                }
              }
            }
          }
          QNIAPP.IN.Qt.qtdtls.agentcode = opsAgentCd;
        }
      }
      if (typeof QNIAPP.IN.Qt.qtdtls.opscustomerid == "undefined" || $.trim(QNIAPP.IN.Qt.qtdtls.opscustomerid).length == 0)
        if (typeof sessionStorage != "undefined" && typeof sessionStorage.custid != "undefined" && sessionStorage.getItem('custid') !== null) QNIAPP.IN.Qt.qtdtls.opscustomerid = sessionStorage.getItem('custid');
      if (typeof QNIAPP.IN.Qt.qtdtls.opscustsessionid == "undefined" || $.trim(QNIAPP.IN.Qt.qtdtls.opscustsessionid).length == 0)
        if (typeof sessionStorage != "undefined" && typeof sessionStorage.custsessid != "undefined" && sessionStorage.getItem('custsessid') !== null) QNIAPP.IN.Qt.qtdtls.opscustsessionid = sessionStorage.getItem('custsessid');
      if (typeof QNIAPP.IN.Qt.qtdtls.opslgcode == "undefined" || $.trim(QNIAPP.IN.Qt.qtdtls.opslgcode).length == 0)
        if (typeof sessionStorage != "undefined" && typeof sessionStorage.opslgcode != "undefined" && sessionStorage.getItem('opslgcode') !== null) QNIAPP.IN.Qt.qtdtls.opslgcode = sessionStorage.getItem('opslgcode');
      if (typeof QNIAPP.IN.Qt.qtdtls.opsflscode == "undefined" || $.trim(QNIAPP.IN.Qt.qtdtls.opsflscode).length == 0)
        if (typeof sessionStorage != "undefined" && typeof sessionStorage.opsflscode != "undefined" && sessionStorage.getItem('opsflscode') !== null) QNIAPP.IN.Qt.qtdtls.opsflscode = sessionStorage.getItem('opsflscode');
      if (typeof QNIAPP.IN.Qt.qtdtls.opsUtmCampaignRk == "undefined" || $.trim(QNIAPP.IN.Qt.qtdtls.opsUtmCampaignRk).length == 0)
        if (typeof sessionStorage != "undefined" && typeof sessionStorage.opsUtmCampaignRk != "undefined" && sessionStorage.getItem('opsUtmCampaignRk') !== null) QNIAPP.IN.Qt.qtdtls.opsUtmCampaignRk = sessionStorage.getItem('opsUtmCampaignRk');
      if (typeof QNIAPP.IN.Qt.qtdtls.proposerBuyingForItself != undefined) {
        if (["Y", "Yes"].indexOf(QNIAPP.IN.Qt.qtdtls.proposerBuyingForItself) > -1) {
          reqObj['body']['quote']['proposerbuyingforitself'] = "Y";
        } else if (["N", "No"].indexOf(QNIAPP.IN.Qt.qtdtls.proposerBuyingForItself) > -1) {
          reqObj['body']['quote']['proposerbuyingforitself'] = "N";
        }
      }
    }
    //changes for cancer care -- Abhishek
    if (QNIAPP.IN.id === "CANC") {
      /*$.each(["fname","lname","mobno","mobnopre","city","state","cntry","residentstatus","nationality","city_other","state_other","email"],function(key,val){
        reqObj['body']['lifeassured'][val] = COMM_CALC.getValueFromQtDtls(val);
      });*/
      QNIAPP.IN.Qt.qtdtls.option = COMM_CALC.getValueFromQtDtls("options");
      reqObj['body']['option'] = COMM_CALC.getValueFromQtDtls("options");
      reqObj['body']['prod']['planoption'] = QNIAPP.IN.Qt.qtdtls.option;
      if (QNIAPP.IN.Qt.qtdtls.option == 'Gold') {
        QNIAPP.IN.Qt.qtdtls.option_cd = 'HEALTH_OPTION_GOLD';
      } else if (QNIAPP.IN.Qt.qtdtls.option == 'Silver') {
        QNIAPP.IN.Qt.qtdtls.option_cd = 'HEALTH_OPTION_SILVER';
      } else {
        QNIAPP.IN.Qt.qtdtls.option_cd = 'HEALTH_OPTION_PLATINUM';
      }
    }

    if (QNIAPP.IN.touchpoint != 'OPS') {
      if (QNIAPP.IN.id === "EAHT") {

        reqObj['body']['prod']['planoption'] = '';
      }
    }




    if (QNIAPP.IN.id === "HRN") {
      reqObj['body']['quote']['quotedtls']['proposer'] = {};
      /*$.each(["fname","lname","mobno","mobnopre","city","state","cntry","residentstatus","nationality","city_other","state_other","email"],function(key,val){
        reqObj['body']['lifeassured'][val] = COMM_CALC.getValueFromQtDtls(val);
      });*/
      reqObj['body']['prod']['planoption'] = getMstr_pk(GQNI_BEN_OPT, COMM_CALC.getValueFromQtDtls("plan"));
      reqObj['body']['options'] = COMM_CALC.getValueFromQtDtls("option");
      QNIAPP.IN.Qt.qtdtls.option_cd = (QNIAPP.IN.Qt.qtdtls.option == 'Gold') ? 'HEALTH_OPTION_GOLD' : 'HEALTH_OPTION_SILVER';

      for (var i = 0; i < reqObj['body']['lifeassured'].length; i++) {
        if (reqObj['body']['lifeassured'][i]['gender'] === "M") {
          reqObj['body']['lifeassured'][i]['gender_cd'] = "GEN_M";
        } else if (reqObj['body']['lifeassured'][i]['gender'] === "F") {
          reqObj['body']['lifeassured'][i]['gender_cd'] = "GEN_F";
        } else {
          reqObj['body']['lifeassured'][i]['gender_cd'] = "";
        }
        if (reqObj['body']['lifeassured'][i]['premium']) {
          reqObj['body']['lifeassured'][i]['premium'] += "";
        }
        for (var x in GPOS_LARELWITHPROPOSER) {
          if (GPOS_LARELWITHPROPOSER[x][1] == reqObj['body']['lifeassured'][i]['rel']) {
            reqObj['body']['lifeassured'][i]['rel_cd'] = GPOS_LARELWITHPROPOSER[x][0];
            break;
          }
        }
      }
      if (reqObj['body']['lifeassured'][0].rel == QNIAPP.CONSTS.SELF) {
        reqObj['body']['dob'] = reqObj['body']['lifeassured'][0].dob;
      }
      COMM_CALC.prepareProposerDetails(reqObj);
      (QNIAPP.IN.touchpoint == 'OPS') ? (reqObj['body']['quote']['quotedtls']['proposer']['dob'] = COMM_CALC.getValueFromQtDtls("pdob")) : '';
      if (COMM_CALC.getValueFromQtDtls("pgender") === "M") {
        reqObj['body']['quote']['quotedtls']['proposer']['gender_cd'] = "GEN_M";
      } else if (COMM_CALC.getValueFromQtDtls("pgender") === "F") {
        reqObj['body']['quote']['quotedtls']['proposer']['gender_cd'] = "GEN_F";
      } else {
        reqObj['body']['quote']['quotedtls']['proposer']['gender_cd'] = "";
      }

    }
    else {
      var obj = {};
      $.each(["gender", "dob", "fname", "lname", "mobno", "mobnopre", "city", "state", "cntry", "residentstatus", "nationality", "city_other", "state_other", "email", "pincode"], function (key, val) {
        obj[val] = COMM_CALC.getValueFromQtDtls(val);
      });
      if (obj['gender'] === "M" || obj['gender'] === "GEN_M") {
        obj['gender_cd'] = "GEN_M";
      } else if (obj['gender'] === "F" || obj['gender'] === "GEN_F") {
        obj['gender_cd'] = "GEN_F";
      } else if (obj['gender'] === "S" || obj['gender'] === "GEN_S") {
        obj['gender_cd'] = "GEN_S";
      } else if (obj['gender'] === "R" || obj['gender'] === "GEN_R") {
        obj['gender_cd'] = "GEN_R";
      } else {
        obj['gender_cd'] = "";
      }
      obj['premium'] = (QNIAPP.IN.Qt.qtdtls.pmaFlag == "Y" && QNIAPP.IN.chnlptnr == "Defence" && (QNIAPP.IN.id == "SANPAR" || QNIAPP.IN.id == "SANCHP")) ? Math.round(COMM_CALC.getValueFromQtDtls("adjusPremium")).toString() : ((QNIAPP.IN.spl == "EGIIE" || (QNIAPP.IN.id == "EGII" && QNIAPP.IN['spl'] === '-' && QNIAPP.IN.Qt.qtdtls.isnpFlg && QNIAPP.IN.Qt.qtdtls.isnpFlg == "Y")) ? Math.round(COMM_CALC.getValueFromQtDtls("nonDiscpremium")).toString() : COMM_CALC.getValueFromQtDtls("premium"));
      obj['sumassured'] = COMM_CALC.getValueFromQtDtls("sumAssured");
      obj['totpremium'] = COMM_CALC.getValueFromQtDtls("totpremium");
      obj['seqid'] = "LA_0";
      obj['country'] = COMM_CALC.getValueFromQtDtls("cntry");
      obj['panno'] = COMM_CALC.getValueFromQtDtls("panno");
      if ((QNIAPP.IN.id == "CANC" || QNIAPP.IN.id == "EAHT" || QNIAPP.IN.id == "CDAC" || QNIAPP.IN.id === QNIAPP.CONSTS.CIP) && QNIAPP.IN.Qt.qtdtls.proposerBuyingForItself === "Yes") {
        obj['rel'] = 'Self';
        obj['rel_cd'] = 'RLAP_SELF_CD';
        if (QNIAPP.IN.id !== QNIAPP.CONSTS.CIP) {
          obj['seqid'] = "PROP_1";
        } else {
          obj['rel_cd'] = 'RPRPLA_SELF_CD';
        }
        obj['isPrimary'] = "1";
      } else if ((QNIAPP.IN.id == "CANC" || QNIAPP.IN.id == "EAHT" || QNIAPP.IN.id == "CDAC" || QNIAPP.IN.id === "UL9SPP" || QNIAPP.IN.id === QNIAPP.CONSTS.CIP) && QNIAPP.IN.Qt.qtdtls.proposerBuyingForItself === "No") {
        obj['rel'] = QNIAPP.IN.Qt.qtdtls.rel;
        // this should be removed CANC
        if (QNIAPP.IN.id !== QNIAPP.CONSTS.CIP) {
          for (var x in GPOS_LARELWITHPROPOSER) {
            if (GPOS_LARELWITHPROPOSER[x][1] == QNIAPP.IN.Qt.qtdtls.rel) {
              obj['rel_cd'] = GPOS_LARELWITHPROPOSER[x][0];
              break;
            }
          }
        } else {
          for (var x in GPOS_RELPROPOSORLA) {
            if (GPOS_RELPROPOSORLA[x][1] == QNIAPP.IN.Qt.qtdtls.rel) {
              obj['rel_cd'] = GPOS_RELPROPOSORLA[x][0];
              break;
            }
          }
        }

        obj['seqid'] = "LA_0";
        obj['isPrimary'] = "1";
      }
      if (QNIAPP.IN.id === 'IANP' || QNIAPP.IN.id === 'PGNP' || QNIAPP.IN.id === 'SARLP' || QNIAPP.IN.id === 'SRP' || QNIAPP.IN.id == 'SMPP' || QNIAPP.IN.id == "SMPPR" || QNIAPP.IN.id == "SMPPL" || QNIAPP.IN.id == "SMPPE" || QNIAPP.IN.id == "SMPPI" || QNIAPP.IN.id === QNIAPP.CONSTS.UNO || (QNIAPP.IN.id == "SUPH" || QNIAPP.IN.id == "SUPHE" || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE")) {
        obj['mobno'] = COMM_CALC.getValueFromQtDtls("mobno");
        reqObj['body']['quote']['quotedtls']['mobno'] = obj['mobno'];
        reqObj['body']['quote']['mobno'] = obj['mobno'];
        obj['isPrimary'] = "1";

      }
      reqObj['body']['lifeassured'].push(obj);

      if (QNIAPP.IN.id === 'IANP' && QNIAPP.IN.Qt.qtdtls.optioncode && QNIAPP.IANP_ANN_OPT.getJointLifeCodes(QNIAPP.IN.Qt.qtdtls.optioncode)) {
        obj = {};
        $.each(["fname", "lname", "dob", "age", "gender"], function (key, val) {
          obj[val] = COMM_CALC.getValueFromQtDtls('jl' + val);
        });
        if (obj['gender'] === "M" || obj['gender'] === "GEN_M") {
          obj['gender_cd'] = "GEN_M";
        } else if (obj['gender'] === "F" || obj['gender'] === "GEN_F") {
          obj['gender_cd'] = "GEN_F";
        } else {
          obj['gender_cd'] = "";
        }
        obj['seqid'] = "LA_1";
        reqObj['body']['lifeassured'].push(obj);
      }

      if ((QNIAPP.IN.id === 'PGNP') && QNIAPP.IN.Qt.qtdtls.optioncode && QNIAPP.PGNP_ANN_OPT.getJointLifeCodes(QNIAPP.IN.Qt.qtdtls.optioncode)) {
        obj = {};
        $.each(["fname", "lname", "dob", "age", "gender"], function (key, val) {
          obj[val] = COMM_CALC.getValueFromQtDtls('jl' + val);
        });
        if (obj['gender'] === "M" || obj['gender'] === "GEN_M") {
          obj['gender_cd'] = "GEN_M";
        } else if (obj['gender'] === "F" || obj['gender'] === "GEN_F") {
          obj['gender_cd'] = "GEN_F";
        } else {
          obj['gender_cd'] = "";
        }
        obj['seqid'] = "LA_1";
        reqObj['body']['lifeassured'].push(obj);
      }
      if (((QNIAPP.IN.id === 'SMPP') || (QNIAPP.IN.id === 'SMPPL') || (QNIAPP.IN.id === 'SMPPR') || (QNIAPP.IN.id === 'SMPPE') || (QNIAPP.IN.id === 'SMPPI')) && QNIAPP.IN.Qt.qtdtls.jlflag == 'Y') {
        obj = {};
        $.each(["fname", "lname", "dob", "age", "gender"], function (key, val) {
          obj[val] = COMM_CALC.getValueFromQtDtls('jl' + val);
        });
        if (obj['gender'] === "M" || obj['gender'] === "GEN_M") {
          obj['gender_cd'] = "GEN_M";
        } else if (obj['gender'] === "F" || obj['gender'] === "GEN_F") {
          obj['gender_cd'] = "GEN_F";
        } else if (obj['gender'] === "S" || obj['gender'] === "GEN_S") {
          obj['gender_cd'] = "GEN_S";
        } else if (obj['gender'] === "R" || obj['gender'] === "GEN_R") {
          obj['gender_cd'] = "GEN_R";
        } else {
          obj['gender_cd'] = "";
        }
        obj['seqid'] = "LA_1";
        reqObj['body']['lifeassured'].push(obj);
      }
      if (QNIAPP.IN.id === 'SARLP' && QNIAPP.IN.Qt.qtdtls.jlflag == 'Y') {
        obj = {};
        $.each(["fname", "lname", "dob", "age", "gender"], function (key, val) {
          obj[val] = COMM_CALC.getValueFromQtDtls('jl' + val);
        });
        if (obj['gender'] === "M" || obj['gender'] === "GEN_M") {
          obj['gender_cd'] = "GEN_M";
        } else if (obj['gender'] === "F" || obj['gender'] === "GEN_F") {
          obj['gender_cd'] = "GEN_F";
        } else {
          obj['gender_cd'] = "";
        }
        obj['seqid'] = "LA_1";
        reqObj['body']['lifeassured'].push(obj);
      }
      if ((QNIAPP.IN.id === QNIAPP.CONSTS.UNO || (QNIAPP.IN.id == "SUPH" || QNIAPP.IN.id == "SUPHE" || (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE"))) && QNIAPP.IN.Qt.qtdtls.jlflag && QNIAPP.IN.Qt.qtdtls.jlflag === 'Y') {
        obj = {};
        $.each(["fname", "lname", "dob", "age", "gender"], function (key, val) {
          obj[val] = COMM_CALC.getValueFromQtDtls('jl' + val);
        });
        if (obj['gender'] === "M" || obj['gender'] === "GEN_M") {
          obj['gender_cd'] = "GEN_M";
        } else if (obj['gender'] === "F" || obj['gender'] === "GEN_F") {
          obj['gender_cd'] = "GEN_F";
        } else if (obj['gender'] === "S" || obj['gender'] === "GEN_S") {
          obj['gender_cd'] = "GEN_S";
        } else if (obj['gender'] === "R" || obj['gender'] === "GEN_R") {
          obj['gender_cd'] = "GEN_R";
        } else {
          obj['gender_cd'] = "";
        }
        obj['seqid'] = "LA_1";
        obj['country'] = COMM_CALC.getValueFromQtDtls('cntry');
        obj['residentstatus'] = COMM_CALC.getValueFromQtDtls('residentstatus');
        reqObj['body']['lifeassured'].push(obj);
      }
      if (QNIAPP.IN.id === QNIAPP.CONSTS.CIP && QNIAPP.IN.Qt.qtdtls.benefit && QNIAPP.IN.Qt.qtdtls.benefit === QNIAPP.CONSTS.PWO) {
        obj = {};
        $.each(["fname", "lname", "dob", "age", "gender", "nationality", "country", "residentstatus", "state"], function (key, val) {
          obj[val] = COMM_CALC.getValueFromQtDtls('p' + val);
        });
        if (obj['gender'] === "M" || obj['gender'] === "GEN_M") {
          obj['gender_cd'] = "GEN_M";
        } else if (obj['gender'] === "F" || obj['gender'] === "GEN_F") {
          obj['gender_cd'] = "GEN_F";
        } else if (obj['gender'] === "S" || obj['gender'] === "GEN_S") {
          obj['gender_cd'] = "GEN_S";
        } else if (obj['gender'] === "R" || obj['gender'] === "GEN_R") {
          obj['gender_cd'] = "GEN_R";
        } else {
          obj['gender_cd'] = "";
        }
        obj['seqid'] = "LA_1";
        reqObj['body']['lifeassured'].push(obj);
      }
      if (QNIAPP.IN.id === "C2PH") {
        reqObj['body']['lifeassured']['mobno'] = COMM_CALC.getValueFromQtDtls("pmobno");
        reqObj['body']['lifeassured']['mobnopre'] = COMM_CALC.getValueFromQtDtls("pmobnopre");
        reqObj['body']['lifeassured']['city'] = COMM_CALC.getValueFromQtDtls("pcity");
        reqObj['body']['lifeassured']['state'] = COMM_CALC.getValueFromQtDtls("pstate");
        reqObj['body']['lifeassured']['pincode'] = COMM_CALC.getValueFromQtDtls("pincode");
        reqObj['body']['lifeassured']['cntry'] = COMM_CALC.getValueFromQtDtls("pcntry");
        reqObj['body']['lifeassured']['residentstatus'] = COMM_CALC.getValueFromQtDtls("presidentstatus");
        reqObj['body']['lifeassured']['nationality'] = COMM_CALC.getValueFromQtDtls("pnationality");
        reqObj['body']['lifeassured']['email'] = COMM_CALC.getValueFromQtDtls("pemail");
      }

      reqObj['body']['quote']['quotedtls']['lifeassured'] = reqObj['body']['lifeassured'];
    }
    reqObj['body']['quote']['quotedtls']['chnlptnr'] = QNIAPP.IN.chnlptnr ? QNIAPP.IN.chnlptnr : "";
    reqObj['body']['quote']['quotedtls']['chnl'] = QNIAPP.IN.chnl ? QNIAPP.IN.chnl : "";
    reqObj['body']['quote']['quotedtls']['subchnl'] = QNIAPP.IN.subchnl ? QNIAPP.IN.subchnl : "";
    if (QNIAPP.IN.chnlptnr === "Bancassurance and New Tie Up" && QNIAPP.leaddata && QNIAPP.leaddata['cooperativebranchname'] != "" && QNIAPP.PRODUCT_DETAILS.isKeyAllianceApplicable(QNIAPP.IN.chnlptnr, QNIAPP.leaddata['cooperativebranchname'])) {
      reqObj['body']['quote']['quotedtls']['chnl'] = QNIAPP.leaddata['cooperativebranchname'];
    }
    reqObj['body']['quote']['quotedtls']['useposrates'] = QNIAPP.IN.useposrates ? QNIAPP.IN.useposrates : "";

    if (QNIAPP.IN.id === "CANC" || QNIAPP.IN.id === "EAHT" || QNIAPP.IN.id === "CDAC" || QNIAPP.IN.id === "UL9SPP" || QNIAPP.IN.id === QNIAPP.CONSTS.CIP) {
      reqObj['body']['quote']['quotedtls']['proposer'] = {};
      if (reqObj['body']['quote']['quotedtls']['proposerBuyingForItself'] === 'No') {
        COMM_CALC.prepareProposerDetails(reqObj);
        reqObj['body']['quote']['quotedtls']['proposer']['gender'] = COMM_CALC.getValueFromQtDtls("pgender");
        reqObj['body']['quote']['quotedtls']['proposer']['gender_cd'] = COMM_CALC.getValueFromQtDtls("pgender") === "M" ? "GEN_M" : COMM_CALC.getValueFromQtDtls("pgender") === "F" ? "GEN_F" : COMM_CALC.getValueFromQtDtls("pgender") === "S" ? "GEN_S" : "GEN_R";
        reqObj['body']['quote']['quotedtls']['proposer']['dob'] = COMM_CALC.getValueFromQtDtls("pdob");
        if (QNIAPP.IN.id === QNIAPP.CONSTS.CIP) {
          reqObj['body']['quote']['quotedtls']['proposer']['seqid'] = "LA_1";
        }
      } else {
        (reqObj['body']['quote']['quotedtls']['proposer'] = reqObj['body']['quote']['quotedtls']['lifeassured'][0]);
      }
    }
    if (QNIAPP.IN.touchpoint === "POS" && !(QNIAPP.PRODUCT_DETAILS.isProposerExists(QNIAPP.IN.id))) {
      reqObj['body']['quote']['quotedtls']['proposer'] = {};
      if (reqObj['body']['quote']['quotedtls']['proposerBuyingForItself'] === 'No') {
        reqObj['body']['quote']['quotedtls']['proposer']['gender'] = COMM_CALC.getValueFromQtDtls("pgender");
        reqObj['body']['quote']['quotedtls']['proposer']['dob'] = COMM_CALC.getValueFromQtDtls("pdob");
        reqObj['body']['quote']['quotedtls']['proposer']['fname'] = COMM_CALC.getValueFromQtDtls("pfname");
        reqObj['body']['quote']['quotedtls']['proposer']['lname'] = COMM_CALC.getValueFromQtDtls("plname");
        reqObj['body']['quote']['quotedtls']['proposer']['age'] = COMM_CALC.getValueFromQtDtls("page");
      } else {
        reqObj['body']['quote']['quotedtls']['proposer']['gender'] = COMM_CALC.getValueFromQtDtls("gender");
        reqObj['body']['quote']['quotedtls']['proposer']['dob'] = COMM_CALC.getValueFromQtDtls("dob");
        reqObj['body']['quote']['quotedtls']['proposer']['fname'] = COMM_CALC.getValueFromQtDtls("fname");
        reqObj['body']['quote']['quotedtls']['proposer']['lname'] = COMM_CALC.getValueFromQtDtls("lname");
        reqObj['body']['quote']['quotedtls']['proposer']['age'] = COMM_CALC.getValueFromQtDtls("age");
      }
      if (QNIAPP.IN.chnlptnr == 'Bancassurance - Yes Bank' && typeof Yes_Ins_Cat != 'undefined' && Yes_Ins_Cat != 'BUS_INS' && Yes_Ins_Cat != 'NoCat') {
        if (QNIAPP.IN.easyNsureFlg) {
          reqObj['body']['quote']['quotedtls']['proposer']['mobno'] = _EasyNsureData.body.profileDetails.customerDetails.mobileNumber;
          reqObj['body']['quote']['quotedtls']['proposer']['email'] = _EasyNsureData.body.profileDetails.customerDetails.emailId;

        } else {
          reqObj['body']['quote']['quotedtls']['proposer']['mobno'] = _YESCustResults.body.customerDetails.mobileNumber;
          reqObj['body']['quote']['quotedtls']['proposer']['email'] = _YESCustResults.body.customerDetails.emailID;
        }
      }
      if (QNIAPP.IN.Qt.qtdtls.sMatrixData && QNIAPP.IN.Qt.qtdtls.sMatrixData.teleSalesFlg == "Y") {
        reqObj['body']['quote']['quotedtls']['proposer']['email'] = COMM_CALC.getValueFromQtDtls("prop_emailid") ? COMM_CALC.getValueFromQtDtls("prop_emailid") : "";
      }
    }

    if (QNIAPP.IN.id === "CANC" && QNIAPP.IN.touchpoint === "OPS" && reqObj['body']['quote']['quotedtls']['proposerBuyingForItself'] === 'Yes') {
      reqObj['body']['quote']['quotedtls']['proposer']['state'] = COMM_CALC.getValueFromQtDtls("state");
      reqObj['body']['quote']['quotedtls']['proposer']['city'] = COMM_CALC.getValueFromQtDtls("city");
      reqObj['body']['quote']['quotedtls']['isPrimary'] = "1";
    }

    if (QNIAPP.IN.touchpoint === "OPS" && QNIAPP.IN.id !== "HRN") {
      reqObj['body']['quote']['quotedtls']['proposer'] = {};
      reqObj['body']['quote']['quotedtls']['proposer']['fname'] = COMM_CALC.getValueFromQtDtls("pfname");
      reqObj['body']['quote']['quotedtls']['proposer']['pan_status'] = COMM_CALC.getValueFromQtDtls("pan_status");
      reqObj['body']['quote']['quotedtls']['proposer']['panno'] = COMM_CALC.getValueFromQtDtls("panno");
      reqObj['body']['quote']['quotedtls']['proposer']['lname'] = COMM_CALC.getValueFromQtDtls("plname");
      reqObj['body']['quote']['quotedtls']['proposer']['mobno'] = COMM_CALC.getValueFromQtDtls("pmobno");
      reqObj['body']['quote']['quotedtls']['proposer']['dob'] = COMM_CALC.getValueFromQtDtls("pdob");
      reqObj['body']['quote']['quotedtls']['proposer']['mobnopre'] = COMM_CALC.getValueFromQtDtls("pmobnopre");
      if (COMM_CALC.getValueFromQtDtls("pgender")) {
        reqObj['body']['quote']['quotedtls']['proposer']['gender'] = COMM_CALC.getValueFromQtDtls("pgender");
      }
      if (COMM_CALC.getValueFromQtDtls("pgender") === "M") {
        reqObj['body']['quote']['quotedtls']['proposer']['gender_cd'] = "GEN_M";
      } else if (COMM_CALC.getValueFromQtDtls("pgender") === "F") {
        reqObj['body']['quote']['quotedtls']['proposer']['gender_cd'] = "GEN_F";
      } else if (COMM_CALC.getValueFromQtDtls("pgender") === "S") {
        reqObj['body']['quote']['quotedtls']['proposer']['gender_cd'] = "GEN_S";
      } else if (COMM_CALC.getValueFromQtDtls("pgender") === "R") {
        reqObj['body']['quote']['quotedtls']['proposer']['gender_cd'] = "GEN_R";
      } else {
        reqObj['body']['quote']['quotedtls']['proposer']['gender_cd'] = "";
      }
      reqObj['body']['quote']['quotedtls']['proposer']['email'] = COMM_CALC.getValueFromQtDtls("pemail");
      reqObj['body']['quote']['quotedtls']['proposer']['city'] = COMM_CALC.getValueFromQtDtls("pcity");
      reqObj['body']['quote']['quotedtls']['proposer']['state'] = COMM_CALC.getValueFromQtDtls("pstate");
      reqObj['body']['quote']['quotedtls']['proposer']['cntry'] = COMM_CALC.getValueFromQtDtls("pcntry");
      reqObj['body']['quote']['quotedtls']['proposer']['state_other'] = COMM_CALC.getValueFromQtDtls("pstate_other");
      reqObj['body']['quote']['quotedtls']['proposer']['city_other'] = COMM_CALC.getValueFromQtDtls("pcity_other");
      reqObj['body']['quote']['quotedtls']['proposer']['residentstatus'] = COMM_CALC.getValueFromQtDtls("presidentstatus");
      reqObj['body']['quote']['quotedtls']['proposer']['nationality'] = COMM_CALC.getValueFromQtDtls("pnationality");
    }
    $.each(QNIAPP.IN.Qt, function (key, value) {
      if (key !== 'qtdtls' && key != 'dob') {
        reqObj['body'][key] = value;
      }
    });
    if (reqObj['body']['quote']['quotedtls']['proposer']) {
      reqObj['body']['proposer'] = reqObj['body']['quote']['quotedtls']['proposer'];
    }
    if ((QNIAPP.IN.id === "CANC" || QNIAPP.IN.id === "EAHT" || QNIAPP.IN.id === "CDAC" || QNIAPP.IN.id === QNIAPP.CONSTS.CIP || QNIAPP.IN.id === "C2PP") && QNIAPP.IN.touchpoint === "OPS" && reqObj['body']['quote']['quotedtls']['proposerBuyingForItself'] === 'Yes') {
      reqObj['body']['quote']['quotedtls']['proposer']['fname'] = COMM_CALC.getValueFromQtDtls("fname");
      reqObj['body']['quote']['quotedtls']['proposer']['lname'] = COMM_CALC.getValueFromQtDtls("lname");
      reqObj['body']['quote']['quotedtls']['proposer']['mobno'] = COMM_CALC.getValueFromQtDtls("mobno");
      reqObj['body']['quote']['quotedtls']['proposer']['email'] = COMM_CALC.getValueFromQtDtls("email");
      reqObj['body']['quote']['quotedtls']['proposer']['city'] = COMM_CALC.getValueFromQtDtls("city");
      reqObj['body']['quote']['quotedtls']['proposer']['state'] = COMM_CALC.getValueFromQtDtls("state");
      reqObj['body']['quote']['quotedtls']['proposer']['cntry'] = COMM_CALC.getValueFromQtDtls("cntry");
      reqObj['body']['quote']['quotedtls']['proposer']['dob'] = COMM_CALC.getValueFromQtDtls("dob");
      reqObj['body']['quote']['quotedtls']['proposer']['gender'] = COMM_CALC.getValueFromQtDtls("gender");
      reqObj['body']['quote']['quotedtls']['proposer']['gender_cd'] = COMM_CALC.getValueFromQtDtls("gender") === "M" ? "GEN_M" : "GEN_F";
      reqObj['body']['quote']['quotedtls']['pfname'] = COMM_CALC.getValueFromQtDtls("fname");
      reqObj['body']['quote']['quotedtls']['plname'] = COMM_CALC.getValueFromQtDtls("lname");
      reqObj['body']['quote']['quotedtls']['pmobno'] = COMM_CALC.getValueFromQtDtls("mobno");
      reqObj['body']['quote']['quotedtls']['pmobnopre'] = COMM_CALC.getValueFromQtDtls("mobnopre");
      reqObj['body']['quote']['quotedtls']['pemail'] = COMM_CALC.getValueFromQtDtls("email");
      reqObj['body']['quote']['quotedtls']['pcity'] = COMM_CALC.getValueFromQtDtls("city");
      reqObj['body']['quote']['quotedtls']['pstate'] = COMM_CALC.getValueFromQtDtls("state");
      reqObj['body']['quote']['quotedtls']['pcntry'] = COMM_CALC.getValueFromQtDtls("cntry");
      reqObj['body']['quote']['quotedtls']['pdob'] = COMM_CALC.getValueFromQtDtls("dob");
      reqObj['body']['quote']['quotedtls']['pgender'] = COMM_CALC.getValueFromQtDtls("gender");
      reqObj['body']['quote']['quotedtls']['page'] = COMM_CALC.getValueFromQtDtls("age");
    }
    /* IM1009269 ops C2I age issue*/
    if (QNIAPP.IN.touchpoint === "OPS" && QNIAPP.IN.id == "UL8C2I" && reqObj['body']['quote']['quotedtls']['proposerBuyingForItself'] === 'No') {

      COMM_CALC.getValueFromQtDtls("age") ? reqObj['body']['quote']['quotedtls']['age'] = parseInt(COMM_CALC.getValueFromQtDtls("age")) : (console.log(COMM_CALC.getValueFromQtDtls("age")));
    }
    if ((GFWK_APP_ID && GFWK_APP_ID !== 'wms') && QNIAPP.IN.touchpoint === "OPS" && COMM_CALC.getValueFromQtDtls("term") != "") {/*IM1023064 C2I term added to pass term in number ex: 05 should be 5*/
      var term = COMM_CALC.getValueFromQtDtls("term");
      reqObj['body']['quote']['quotedtls']['term'] = parseInt(term).toString();
      reqObj['body']['term'] = parseInt(term).toString();
    } /*IM1023064 C2I term added to pass term in number ex: 05 should be 5*/

    QNIAPP.COMM_CALC.setRidersFromClob(QNIAPP.IN.Qt);

    if (QNIAPP.IN.Qt.qtdtls.prmmulfactor && QNIAPP.IN.Qt.qtdtls.prmmulfactor != "") {
      reqObj['body']['quote']['prmmulfactor'] = QNIAPP.IN.Qt.qtdtls.prmmulfactor;
    }
    if (QNIAPP.IN.chnlptnr === QNIAPP.CONSTS.ONLINECH) {/*  && (QNIAPP.IN.Qt.qtdtls.quickissuanceflg && QNIAPP.IN.Qt.qtdtls.quickissuanceflg == "Y") */
      if (QNIAPP.IN.Qt.qtdtls.panno) reqObj['body']['quote']['panno'] = QNIAPP.IN.Qt.qtdtls.panno;
      if (QNIAPP.IN.Qt.qtdtls.dcbAccountNo) reqObj['body']['quote']['dcbAccountNo'] = QNIAPP.IN.Qt.qtdtls.dcbAccountNo;
      if (QNIAPP.IN.Qt.qtdtls.dcbAccountType) reqObj['body']['quote']['dcbAccountType'] = QNIAPP.IN.Qt.qtdtls.dcbAccountType;
    }
    if (QNIAPP.IN.chnlptnr === QNIAPP.CONSTS.ONLINECH) {
      if (typeof sessionStorage != "undefined" && typeof sessionStorage.ccdccrFlag != "undefined" && (sessionStorage.getItem('ccdccrFlag') == "Y")) {
        reqObj['body']['quote']['ccdccrFlag'] = sessionStorage.getItem('ccdccrFlag');
        reqObj['body']['quote']['quotedtls']['ccdccrFlag'] = sessionStorage.getItem('ccdccrFlag');
      }
      if (QNIAPP.IN.id == "C2P3DP" || QNIAPP.IN.id == "C2PP") {
        if (QNIAPP.IN.Qt.qtdtls.baseSumAssured) reqObj['body']['quote']['base_Sum_Assured'] = QNIAPP.IN.Qt.qtdtls.baseSumAssured;
      }
    }

    if (QNIAPP.IN.subchnl === "Edelweiss") {
      if (QNIAPP.leaddata && QNIAPP.leaddata['bankaccnt'] != '') {
        reqObj['body']['quote']['quotedtls']['edel_stp'] = 'Yes';
      } else {
        reqObj['body']['quote']['quotedtls']['edel_stp'] = 'No';
      }

    }

  };
  COMM_CALC.setRidersFromClob = function (jsonObj) {
    if (!(QNIAPP.IN.id == 'C2P3DP') && !(QNIAPP.IN.id == 'C2PH') && !(QNIAPP.IN.id == 'UL9SPP')) {//as riders in c2p3dp are not considered as implicit riders
      if (jsonObj.qtdtls.rider) {
        jsonObj.riders = jsonObj.qtdtls.rider;
        for (var i = 0; i < jsonObj.riders.length; i++) {
          jsonObj.riders[i]['sumassured'] = jsonObj.riders[i]['sumAssured'] + '';
          if (!QNIAPP.PRODUCT_DETAILS.get(jsonObj.riders[i]['name'], 'spl_rider')) {
            if (jsonObj.qtdtls.term)
              jsonObj.riders[i]['term'] = jsonObj.qtdtls.term + '';
            if (jsonObj.qtdtls.ppt)
              jsonObj.riders[i]['ppt'] = jsonObj.qtdtls.ppt + '';
            jsonObj.riders[i]['premium'] = jsonObj.qtdtls.premium ? jsonObj.qtdtls.premium + '' : "";
            if (jsonObj.riders[i].name == "EP" && QNIAPP.IN.id == "ESTE") {
              jsonObj.riders[i]['premium'] = QNIAPP.OUT.extProPremium ? QNIAPP.OUT.extProPremium + '' : "";
              jsonObj.riders[i]['pptopt'] = jsonObj.qtdtls.pptOption;

              var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };
              var prod_id = QNIAPP.IN.id;
              var st_rate = QNIAPP.PRODUCT_DETAILS.get(prod_id, 'st_rt');
              var POL_FEE = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'policy_fee');
              var ST_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round(((QNIAPP.OUT.extProPremium - POL_FEE)) * st_rate) + Math.round(POL_FEE * st_rate) : 0;
              var EC_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round(((QNIAPP.OUT.extProPremium - POL_FEE)) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) + Math.round(POL_FEE * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) : 0;
              var GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? Math.round(((QNIAPP.OUT.extProPremium - POL_FEE)) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) + Math.round(POL_FEE * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) : 0;
              var KTAX = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((QNIAPP.OUT.extProPremium - POL_FEE) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) + Math.round(POL_FEE * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) : 0;
              var appTax = ST_RT + EC_RT + GST_RT + KTAX;
              jsonObj.riders[i]['st_rt'] = ST_RT + '';
              jsonObj.riders[i]['ec_rt'] = EC_RT + '';
              jsonObj.riders[i]['ktax'] = KTAX + '';
              jsonObj.riders[i]['gst_rt'] = GST_RT + '';
              jsonObj.riders[i]['tax'] = appTax + '';
              jsonObj.riders[i]['totPremium'] = QNIAPP.OUT.extProPremium + appTax + '';
              jsonObj.riders[i]['totAnnPremium'] = jsonObj.riders[i].totPremium * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f + '';
              COMM_CALC.calcTotalPremium();
              QNIAPP.OUT.totPremium = QNIAPP.COMM_CALC.calculateRiderPremiumandTax();
              QNIAPP.OUT.totAnnPremium = QNIAPP.OUT.totPremium * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
            }
          }
        }
      }
    }
    if (jsonObj.qtdtls.rider) {//For C4CI and IB riders
      jsonObj.riders = jsonObj.qtdtls.rider;
      for (var i = 0; i < jsonObj.riders.length; i++) {
        if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, jsonObj.riders[i]['name'])) {
          jsonObj.riders[i]['sumassured'] = jsonObj.riders[i]['sumAssured'] + '';
        }
      }
    }
  };

  COMM_CALC.isSplChannel = function (json_obj, channel) {

    var leadsource = '';
    if (QNIAPP.leaddata && QNIAPP.leaddata['leadsrc']) {
      leadsource = QNIAPP.leaddata['leadsrc'];
    } else if (QNIAPP.IN.Qt.qtdtls.leaddata && QNIAPP.IN.Qt.qtdtls.leaddata['leadsrc']) {
      leadsource = QNIAPP.IN.Qt.qtdtls.leaddata['leadsrc'];
    }

    var channelist = (QNIAPP.IN.chnlptnr == QNIAPP.CONSTS.LWCCCH) ? (QNIAPP.IN.subchnl && QNIAPP.IN.subchnl != "" ? QNIAPP.IN.subchnl : QNIAPP.IN.chnlptnr) : QNIAPP.IN.chnlptnr;
    var arr = json_obj.get();
    var len_val = (arr !== '' && arr.length > 0) ? arr.length : 0;
    for (var key = 0; key < len_val; key++) {
      if (channelist === arr[key])
        return true;
    }

    if (QNIAPP.IN.chnlptnr == QNIAPP.CONSTS.SPECSALE && leadsource == "Self-generated") {
      return true;
    }
    var cooperativebranchname = '';
    if (QNIAPP.IN.chnlptnr == "MFD") {
      if (QNIAPP.leaddata && QNIAPP.leaddata['cooperativebranchname']) {
        cooperativebranchname = QNIAPP.leaddata['cooperativebranchname'];
      } else if (QNIAPP.IN.Qt.qtdtls.leaddata && QNIAPP.IN.Qt.qtdtls.leaddata['cooperativebranchname']) {
        cooperativebranchname = QNIAPP.IN.Qt.qtdtls.leaddata['cooperativebranchname'];
      }
      if (QNIAPP.COMM_CALC.isDiscountAppliedForMFD(QNIAPP.IN.id, cooperativebranchname)) {
        return true;
      }

    }
    if ((QNIAPP.IN.id == "IANP" || QNIAPP.IN.id == "PGNP") && QNIAPP.IN.Qt.qtdtls.isnpFlg && QNIAPP.IN.Qt.qtdtls.isnpFlg == "Y") {
      return true;
    }

    return false;
  };
  COMM_CALC.isDiscountAppliedForMFD = function (id, cooperativebranchname) {
    var LOCAL_DISC_PARTNER = {
      'C2P3DP': ['IIFL Wealth', 'IMF Limited'],
      'CDAC': ['Bharat Bhushan', 'IMF Limited'],
      'PGNP': ['Bharat Bhushan', 'IMF Limited', 'KIFS', 'Self Source'],
      'C2PP': ['Bharat Bhushan', 'IMF Limited'],
      'IUNO': ['IIFL Wealth', 'Bharat Bhushan', 'KIFS', 'Kredre Wealth', 'IMF Limited', 'Self Source'],
      'EALPTPV9': ['IMF Limited'],
      'SAPLUSEV9': ['Bharat Bhushan', 'IMF Limited'],
      'SANCHP': ['Kredre Wealth', 'IMF Limited'],
      'SANPAR': ['KIFS', 'IMF Limited', 'Self Source']
    };
    var res = jQuery.inArray(cooperativebranchname, LOCAL_DISC_PARTNER[id]);
    if (res == -1) {
      return false;
    }
    return true;

  };

  COMM_CALC.generateBarcode = function (quote_id, target_div) {
    var btype = 'code128';
    var settings =
    {
      bgColor: "#FFFFFF",
      color: "#000000",
      barWidth: 2,
      barHeight: 35,
      moduleSize: 5,
      posX: 10,
      posY: 20,
      showHRI: false
    };
    $("#" + target_div).html("").show().barcode(quote_id, btype, settings);
  };

  COMM_CALC.storeUpsellQuoteInputs = function (offer_iden) {
    QNIAPP.upsell[offer_iden]['IN'] = {};//upsell need to created evey time on click of calculate premium existing values should not be updated
    $.each(QNIAPP.IN.Qt.qtdtls, function (key, value) {
      if (!value instanceof Array) {
        QNIAPP.upsell[offer_iden]['IN'][key] = value;
      } else {
        if (QNIAPP.IN.id === 'HRN') {
          QNIAPP.upsell[offer_iden]['IN'][key] = JSON.parse(JSON.stringify(value));
        } else {
          QNIAPP.upsell[offer_iden]['IN'][key] = value;
        }
      }

    });
    $.each(QNIAPP.IN.Qt, function (key, value) {
      if (key !== 'qtdtls') {
        QNIAPP.upsell[offer_iden][key] = value;
      }

    });
    QNIAPP.upsell[offer_iden]['quoteid'] = QNIAPP.IN.Qt.quoteid;
  };

  COMM_CALC.calcTaxSaved = function () {
    var ann_premium = QNIAPP.WRAP.annPremium();
    ann_premium = (ann_premium) ? ann_premium : 0;
    return Math.round(0.30 * ann_premium);
  };

  COMM_CALC.isRiderSelected = function (rider_cd) {
    if (typeof QNIAPP.IN.Qt.qtdtls.rider != "undefined") {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i]["name"] == rider_cd) {
          return true;
        }
      }
    }
    return false;
  };

  COMM_CALC.isSplRider = function (prod_cd, rider_cd) {
    var isValid = false;
    if (rider_cd == 'PPR_PAC' || rider_cd == 'PPR_ADC' || rider_cd == 'PPR_CC') {
      rider_cd = 'PPR';
    }
    var spl_rider_list = QNIAPP.PRODUCT_DETAILS.getSplRiderList(prod_cd);
    for (var i = 0; i < spl_rider_list.length; i++) {
      if (jQuery.inArray(rider_cd, spl_rider_list[i]) !== -1) {
        isValid = true;

      }
    }
    return isValid;
  };

  COMM_CALC.getInternalRider = function () {
    var temp_arr = [];
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (!QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) {
          temp_arr.push(QNIAPP.IN.Qt.qtdtls.rider[i]);
        }
      }
    }
    return temp_arr;
  };

  COMM_CALC.isProposerAvailable = function () {

    if (GFWK_APP_ID && GFWK_APP_ID === 'wms') {
      return false;
    }

    if ((QNIAPP.IN['action'] == 'viewQ') && _dataVOResults && !isEmptyObject(_dataVOResults)) {
      if (_dataVOResults.body && _dataVOResults.body[0]) {
        var qtdtls_clob_obj = $.parseJSON(_dataVOResults.body[0].qtdtls);
        if (!qtdtls_clob_obj.proposer) {
          return false;
        }
      } else if (_dataVOResults.body && !_dataVOResults.body.proposer) {
        return false;
      }

    }
    return true;
  };

  //getting a particular value from spl rider
  COMM_CALC.getRiderDetailsbyCode = function (rider_cd, prop) {
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == rider_cd) {

          if (prop !== 'name' && prop !== 'name_cd' && prop !== 'pptopt' && prop !== 'rider_name' && prop !== 'rider_uin') {
            return (QNIAPP.IN.Qt.qtdtls.rider[i][prop]) ? parseFloat(QNIAPP.IN.Qt.qtdtls.rider[i][prop]) : 0;
          } else {
            return (QNIAPP.IN.Qt.qtdtls.rider[i][prop]) ? QNIAPP.IN.Qt.qtdtls.rider[i][prop] : '';

          }
        }
      }
    }
  };

  //setting a particular value into spl rider
  COMM_CALC.setRiderDetailsbyCode = function (rider_cd, prop, value) {
    if (QNIAPP.IN.Qt.qtdtls.rider == undefined) {
      COMM_CALC.addRider(rider_cd);
    }

    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
      if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == rider_cd) {
        QNIAPP.IN.Qt.qtdtls.rider[i][prop] = '' + value;
      }
    }


    return true;
  };

  COMM_CALC.addRider = function (rider_cd) {
    var riderObj = {
      'name': rider_cd,
      'deleteflg': 'N'
    };
    if (QNIAPP.IN.Qt.qtdtls.rider == undefined) {
      QNIAPP.IN.Qt.qtdtls.rider = [];
    }
    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
      if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']) && QNIAPP.IN.Qt.qtdtls.rider[i].name == rider_cd) {
        return true; // no need to insert
      }
    }
    QNIAPP.IN.Qt.qtdtls.rider.push(riderObj);
    return true;
  };


  //Redmine 3845: Inclusion of CI Rider - Added new function
  COMM_CALC.addCIRider = function (value) {
    QNIAPP.COMM_CALC.addRider('C4CI');
    QNIAPP.COMM_CALC.setCIRiderAndValidate(value);
  };

  COMM_CALC.addIBRider = function (value) {
    QNIAPP.COMM_CALC.addRider('INAD');
  };
  COMM_CALC.addPACRider = function (value) {
    QNIAPP.COMM_CALC.addRider('PPR_PAC');
  };
  COMM_CALC.addADCRider = function (value) {
    QNIAPP.COMM_CALC.addRider('PPR_ADC');
  };
  COMM_CALC.addCCRider = function (value) {
    QNIAPP.COMM_CALC.addRider('PPR_CC');
  };
  COMM_CALC.addCI4Rider = function (value) {
    QNIAPP.COMM_CALC.addRider('ECI4');
  };
  COMM_CALC.addCI25Rider = function (value) {
    QNIAPP.COMM_CALC.addRider('ECI25');
  };
  COMM_CALC.addETRRider = function (value) {
    QNIAPP.COMM_CALC.addRider('ETR');
  };
  COMM_CALC.addADDDBRider = function (value) {
    QNIAPP.COMM_CALC.addRider('ADDDB');
  };
  //Redmine 3845: Inclusion of CI Rider - Added new function
  COMM_CALC.setCIRiderAndValidate = function (sumAssuredval) {
    sumAssuredval = removeCommas(sumAssuredval);
    if (QNIAPP.IN.Qt.qtdtls.rider.length > 0 && QNIAPP.IN.Qt.qtdtls.CI_rider == 'Y') {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i].name == 'C4CI') {
          var min_sa = QNIAPP.PRODUCT_DETAILS.get('C4CI', 'min_sa');
          baseSumAssuredval = (QNIAPP.IN.Qt.qtdtls.sumAssured > QNIAPP.C4CI_SA.maxSA()) ? QNIAPP.C4CI_SA.maxSA() : QNIAPP.IN.Qt.qtdtls.sumAssured;
          if (sumAssuredval < min_sa)
            sumAssuredval = min_sa;
          else
            sumAssuredval = (parseInt(sumAssuredval) > parseInt(baseSumAssuredval)) ? baseSumAssuredval : sumAssuredval;
          QNIAPP.IN.Qt.qtdtls.riderSumAssured = sumAssuredval;
          QNIAPP.IN.Qt.qtdtls.rider[i].riderSumAssured = sumAssuredval;
          QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured = sumAssuredval;
          QNIAPP.IN.Qt.qtdtls.rider[i].sumassured = sumAssuredval;
          QNIAPP.IN.Qt.qtdtls.rider[i].ppt = QNIAPP.IN.Qt.qtdtls.ppt;
          QNIAPP.IN.Qt.qtdtls.rider[i].term = QNIAPP.IN.Qt.qtdtls.ppt;
          QNIAPP.IN.Qt.qtdtls.rider[i].pptopt = QNIAPP.CONSTS.REG;
        }
      }
    }
    QNIAPP.ERR = [];
    clearMessageDisplay('qni-quoteinput-messages');
    QNIAPP.C4CI.validate('I');
    if (QNIAPP.ERR.length !== 0) {
      $('.buynow').addClass("disabled btn-grey");
      $('.buynow').removeClass("btn-red");
      $('.buynow').attr("disabled", true);
    } else {
      $('.buynow').removeClass("disabled btn-grey");
      $('.buynow').addClass("btn-red");
      $('.buynow').attr("disabled", false);
    }
    if (QNIAPP.ERR && QNIAPP.ERR.length > 0) {
      displayError();
      return false;
    }
  };

  COMM_CALC.removeRider = function (rider_cd) {
    var rider_arr = new Array();
    var parm_arr = new Array();
    if (QNIAPP.IN.Qt.qtdtls.rider) {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i].name === rider_cd) {
          delete QNIAPP.IN.Qt.qtdtls.rider[i];
          //along with deleting the particular rider from clob, "_rider.name.prop" is also made empty
          parm_arr = ['sumAssured', 'pptopt', 'premium', 'term', 'ppt'];
          for (var j = 0; j < parm_arr.length; j++) {
            $('input[cin="_rider.' + rider_cd + '.' + parm_arr[j] + '"]').val("");
            QNIAPP.IN.Qt.qtdtls["_rider." + rider_cd + '.' + parm_arr[j]] = "";
          }
          // changes end -- Bhavani

        }
        if (QNIAPP.IN.Qt.qtdtls.rider[i] !== undefined) {
          rider_arr.push(QNIAPP.IN.Qt.qtdtls.rider[i]);
        }
      }
    }
    QNIAPP.IN.Qt.qtdtls.rider = [];
    QNIAPP.IN.Qt.qtdtls.rider = rider_arr;
    QNIAPP.OUT.rider = [];
    QNIAPP.OUT.inad = false;
    QNIAPP.OUT.c4ci = false;

  };

  COMM_CALC.removePlanOption = function (plan_cd) {
    var plan_arr = new Array();
    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.planoption.length; i++) {
      if (QNIAPP.IN.Qt.qtdtls.planoption[i] === plan_cd) {
        delete QNIAPP.IN.Qt.qtdtls.planoption[i];
      }
    }
    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.planoption.length; i++) {
      if (QNIAPP.IN.Qt.qtdtls.planoption[i] !== undefined) {
        plan_arr.push(QNIAPP.IN.Qt.qtdtls.planoption[i]);
      }
    }
    QNIAPP.IN.Qt.qtdtls.planoption = plan_arr;
  };

  COMM_CALC.isCopApplicable = function (copallowable, copDecision) {

    if (copallowable == "N" && (copDecision == "N" || copDecision == "")) {
      return true;
    } else {
      return false;
    }
  };

  COMM_CALC.backdateFycheck = function () {
    var bacDatechkFlg = true;
    var Now = new Date();
    var minYr = "";
    if ((Now.getMonth() == 0) || (Now.getMonth() == 1) || (Now.getMonth() == 2)) {
      minYr = (Now.getFullYear() - 1);
    } else {
      minYr = Now.getFullYear();
    }
    minDate = new Date(minYr, 3, 1);
    var incpDate = convertStrToDDMMYYYY(QNIAPP.IN.Qt.qtdtls.incpDt);
    if ((incpDate < minDate) && (!(QNIAPP && QNIAPP.other && QNIAPP.other.touchpoint && QNIAPP.other.touchpoint === "UW"))) {
      QNIAPP.ERR = [];
      QNIAPP.ERR.push("Date entered is less than the allowed date ,please enter date greater than or equal to 01/04/" + minYr);
      bacDatechkFlg = false;
    } else {
      bacDatechkFlg = true;
    }
    return bacDatechkFlg;
  };
  COMM_CALC.isSingleMonthApplicable = function (chnlptnr) {
    var prod_code = ["SIPPAR", "SIPPARE", "SIPPARV9", "SIPPARV9E", "SAPLUSE", "SAPLUSEE", "UL8NIV", "UL8NIVE", "UL8C2I", "SAPLUSEV9", "SAPLUSEV9E"];
    if (chnlptnr != QNIAPP.CONSTS.ONLINECH) {
      return false;
    } else {
      for (var x = 0; x < prod_code.length; x++) {
        if (prod_code[x] == QNIAPP.IN.id) {
          return true;
        }
      }
      return false;
    }
  };
  COMM_CALC.calcNextPremiumDt_Month = function (add_fct) {//next premium due date
    var nxt_prem_ddt = new Date(QNIAPP.IN.Qt.qtdtls.incpDt);

    do {
      nxt_prem_ddt = new Date(nxt_prem_ddt.setMonth(nxt_prem_ddt.getMonth() + add_fct));
    } while (nxt_prem_ddt <= QNIAPP.IN.Qt.qtdtls.qtDt)


    QNIAPP.OUT.nextPremDDt = convertStrToDDMonYYYY(nxt_prem_ddt.getDate() + '/' + (nxt_prem_ddt.getMonth() + 1) + '/' + nxt_prem_ddt.getFullYear());
  };

  COMM_CALC.addInternalRider = function () {
    var rdr_arr = [];
    var temp_arr = [];
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) {
          rdr_arr.push(QNIAPP.IN.Qt.qtdtls.rider[i].name);
          temp_arr.push(QNIAPP.IN.Qt.qtdtls.rider[i]);
        }
      }
      QNIAPP.IN.Qt.qtdtls.rider = temp_arr;
    }
    if (rdr_arr.length < 1) {
      QNIAPP.IN.Qt.qtdtls.rider = [];
      QNIAPP.IN.Qt.qtdtls.rider.push(QNIAPP.IN.Qt.qtdtls.internalRider);
    } else if (jQuery.inArray(QNIAPP.IN.Qt.qtdtls.internalRider.name, rdr_arr) == -1) {
      QNIAPP.IN.Qt.qtdtls.rider.push(QNIAPP.IN.Qt.qtdtls.internalRider);
    }
  };

  COMM_CALC.createOptionalRiderTag = function () { // For Handling OCP and node scenarios only
    var splRiderCnt = 0;
    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
      if (QNIAPP.IN.id != 'UL7EA' && QNIAPP.IN.id != 'UL7EA1' && QNIAPP.IN.id != 'UL7EA2' && QNIAPP.IN.id != 'UL8C2I' && QNIAPP.IN.id != 'UL8CIP' && QNIAPP.IN.id != 'UL7LPT2' && QNIAPP.IN.id != 'UL8NIV' && QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) {
        if (splRiderCnt == 0) { // For only one rider
          QNIAPP.IN.Qt.qtdtls['optionalriders'] = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
        }
        else {
          QNIAPP.IN.Qt.qtdtls['optionalriders'] = 'Income Benefit & Critical Illness'; // For two riders
        }
        splRiderCnt++;
      }
    }
  };


  COMM_CALC.deleteInternalRider = function () {
    var temp_arr = [];
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (!QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) {
          delete QNIAPP.IN.Qt.qtdtls.rider[i];
        }
        if (QNIAPP.IN.Qt.qtdtls.rider[i] !== undefined) {
          temp_arr.push(QNIAPP.IN.Qt.qtdtls.rider[i]);
        }
      }
    }
    QNIAPP.IN.Qt.qtdtls.rider = temp_arr;
  };


  /*		COMM_CALC.parCheckCalcROP =function(matBenefit,isSurvivalBenfitApplicable,survivalBenfitArr,payotyearArr){
        var ReturnOfPremium=QNIAPP.IN.Qt.qtdtls.premium * QNIAPP.IN.Qt.qtdtls.ppt * QNIAPP.COMM_PARMS.getFreqMultiplier()[QNIAPP.IN.Qt.qtdtls.freq];
        var totSurvBenfit=0;
        if(isSurvivalBenfitApplicable){
          for(var i=0; i<payotyearArr.length;i++){
            totSurvBenfit += Math.round(survivalBenfitArr[i]);
          }
        }
        var LocalparProductCheck = (Math.round(totSurvBenfit) + Math.round(matBenefit) - Math.round(ReturnOfPremium));
            if(LocalparProductCheck<=0){
              QNIAPP.ERR.push(QNIAPP.CONSTS.ERRPARCHECK);
            }
      };*/

  COMM_CALC.getDefaultRiderSumAssured = function (rider_cd, sumAssured, isIncomeOption) {
    var DEF_SA = 2000000;
    if (!isIncomeOption) {
      switch (rider_cd) {
        case 'INAD': return parseInt(sumAssured) * 0.75; break;
        case 'C4CI': return parseInt(sumAssured) * 0.25; break;
      }
    }
    return DEF_SA;
  };
  COMM_CALC.checkSourceofBusiness = function () {
    var val = true;
    var sob = QNIAPP.IN.Qt.qtdtls.sourceofBusiness;
    if (QNIAPP.IN.id == "IANP" && QNIAPP.IN.chnlptnr != "Online") {
      if (sob == "LTRP" || sob == "GRPOMO") {
        val = false;
      }
      if (QNIAPP.IN.chnlptnr == "Group Sales") {
        if (sob == "VESTNG" || sob == "OTHINS") {
          val = false;
        }
      }
      else if (QNIAPP.IN.chnlptnr == "TSCRM") {
        if (typeof (QNIAPP.leaddata) == 'undefined' || QNIAPP.leaddata.subchnl != 'Group - Call Centre') {
          if (sob == "OMO") {
            val = false;
          }
        }
        if (sob == "OTHINS") {
          val = false;
        }
      }


      else {
        if (sob == "GRPPLN" || sob == "VESTNG" || sob == "OMO" || sob == "OTHINS") {
          val = false;
        }
      }

    }
    else if (QNIAPP.IN.id == "PGNP") {
      if (sob == "LTRP" || sob == "GRPOMO") {
        val = false;
      }
    }
    else if (QNIAPP.IN.id == "PGNP" && QNIAPP.IN.chnlptnr != "Online" && !(QNIAPP.IN.chnlptnr == 'Direct' && QNIAPP.IN.chnlptnr == 'Exide Direct' && QNIAPP.IN.subchnl == 'BSC-OPS' && QNIAPP.IN.chnlptnr == 'HDFC Life Protection Vertical')) {
      if (QNIAPP.IN.Qt.qtdtls.option == QNIAPP.CONSTS.PGPD) {
        if (sob == "NPS") {
          val = false;
        }
      }
    } else if (QNIAPP.IN.id == "SARLP") {
      if (sob == "NPS" || sob == "QROPS" || sob == "NPSFP" || sob == "LTRP" || sob == "GRPOMO") {
        val = false;

      }
    }
    else if (QNIAPP.IN.id == "SRP") {
      if (sob == "NPS" || sob == "QROPS" || sob == "NPSFP" || sob == "GRPPLN" || sob == "LTRP" || sob == "GRPOMO") {
        val = false;

      }
    }
    else if (QNIAPP.IN.id == "SMPP" || QNIAPP.IN.id == "SMPPR" || QNIAPP.IN.id == "SMPPL" || QNIAPP.IN.id == "SMPPE" || QNIAPP.IN.id == "SMPPI") {
      /*          	  if(sob== "GRPPLN"){
                      val = false;
                    }*/
      if (QNIAPP.IN.chnlptnr != "Group Sales" && sob == "GRPOMO") {
        val = false;
      }
    }
    return val;
  };
  COMM_CALC.checkEshajPPT = function () {
    var isValidTrm = true;
    if (QNIAPP.IN.chnlptnr == "NBFC SFB" && channelcode != null && channelcode == "E-Sahaj") {
      if ($.inArray(QNIAPP.IN.id, QNIAPP.PRODUCT_DETAILS.getProdListByChannel(QNIAPP.IN.chnlptnr)) != -1) {
        isValidTrm = QNIAPP.IN.Qt.qtdtls.ppt < 10 ? false : true;
      }
    }
    return isValidTrm;
  };
  COMM_CALC.isNFPApplicable = function () {
    var LCL_AVAILABLE_CHNLS = ["Group Sales", "Agency", "Exide Agency", "Exide Direct", "Direct", "HDFC Life Protection Vertical", "Speciality Sales", "Online", "CoOperatives", "DSC"];
    var nfp_flag = false;
    if (jQuery.inArray(QNIAPP.IN.chnlptnr, LCL_AVAILABLE_CHNLS) !== -1) {
      nfp_flag = true;
    }
    return nfp_flag;
  };

  COMM_CALC.pmaCalculationDefence = function (id) {
    if (QNIAPP.IN.Qt.qtdtls.pmaFlag == "Y" && QNIAPP.IN.chnlptnr == "Defence") {
      var pma_val = 2;  //default pma value for defence channel
      var rate_pma_val = window['QNIAPP'][id + '_PMA_RATE_DEFENCE']['get']();
      if (QNIAPP.IN.id == "SANPAR") {
        excess_prem = (1 + ((rate_pma_val / 1000) * (pma_val / 0.5)));
      }
      else {
        excess_prem = (1 + QNIAPP.SANCHP_DBMRATE.get(Math.floor(QNIAPP.IN.Qt.qtdtls.age)) * (rate_pma_val) * (pma_val / 0.5));
      }
      return excess_prem;
    }
  };
  return COMM_CALC;
}();
QNIAPP.PRODUCT_DETAILS = function () {

  var LOCAL_PRODUCT_DETAILS = {

    'SMPP': {
      'id': 'SMPP',
      'name': 'HDFC Life Smart Pension Plus',
      'freq': 'COMM_PARMS',
      'ann_opt': 'SMPP_ANN_OPT',
      'age': 'SMPP_AGE',
      'minpolicyterm': 5,
      'maxpolicyterm': 40,
      'minIncFreqTerm': 1,
      'min_defer_period': 5,
      'max_defer_period': 15,
      'gst_rt': 0.045,
      'sc_rt': 0.045,
      'ec_rt': 0,
      'ktax': 0.001,
      'tx_2yr_rt': 0.0225,
      'gst_rt_sp': 0.18,
      'slthersoldval': 130000,
      'jlthersoldval': 150000,
      'en_rt': 0.0020,
      'ops_age_input': 'y',
      'pay_mthd': 'COMM_PARMS',
      "isAnnuity": "1",
      'min_Ann': 'SMPP_RT_VALS',
      'min_prem': 'SMPP_RT_VALS',
      'allow_bkdt': '0',
      'ctg': "T",
      'upsell': '1',
      'uin': '101N173V04',
      'valid_days': 7,
      "prod_versions": ['SMPP', "SMPP1", "SMPP2", "SMPP3", "SMPP4", "SMPP5", "SMPP6", "SMPP7", "SMPP8", "SMPP1E", "SMPP2E", "SMPP3E", "SMPP4E", "SMPP5E", "SMPP6E", "SMPP7E", "SMPP8E"]
    },
    'SMPPR': {
      'id': 'SMPPR',
      'name': 'HDFC Life Smart Pension Plus - ROP',
      'freq': 'COMM_PARMS',
      'ann_opt': 'SMPPR_ANN_OPT',
      'age': 'SMPPR_AGE',
      'minpolicyterm': 5,
      'maxpolicyterm': 40,
      'minIncFreqTerm': 1,
      'min_defer_period': 5,
      'max_defer_period': 15,
      'gst_rt': 0.045,
      'sc_rt': 0.045,
      'ec_rt': 0,
      'ktax': 0.001,
      'tx_2yr_rt': 0.0225,
      'gst_rt_sp': 0.18,
      'slthersoldval': 130000,
      'jlthersoldval': 150000,
      'en_rt': 0.0020,
      'ops_age_input': 'y',
      'pay_mthd': 'COMM_PARMS',
      "isAnnuity": "1",
      'min_Ann': 'SMPPR_RT_VALS',
      'min_prem': 'SMPPR_RT_VALS',
      'allow_bkdt': '0',
      'ctg': "T",
      'upsell': '1',
      'uin': '101N173V04',
      'valid_days': 7,
      "prod_versions": ['SMPPR', "SMPPR1", "SMPPR2", "SMPPR3", "SMPPR4", "SMPPR5", "SMPPR6", "SMPPR7", "SMPPR8", "SMPPR1E", "SMPPR2E", "SMPPR3E", "SMPPR4E", "SMPPR5E", "SMPPR6E", "SMPPR7E", "SMPPR8E"]
    },
    'SMPPL': {
      'id': 'SMPPL',
      'name': 'HDFC Life Smart Pension Plus - Life Annuity',
      'freq': 'COMM_PARMS',
      'ann_opt': 'SMPPL_ANN_OPT',
      'age': 'SMPPL_AGE',
      'minpolicyterm': 5,
      'maxpolicyterm': 40,
      'minIncFreqTerm': 1,
      'min_defer_period': 5,
      'max_defer_period': 15,
      'gst_rt': 0.045,
      'sc_rt': 0.045,
      'ec_rt': 0,
      'ktax': 0.001,
      'tx_2yr_rt': 0.0225,
      'gst_rt_sp': 0.18,
      'slthersoldval': 130000,
      'jlthersoldval': 150000,
      'en_rt': 0.0020,
      'ops_age_input': 'y',
      'pay_mthd': 'COMM_PARMS',
      "isAnnuity": "1",
      'min_Ann': 'SMPPL_RT_VALS',
      'min_prem': 'SMPPL_RT_VALS',
      'allow_bkdt': '0',
      'ctg': "T",
      'upsell': '1',
      'uin': '101N173V04',
      'valid_days': 7,
      "prod_versions": ['SMPPL', "SMPPL1", "SMPPL2", "SMPPL3", "SMPPL4", "SMPPL5", "SMPPL6", "SMPPL7", "SMPPL8", "SMPPL1E", "SMPPL2E", "SMPPL3E", "SMPPL4E", "SMPPL5E", "SMPPL6E", "SMPPL7E", "SMPPL8E"]
    },
    'SMPPE': {
      'id': 'SMPPE',
      'name': 'HDFC Life Smart Pension Plus - Early Return',
      'freq': 'COMM_PARMS',
      'ann_opt': 'SMPPE_ANN_OPT',
      'age': 'SMPPE_AGE',
      'minpolicyterm': 5,
      'maxpolicyterm': 40,
      'minIncFreqTerm': 1,
      'min_defer_period': 5,
      'max_defer_period': 15,
      'gst_rt': 0.045,
      'sc_rt': 0.045,
      'ec_rt': 0,
      'ktax': 0.001,
      'tx_2yr_rt': 0.0225,
      'gst_rt_sp': 0.18,
      'slthersoldval': 130000,
      'jlthersoldval': 150000,
      'en_rt': 0.0020,
      'ops_age_input': 'y',
      'pay_mthd': 'COMM_PARMS',
      "isAnnuity": "1",
      'min_Ann': 'SMPPE_RT_VALS',
      'min_prem': 'SMPPE_RT_VALS',
      'allow_bkdt': '0',
      'ctg': "T",
      'upsell': '1',
      'uin': '101N173V04',
      'valid_days': 7,
      "prod_versions": ['SMPPE', "SMPPE1", "SMPPE2", "SMPPE3", "SMPPE4", "SMPPE5", "SMPPE6", "SMPPE7", "SMPPE8", "SMPPE1E", "SMPPE2E", "SMPPE3E", "SMPPE4E", "SMPPE5E", "SMPPE6E", "SMPPE7E", "SMPPE8E"]
    },
    'SMPPI': {
      'id': 'SMPPI',
      'name': 'HDFC Life Smart Pension Plus-Increasing Annuity',
      'freq': 'COMM_PARMS',
      'ann_opt': 'SMPPI_ANN_OPT',
      'age': 'SMPPI_AGE',
      'minpolicyterm': 5,
      'maxpolicyterm': 40,
      'minIncFreqTerm': 1,
      'min_defer_period': 5,
      'max_defer_period': 15,
      'gst_rt': 0.045,
      'sc_rt': 0.045,
      'ec_rt': 0,
      'ktax': 0.001,
      'tx_2yr_rt': 0.0225,
      'gst_rt_sp': 0.18,
      'slthersoldval': 130000,
      'jlthersoldval': 150000,
      'en_rt': 0.0020,
      'ops_age_input': 'y',
      'pay_mthd': 'COMM_PARMS',
      "isAnnuity": "1",
      'min_Ann': 'SMPPI_RT_VALS',
      'min_prem': 'SMPPI_RT_VALS',
      'allow_bkdt': '0',
      'ctg': "T",
      'upsell': '1',
      'uin': '101N173V04',
      'valid_days': 7,
      "prod_versions": ['SMPPI', "SMPPI1", "SMPPI2", "SMPPI3", "SMPPI4", "SMPPI5", "SMPPI6", "SMPPI7", "SMPPI8", "SMPPI1E", "SMPPI2E", "SMPPI3E", "SMPPI4E", "SMPPI5E", "SMPPI6E", "SMPPI7E", "SMPPI8E"]
    },
    'SARLP': {

      'id': 'SARLP',
      'name': 'HDFC Life Saral Pension',
      'freq': 'COMM_PARMS',
      'ann_opt': 'SARLP_ANN_OPT',
      'min_age': 40,
      'max_age': 80,
      'minpolicyterm': 5,
      'maxpolicyterm': 40,
      'minIncFreqTerm': 1,
      'min_defer_period': 1,
      'max_defer_period': 10,
      'gst_rt': 0.0180,
      'sc_rt': 0.0180,
      'ec_rt': 0,
      'ktax': 0.001,
      'slthersoldval': 130000,
      'jlthersoldval': 150000,
      'en_rt': 0.1,
      'ops_age_input': 'y',
      'pay_mthd': 'COMM_PARMS',
      "isAnnuity": "1",
      'min_Ann': 'SARLP_RT_VALS',
      'allow_bkdt': '0',
      'ctg': "T",
      'upsell': '1',
      'uin': '101N141V04',
      'valid_days': 7,
      "prod_versions": ['SARLP', 'SARLP1', 'SARLP2']
    },

    'SUPH': {
      'id': 'SUPH',
      'name': 'HDFC Life Sanchay Fixed Maturity Plan',
      'age': 'SUPH_AGE',
      'mat_age': 'SUPH_AGE',
      'term': 'SUPH_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'SUPH_TERM',
      'pptOption': 'SUPH_PPTOPTION',
      'min_sa': 1000,
      'min_prem': 'SUPH_POL_PCF_PREM',
      'st_rt': 'SUPH_ST_RT',
      'ec_rt': 0,
      'gst_rt': 'SUPH_GST_RT',
      'ktax': 'SUPH_KTAX',
      'grb_rt': { '1': { 'minterm': 10, 'maxterm': 19, 'rt': 0.08 }, '2': { 'minterm': 20, 'maxterm': 25, 'rt': 0.09 } },
      'ngrb_rt_h': 0.03,
      'ngrb_rt_l': 0.015,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 1,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N142V04',
      'ctg': "T",
      'default_premiumval': 50000,
      "prod_versions": ["SUPH", "SUPHX", "SUPHY"]
    },
    'SUPHE': {
      'id': 'SUPHE',
      'name': 'HDFC Life Sanchay Fixed Maturity Plan(spl)',
      'uin': '101N142V04',
      'emp_dis_rt': 1,
      'is_spl': 'SUPH',
      'upsell': '1',
      'allow_bkdt': 1,
      'prod_versions': ["SUPHE", "SUPHXE", "SUPHYE"],
    },
    'C1C2PLH': {
      'id': 'C1C2PLH',
      'name': 'Click 2 Protect Optima Restore',
      'base_plan': 'P1C2PL',
      'health_plan': 'AMHI',
      'ctg': 'C',
      'sub_ctg': 'New',
      'upsell': '1',
      'uin': '101Y121V03',
      'emp_dis_rt': 0.05,
      'emp_dis_rt_ops': 0.05
    },
    'C1C2PLHE': {
      'id': 'C1C2PLHE',
      'name': 'Click 2 Protect Optima Restore(spl)',
      'is_spl': 'C1C2PLH',
      'base_plan': 'P1C2PL',
      'health_plan': 'AMHI',
      'ctg': 'C',
      'sub_ctg': 'New',
      'upsell': '1',
      'uin': '101Y121V03',
      'emp_dis_rt': 0.05,
      'emp_dis_rt_ops': 0.055
    },

    'SARJB': {
      'id': 'SARJB',
      'name': 'HDFC Life Saral Jeevan Bima',
      'age': 'SARJB_AGE',
      'min_sa': 'SARJB_SA',
      'max_sa': 'SARJB_SA',
      'term': 'SARJB_TERM',
      'freq': 'SARJB_FREQ',
      'ppt': 'SARJB_TERM',
      'min_prem': 'SARJB_POL_PCF_PREM',
      //'max_prem'		 :'SARJB_POL_PCF_PREM',
      'emp_dis_rt': 0,
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'pay_mthd': 'COMM_PARMS',
      'policy_fee': 0,
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N140V01',
      'ctg': "P",
      'allow_bkdt': 1,
      'prod_versions': ['SARJB', 'SARJBR', 'SARJBL', 'SARJBS', 'SARJBER', 'SARJBEL', 'SARJBES']
    },

    'SARJBE': {
      'id': 'SARJBE',
      'name': 'HDFC Life Saral Jeevan Bima(spl)',
      'is_spl': 'SARJB'
    },

    'CORONAK': {
      'id': 'CORONAK',
      'name': 'Click 2 Protect Corona Kavach',
      'min_age': 1,
      'max_age': 708,
      'min_mat_age': 216,
      'max_mat_age': 900,
      'age': 'CORONAK_AGE',
      'mat_age': 'CORONAK_AGE',
      'term': 'CORONAK_TERM',
      'disc_rt_r': 0.055,
      'disc_rt_s': 0.02,
      'pay_mthd': 'COMM_PARMS',
      'freq': 'COMM_PARMS',
      'optima_freq': 'CORONAK_FREQ',
      'pptOption': 'C2P3DP_PPTOPTION',
      'ppt': 'C2P3DP_TERM',
      'min_sa': 128337,
      'max_sa': 5000000000,
      'optima_min_sa': 'CORONAK_MINSA',
      'optima_max_sa': 500000,
      'min_prem': 'CORONAK_POL_PCF_PREM',
      'st_rt': 0.045,
      'optima_rt': 0.18,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'tx_2yr_rt': 0.0225,
      'grb_rt': 0.00,
      'ngrb_rt_h': 0.045,
      'ngrb_rt_l': 0.01,
      'option': 'CORONAK_OPTION',
      'large_sa_limit1': 400000,
      'large_sa_dis_rate1': 0.0005,
      'large_sa_limit2': 800000,
      'large_sa_dis_rate2': 0.001,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'hw_disc_rt': 0.05,
      'disc_rt_ind': 0.1,
      'gst_rt': 0.045,
      'optima_gst_rt': 0.18,
      'policy_fee': 0,
      'pay_mthd': 'COMM_PARMS',
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'upsell': '1',
      'nri': 1,
      'Max_Adilt_Count_Single': 2,
      'Max_Adilt_Count_Floater': 2,
      'Max_Child_Count': 3,
      'consider_enhanced': 0,
      'prod_versions': ['C2PCK', 'C2PCKR', 'C2PCKL', 'C2PCKS'],
      'ctg': 'C',
      'uin': '101Y119V01',
      'default_premiumval': 50000
    },
    'C2PCK': {
      'id': 'C2PCK',
      'name': 'Click 2 Protect Corona Kavach',
      'ctg': 'C'
    },
    'C2PCS': {
      'id': 'C2PCS',
      'name': 'Click 2 Protect Corona Shield',
      'min_age': 1,
      'max_age': 708,
      'min_mat_age': 216,
      'max_mat_age': 900,
      'age': 'C2PCS_AGE',
      'mat_age': 'C2PCS_AGE',
      'term': 'C2PCS_TERM',
      'disc_rt_r': 0.055,
      'disc_rt_s': 0.02,
      'pay_mthd': 'COMM_PARMS',
      'freq': 'COMM_PARMS',
      'optima_freq': 'C2PCS_FREQ',
      'pptOption': 'P1C2PL_PPTOPTION',
      'ppt': 'P1C2PL_TERM',
      'min_sa': 128337,
      'max_sa': 5000000000,
      'optima_min_sa': 'C2PCS_MINSA',
      'optima_max_sa': 500000,
      'min_prem': 'C2PCS_POL_PCF_PREM',
      'st_rt': 0.045,
      'optima_rt': 0.18,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'tx_2yr_rt': 0.0225,
      'grb_rt': 0.00,
      'ngrb_rt_h': 0.045,
      'ngrb_rt_l': 0.01,
      'option': 'C2PCS_OPTION',
      'large_sa_limit1': 400000,
      'large_sa_dis_rate1': 0.0005,
      'large_sa_limit2': 800000,
      'large_sa_dis_rate2': 0.001,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'hw_disc_rt': 0.05,
      'gst_rt': 0.045,
      'optima_gst_rt': 0.18,
      'policy_fee': 0,
      'pay_mthd': 'COMM_PARMS',
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'upsell': '1',
      'nri': 1,
      'Max_Adilt_Count_Single': 2,
      'Max_Adilt_Count_Floater': 2,
      'Max_Child_Count': 3,
      'consider_enhanced': 0,
      'prod_versions': ['C2PCS', 'C2PCSR', 'C2PCSL', 'C2PCSS'],
      'ctg': 'C',
      'uin': '101Y120V02',
      'default_premiumval': 50000
    },
    'C2POS': {
      'id': 'C2POS',
      'name': 'Click 2 Protect Optima Secure',
      'min_age': 1,
      'max_age': 708,
      'min_mat_age': 216,
      'max_mat_age': 900,
      'age': 'C2POS_AGE',
      'mat_age': 'C2POS_AGE',
      'term': 'C2POS_TERM',
      'disc_rt_r': 0.055,
      'disc_rt_s': 0.05,
      'pay_mthd': 'COMM_PARMS',
      'freq': 'COMM_PARMS',
      'optima_freq': 'C2POS_FREQ',
      'pptOption': 'P1C2PL_PPTOPTION',
      'ppt': 'P1C2PL_TERM',
      'min_sa': 128337,
      'max_sa': 5000000000,
      'optima_min_sa': 'C2POS_MINSA',
      'optima_max_sa': 20000000,
      'min_prem': 'C2POS_POL_PCF_PREM',
      'st_rt': 0.045,
      'optima_rt': 0.18,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'tx_2yr_rt': 0.0225,
      'grb_rt': 0.00,
      'ngrb_rt_h': 0.045,
      'ngrb_rt_l': 0.01,
      'option': 'C2POS_OPTION',
      'large_sa_limit1': 400000,
      'large_sa_dis_rate1': 0.0005,
      'large_sa_limit2': 800000,
      'large_sa_dis_rate2': 0.001,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'hw_disc_rt': 0.05,
      'gst_rt': 0.045,
      'optima_gst_rt': 0.18,
      'policy_fee': 0,
      'pay_mthd': 'COMM_PARMS',
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'upsell': '1',
      'nri': 1,
      'Max_Adilt_Count_Single': 2,
      'Max_Adilt_Count_Floater': 2,
      'Max_Child_Count': 3,
      'consider_enhanced': 0,
      'prod_versions': ['C2POS', 'C2POSR', 'C2POSL', 'C2POSS'],
      'ctg': 'C',
      'uin': '101Y122V02',
      'default_premiumval': 50000
    },

    'P1C2PL': {
      'id': 'P1C2PL',
      'name': 'HDFC Life Click 2 Protect Life',
      'freq': 'P1C2PL_FREQ',
      'pay_mthd': 'COMM_PARMS',
      'min_sa': 'P1C2PL_MINSA',
      'max_sa': 'P1C2PL_MAXSA',
      'pptOption': 'P1C2PL_PPTOPTION',
      'term': 'P1C2PL_TERM',
      'ppt': 'P1C2PL_TERM',
      'age': 'P1C2PL_AGE',
      'min_prem': 'P1C2PL_MIN_PREM',
      'default_term': 10,
      'upsell': '1',
      'gst_rt': 'P1C2PL_GST_RT',
      'policy_fee': 0,
      'st_rt': 'P1C2PL_ST_RT',
      'ec_rt': 0,
      'emp_dis_rt': 0,
      'ktax': 'P1C2PL_KTAX',
      'options': 'P1C2PL_FEATURES',
      'uin': '101N139V05',
      'ctg': 'P',
      'upsell': '1',
      'allow_bkdt': 1,
      'prod_versions': ['P1C2PL'],

    },
    'P1C2PLE': {
      'id': 'P1C2PLE',
      'name': 'HDFC Life Click 2 Protect Life(spl)',
      'uin': '101N139V05',
      'emp_dis_rt': 0.01,
      'is_spl': 'P1C2PL',
      'upsell': '1',
      'allow_bkdt': 1,
      'prod_versions': ['P1C2PLE'],
    },
    'P1C2PS': {
      'id': 'P1C2PS',
      'name': 'HDFC Life Click 2 Protect Super',
      'freq': 'P1C2PS_FREQ',
      'ladb_freq': 'P1C2PS_LADB_FREQ',
      'pay_mthd': 'COMM_PARMS',
      'min_sa': 'P1C2PS_MINSA',
      'max_sa': 'P1C2PS_MAXSA',
      'pptOption': 'P1C2PS_PPTOPTION',
      'term': 'P1C2PS_TERM',
      'ppt': 'P1C2PS_TERM',
      'term_month': 'P1C2PS_TERM',
      'level': 'P1C2PS_LEVEL',
      'amr': 'P1C2PS_LEVEL',
      'ladb': 'P1C2PS_LEVEL',
      'ladb_per': 'P1C2PS_LEVEL',
      'age': 'P1C2PS_AGE',
      'min_prem': 'P1C2PS_MIN_PREM',
      'default_term': 10,
      'upsell': '1',
      'gst_rt': 'P1C2PS_GST_RT',
      'policy_fee': 0,
      'st_rt': 'P1C2PS_ST_RT',
      'ec_rt': 0,
      'emp_dis_rt': 0,
      'ktax': 'P1C2PS_KTAX',
      'options': 'P1C2PS_FEATURES',
      'uin': '101N145V02',
      'ctg': 'P',
      'upsell': '1',
      'allow_bkdt': 1,
      'prod_versions': ['P1C2PS'],

    },
    'P1C2PSE': {
      'id': 'P1C2PSE',
      'name': 'HDFC Life Click 2 Protect Super(spl)',
      'uin': '101N145V02',
      'emp_dis_rt': 0.05,
      'is_spl': 'P1C2PS',
      'upsell': '1',
      'allow_bkdt': 1,
      'prod_versions': ['P1C2PSE'],
    },
    'P2C2PEL': {
      'id': 'P2C2PEL',
      'name': 'HDFC Life Click 2 Protect Elite',
      'freq': 'P2C2PEL_FREQ',
      'ladb_freq': 'P2C2PEL_LADB_FREQ',
      'pay_mthd': 'COMM_PARMS',
      'min_sa': 'P2C2PEL_MINSA',
      'max_sa': 'P2C2PEL_MAXSA',
      'pptOption': 'P2C2PEL_PPTOPTION',
      'term': 'P2C2PEL_TERM',
      'ppt': 'P2C2PEL_TERM',
      'term_month': 'P2C2PEL_TERM',
      'level': 'P2C2PEL_LEVEL',
      'amr': 'P2C2PEL_LEVEL',
      'ladb': 'P2C2PEL_LEVEL',
      'ladb_per': 'P2C2PEL_LEVEL',
      'age': 'P2C2PEL_AGE',
      'min_prem': 'P2C2PEL_MIN_PREM',
      'default_term': 10,
      'upsell': '1',
      'gst_rt': 'P2C2PEL_GST_RT',
      'policy_fee': 0,
      'st_rt': 'P2C2PEL_ST_RT',
      'ec_rt': 0,
      'emp_dis_rt': 0,
      'ktax': 'P2C2PEL_KTAX',
      'options': 'P2C2PEL_FEATURES',
      'uin': '101XXXXV01',
      'ctg': 'P',
      'upsell': '1',
      'allow_bkdt': 1,
      'prod_versions': ['P2C2PEL'],

    },
    'P2C2PELE': {
      'id': 'P2C2PEL',
      'name': 'HDFC Life Click 2 Protect Elite(spl)',
      'uin': '101XXXXV01',
      'emp_dis_rt': 0.05,
      'is_spl': 'P2C2PEL',
      'upsell': '1',
      'allow_bkdt': 1,
      'prod_versions': ['P2C2PELE'],
    },
    'COHPOC': {
      'id': 'COHPOC',
      'name': 'Super Protect Plan',
      'freq': 'COHPOC_FREQ',
      'ladb_freq': 'COHPOC_LADB_FREQ',
      'pay_mthd': 'COMM_PARMS',
      'min_sa': 'COHPOC_MINSA',
      'max_sa': 'COHPOC_MAXSA',
      'pptOption': 'COHPOC_PPTOPTION',
      'term': 'COHPOC_TERM',
      'ppt': 'COHPOC_TERM',
      'term_month': 'COHPOC_TERM',
      'level': 'COHPOC_LEVEL',
      'amr': 'COHPOC_LEVEL',
      'ladb': 'COHPOC_LEVEL',
      'ladb_per': 'COHPOC_LEVEL',
      'age': 'COHPOC_AGE',
      'min_prem': 'COHPOC_MIN_PREM',
      'default_term': 10,
      'upsell': '1',
      'gst_rt': 'COHPOC_GST_RT',
      'policy_fee': 0,
      'st_rt': 'COHPOC_ST_RT',
      'ec_rt': 0,
      'emp_dis_rt': 0,
      'ktax': 'COHPOC_KTAX',
      'options': 'COHPOC_FEATURES',
      'uin': '101N145V01',
      'ctg': 'P',
      'upsell': '1',
      'allow_bkdt': 1,
      'prod_versions': ['COHPOC'],

    },
    'ESTE': {
      'id': 'ESTE',
      'name': 'HDFC Life Smart Term Edge',
      'freq': 'ESTE_FREQ',
      'pay_mthd': 'COMM_PARMS',
      'rider': 'ESTE_RIDERS',
      'min_sa': 'ESTE_MINSA',
      'max_sa': 'ESTE_MAXSA',
      'pptOption': 'ESTE_PPTOPTION',
      'term': 'ESTE_TERM',
      'ppt': 'ESTE_TERM',
      'age': 'ESTE_AGE',
      'min_prem': 'ESTE_MIN_PREM',
      'default_term': 18,
      'upsell': '1',
      'gst_rt': 0.045,
      'policy_fee': 0,
      'st_rt': 0.045,
      'tx_2yr_rt': 0.0225,
      'ec_rt': 0,
      'emp_dis_rt': 0,
      'has_rider': true,
      'ktax': 'ESTE_KTAX',
      'options': 'ESTE_FEATURES',
      'uin': '101N153V01',
      'ctg': 'P',
      'upsell': '1',
      'allow_bkdt': 0,
      'prod_versions': ['ESTE'],

    },
    'ESTEE': {
      'id': 'ESTEE',
      'name': 'HDFC Life Smart Term Edge (Spl)',
      'rider': 'ESTE_RIDERS',
      'uin': '101N153V01',
      'emp_dis_rt': 0.05,
      'is_spl': 'ESTE',
      'has_rider': true,
      'upsell': '1',
      'allow_bkdt': 0,
      'prod_versions': ['ESTEE'],
    },

    'SANPAR': {
      'id': 'SANPAR',
      'name': 'HDFC Life Sanchay Par Advantage',
      'yesbank_name': 'HDFC Life Sanchay Par Advantage',
      /*'yesbank_Sanmax' :'HDFC Life Sanchay Par Advantage',*/
      'premium': 'SANPAR_PREM_LIMITS',
      'ppt': 'SANPAR_PPT_LIMITS',
      'term': 'SANPAR_PT_LIMITS',
      'freq': 'COMM_PARMS',
      'pay_mthd': 'COMM_PARMS',
      'min_sa': 300000,
      'age': 'SANPAR_AGE',
      'cash_bonus_rt': 0.04,
      //'tb_rt_ii'		 :0.4,
      //'tb_rt_di'		 :0.45,
      'gst_rt': 0.045,
      'policy_fee': 0,
      'st_rt': 0.045,
      'ec_rt': 0,
      'tx_2yr_rt': 0.0225,
      'emp_dis_rt': 1,
      'ctg': "T",
      'nri': 1,
      'uin': '101N136V03',
      'ktax': 0.0025,
      'ktx_2yr_rt': 0.02375,
      'upsell': '1',
      'prod_versions': ['SANPAR', 'SANPARL']
    },
    'SANPARE': {
      'id': 'SANPARE',
      'name': 'HDFC Life Sanchay Par Advantage(Spl)',
      'emp_dis_rt': 1.03,
      'uin': '101N136V03',
      'is_spl': 'SANPAR',
      'upsell': '1',
      'emp_dis_rt': 1.03,
      'prod_versions': ['SANPARE', 'SANPARLE']
    },

    'PROTS': {
      'id': 'PROTS',
      'name': 'Protect plus with Sanchay'
    },
    'C2PRN': {
      'id': 'C2PRN',
      'name': 'Click2Protect with Returns'
    },

    'C2INS': {
      'id': 'C2INS',
      'name': 'C2I-N-Sanchay',
      'fund_opt': 'UL8C2I_FUND'
    },
    'C2INSCG': {
      'id': 'C2INSCG',
      'name': 'C2I-N-Sanchay(CG)',
      'fund_opt': 'UL8C2I_FUND',
      'is_spl': 'C2INS'
    },
    'SANMAX': {
      'id': 'SANMAX',
      'name': 'Sanchay Maximiser',
      /*'yesbank_name':'Sanchay Maximiser-Yes Bank',
      'yesbank_Sanmax':'Family Income Solution'*/
      'yesbank_name': 'Family Income Solution'
    },
    'SANMAXFIS': {
      'id': 'SANMAXFIS',
      'name': 'Family Income Solution',
      'yesbank_name': 'Family Income Solution',
      'prod_id': 'SANMAX'
    },
    'C2WNSA': {
      'id': 'C2WNSA',
      'name': 'Click2Wealth & Sanchay',
      'fund_opt': 'UL8CIP_FUND'
    },
    'C2INSFMP': {
      'id': 'C2INSFMP',
      'name': 'HDFC Life C2I-N-Sanchay Fixed Maturity Plan',
      'fund_opt': 'UL8C2I_FUND'
    },
    'NIVSFMP': {
      'id': 'NIVSFMP',
      'name': 'Sampoorn Nivesh-N-Sanchay Fixed Maturity Plan',
      'fund_opt': 'UL8NIV_FUND'
    },
    'SRPGPP': {
      'id': 'SRPGPP',
      'name': 'Systematic Retirement Plan - Maximizer'
    },
    'C2WNSFMP': {
      'id': 'C2WNSFMP',
      'name': 'Click2Wealth & Sanchay Fixed Maturity Plan',
      'fund_opt': 'UL8CIP_FUND'
    },
    'AMHI': {
      'id': 'AMHI',
      'name': 'Super Income Health',
      'min_age': 1,
      'max_age': 708,
      'min_mat_age': 216,
      'max_mat_age': 900,
      'age': 'AMHI_AGE',
      'mat_age': 'AMHI_AGE',
      'term': 'AMHI_TERM',
      'disc_rt_r': 0.055,
      'disc_rt_s': 0.02,
      'pay_mthd': 'COMM_PARMS',
      'freq': 'COMM_PARMS',
      'optima_freq': 'AMHI_FREQ',
      'pptOption': 'SIPPAR_PPTOPTION',
      'ppt': 'SIPPARH_TERM',
      'pyoterm': 'SIPPARH_POTERM',
      'min_sa': 128337,
      'max_sa': 5000000000,
      'optima_min_sa': 'AMHI_MINSA',
      'optima_max_sa': 10000000,
      'min_prem': 'SIPPARH_POL_PCF_PREM',
      'st_rt': 0.045,
      'optima_rt': 0.18,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'tx_2yr_rt': 0.0225,
      'grb_rt': 0.00,
      'ngrb_rt_h': 0.045,
      'ngrb_rt_l': 0.01,
      'option': 'SIPPARH_OPTION',
      'large_sa_limit1': 400000,
      'large_sa_dis_rate1': 0.0005,
      'large_sa_limit2': 800000,
      'large_sa_dis_rate2': 0.001,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'gst_rt': 0.045,
      'optima_gst_rt': 0.18,
      'policy_fee': 0,
      'pay_mthd': 'COMM_PARMS',
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'upsell': '1',
      'nri': 1,
      'Max_Adilt_Count_Single': 4,
      'Max_Adilt_Count_Floater': 2,
      'Max_Child_Count': 5,
      'consider_enhanced': 0,
      'prod_versions': ['SIPPARH', 'SIPPARHR', 'SIPPARHL', 'SIPPARHS', 'SIPPARHER', 'SIPPARHEL', 'SIPPARHES'],
      'ctg': 'C',
      'uin': '101Y115V01',
      'default_premiumval': 50000
    },

    'SIPPARH': {
      'id': 'SIPPARH',
      'name': 'Super Income Health',
      'ctg': 'C'
    },

    'EALPTPH': {
      'id': 'EALPTP',
      'name': 'HDFC Life ClassicAssure Plus Health',
    },

    'EALPTP': {
      'id': 'EALPTP',
      'name': 'HDFC Life ClassicAssure Plus',
      'age': 'EALPTP_AGE',
      'mat_age': 'EALPTP_AGE',
      'min_age': 1,
      'max_age': 720,
      'min_mat_age': 216,
      'max_mat_age': 900,
      'term': 'EALPTP_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'EALPTP_TERM',
      'min_prem': 'EALPTP_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.03,
      'ngrb_rt_h': 0.03,
      'ngrb_rt_l': 0.015,
      'large_sa_limit': 1000000,
      'large_sa_dis_rate': 0.05,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 1,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N089V04',
      'pc': 'EALPTP',
      'ctg': "T",
      'default_premiumval': 50000
    },
    'EALPTPE': {
      'id': 'EALPTPE',
      'name': 'HDFC Life ClassicAssure Plus (Spl)',
      'emp_dis_rt': 0.03,
      'uin': '101N089V04',
      'is_spl': 'EALPTP',
      'upsell': '1'
    },

    'EALPTPV9': {
      'id': 'EALPTPV9',
      'name': 'HDFC Life ClassicAssure Plus',
      'age': 'EALPTPV9_AGE',
      'mat_age': 'EALPTPV9_AGE',
      'min_age': 1,
      'max_age': 720,
      'min_mat_age': 216,
      'max_mat_age': 900,
      'term': 'EALPTPV9_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'EALPTPV9_TERM',
      'min_prem': 'EALPTPV9_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.03,
      'ngrb_rt_h': 0.03,
      'ngrb_rt_l': 0.015,
      'large_sa_limit': 1000000,
      'large_sa_dis_rate': 0.05,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 1,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N089V05',
      'pc': 'EALPTPV9',
      'ctg': "T",
      'default_premiumval': 50000
    },

    'EALPTPV9E': {
      'id': 'EALPTPV9E',
      'name': 'HDFC Life ClassicAssure Plus (Spl)',
      'emp_dis_rt': 0.03,
      'uin': '101N089V05',
      'is_spl': 'EALPTPV9',
      'upsell': '1'
    },
    'GPP': {
      'id': 'GPP',
      'name': 'HDFC Life Guaranteed Pension Plan',
      'min_age': 216,
      'max_age': 840,
      'min_mat_age': 480,
      'max_mat_age': 960,
      'term': 'GPP_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'GPP_TERM',
      'min_prem': 'GPP_POL_PCF_PREM',
      'min_sa': 92014,
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.03,
      'ngrb_rt_h': 0,
      'ngrb_rt_l': 0,
      'accm_rt': 0.06,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': '0',
      'allow_bkdt': 1,
      'bkdt_rt': 0.13,
      'ctg': "T",
      'upsell': '1',
      'uin': '101N092V11',
      'default_premiumval': 50000,
      'prod_versions': ['GPP', 'GPPV9', 'GPPV9S']
    },
    // change 10-9-2013
    'GPPE': {
      'id': 'GPPE',
      'name': 'HDFC Life Guaranteed Pension Plan (Spl)',
      'emp_dis_rt': 0.02,
      'uin': '101N092V11',
      'is_spl': 'GPP',
      'upsell': '1',
      'prod_versions': ['GPPE', 'GPPV9E', 'GPPV9SE']
    },
    'GPPCOMBO': {
      'id': 'GPPCOMBO',
      'name': 'HDFC Life Guaranteed Pension Plan (Combo)',
      'is_combo': 'GPP',
      'min_comb_prem': 1000000,
      'max_comb_prem': 5000000,
      'upsell': '1',
      'prod_versions': ['GPPV9']
    },
    'GPPCOMBOE': {
      'id': 'GPPCOMBOE',
      'name': 'HDFC Life Guaranteed Pension Plan (Combo-Spl)',
      'emp_dis_rt': 0.02,
      'is_combo': 'GPPE',
      'is_spl': 'GPPCOMBO',
      'min_comb_prem': 1000000,
      'max_comb_prem': 5000000,
      'upsell': '1',
      'prod_versions': ['GPPV9E']
    },

    'GSP': {
      'id': 'GSP',
      'name': 'HDFC Life Guaranteed Savings Plan',
      'age': 'GSP_AGE',
      'mat_age': 'GSP_AGE',
      'min_sa': 'GSP_SA',
      'max_sa': 'GSP_SA',
      'term': 'GSP_TERM',
      'freq': 'GSP_FREQ',
      'ppt': 'GSP_TERM',
      'min_prem': 'GSP_POL_PCF_PREM',
      'max_prem': 'GSP_POL_PCF_PREM',
      'emp_dis_rt': 0,
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'tx_2yr_rt': 0.0225,
      'ktax': 0.0025,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.00,
      'ngrb_rt_h': 0.00,
      'ngrb_rt_l': 0.00,
      'large_sa_dis_rate': 0.000,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N131V02',
      'pc': 'GSP',
      'ctg': "T"
    },

    'GSPE': {
      'id': 'GSPE',
      'name': 'HDFC Life Guaranteed Savings Plan (Spl)',
      'emp_dis_rt': 'GSP_EMP_DISC',
      'uin': '101N131V02',
      'is_spl': 'GSP',
      'upsell': '1'
    },
    'GSPV9': {
      'id': 'GSPV9',
      'name': 'HDFC Life Guaranteed Savings Plan',
      'age': 'GSPV9_AGE',
      'mat_age': 'GSPV9_AGE',
      'min_sa': 'GSPV9_SA',
      'max_sa': 'GSPV9_SA',
      'term': 'GSPV9_TERM',
      'freq': 'GSPV9_FREQ',
      'ppt': 'GSPV9_TERM',
      'min_prem': 'GSPV9_POL_PCF_PREM',
      'max_prem': 'GSPV9_POL_PCF_PREM',
      'emp_dis_rt': 0,
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'tx_2yr_rt': 0.0225,
      'ktax': 0.0025,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.00,
      'ngrb_rt_h': 0.00,
      'ngrb_rt_l': 0.00,
      'large_sa_dis_rate': 0.000,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N131V02',
      'pc': 'GSPV9',
      'ctg': "T"
    },


    'GSPV9E': {
      'id': 'GSPV9E',
      'name': 'HDFC Life Guaranteed Savings Plan (Spl)',
      'emp_dis_rt': 'GSPV9_EMP_DISC',
      'uin': '101N131V02',
      'is_spl': 'GSPV9',
      'upsell': '1'
    },

    'SIPPAR': {
      'id': 'SIPPAR',
      'name': 'HDFC Life Super Income Plan',
      'min_age': 1,
      'max_age': 708,
      'min_mat_age': 216,
      'max_mat_age': 900,
      'age': 'SIPPAR_AGE',
      'mat_age': 'SIPPAR_AGE',
      'term': 'SIPPAR_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'SIPPAR_TERM',
      'min_sa': 128337,
      'min_prem': 'SIPPAR_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.00,
      'ngrb_rt_h': 0.045,
      'ngrb_rt_l': 0.01,
      'option': 'SIPPAR_OPTION',
      'large_sa_limit1': 400000,
      'large_sa_dis_rate1': 0.0005,
      'large_sa_limit2': 800000,
      'large_sa_dis_rate2': 0.001,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 1,
      'bkdt_rt': 0.13,
      'pyoterm': 'SIPPAR_POTERM',
      'nri': 1,
      'uin': '101N098V04',
      'ctg': "T",
      'upsell': 1,
      'default_premiumval': 50000
    },
    'SIPPARE': {
      'id': 'SIPPARE',
      'name': 'HDFC Life Super Income Plan (Spl)',
      'emp_dis_rt': 0.03,
      'uin': '101N098V04',
      'is_spl': 'SIPPAR',
      'upsell': '1'
    },
    'SIPPARV9': {
      'id': 'SIPPARV9',
      'name': 'HDFC Life Super Income Plan',
      'min_age': 1,
      'max_age': 708,
      'min_mat_age': 216,
      'max_mat_age': 900,
      'age': 'SIPPARV9_AGE',
      'mat_age': 'SIPPARV9_AGE',
      'term': 'SIPPARV9_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'SIPPARV9_TERM',
      'pptOption': 'SIPPARV9_PPTOPTION',
      'min_sa_l': 76198,
      'min_sa_s': 18457,
      'min_prem': 'SIPPARV9_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.00,
      'ngrb_rt_h': 0.045,
      'ngrb_rt_l': 0.01,
      'option': 'SIPPARV9_OPTION',
      'large_sa_limit1': 400000,
      'large_sa_dis_rate1': 0.0005,
      'large_sa_limit2': 800000,
      'large_sa_dis_rate2': 0.001,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 1,
      'bkdt_rt': 0.13,
      'pyoterm': 'SIPPARV9_POTERM',
      'nri': 1,
      'uin': '101N098V05',
      'ctg': "T",
      'upsell': 1,
      'default_premiumval': 50000,
      "prod_versions": ["SIPPARV9", "SIPPARV9S"]
    },
    'SIPPARV9E': {
      'id': 'SIPPARV9E',
      'name': 'HDFC Life Super Income Plan (Spl)',
      'emp_dis_rt': 0.03,
      'uin': '101N098V05',
      'is_spl': 'SIPPARV9',
      'upsell': '1',
      "prod_versions": ["SIPPARV9E", "SIPPARV9ES"]
    },
    'LIFEPAR': {
      'id': 'LIFEPAR',
      'name': 'HDFC Life Super Savings Plan',
      'min_age': 1,
      'max_age': 720,
      'min_mat_age': 216,
      'max_mat_age': 900,
      'term': 'LIFEPAR_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'LIFEPAR_TERM',
      'min_prem': 'LIFEPAR_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.00,
      'ngrb_rt_h': 0.035,
      'ngrb_rt_l': 0.015,
      'large_sa_dis_rate': 0.000,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 1,
      'bkdt_rt': 0.13,
      'nri': 1,
      'ctg': "T",
      'upsell': '1',
      'uin': '101N090V01'
    },
    'LIFEPARE': {
      'id': 'LIFEPARE',
      'name': 'HDFC Life Super Savings Plan (Spl)',
      'emp_dis_rt': 0.03,
      'uin': '101N090V01',
      'is_spl': 'LIFEPAR',
      'upsell': '1'
    },
    'PENPAR': {
      'id': 'PENPAR',
      'name': 'HDFC Life Personal Pension Plus',
      'min_age': 216,
      'max_age': 780,
      'min_mat_age': 660,
      'max_mat_age': 900,
      'term': 'PENPAR_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'PENPAR_TERM',
      'min_prem': 'PENPAR_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.00,
      'ngrb_rt_h': 0.035,
      'ngrb_rt_l': 0.015,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 1,
      'bkdt_rt': 0.13,
      'ctg': "T",
      'upsell': '1',
      'uin': '101N091V04',
      'default_premiumval': 50000,
      'prod_versions': ['PENPAR', 'PENPARV9']
    },
    'SPP': {
      'id': 'SPP',
      'name': 'HDFC Life Systematic Pension Plan',
      'min_age': 216,
      'max_age': 900,
      'min_mat_age': 480,
      'max_mat_age': 960,
      'term': 'SPP_TERM',
      'freq': 'SPP_FREQ',
      'ppt': 'SPP_TERM',
      'min_sa': 'SPP_MINSA',
      'min_prem': 'SPP_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.00,
      'ngrb_rt_h': 0.035,
      'ngrb_rt_l': 0.015,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 1,
      'bkdt_rt': 0.13,
      'ctg': "T",
      'upsell': '1',
      'uin': '101N144V02',
      'default_premiumval': 50000,
      'prod_versions': ['SPP', 'SPPR', 'SPPL', 'SPPS']
    },
    'SPPCOMBO': {
      'id': 'SPPCOMBO',
      'name': 'HDFC Life Smart Second Innings',
      'is_combo': 'SPP',
      'min_comb_prem': 30000,
      'max_comb_prem': 50000000,
      'upsell': '1',
      'prod_versions': ['SPP', 'SPPR', 'SPPL', 'SPPS']
    },
    'SANCH': {
      'id': 'SANCH',
      'name': 'HDFC Life Sanchay',
      'min_age': 1,
      'max_age': 720,
      'min_mat_age': 216,
      'min_age_comb': 216,
      'max_mat_age': 'SANCH_AGE',
      'term': 'SANCH_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'SANCH_TERM',
      'min_sa': 1000,
      'min_sa_comb': 3628,
      'min_prem': 'SANCH_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': { '1': { 'minterm': 10, 'maxterm': 19, 'rt': 0.08 }, '2': { 'minterm': 20, 'maxterm': 40, 'rt': 0.09 } },
      'ngrb_rt_h': 0.03,
      'ngrb_rt_l': 0.015,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N097V07',
      'ctg': "T",
      'pc': 'sanchay',
      'default_premiumval': 50000
    },
    'SANCHE': {
      'id': 'SANCHE',
      'name': 'HDFC Life Sanchay(Spl)',
      'emp_dis_rt': 0.03,
      'uin': '101N097V07',
      'is_spl': 'SANCH',
      'pc': 'sanchaye',
      'upsell': '1'
    },
    'SANCHV9': {
      'id': 'SANCHV9',
      'name': 'HDFC Life Sanchay',
      'min_age': 'SANCHV9_AGE',
      'max_age': 'SANCHV9_AGE',
      'min_mat_age': 'SANCHV9_AGE',
      'min_age_comb': 'SANCHV9_AGE',
      'max_mat_age': 'SANCHV9_AGE',
      'term': 'SANCHV9_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'SANCHV9_TERM',
      'pptOption': 'SANCHV9_PPTOPTION',
      'min_sa': 1,
      'min_sa_comb': 3628,
      'min_sa_posp': 2510,
      'min_prem': 'SANCHV9_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': { '1': { 'minterm': 5, 'maxterm': 19, 'rt': 0.08 }, '2': { 'minterm': 20, 'maxterm': 40, 'rt': 0.09 } },
      'ngrb_rt_h': 0.03,
      'ngrb_rt_l': 0.015,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N097V12',
      'ctg': "T",
      'pc': 'sanchayv9',
      'default_premiumval': 50000,
      "prod_versions": ["SANCHV9", "SANCHV9L", "SANCHV9S"]
    },
    'SANCHV9E': {
      'id': 'SANCHV9E',
      'name': 'HDFC Life Sanchay(Spl)',
      'emp_dis_rt': 0.03,
      'uin': '101N097V12',
      'is_spl': 'SANCHV9',
      'pc': 'sanchayv9e',
      'upsell': '1',
      "prod_versions": ["SANCHV9E", "SANCHV9EL", "SANCHV9ES"]
    },

    'SANCHP': {
      'id': 'SANCHP',
      'name': 'HDFC Life Sanchay Plus',
      'yesbank_name': 'HDFC Life Sanchay Plus',
      /*	'yesbank_Sanmax':'HDFC Life Sanchay Plus',*/
      'min_age': 'SANCHP_AGE',
      'max_age': 'SANCHP_AGE',
      'min_mat_age': 'SANCHP_AGE',
      'max_mat_age': 'SANCHP_AGE',
      'term': 'SANCHP_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'SANCHP_TERM',
      'min_sa': 300000,
      'min_prem': 'SANCHP_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': { '1': { 'minterm': 10, 'maxterm': 19, 'rt': 0.08 }, '2': { 'minterm': 20, 'maxterm': 25, 'rt': 0.09 } },
      'ngrb_rt_h': 0.03,
      'ngrb_rt_l': 0.015,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 1,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N134V18',
      'ctg': "T",
      'pc': 'sanchay',
      'default_premiumval': 50000,
      "prod_versions": ["SANCHP", "SANCHPV9"],
    },
    'SANCHPE': {
      'id': 'SANCHPE',
      'name': 'HDFC Life Sanchay Plus(Spl)',
      'emp_dis_rt': 1.03,
      'uin': '101N134V18',
      'allow_bkdt': 1,
      'is_spl': 'SANCHP',
      'pc': 'sanchaye',
      'ctg': "T",
      'upsell': '1',
      "prod_versions": ["SANCHPE", "SANCHPV9E"],
    },

    'UL7LPT2': {
      'id': 'UL7LPT2',
      'name': 'HDFC SL Crest',
      'min_age': 168,
      'max_age': 660,
      'min_mat_age': '',
      'max_mat_age': 780,
      'min_prem': 50000,
      'freq': ['Annual'],
      'fund_opt': 'UL7LPT2_FUNDOPT',
      'fund_rlvl': 'UL7LPT2_RISKLVL',
      'fund_sfin': 'UL7LPT2_FUNDSFIN',
      'term': [10],
      'ppt': [5],
      'min_sa': 'UL7LPT2_MINSA',
      'max_sa': 20,
      'allow_bkdt': 0,
      'pay_mthd': 'COMM_PARMS',
      'comm_rt': 1,
      'assm_rt': [0.04, 0.08],
      'ktax': 0.19,
      'gst_rt': 0.18,
      'uin': '101L064V03',
      'has_fund': true,
      'nri': 1,
      'irr_ovrride': true,
      'ctg': "U",
      'pc': 'UL8LPT2',
      "prod_versions": ["UL7LPT2", "UL8LPT2", "UL9LPT2"],
      'default_premiumval': 50000,
      'upsell': '1'
    },
    'UL7LPT2E': {
      'id': 'UL7LPT2E',
      'name': 'HDFC SL Crest (Spl)',
      'is_spl': 'UL7LPT2',
      'min_prem': 25000,
      'has_fund': true,
      'upsell': '1',
      'uin': '101L064V03',
      'irr_ovrride': true,
      'pc': 'UL8LPT2E',
      "prod_versions": ["UL7LPT2E", "UL8LPT2E", "UL9LPT2E"],
      'upsell': '1'
    },
    'UL7EA': {
      'id': 'UL7EA',
      'name': 'HDFC SL ProGrowth Super II',
      'age': 'UL7EA_AGE', //
      'min_age': 168,
      'max_age': 780,
      'freq': ['Annual'],
      'rider': 'UL7EA_RIDERS',
      'fund_opt': 'UL7EA_FUNDOPT',  //
      'fund_sfin': 'UL7EA_FUNDSFIN',
      'fund_rlvl': 'UL7EA_RISKLVL',
      'term': 'UL7EA_TERM',
      'ppt': 'UL7EA_TERM',
      'min_prem': 15000,
      'min_sa': 'UL7EA_MINSA',
      'max_sa': 40,
      'allow_bkdt': 0,
      'pay_mthd': 'COMM_PARMS',
      'comm_rt': 1,
      'assm_rt': [0.04, 0.08],
      'gst_rt': 0.18,
      'ktax': '0.19',
      'uin': '101L066V05',
      'has_rider': true,
      'has_fund': true,
      'disben_int_rt': 0.06,
      'nri': 1,
      'upsell': '1',
      'irr_ovrride': true,
      'ctg': "U",
      'pc': 'UL8EA',
      'prod_versions': ["UL7EA", "UL8EA", "UL9EA"],
      'default_premiumval': 50000
    },
    'UL7EAE': {
      'id': 'UL7EAE',
      'name': 'HDFC SL ProGrowth Super II (Spl)',
      'is_spl': 'UL7EA',
      'loy_add_mat': { '1': { 'yr': 10, 'rt': 0.35 }, '2': { 'yr': 15, 'rt': 0.70 } },
      'uin': '101L066V05',
      'has_fund': true,
      'has_rider': true,
      'irr_ovrride': true,
      'pc': 'UL8EAE',
      'upsell': '1',
      "prod_versions": ["UL7EAE", "UL8EAE", "UL9EAE"]
    },
    'UL7ESP3': {
      'id': 'UL7ESP3',
      'name': 'ProGrowth Maximiser - Free Asset',
      'min_age': 168,
      'max_age': 780,
      'min_mat_age': '',
      'max_mat_age': 900,
      'min_prem': 50000,
      'min_topup': 10000,
      'min_topup_year': 1,
      'max_topup_year': 5,
      'freq': 'UL7ESP3_FREQ',
      'fund_opt': 'COMM_PARMS',
      'term': 'UL7ESP3_TERM',
      'ppt': [1],
      'max_sa': 10,
      'allow_bkdt': 0,
      'pay_mthd': 'UL7ESP3_PAYMTHD',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.19,
      'has_topup': true,
      'has_fund': true,
      'topup_val_chk': true,
      'nri': 1,
      'uin': '101L067V03',
      'ctg': "U",
      'emi': 'y',
      'upsell': '1',
      'pc': 'UL8ESP3',
      "prod_versions": ["UL7ESP3", "UL8ESP3"],
      'default_premiumval': 50000
    },
    'UL7ESP3E': {
      'id': 'UL7ESP3E',
      'name': 'ProGrowth Maximiser - Free Asset (Spl)',
      'min_topup_year': 1,
      'max_topup_year': 'UL7ESP3_TOPUP',
      'term': [5],
      'max_sa': 1.25,
      'min_prem': 10000,
      'uin': '101L067V03',
      'has_topup': true,
      'has_fund': true,
      'nri': 1,
      'is_spl': 'UL7ESP3',
      'pc': 'UL8ESP3E',
      'upsell': '1',
      "prod_versions": ["UL7ESP3E", "UL8ESP3E"]
    },
    'UL8C2I': {
      'id': 'UL8C2I',
      'name': 'HDFC Life Click 2 Invest - ULIP',
      'min_age': 1,
      'max_age': 780,
      'min_mat_age': 216,
      'max_mat_age': 900,
      'min_prem': 'UL8C2I_POL_PCF_PREM',
      'fund_opt': 'UL8C2I_FUND',
      'fund_rlvl': 'UL8C2I_RISKLVL',
      'fund_sfin': 'UL8C2I_FUNDSFIN',
      'freq': 'UL8C2I_FREQ',
      'term': 'UL8C2I_TERM',
      'ppt': 'UL8C2I_TERM',
      'sa': 'UL8C2I_SA',
      'pay_mthd': 'COMM_PARMS',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.19,
      'gst_rt': 0.18,
      'comm_rt': 1,
      'allow_bkdt': 0,
      'has_fund': true,
      'nri': 1,
      'upsell': '1',
      'uin': '101L100V04',
      'ctg': "U",
      'default_premiumval': 50000,
      "prod_versions": ["UL8C2I", "UL9C2I"]
    },
    'UL7EA2': {
      'id': 'UL7EA2',
      'name': 'HDFC Life ProGrowth Plus',
      'age': 'UL7EA2_AGE',
      'min_age': 168,
      'max_age': 780,
      'min_prem': 'UL7EA2_PREM',
      'max_prem': 'UL7EA2_PREM',
      'rider': 'UL7EA2_RIDERS',
      'freq': 'UL7EA2_FREQ',
      'fund_opt': 'UL7EA2_FUNDOPT',
      'fund_sfin': 'UL7EA2_FUNDSFIN',
      'fund_rlvl': 'UL7EA2_RISKLVL',
      'term': 'UL7EA2_TERM',
      'ppt': 'UL7EA2_TERM',
      'min_sa': 'UL7EA2_MINSA',
      'max_sa': 40,
      'allow_bkdt': 0,
      'pay_mthd': 'COMM_PARMS',
      'assm_rt': [0.04, 0.08],
      'gst_rt': 0.18,
      'ktax': 0.19,
      'mon_comm_rt': 1,
      'has_rider': true,
      'has_fund': true,
      'nri': 1,
      'upsell': '1',
      'uin': '101L081V06',
      'ctg': "U",
      'pc': 'UL8EA2',
      "prod_versions": ["UL7EA2", "UL8EA2", "UL9EA2"],
      'default_premiumval': 50000
    },
    'UL7EA1': {
      'id': 'UL7EA1',
      'name': 'HDFC SL ProGrowth Flexi',
      'age': 'UL7EA1_AGE',
      'min_age': 168,
      'max_age': 780,
      'min_prem': 'UL7EA1_PREM',
      'rider': 'UL7EA1_RIDERS',
      'freq': 'UL7EA1_FREQ',
      'fund_opt': 'UL7EA1_FUNDOPT',
      'fund_sfin': 'UL7EA1_FUNDSFIN',
      'fund_rlvl': 'UL7EA1_RISKLVL',
      'term': 'UL7EA1_TERM',
      'ppt': 'UL7EA1_TERM',
      'min_sa': 'UL7EA1_MINSA',
      'max_sa': 40,
      'allow_bkdt': 0,
      'pay_mthd': 'COMM_PARMS',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.19,
      'gst_rt': 0.18,
      'mon_comm_rt': 0.75,
      'has_rider': true,
      'has_fund': true,
      'nri': 1,
      'upsell': '1',
      'uin': '101L072V06',
      'ctg': "U",
      'pc': 'UL8EA1',
      "prod_versions": ["UL7EA1", "UL8EA1", "UL9EA1"],
      'default_premiumval': 50000
    },
    'UL7WI1': {
      'id': 'UL7WI1',
      'name': 'HDFC Life Invest Wise Plan',
      'min_age': 540,
      'max_age': 840,
      'min_mat_age': '',
      'max_mat_age': 1020,
      'min_prem': 'UL7WI1_PREMCAT',
      'max_prem': 'UL7WI1_PREMCAT',
      'freq': ['Single'],
      'fund_opt': 'COMM_PARMS',
      'term': [15],
      'ppt': [1],
      'sa': 'UL7WI1_MINSA',
      'allow_bkdt': 0,
      'alloc_rate_prem': 0.975,
      'alloc_rate_topup': 0.99,
      'pay_mthd': 'UL7WI1_PAYMTHD',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.19,
      'has_fund': true,
      'nri': 1,
      'uin': '101L083V02',
      'ctg': "U",
      'emi': 'y',
      'upsell': '1',
      'pc': 'UL8WI1',
      "prod_versions": ["UL7WI1", "UL8WI1"]
    },
    'IANP': {
      'id': 'IANP',
      'name': 'HDFC Life New Immediate Annuity Plan',
      'ann_opt': 'IANP_ANN_OPT',
      'freq': 'COMM_PARMS',
      'age': 'IANP_AGE',
      'min_age': 360,
      'max_age': 1188,
      'sc_rt': 0.0180,
      'ec_rt': 0,
      'gst_rt': 0.0180,
      'en_rt': 0.0020,
      'ktax': 0.001,
      'exist_cust_ppmin': 200000,
      'valid_days': 7,
      'ops_age_input': 'y',
      'uin': '101N084V34',
      'upsell': '1',
      'allow_bkdt': '0',
      "isAnnuity": "1",
      'ctg': "T",
      "prod_versions": ['IANP', "IANP1", "IANP2", 'IANP3', 'IANP4', "IANP5", "IANP6", "IANP7", "IANP8", "IANP9", "IANP10"]
    },
    'UL7NPR1': {
      'id': 'UL7NPR1',
      'name': 'HDFC Life Pension Super Plus',
      'min_age': 420,
      'max_age': 780,
      'min_mat_age': 660,
      'max_mat_age': 900,
      'min_topup_year': 1,
      'min_prem': 'UL7NPR1_MIN_PREM',
      'freq': ['Annual'],
      'fund_opt': 'UL7NPR1_FUNDOPT',
      'term': 'UL7NPR1_TERM',
      'ppt': 'UL7NPR1_TERM',
      'min_topup': 10000,
      'max_topup': 'UL7NPR1_TOPUP',
      'allow_bkdt': 0,
      'pay_mthd': 'COMM_PARMS',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.19,
      'igc_rt': 0.0040,
      'rwi': 0.06,
      'has_topup': true,
      'has_fund': true,
      'uin': '101L085V03',
      'ctg': "U",
      'prod_versions': ["UL7NPR1", "UL8NPR1"],
      'upsell': '1'
      //'pc':'UL8NPR1'
    },
    'UL8APP': {
      'id': 'UL8APP',
      'name': 'HDFC Life Assured Pension Plan',
      'min_age': 216,
      'max_age': 780,
      'min_mat_age': 540,
      'max_mat_age': 900,
      'min_prem': 'UL8APP_MIN_PREM',
      'freq': 'UL8APP_FREQ',
      'fund_opt': 'UL8APP_FUNDOPT',
      'fund_rlvl': 'UL8APP_RISKLVL',
      'fund_sfin': 'UL8APP_FUNDSFIN',
      'term': 'UL8APP_TERM',
      'ppt': 'UL8APP_TERM',
      'min_topup': 10000,
      'max_topup': 'UL8APP_TOPUP',
      'max_prem_slider': 250000000,
      'allow_bkdt': 0,
      'pay_mthd': 'COMM_PARMS',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.19,
      'gst_rt': 0.18,
      'igc_rt': .005,
      'en_rt': 0.0020,
      'rwi': 0.06,
      'has_topup': true,
      'has_fund': true,
      'uin': '101L109V05',
      'ctg': "U",
      'default_premiumval': 50000,
      "prod_versions": ["UL8APP", "UL9APP"]
      //'upsell':'1'
      //'pc':'UL8NPR1'
    },
    'UL8APPE': {
      'id': 'UL8APPE',
      'name': 'HDFC Life Assured Pension Plan (Spl)',
      'uin': '101L109V05',
      'is_spl': 'UL8APP',
      "prod_versions": ["UL8APPE", "UL9APPE"]
    },

    'UL8CG': {
      'id': 'UL8CG',
      'name': 'HDFC Life Capital Shield',
      'age': 'UL8CG_AGE',
      'min_age': 96,
      'max_age': 720,
      'min_mat_age': 216,
      'max_mat_age': 840,
      'min_prem': 'UL8CG_PREM',
      'freq': 'UL8CG_FREQ',
      'fund_opt': 'UL8CG_FUND',
      'fund_rlvl': 'UL8CG_RISKLVL',
      'fund_sfin': 'UL8CG_FUNDSFIN',
      'term': 'UL8CG_TERM',
      'ppt': 'UL8CG_TERM',
      'min_sa': 'UL8CG_SA',
      'max_sa': 'UL8CG_SA',
      'gst_rt': 0.18,
      'allow_bkdt': 0,
      'pay_mthd': 'COMM_PARMS',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.19,
      'igc_rt': .005,
      'mon_comm_rt': 0.75,
      'has_rider': false,
      'has_fund': true,
      'nri': 1,
      'upsell': '1',
      'uin': '101L112V02',
      'ctg': "U",
      'disben_int_rt': 0.08,
      'pvosp_rt': 0.08,
      'default_premiumval': 50000,
      "prod_versions": ["UL8CG", "UL9CG"]
      //'pc':'UL8CG'
    },
    'UL8CGE': {
      'id': 'UL8CGE',
      'name': 'HDFC Life Capital Shield (Spl)',
      'uin': '101L112V02',
      'is_spl': 'UL8CG',
      'upsell': '1',
      "prod_versions": ["UL8CGE", "UL9CGE"]
    },

    'UL7NPR2': {
      'id': 'UL7NPR2',
      'freq': ['Monthly', 'Quarterly', 'Half Yearly', 'Annual'],
      'name': 'HDFC Life Pension Super Plus (Spl)',
      'uin': '101L085V03',
      'has_topup': true,
      'has_fund': true,
      'is_spl': 'UL7NPR1',
      'pc': 'UL8NPR2',
      'upsell': 1,
      "prod_versions": ["UL7NPR2", "UL8NPR2"]
    },
    /* 'HCCP':{
           'id':'HCCP',
             'name':'Critical Care Plan',
             'loading':0.10,
             'p_min':1500,
             'min_age':216,
             'max_age':660,
             'min_mat_age':'-',
             'max_mat_age':'-',
             'pol_expiry_age':'780',
             'term':'HCCP_TERM',
             'freq':'HCCP_FREQ',
             'ppt':'HCCP_TERM',
             'min_sa':200000,
             'max_sa':2000000,
             'min_prem':'HCCP_POL_PCF_PREM',
             'large_sa_limit':1000000,
             'large_sa_dis_rate':0.15,
             'st_rt':0.145,
             'ec_rt':0,
             'gst_rt':0.180,
             'tx_2yr_rt':0.0182,
             'pay_mthd':'COMM_PARMS',
             'emp_dis_rt':0,
             'allow_bkdt':0,
             'uin':'101N035V01',
             'sit1':100,
             'sit2':50,
             'sit3_1':50,
             'sit3_2':50
              },*/
    'T2P': {
      'id': 'T2P',
      'name': 'HDFC Life Click 2 Protect',
      'min_age': 216,
      'max_age': 660,
      'min_mat_age': 336,
      'max_mat_age': 780,
      'term': 'T2P_TERM',
      'loading': 0.035,
      'freq': ['Annual'],
      'ppt': 'T2P_TERM',
      'min_sa_pos': 1000000,
      'min_sa_ops': 2500000,
      'max_sa': 100000000,
      'min_prem': 2000,
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'large_sa_dis_rate': 1,
      'prem_conv_fc': 1,
      'policy_fee': 0,
      'pay_mthd': 'T2P_PAYMTHD',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      'upsell': '1',
      'ops_age_input': 'y',
      'ctg': 'P',
      'uin': '101N080V02'
    },
    'CANC': {
      'id': 'CANC',
      'name': 'HDFC Life Cancer Care',
      'min_age': 60,
      'max_age': 780,
      'min_mat_age': 96,
      'max_mat_age': 1020,
      'term': 'CANC_TERM',
      //'loading':0.055,
      'freq': 'CANC_FREQ',
      'ppt': 'CANC_TERM',
      'min_sa': 1000000,
      'max_sa': 5000000,
      'min_prem': 350,
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'large_sa_dis_rate': 1,
      'prem_conv_fc': 1,
      'policy_fee': 0,
      'pay_mthd': 'CANC_PAYMTHD',
      'emp_dis_rt': 0.055,
      'allow_bkdt': 0,
      'upsell': '1',
      'ops_age_input': 'y',
      'ctg': 'H',
      'uin': '101N106V04'
    },
    'CANCE': {
      'id': 'CANCE',
      'name': 'HDFC Life Cancer Care',
      'emp_dis_rt': 0.055,
      'uin': '101N106V04',
      'is_spl': 'CANC'
    },

    'CDAC': {
      'id': 'CDAC',
      'name': 'HDFC Life Cardiac Care',
      'min_age': 216,
      'max_age': 780,
      'min_mat_age': 276,
      'max_mat_age': 900,
      'term': 'CDAC_TERM',
      //'loading':0.055,
      'freq': 'CDAC_FREQ',
      'ppt': 'CDAC_TERM',
      'min_sa': 200000,
      'max_sa': 5000000,
      'min_prem': 'CDAC_POL_PCF_PREM',
      'max_prem': 'CDAC_POL_PCF_PREM',
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'dis_rt_regular': 0.02,
      'dis_rt_single': 0.01,
      'large_sa_dis_rate': 1,
      'prem_conv_fc': 1,
      'policy_fee': 0,
      'pay_mthd': 'CDAC_PAYMTHD',
      'emp_dis_rt': 0.055,
      'allow_bkdt': 0,
      'upsell': '1',
      'ops_age_input': 'y',
      'ctg': 'H',
      'uin': '101N117V03'
    },

    'CDACE': {
      'id': 'CDACE',
      'name': 'HDFC Life Cardiac Care (spl)',
      'dis_rt_regular': 0.02,
      'dis_rt_single': 0.01,
      'uin': '101N117V03',
      'is_spl': 'CDAC'
    },



    'EAHT': {
      'id': 'EAHT',
      'name': 'HDFC Life Easy Health',
      'min_age': 216,
      'max_age': 780,
      //'min_mat_age':276,
      'min_mat_age': 252,
      'min_mat_age_ci': 228,
      'max_mat_age': 840,
      'term': 'EAHT_TERM',
      'freq': ['Single'],
      'ppt': 'EAHT_TERM',
      'min_sa': 25000,
      'max_sa': 500000,
      'min_prem': 37,
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'large_sa_dis_rate': 1,
      'prem_conv_fc': 1,
      'policy_fee': 0,
      'pay_mthd': 'EAHT_PAYMTHD',
      'dis_rt_r': 0.055,
      'dis_rt_s': 0.015,
      'allow_bkdt': 0,
      'upsell': '1',
      'ops_age_input': 'y',
      'ctg': 'H',
      'uin': '101N110V03'
    },

    'SHP': {
      'id': 'SHP',
      'name': 'HDFC Life Smart Health Plan',
      'age': 'SHP_AGE',
      'min_age': 216,
      'max_age': 780,
      'min_prem': 'SHP_PREM',
      'rider': 'SHP_RIDERS',
      'freq': 'SHP_FREQ',
      'fund_opt': 'SHP_FUND',
      'fund_sfin': 'SHP_FUNDSFIN',
      'fund_rlvl': 'SHP_RISKLVL',
      'term': 'SHP_TERM',
      'pptOption': 'SHP_PPTOPTION',
      'ppt': 'SHP_TERM',
      'min_sa': 'SHP_MINSA',
      'max_sa': 40,
      'allow_bkdt': 0,
      'pay_mthd': 'COMM_PARMS',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.19,
      'gst_rt': 0.18,
      'mon_comm_rt': 0.75,
      'has_rider': false,
      'has_fund': true,
      'nri': 1,
      'upsell': '1',
      'uin': '101XXXXXXX',
      'ctg': "H",
      'default_premiumval': 50000,
      "prod_versions": ["SHP", "SHPX", "SHPY"]
    },

    'C2PP': {
      'id': 'C2PP',
      'name': 'HDFC Life Click 2 Protect Plus',
      'min_age': 'C2PP_MINAGE',
      'max_age': 'C2PP_MAXAGE',
      'min_mat_age': 'C2PP_MINMATAGE',
      'max_mat_age': 'C2PP_MAXMATAGE',
      'term': 'C2PP_TERM',
      'disc_rt': 0.055,
      'freq': 'C2PP_FREQ',
      'ppt': 'C2PP_TERM',
      'min_sa': 'C2PP_MINSA',
      'max_sa_el': 30000000,
      'max_sa_ops_slider': 100000000,
      'max_sa': 5000000000,
      'min_prem': 'C2PP_MIN_PREM',
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'policy_fee': 0,
      'pay_mthd': 'COMM_PARMS',
      'allow_bkdt': 1,
      'bkdt_rt': 0.13,
      'upsell': '1',
      'nri': 1,
      'consider_enhanced': 0,
      /*'ops_age_input':'y',*/
      'ctg': 'P',
      'uin': '101N101V03',
      /* 'rider_uin' : '101B013V01',*/
      'prod_versions': ['C2PP', "C2PPR", "C2PPL", 'C2PPS', 'C2PPER', "C2PPEL", "C2PPES", "C2PPV9", "C2PPV9E"]
    },

    'C2P3DP': {
      'id': 'C2P3DP',
      'name': 'HDFC Life Click 2 Protect 3D Plus',
      //'min_age':216,
      //'max_age':780,
      'age': 'C2P3DP_AGE',
      /*'min_mat_age':276,
      'max_mat_age':900,*/
      'term': 'C2P3DP_TERM',
      'disc_rt_r': 0.055,
      'disc_rt_s': 0.02,
      'disc_rt_uw': 0.1,
      'freq': 'C2P3DP_FREQ',
      'pptOption': 'C2P3DP_PPTOPTION',
      //'uwdOption':'C2P3DP_UWDOPTION',
      'options': 'C2P3DP_OPTIONS',
      'ppt': 'C2P3DP_TERM',
      'income_term': 'C2P3DP_INCTERM',
      'min_sa': 'C2P3DP_MINSA',
      'max_sa': 5000000000,
      'min_sa_el': 1000000,
      'max_adb_sa': 30000000,
      'min_prem': 'C2P3DP_MIN_PREM',
      'max_topup_year': 'C2P3DP_TOPUP',
      'st_rt': 'C2P3DP_ST_RT',
      'ec_rt': 0,
      'gst_rt': 'C2P3DP_GST_RT',
      'ktax': 'C2P3DP_KTAX',
      'policy_fee': 0,
      'pay_mthd': 'COMM_PARMS',
      'allow_bkdt': 1,
      'bkdt_rt': 0.00,
      'upsell': '1',
      'nri': 1,
      'consider_enhanced': 0,
      'prod_versions': ['C2P3DP'],
      /*'ops_age_input':'y',*/
      'ctg': 'P',
      'uin': '101N115V06',
      'prod_versions': ['C2P3DP', "C2P3DPR", "C2P3DPL", 'C2P3DPS', 'C2P3DPER', "C2P3DPEL", "C2P3DPES", "C2P3DPV9R", "C2P3DPV9L", "C2P3DPV9S", "C2P3DPV9ER", "C2P3DPV9EL", "C2P3DPV9ES"]
    },


    'C2PSA': {
      'id': 'C2PSA',
      'name': 'HDFC Life Click 2 protect return',
      'age': 'C2PSA_AGE',
      'term': 'C2PSA_TERM',
      'disc_rt_r': 0.055,
      'disc_rt_s': 0.02,
      'disc_rt_uw': 0.1,
      'freq': 'C2PSA_FREQ',
      'options': 'C2PSA_OPTIONS',
      'ppt': 'C2PSA_TERM',
      'min_sa': 5000000,
      'max_sa': 5000000000,
      'min_prem': 'C2PSA_MIN_PREM',
      'st_rt': 'C2PSA_ST_RT',
      'ec_rt': 0,
      'gst_rt': 'C2PSA_GST_RT',
      'ktax': 'C2PSA_KTAX',
      'policy_fee': 0,
      'pay_mthd': 'COMM_PARMS',
      'allow_bkdt': 1,
      'bkdt_rt': 0.00,
      'upsell': '1',
      'nri': 1,
      'consider_enhanced': 0,
      'ctg': 'M',
      'uin': '101N115V05',
      'prod_versions': ['C2PSA', 'C2PSAS', 'C2PSAL']
    },


    'C2PH': {
      'id': 'C2PH',
      'name': 'Click 2 Protect Health',
      //'min_age':216,
      //'max_age':780,
      'age': 'C2P3DP_AGE',
      /*'min_mat_age':276,
      'max_mat_age':900,*/
      'term': 'C2PH_TERM',
      'disc_rt_r': 0.055,
      'disc_rt_s': 0.02,
      'freq': 'C2P3DP_FREQ',
      'optima_freq': 'C2PH_FREQ',
      'pptOption': 'C2P3DP_PPTOPTION',
      'options': 'C2P3DP_OPTIONS',
      'ppt': 'C2P3DP_TERM',
      'income_term': 'C2P3DP_INCTERM',
      'min_sa': 'C2P3DP_MINSA',
      'optima_min_sa': 'C2PH_MINSA',
      'optima_max_sa': 5000000,
      'max_sa': 5000000000,
      'min_sa_el': 1000000,
      'max_adb_sa': 30000000,
      'min_prem': 'C2P3DP_MIN_PREM',
      'max_topup_year': 'C2P3DP_TOPUP',
      'st_rt': 'C2P3DP_ST_RT',
      'optima_rt': 0.18,
      'ec_rt': 0,
      'ktax': 0.01,
      'C2P_DISC': 0.05,
      'gst_rt': 'C2P3DP_GST_RT',
      'optima_gst_rt': 0.18,
      'policy_fee': 0,
      'pay_mthd': 'COMM_PARMS',
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'upsell': '1',
      'nri': 1,
      'Max_Adilt_Count_Single': 4,
      'Max_Adilt_Count_Floater': 2,
      'Max_Child_Count': 5,
      'consider_enhanced': 0,
      'prod_versions': ['C2PH', 'C2PHR', 'C2PHL', 'C2PHS', 'C2PHER', 'C2PHEL', 'C2PHES', 'C2PHV9R', 'C2PHV9L', 'C2PHV9S'],
      /*'ops_age_input':'y',*/
      'ctg': 'C',
      'uin': '101Y115V05'
      /*'rider_uin' : '101B013V01',*/
      /*'pc':'C2P3DP'*/
    },
    'C2TC': {
      'id': 'C2TC',
      'name': 'HDFC Life Thin Combi',
      //'uin':'101N116V01',
      'comb': 'C2PH',
      'pptOption': 'C2P3DP_PPTOPTION',
      'term': 'C2PH_TERM',
      'ppt': 'C2P3DP_TERM',
      'freq': 'C2P3DP_FREQ',
      'options': 'C2P3DP_OPTIONS',
      'prod_versions': ['C2TC', 'C2TCR', 'C2TCL', 'C2TCS', 'C2TCV9R', 'C2TCV9L', 'C2TCV9S']
    },

    'EIAP': {
      'id': 'EIAP',
      'name': 'HDFC Life Income Advantage Plan',
      'min_age': 36,
      'max_age': 660,
      'min_mat_age': 312,
      'max_mat_age': 960,
      'age': 'EIAP_AGE',
      'mat_age': 'EIAP_AGE',
      'term': 'EIAP_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'EIAP_TERM',
      'min_sa': 'EIAP_MIN_SUM',
      'min_prem': 'EIAP_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      /*'grb_rt':0.00,
      'ngrb_rt_h':0.045,
      'ngrb_rt_l':0.01,*/
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      //'bkdt_rt':0.13,
      'pyoterm': 'EIAP_POTERM',
      'nri': 1,
      'uin': '101N152V02',
      'ctg': "T",
      'upsell': 1,
      'default_premiumval': 50000,
      "prod_versions": ["EIAP"]
    },
    'EIAPE': {
      'id': 'EIAPE',
      'name': 'HDFC Life Income Advantage Plan (Spl)',
      //'emp_dis_rt':0.03,
      'uin': '101N152V02',
      'is_spl': 'EIAP',
      'upsell': '1',
      "prod_versions": ["EIAPE"]
    },

    'ESIP': {
      'id': 'ESIP',
      'name': 'HDFC Life Smart Income Plan',
      'min_age': 48,
      'max_age': 720,
      'min_mat_age': 348,
      'max_mat_age': 1164,
      'age': 'ESIP_AGE',
      'mat_age': 'ESIP_AGE',
      'term': 'ESIP_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'ESIP_TERM',
      'min_sa': 'ESIP_MIN_SUM',
      'min_prem': 'ESIP_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      /*'grb_rt':0.00,
      'ngrb_rt_h':0.045,
      'ngrb_rt_l':0.01,*/
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      //'bkdt_rt':0.13,
      'pyoterm': 'ESIP_POTERM',
      'nri': 1,
      'uin': '101N166V02',
      'ctg': "T",
      'upsell': 1,
      'default_premiumval': 50000,
      "prod_versions": ["ESIP"]
    },
    'ESIPE': {
      'id': 'ESIPE',
      'name': 'HDFC Life Smart Income Plan (Spl)',
      //'emp_dis_rt':0.03,
      'uin': '101N166V02',
      'is_spl': 'ESIP',
      'upsell': '1',
      "prod_versions": ["ESIPE"]
    },

    'MAIP': {
      'id': 'MAIP',
      'name': 'HDFC Life My Assured Income Plan',
      'premium': 'MAIP_PREM_LIMITS',
      'ppt': 'MAIP_PPT_LIMITS',
      'term': 'MAIP_PT_LIMITS',
      'freq': 'COMM_PARMS',
      'pay_mthd': 'COMM_PARMS',
      'min_sa': 'MAIP_MIN_SUM',
      'age': 'MAIP_AGE',
      //'cash_bonus_rt'	 :0.04,
      //'tb_rt_ii'		 :0.4,
      //'tb_rt_di'		 :0.45,
      'allow_bkdt': 0,
      'gst_rt': 0.045,
      'policy_fee': 0,
      'st_rt': 0.045,
      'ec_rt': 0,
      'tx_2yr_rt': 0.0225,
      'emp_dis_rt': 0,
      'ctg': "T",
      'nri': 1,
      'uin': '101N155V02',
      'ktax': 0.0025,
      'ktx_2yr_rt': 0.02375,
      'upsell': '1',
      'prod_versions': ['MAIP']
    },
    'MAIPE': {
      'id': 'MAIPE',
      'name': 'HDFC Life My Assured Income Plan (Spl)',
      //'emp_dis_rt':0.03,
      'uin': '101N155V02',
      'is_spl': 'MAIP',
      'upsell': '1',
      "prod_versions": ["MAIPE"]
    },

    'EAGP': {
      'id': 'EAGP',
      'name': 'HDFC Life Assured Gain Plus',
      'min_age': 36,
      'max_age': 660,
      'min_mat_age': 312,
      'max_mat_age': 960,
      'age': 'EAGP_AGE',
      'mat_age': 'EAGP_AGE',
      'term': 'EAGP_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'EAGP_TERM',
      'min_sa': 'EAGP_MIN_SUM',
      'min_prem': 'EAGP_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      /*'grb_rt':0.00,
      'ngrb_rt_h':0.045,
      'ngrb_rt_l':0.01,*/
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      //'bkdt_rt':0.13,
      'pyoterm': 'EAGP_POTERM',
      'nri': 1,
      'uin': '101N151V02',
      'ctg': "T",
      'upsell': 1,
      'default_premiumval': 50000,
      "prod_versions": ["EAGP"]
    },
    'EAGPE': {
      'id': 'EAGPE',
      'name': 'HDFC Life Assured Gain Plus  (Spl)',
      //'emp_dis_rt':0.03,
      'uin': '101N151V02',
      'is_spl': 'EAGP',
      'upsell': '1',
      "prod_versions": ["EAGPE"]
    },
    'EGII': {
      'id': 'EGII',
      'name': 'HDFC Life Guaranteed Income Insurance Plan',
      'min_age': 30,
      'max_age': 780,
      'min_mat_age': 216,
      'max_mat_age': 1200,
      'age': 'EGII_AGE',
      'mat_age': 'EGII_AGE',
      'term': 'EGII_PT_LIMITS',
      'freq': 'COMM_PARMS',
      'ppt': 'EGII_PPT_LIMITS',
      'min_sa': 50000,                   //'min_sa':300000,
      'max_sa': 500000000,
      'min_prem': 'EGII_PREM_LIMITS',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      /*'grb_rt':0.00,
      'ngrb_rt_h':0.045,
      'ngrb_rt_l':0.01,*/
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      //'bkdt_rt':0.13,
      'pyoterm': 'EGII_POTERM',
      'nri': 1,
      'uin': '101N146V04',
      'ctg': "T",
      'upsell': 1,
      'default_premiumval': 50000,
      "prod_versions": ["EGII"]
    },
    'EGIIE': {
      'id': 'EGIIE',
      'name': 'HDFC Life Guaranteed Income Insurance Plan (Spl)',
      //'emp_dis_rt':0.03,
      'uin': '101N146V04',
      'is_spl': 'EGII',
      'upsell': '1',
      "prod_versions": ["EGIIE"]
    },

    /* 'TASLR':{
                    'id':'TASLR',
                    'name':'HDFC Term Assurance',
                       'min_age':216,
                       'max_age':660,
                       'max_mat_age':780,
                       'age':'TASLR_AGE',
                       'term':'TASLR_TERM',
                       'loading':0.035,
                       'freq':'TASLR_FREQ',
                       'ppt':'TASLR_TERM',
                       'min_sa':800000,
                       'max_sa':'-',
                       'rider_sa':'TASLR_SA',
                       'Non_SI/ECS_charge':0.10,
                       'min_prem':2000,
                       'rider_prem':'TASLR_PREM',
                       'rider':'TASLR_RIDERS',
                       'st_rt':0.145,
                       'ec_rt':0,
                       'gst_rt':0.180,
                       'large_sa_limit':2500000,
                       'large_sa_dis_rate':0.35,
                       'prem_conv_fc':1,
                       'policy_fee':0,
                       'pay_mthd':'TASLR_PAYMTHD',
                       'emp_dis_rt':0,
                       'allow_bkdt':0,
                       'ASAuin':'101B010V01',
                       'ADBuin':'101B001V02',
                       'CIuin':'101B004V02',
                       'uin':'101N006V03'
                  },*/
    'UL7NPS3': {
      'id': 'UL7NPS3',
      'name': 'HDFC Life Single Premium Pension Super',
      'min_age': 480,
      'max_age': 900,
      'min_mat_age': 600,
      'max_mat_age': 1020,
      'min_prem': 150000,
      'min_topup': 10000,
      'min_topup_year': 1,
      'max_topup_year': 10,
      'freq': ['Single'],
      'fund_opt': 'UL7NPS3_FUNDOPT',
      'term': [10],
      'ppt': [1],
      'topup_sa': 1.25,
      'allow_bkdt': 0,
      'pay_mthd': 'UL7NPS3_PAYMTHD',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.19,
      'igc_rt': 0.0040,
      'has_topup': true,
      'has_fund': true,
      'uin': '101L086V03',
      'ctg': "U",
      'emi': 'y',
      'upsell': '1',
      'pc': 'UL8NPS3',
      "prod_versions": ["UL7NPS3", "UL8NPS3"]
    },
    'UL7YS1': {
      'id': 'UL7YS1',
      'name': 'HDFC SL YoungStar Super Premium',
      'age': 'UL7YS1_AGE',
      'min_age': 216,
      'max_age': 780,
      'min_prem': 15000,
      'freq': ['Annual'],
      'rider': 'UL7YS1_RIDEROPT',
      'fund_opt': 'COMM_PARMS',
      'fund_rlvl': 'UL7YS1_RISKLVL',
      'fund_sfin': 'UL7YS1_FUNDSFIN',
      'term': 'UL7YS1_TERM',
      'ppt': 'UL7YS1_TERM',
      'min_sa': 'UL7YS1_MINSA',
      'max_sa': 40,
      'pay_mthd': 'COMM_PARMS',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.19,
      'gst_rt': 0.18,
      'comm_rt': 1,
      'allow_bkdt': 0,
      'disben_int_rt': 0.06,
      'pvosp_rt': 0.06,
      'benefit': 'UL7YS1_BENEFIT',
      'has_rider': true,
      'has_fund': true,
      'nri': 1,
      'upsell': '1',
      'uin': '101L068V04',
      'ctg': "U",
      'pc': 'UL8YS1',
      "prod_versions": ["UL7YS1", "UL8YS1", "UL9YS1"],
      'default_premiumval': 50000
    },
    'UL7YSE1': {
      'id': 'UL7YSE1',
      'name': 'HDFC SL YoungStar Super Premium (Spl)',
      'uin': '101L068V04',
      'loy_add_mat': { '1': { 'year': 10, 'rate': 0.35 }, '2': { 'year': 15, 'rate': 0.70 } },
      'has_rider': true,
      'has_fund': true,
      'is_spl': 'UL7YS1',
      'pc': 'UL8YSE1',
      'upsell': '1',
      "prod_versions": ["UL7YSE1", "UL8YSE1", "UL9YSE1"]
    },
    'UL7NPS4': {
      'id': 'UL7NPS4',
      'name': 'HDFC Life Single Premium Pension Super (Spl)',
      'min_topup_year': 1,
      'max_topup_year': 10,
      'min_prem': 10000,
      'uin': '101L086V03',
      'has_topup': true,
      'has_fund': true,
      'is_spl': 'UL7NPS3',
      'upsell': '1',
      'pc': 'UL8NPS4',
      "prod_versions": ["UL7NPS4", "UL8NPS4"]
    },
    'HASP': {
      'id': 'HASP',
      'name': 'HDFC Life Health Assure',
      'age': 'HASP_AGE',
      'min_age': 216,
      'max_age': 840,
      'option': 'HASP_OPTION',
      'term': [3],
      'ppt': [3],
      'freq': 'HASP_FREQ',
      'sa': 'HASP_SA',
      'sc_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'pay_mthd': 'HASP_PAYMTHD',
      'loading': 0,
      'pcf': 1,
      'ops_age_input': 'y',
      'pol_fee': 0,
      'allow_bkdt': 0,
      'relationship': 'HASP_RELATIONS',
      'dependent': 'HASP_DEPENDENT',
      'dep_no': 11,
      'disc_rt': 0.95,
      'is_dep': true,
      'ff_min_age': 91,
      'upsell': '1',
      'ctg': 'H',
      'uin': '101N087V01'
    },
    'HRN': {
      'id': 'HRN',
      'name': 'HDFC Life Health Assure',
      'age': 'HRN_AGE',
      'min_age': 216,
      'max_age': 840,
      'option': 'HRN_OPTION',
      'term': [99],
      'ppt': [99],
      'freq': 'HRN_FREQ',
      'sa': 'HRN_SA',
      'sc_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'pay_mthd': 'HRN_PAYMTHD',
      'loading': 0,
      'pcf': 1,
      'ops_age_input': 'y',
      'pol_fee': 0,
      'allow_bkdt': 0,
      'relationship': 'HRN_RELATIONS',
      'dependent': 'HRN_DEPENDENT',
      'dep_no': 9,
      'disc_rt': 0.95,
      'is_dep': true,
      'rider': 'HRN_RIDERS',
      'ff_min_age': 91,
      'upsell': '1',
      'uin': '101N087V02',
      'RRE_SA_min': 500000,
      'ctg': 'H',
      'has_rider': true
    },
    'UL7ENT': {
      'id': 'UL7ENT',
      'name': 'Entrust',
      'freq': ['Annual'],
      'min_age': 96,
      'max_age': 780,
      'min_mat_age': '-',
      'max_mat_age': 900,
      'min_prem': 50000,
      'fund_opt': 'COMM_PARMS',
      'term': [10],
      'ppt': [5, 7],
      'min_sa': 'UL7ENT_MINSA',
      'max_sa': 40,
      'allow_bkdt': 0,
      'ktax': 0.190,
      'pay_mthd': 'COMM_PARMS',
      'assm_rt': [0.04, 0.08],
      'igc_rt': 0.005,
      'has_fund': true,
      'nri': 1,
      'uin': '101L083V02',
      'upsell': '1',
      'ctg': "U",
      "prod_versions": ["UL7ENT", "UL8ENT"]
    },
    'UL8NIV': {
      'id': 'UL8NIV',
      'name': 'HDFC Life Sampoorn Nivesh',
      'age': 'UL8NIV_AGE',
      'min_age': 0,
      'max_age': 780,
      'min_prem': 'UL8NIV_PREM',
      'freq': 'UL8NIV_FREQ',
      'fund_opt': 'UL8NIV_FUND',
      'fund_rlvl': 'UL8NIV_RISKLVL',
      'fund_sfin': 'UL8NIV_FUNDSFIN',
      'term': 'UL8NIV_TERM',
      'ppt': 'UL8NIV_TERM',
      'min_sa': 'UL8NIV_SA',
      'max_sa': 'UL8NIV_SA',
      'minfactor': 'UL8NIV_MINFACTOR',
      'allow_bkdt': 0,
      'pay_mthd': 'COMM_PARMS',
      'assm_rt': (QNIAPP.IN.touchpoint === "OPS") ? [0.04, 0.08, 0.1729] : [0.04, 0.08],
      'ktax': 0.19,
      'gst_rt': 0.18,
      'mon_comm_rt': 0.75,
      'has_rider': false,
      'has_fund': false,
      'nri': 1,
      'upsell': '1',
      'uin': '101L103V03',
      'ctg': "U",
      'disben_int_rt': 0.08,
      'pvosp_rt': 0.08,
      'pc': 'UL8NIV',
      'prod_versions': ['UL8NIV', 'UL8NIVR', 'UL8NIVL', 'UL8NIVS', 'UL9NIVR', 'UL9NIVL', 'UL9NIVS'],
      'default_premiumval': 50000
    },
    'UL8NIVE': {
      'id': 'UL8NIVE',
      'name': 'HDFC Life Sampoorn Nivesh (Spl)',
      'emp_dis_rt': 0.03,
      'uin': '101L103V03',
      'is_spl': 'UL8NIV',
      'upsell': '1',
      'prod_versions': ['UL8NIVE', 'UL8NIVER', 'UL8NIVEL', 'UL8NIVES', 'UL9NIVER', 'UL9NIVEL', 'UL9NIVES']
    },
    'UL7ENTE': {
      'id': 'UL7ENTE',
      'name': 'Entrust (Spl)',
      'uin': 'Awaited',
      'has_topup': true,
      'has_fund': true,
      'is_spl': 'UL7ENT',
      'pc': 'UL7ENTE',
      'upsell': '1',
      "prod_versions": ["UL7ENTE", "UL8ENTE"]
    },
    'UL8C2R': {
      'id': 'UL8C2R',
      'name': 'HDFC Life Click 2 Retire',
      'min_age': 216,
      'max_age': 780,
      'min_mat_age': 540,
      'max_mat_age': 900,
      //'min_topup_year' : 1,
      'min_prem': 'UL8C2R_POL_PCF_PREM',
      'freq': ['Single', 'Annual', 'Half Yearly', 'Quarterly', 'Monthly'],
      'fund_opt': 'UL8C2R_FUND',
      'fund_rlvl': 'UL8C2R_RISKLVL',
      'fund_sfin': 'UL8C2R_FUNDSFIN',
      'term': 'UL8C2R_TERM',
      'ppt': 'UL8C2R_TERM',
      'gst_rt': '0.18',
      'allow_bkdt': 0,
      'pay_mthd': 'COMM_PARMS',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.19,
      'igc_rt': 0.0050,
      'rwi': 0.06,
      'en_rt': '0.0020',
      //	'has_topup' : true,
      //	'has_fund':true,
      'uin': '101L108V04',
      'ctg': "U",
      'prod_versions': ["UL8C2R", "UL9C2R"],
      //	'upsell':'1'
      //'pc':'UL8NPR1'
    },
    'YSAC': {
      'id': 'YSAC',
      'name': 'HDFC Life YoungStar Udaan Plan',
      'uin': '101N099V04'
    },

    'YSACE': {
      'id': 'YSACE',
      'name': 'HDFC Life YoungStar Udaan Plan',
      'uin': '101N099V04',
      'is_spl': 'YSUD'
    },
    'YSACV9E': {
      'id': 'YSACE',
      'name': 'HDFC Life YoungStar Udaan Plan',
      'uin': '101N099V04',
      'is_spl': 'YSUD'
    },
    'YSAS': {
      'id': 'YSAS',
      'name': 'HDFC Life YoungStar Udaan Plan',
      'uin': '101N099V04'
    },
    'YSASE': {
      'name': 'HDFC Life YoungStar Udaan Plan',
      'id': 'YSASE',
      'uin': '101N099V04',
      'is_spl': 'YSUD'
    },

    'YSASV9E': {
      'name': 'HDFC Life YoungStar Udaan Plan',
      'id': 'YSASE',
      'uin': '101N099V04',
      'is_spl': 'YSUD'
    },
    'YSCA': {
      'name': 'HDFC Life YoungStar Udaan Plan',
      'id': 'YSCA',
      'uin': '101N099V04'
    },
    'YSCAE': {
      'name': 'HDFC Life YoungStar Udaan Plan',
      'id': 'YSCAE',
      'uin': '101N099V04',
      'is_spl': 'YSUD'
    },

    'YSCAV9E': {
      'name': 'HDFC Life YoungStar Udaan Plan',
      'id': 'YSCAE',
      'uin': '101N099V04',
      'is_spl': 'YSUD'
    },
    'YSUD': {
      'id': 'YSUD',
      'name': 'HDFC Life YoungStar Udaan Plan',
      'min_age': 1,
      'max_age': 720,
      'age': 'YSCA_AGE',
      'plan_opt': 'COMM_PARMS',
      'min_mat_age': 276,
      'max_mat_age': 900,
      'pol_expiry_age': '-',
      'term': 'YSUD_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'YSUD_TERM',
      'min_sa_v': 96160.00,
      'min_sa': '-',
      'max_sa': '-',
      'min_prem': 'YSUD_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'tx_2yr_rt': 0.0225,
      'ktax': 0.0025,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': { '1': { 'minterm': 15, 'maxterm': 19, 'rt': 0.03 }, '2': { 'minterm': 20, 'maxterm': 25, 'rt': 0.05 } },
      'ngrb_rt_h': 0.035,
      'ngrb_rt_l': 0.01,
      'large_sa_limit1': 400000,
      'large_sa_dis_rate1': 0.0005,
      'large_sa_limit2': 1000000,
      'large_sa_dis_rate2': 0.001,
      'pay_mthd': 'COMM_PARMS',
      'non_si_extra_rate': '0',
      'emp_dis_rt': '0',
      'benefit': 'YSUD_PLNOPT',
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'has_option': true,
      'uin': '101N099V04',
      'ctg': "T",
      'pc': 'YSPARCA',
      'ops_age_input': 'y',
      'upsell': "1",
      "prod_versions": ["YSUD", "YSAC", "YSACV9", "YSAS", "YSASV9", "YSCA", "YSCAV9"],
      'default_premiumval': 50000
    },
    'YSUDE': {
      'id': 'YSUDE',
      'name': 'HDFC Life YoungStar Udaan Plan(Spl)',
      'emp_dis_rt': 0.03,
      'uin': '101N099V04',
      'has_option': true,
      'is_spl': 'YSUD',
      'upsell': '1',
      "prod_versions": ["YSUDE", "YSACE", "YSACV9E", "YSASE", "YSASV9E", "YSCAE", "YSCAV9E"]
      /*'pc':'YSPARCAE',*/
    },
    'UL7WP1': {
      'id': 'UL7WP1',
      'name': 'HDFC Life Smart Woman Plan',
      'min_prem': 24000,
      'max_prem': 100000,
      'freq': ['Annual'],
      'age': 'UL7WP1_AGE',
      'min_age': 216,
      'max_age': 540,
      'min_sa': 'UL7WP1_MINSA',
      'max_sa': 40,
      'term': 'UL7WP1_TERM',
      'ppt': 'UL7WP1_TERM',
      'allow_bkdt': 0,
      'pay_mthd': 'COMM_PARMS',
      //'fund_opt':'COMM_PARMS',
      'fund_opt': 'UL7WP1_FUNDOPT',
      'fund_rlvl': 'UL7WP1_RISKLVL',
      'fund_sfin': 'UL7WP1_FUNDSFIN',
      'benefit': 'UL7WP1_BENEFIT',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.19,
      'gst_rt': 0.18,
      'mon_comm_rt': 1,
      'is_dep': true,
      'has_fund': true,
      'nri': 1,
      'uin': '101L082V04',
      'ctg': "U",
      'pc': 'UL8WP1',
      'ops_age_input': 'y',
      'upsell': '1',
      /*"is_spl":"-",*/
      "prod_versions": ["UL7WP1", "UL8WP3", "UL8WP2", "UL8WP1", "UL9WP1", "UL9WP2", "UL9WP3"],
      'default_premiumval': 50000
    },
    'SAPLUSE': {
      'id': 'SAPLUSE',
      'name': 'HDFC Life Sampoorn Samridhi Plus',
      'age': 'SAPLUSE_AGE',
      'mat_age': 'SAPLUSE_AGE',
      'min_age': 1,
      'max_age': 720,
      'min_mat_age': 216,
      'max_mat_age': 900,
      'term': 'SAPLUSE_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'SAPLUSE_TERM',
      'min_prem': 'SAPLUSE_POL_PCF_PREM',
      'min_sa': 63113,
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.0,
      'ngrb_rt_h': 0.035,
      'ngrb_rt_l': 0.01,
      'large_sa_limit': 1000000,
      'large_sa_dis_rate': 0.05,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'large_sa_limit1': 150000,
      'large_sa_dis_rate1': 0.0045,
      'large_sa_limit2': 300000,
      'large_sa_dis_rate2': 0.006,
      'large_sa_limit3': 500000,
      'large_sa_dis_rate3': 0.0075,
      'guaranteed_add': { '1': { 'year': 15, 'rate': 0.03 }, '2': { 'year': 20, 'rate': 0.04 }, '3': { 'year': 25, 'rate': 0.05 } },
      'upsell': '1',
      'uin': '101N102V04',
      'pc': 'SAPLUSE',
      'ctg': "T",
      'default_premiumval': 50000
    },
    'SAPLUSEE': {
      'id': 'SAPLUSEE',
      'name': 'HDFC Life Sampoorn Samridhi Plus(Spl)',
      'emp_dis_rt': 0.03,
      'uin': '101N102V04',
      'is_spl': 'SAPLUSE',
      'upsell': '1'
    },

    'SAPLUSEV9': {
      'id': 'SAPLUSEV9',
      'name': 'HDFC Life Sampoorn Samridhi Plus',
      'age': 'SAPLUSEV9_AGE',
      'mat_age': 'SAPLUSEV9_AGE',
      'min_age': 1,
      'max_age': 720,
      'min_mat_age': 216,
      'max_mat_age': 900,
      'term': 'SAPLUSEV9_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'SAPLUSEV9_TERM',
      'min_prem': 'SAPLUSEV9_POL_PCF_PREM',
      //'min_sa' : 63113,
      'min_sa': ((QNIAPP.IN.logeduserid == "00008089" && QNIAPP.IN.loggeduser == "Pawan Kumar Jaggi") || (QNIAPP.IN.logeduserid == "DSC001" && QNIAPP.IN.loggeduser == "DSC Bulk Upload")) ? 100000 : 63113,//Allowing 10 cr premium limit for respective login id
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.0,
      'ngrb_rt_h': 0.035,
      'ngrb_rt_l': 0.01,
      'large_sa_limit': 1000000,
      'large_sa_dis_rate': 0.05,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'large_sa_limit1': 150000,
      'large_sa_dis_rate1': 0.0045,
      'large_sa_limit2': 300000,
      'large_sa_dis_rate2': 0.006,
      'large_sa_limit3': 500000,
      'large_sa_dis_rate3': 0.0075,
      'guaranteed_add': { '1': { 'year': 15, 'rate': 0.03 }, '2': { 'year': 20, 'rate': 0.04 }, '3': { 'year': 25, 'rate': 0.05 } },
      'upsell': '1',
      'uin': '101N102V05',
      'pc': 'SAPLUSEV9',
      'ctg': "T",
      'default_premiumval': 50000
    },

    'SAPLUSEV9E': {
      'id': 'SAPLUSEV9E',
      'name': 'HDFC Life Sampoorn Samridhi Plus(Spl)',
      'emp_dis_rt': 0.03,
      'uin': '101N102V05',
      'is_spl': 'SAPLUSEV9',
      'upsell': '1'
    },
    'ESJ': {
      'id': 'ESJ',
      'name': 'HDFC Life Sampoorna Jeevan',
      'age': 'ESJ_AGE',
      'mat_age': 'ESJ_AGE',
      'min_age': 1,
      'max_age': 720,
      'min_mat_age': 216,
      'max_mat_age': 900,
      'term': 'ESJ_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'ESJ_TERM',
      'min_prem': 'ESJ_POL_PCF_PREM',
      'min_sa': 1,
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.0,
      'ngrb_rt_h': 0.035,
      'ngrb_rt_l': 0.01,
      'large_sa_limit': 1000000,
      'large_sa_dis_rate': 0.05,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'large_sa_limit1': 150000,
      'large_sa_dis_rate1': 0.0045,
      'large_sa_limit2': 300000,
      'large_sa_dis_rate2': 0.006,
      'large_sa_limit3': 500000,
      'large_sa_dis_rate3': 0.0075,
      'guaranteed_add': { '1': { 'year': 15, 'rate': 0.03 }, '2': { 'year': 20, 'rate': 0.04 }, '3': { 'year': 25, 'rate': 0.05 } },
      'upsell': '1',
      'uin': '101N158V03',
      'pc': 'ESJ',
      'ctg': "T",
      'default_premiumval': 50000
    },

    'ESJE': {
      'id': 'ESJE',
      'name': 'HDFC Life Sampoorna Jeevan(Spl)',
      'emp_dis_rt': 0.03,
      'uin': '101N158V03',
      'is_spl': 'ESJ',
      'upsell': '1'
    },

    'HUDAY': {
      'id': 'HUDAY',
      'name': 'HDFC Life Uday',
      'age': 'HUDAY_AGE',
      'mat_age': 'HUDAY_AGE',
      'min_age': 216,
      'max_age': 660,
      'min_mat_age': 360,
      'max_mat_age': 840,
      'term': 'HUDAY_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'HUDAY_TERM',
      'min_sa': 28465,
      'min_prem': 'HUDAY_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.03,
      'ngrb_rt_h': 0.035,
      'ngrb_rt_l': 0.015,
      'high_sa_disc': 'HUDAY_SA_DISC',
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N105V03',
      'pc': 'HUDAY',
      'ctg': "T",
      'default_premiumval': 50000
    },
    'HUDAYE': {
      'id': 'HUDAYE',
      'name': 'HDFC Life Uday (Spl)',
      'emp_dis_rt': 'HUDAY_EMP_DISC',
      'uin': '101N105V03',
      'is_spl': 'HUDAY',
      'upsell': '1'
    },
    'HUDAYV9': {
      'id': 'HUDAYV9',
      'name': 'HDFC Life Uday',
      'age': 'HUDAYV9_AGE',
      'mat_age': 'HUDAYV9_AGE',
      'min_age': 216,
      'max_age': 660,
      'min_mat_age': 360,
      'max_mat_age': 840,
      'term': 'HUDAYV9_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'HUDAYV9_TERM',
      'min_sa': 28465,
      'min_prem': 'HUDAYV9_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.03,
      'ngrb_rt_h': 0.035,
      'ngrb_rt_l': 0.015,
      'high_sa_disc': 'HUDAYV9_SA_DISC',
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N105V04',
      'pc': 'HUDAYV9',
      'ctg': "T",
      'default_premiumval': 50000
    },
    'HUDAYV9E': {
      'id': 'HUDAYV9E',
      'name': 'HDFC Life Uday (Spl)',
      'emp_dis_rt': 'HUDAYV9_EMP_DISC',
      'uin': '101N105V04',
      'is_spl': 'HUDAYV9',
      'upsell': '1'
    },
    /** SPL Rider entries **/
    'WOP': {
      'id': 'WOP',
      'name': 'HDFC Life Waiver of Premium Rider',
      'age': 'WOP_AGE',
      /*'max_age' : 'INAD_AGE',*/
      /*'mat_min_age' : 336,
      'mat_max_age' : 780,*/
      'disc_rt': 'WOP_DISC',//0.035,
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'policy_fee': 0,
      'tx_2yr_rt': 0.0182,
      'min_sa': 100000,
      'max_sa': 20000000,
      'start_sa': 1500000,
      'min_premium': 'WOP_PREMIUM',
      'term': 'WOP_TERM',
      //'max_term' : 40,
      'uin': '1XXXXXXV01',
      'spl_rider': true
    },

    'INAD': {
      'id': 'INAD',
      'name': 'Income Benefit on Accidental Disability Rider',
      'age': 'INAD_AGE',
      /*'max_age' : 'INAD_AGE',*/
      /*'mat_min_age' : 336,
      'mat_max_age' : 780,*/
      'disc_rt': 'INAD_DISC',//0.035,
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'policy_fee': 0,
      'tx_2yr_rt': 0.0182,
      'min_sa': 100000,
      'max_sa': 20000000,
      'start_sa': 1500000,
      'min_premium': 'INAD_PREMIUM',
      'term': 'INAD_TERM_RANGE',
      //'max_term' : 40,
      'uin': '101B013V03',
      'spl_rider': true
    },

    'C4CI': {
      'id': 'C4CI',
      'name': 'HDFC Life Critical Illness Plus Rider',
      'age': 'C4CI_AGE',
      /*'max_age' : 780,
      'mat_min_age' : 276,
      'mat_max_age' : 900, */
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'disc_rt': 'C4CI_DISC',
      'policy_fee': 0,
      'min_sa': 25000,
      'max_sa': 'C4CI_SA',
      'min_premium': 'C4CI_PREMIUM',
      'min_term_lim': 6,
      'uin': '101B014V02',
      'spl_rider': true
    },
    'PPR': {
      'id': 'PPR',
      'name': 'HDFC Life Protect Plus Rider',
      'age': 'PPR_AGE',
      /*'max_age' : 'PPR_AGE',
      'mat_min_age' : 'PPR_AGE',
      'mat_max_age' :'PPR_AGE',*/
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'disc_rt': 'PPR_DISC',
      'policy_fee': 0,
      'min_sa': 25000,
      'min_sa_opab': 5000,
      'min_sa_opc': 50000,
      'max_sa': 'PPR_SA',
      'min_premium': 'PPR_MIN_PREM',
      'min_term_lim': 6,
      'uin': '101B016V01',
      'spl_rider': true
    },

    'PPR_CC': {
      'id': 'PPR',
      'name': 'HDFC Life Protect Plus Rider',
      'age': 'PPR_AGE',
      /*'max_age' : 'PPR_AGE',
      'mat_min_age' : 'PPR_AGE',
      'mat_max_age' :'PPR_AGE',*/
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'disc_rt': 'PPR_DISC',
      'policy_fee': 0,
      'min_sa': 25000,
      'min_sa_opab': 5000,
      'min_sa_opc': 50000,
      'max_sa': 'PPR_SA',
      'min_premium': 'PPR_MIN_PREM',
      'min_term_lim': 6,
      'uin': '101B016V01',
      'spl_rider': true
    },


    'PPR_PAC': {
      'id': 'PPR',
      'name': 'HDFC Life Protect Plus Rider',
      'age': 'PPR_AGE',
      /*'max_age' : 'PPR_AGE',
      'mat_min_age' : 'PPR_AGE',
      'mat_max_age' :'PPR_AGE',*/
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'disc_rt': 'PPR_DISC',
      'policy_fee': 0,
      'min_sa': 25000,
      'min_sa_opab': 5000,
      'min_sa_opc': 50000,
      'max_sa': 'PPR_SA',
      'min_premium': 'PPR_MIN_PREM',
      'min_term_lim': 6,
      'uin': '101B016V01',
      'spl_rider': true
    },


    'PPR_ADC': {
      'id': 'PPR',
      'name': 'HDFC Life Protect Plus Rider',
      'age': 'PPR_AGE',
      /*'max_age' : 'PPR_AGE',
      'mat_min_age' : 'PPR_AGE',
      'mat_max_age' :'PPR_AGE',*/
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'disc_rt': 'PPR_DISC',
      'policy_fee': 0,
      'min_sa': 25000,
      'min_sa_opab': 5000,
      'min_sa_opc': 50000,
      'max_sa': 'PPR_SA',
      'min_premium': 'PPR_MIN_PREM',
      'min_term_lim': 6,
      'uin': '101B016V01',
      'spl_rider': true
    },
    'HPR': {
      'id': 'HPR',
      'name': 'HDFC Life Health Plus Rider-Non Linked',
      'age': 'HPR_AGE',
      /*'max_age' : 'HPR_AGE',
      'mat_min_age' : 'HPR_AGE',
      'mat_max_age' :'HPR_AGE',*/
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'disc_rt': 'HPR_DISC',
      'policy_fee': 0,
      'min_sa': 25000,
      'min_sa_opab': 5000,
      'min_sa_opc': 5000,
      'max_sa': 'HPR_SA',
      'min_premium': 'HPR_MIN_PREM',
      'min_term_lim': 6,
      'uin': '101B031V01',
      'spl_rider': true
    },

    'HPR_CCI': {
      'id': 'HPR',
      'name': 'HDFC Life Health Plus Rider-Non Linked',
      'age': 'HPR_AGE',
      /*'max_age' : 'HPR_AGE',
      'mat_min_age' : 'HPR_AGE', */
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'disc_rt': 'HPR_DISC',
      'policy_fee': 0,
      'min_sa': 25000,
      'min_sa_opab': 5000,
      'min_sa_opc': 5000,
      'max_sa': 'HPR_SA',
      'min_premium': 'HPR_MIN_PREM',
      'min_term_lim': 6,
      'uin': '101B031V01',
      'spl_rider': true
    },

    'HPR_CC': {
      'id': 'HPR',
      'name': 'HDFC Life Health Plus Rider-Non Linked',
      'age': 'HPR_AGE',
      /*'max_age' : 'HPR_AGE',
      'mat_min_age' : 'HPR_AGE', */
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'disc_rt': 'HPR_DISC',
      'policy_fee': 0,
      'min_sa': 25000,
      'min_sa_opab': 5000,
      'min_sa_opc': 5000,
      'max_sa': 'HPR_SA',
      'min_premium': 'HPR_MIN_PREM',
      'min_term_lim': 6,
      'uin': '101B031V01',
      'spl_rider': true
    },

    'HPR_MHCI': {
      'id': 'HPR',
      'name': 'HDFC Life Health Plus Rider-Non Linked',
      'age': 'HPR_AGE',
      /*'max_age' : 'HPR_AGE',
      'mat_min_age' : 'HPR_AGE',
      'mat_max_age' :'HPR_AGE',*/
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'disc_rt': 'HPR_DISC',
      'policy_fee': 0,
      'min_sa': 25000,
      'min_sa_opab': 5000,
      'min_sa_opc': 5000,
      'max_sa': 'HPR_SA',
      'min_premium': 'HPR_MIN_PREM',
      'min_term_lim': 6,
      'uin': '101B031V01',
      'spl_rider': true
    },


    'HPR_DI': {
      'id': 'HPR',
      'name': 'HDFC Life Health Plus Rider-Non Linked',
      'age': 'HPR_AGE',
      /*'max_age' : 'HPR_AGE',
      'mat_min_age' : 'HPR_AGE',
      'mat_max_age' :'HPR_AGE',*/
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'disc_rt': 'HPR_DISC',
      'policy_fee': 0,
      'min_sa': 25000,
      'min_sa_opab': 5000,
      'min_sa_opc': 5000,
      'max_sa': 'HPR_SA',
      'min_premium': 'HPR_MIN_PREM',
      'min_term_lim': 6,
      'uin': '101B031V01',
      'spl_rider': true
    },
    'ECI4': {
      'id': 'ECI4',
      'name': 'HDFC Life Critical Illness(4 Illnesses Covered)',
      'age': 'ECI4_AGE',
      /*'max_age' : 780,
      'mat_min_age' : 276,
      'mat_max_age' : 900, */
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'disc_rt': 'ECI4_DISC',
      'policy_fee': 0,
      'min_sa': 50000,
      'max_sa': 'ECI4_SA',
      'min_premium': 'ECI4_PREMIUM',
      'min_term_lim': 6,
      'uin': '101B018V01',
      'spl_rider': true
    },
    'ECI25': {
      'id': 'ECI25',
      'name': 'HDFC Life Critical Illness(25 Illnesses Covered)',
      'age': 'ECI25_AGE',
      /*'max_age' : 780,
      'mat_min_age' : 276,
      'mat_max_age' : 900,*/
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      'disc_rt': 'ECI25_DISC',
      'policy_fee': 0,
      'min_sa': 50000,
      'max_sa': 'ECI25_SA',
      'min_premium': 'ECI25_PREMIUM',
      'min_term_lim': 6,
      'uin': '101B018V01',
      'spl_rider': true
    },
    'ETR': {
      'id': 'ETR',
      'name': 'HDFC Life Term Rider',
      'age': 'ETR_AGE',
      /*'max_age' : 780,
      'mat_min_age' : 276,
      'mat_max_age' : 900, */
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      //'disc_rt':'ETR_DISC',
      'policy_fee': 0,
      'min_sa': 50000,
      'max_sa': 'ETR_SA',
      'min_premium': 'ETR_PREMIUM',
      'min_term_lim': 6,
      'uin': '101B019V01',
      'spl_rider': true
    },
    'ADDDB': {
      'id': 'ADDDB',
      'name': 'HDFC Life Accidental Death Disability , Dismemberment Benefit',
      'age': 'ADDDB_AGE',
      /*'max_age' : 780,
      'mat_min_age' : 276,
      'mat_max_age' : 900, */
      'st_rt': 0.180,
      'ec_rt': 0,
      'gst_rt': 0.180,
      'ktax': 0.01,
      //'disc_rt':'ETR_DISC',
      'policy_fee': 0,
      'min_sa': 'ADDDB_SA',
      'max_sa': 'ADDDB_SA',
      'min_premium': 'ADDDB_PREMIUM',
      'min_term_lim': 6,
      'uin': '101B017V01',
      'spl_rider': true
    },


    'PRAGATHI': {
      'id': 'PRAGATHI',
      'name': 'HDFC Life Pragati',
      'age': 'PRAGATHI_AGE',
      'mat_age': 'PRAGATHI_AGE',
      'term': 'PRAGATHI_TERM',
      'freq': 'PRAGATHI_FREQ',
      'ppt': 'PRAGATHI_TERM',
      'min_sa': 5000,
      'max_sa': 'PRAGATHI_MAXSA',
      'min_prem': 'PRAGATHI_POL_PCF_PREM',
      'max_prem': 'PRAGATHI_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.00,
      'ngrb_rt_h': 0.00,
      'ngrb_rt_l': 0.00,
      'large_sa_dis_rate': 0.000,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N114V03',
      'pc': 'PRAGATHI',
      'ctg': "T"
    },
    'PRAGATHIE': {
      'id': 'PRAGATHIE',
      'name': 'HDFC Life Pragati (Spl)',
      'emp_dis_rt': 'PRAGATHI_EMP_DISC',
      'uin': '101N114V03',
      'is_spl': 'PRAGATHI',
      'upsell': '1'
    },
    'PRAGATHIV9': {
      'id': 'PRAGATHIV9',
      'name': 'HDFC Life Pragati',
      'age': 'PRAGATHIV9_AGE',
      'mat_age': 'PRAGATHIV9_AGE',
      'term': 'PRAGATHIV9_TERM',
      'freq': 'PRAGATHIV9_FREQ',
      'ppt': 'PRAGATHIV9_TERM',
      'min_sa': 5000,
      'max_sa': 'PRAGATHIV9_MAXSA',
      'min_prem': 'PRAGATHIV9_POL_PCF_PREM',
      'max_prem': 'PRAGATHIV9_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': 0.00,
      'ngrb_rt_h': 0.00,
      'ngrb_rt_l': 0.00,
      'large_sa_dis_rate': 0.000,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N114V04',
      'pc': 'PRAGATHIV9',
      'ctg': "T"
    },
    'PRAGATHIV9E': {
      'id': 'PRAGATHIV9E',
      'name': 'HDFC Life Pragati (Spl)',
      'emp_dis_rt': 'PRAGATHIV9_EMP_DISC',
      'uin': '101N114V04',
      'is_spl': 'PRAGATHIV9',
      'upsell': '1'
    },


    /** SPL Rider entries end * */
    'PGNP': {

      'id': 'PGNP',
      'name': 'HDFC Life Pension Guaranteed Plan',
      'freq': 'COMM_PARMS',
      'ann_opt': 'PGNP_ANN_OPT',
      'min_age': 360,
      'max_age': 1020,
      'minpolicyterm': 5,
      'maxpolicyterm': 40,
      'minIncFreqTerm': 1,
      'min_defer_period': 1,
      'max_defer_period': 10,
      'gst_rt': 0.0180,
      'sc_rt': 0.0180,
      'ec_rt': 0,
      'ktax': 0.001,
      'slthersoldval': 130000,
      'jlthersoldval': 150000,
      'en_rt': 0.0020,
      'ops_age_input': 'y',
      'pay_mthd': 'COMM_PARMS',
      "isAnnuity": "1",
      'min_Ann': 'PGNP_RT_VALS',
      'allow_bkdt': '0',
      'ctg': "T",
      'upsell': '1',
      'uin': '101N118V11',
      'valid_days': 7,
      "prod_versions": ['PGNP', "PGNP1", "PGNP2", 'PGNP3', 'PGNP4', "PGNP5", "PGNP6", "PGNP7", "PGNP8", "PGNP9", "PGNP10", "PGNP11", "PGNP12", "PGNP13", "PGNP14"]
    },
    /*HDFC Life Systematic Retirement Plan START*/
    'SRP': {
      'id': 'SRP',
      'name': 'HDFC Life Systematic Retirement Plan',
      'freq': 'COMM_PARMS',
      'ann_opt': 'SRP_ANN_OPT',
      'min_age': 540,
      'max_age': 900,
      'minpolicyterm': 5,
      'maxpolicyterm': 40,
      'minIncFreqTerm': 1,
      'min_defer_period': 5,
      'max_defer_period': 15,
      'gst_rt': 0.045,
      'sc_rt': 0.045,
      'ec_rt': 0,
      'ktax': 0.001,
      'tx_2yr_rt': 0.0225,
      'slthersoldval': 130000,
      'jlthersoldval': 150000,
      'en_rt': 0.0020,
      'ops_age_input': 'y',
      'pay_mthd': 'COMM_PARMS',
      "isAnnuity": "1",
      'min_Ann': 'SRP_RT_VALS',
      'min_prem': 'SRP_RT_VALS',
      'allow_bkdt': '0',
      'ctg': "T",
      'upsell': '1',
      'uin': '101N143V07',
      'valid_days': 7,
      "prod_versions": ['SRP', "SRP1", "SRP2", "SRP3", "SRP4"]
    },
    /*HDFC Life Systematic Retirement Plan END*/
    'IUNO': {
      'id': 'IUNO',
      'name': 'HDFC Life Classic One',
      'allow_bkdt': 0,
      'min_prem': 'IUNO_MIN_PREM',
      'max_prem': 250000000,
      'sa_fac': 'IUNO_SA_LIM_FAC',   //to get min sum assured and max sum assured factor
      'term': 'IUNO_TERM',
      'fund_opt': 'IUNO_FUND',
      'assm_rt': [0.04, 0.08],
      'gst_rt': 0.180,
      'ktax': 0.190,
      'uin': '101L132V03',
      'age': 'IUNO_AGE',
      'mat_age': 'IUNO_MAT_AGE',
      'transfer_amount': 'IUNO_TRANS_AMT',
      'ctg': "U",
      'has_fund': true,
      'upsell': '1',
      'ppt': [1],
      'fund_sfin': 'IUNO_FUNDSFIN',
      'fund_rlvl': 'IUNO_RISKLVL',
      'prod_versions': ['IUNO', 'IUNOX', 'IUNOXE', 'IUNOY', 'IUNOYE', 'IUNOX1', 'IUNOX1E', 'IUNOY1', 'IUNOY1E']
    },
    'UL8CIP': {
      'id': 'UL8CIP',
      'name': 'HDFC Life Click 2 Wealth',
      'pay_mthd': 'COMM_PARMS',
      'fund_opt': 'UL8CIP_FUND',
      'term': 'UL8CIP_TERM',
      'ppt': 'UL8CIP_TERM',
      'freq': 'COMM_PARMS',
      'pay_mthd': 'COMM_PARMS',
      'allow_bkdt': 0,
      'fund_opt': 'UL8CIP_FUND',
      'fund_rlvl': 'UL8CIP_RISKLVL',
      'has_fund': true,
      'age': 'UL8CIP_AGE_LMTS',
      'assm_rt': (QNIAPP.IN.touchpoint === "OPS") ? [0.04, 0.08, 0.1729] : [0.04, 0.08, 0.1577],
      'ktax': 0.190,
      'ctg': "U",
      'gst_rt': 0.180,
      'uin': '101L133V03',
      'fund_sfin': 'UL8CIP_FUNDSFIN',
      'upsell': 1,
      'prod_versions': ['UL8CIP', 'UL8CIPP', 'UL8CIPG', 'UL9CIP', 'UL9CIPP', 'UL9CIPG', 'UL10CIP', 'UL10CIPP', 'UL10CIPG']
    },
    'UL9SPP': {
      'id': 'UL9SPP',
      'name': 'HDFC Life Smart Protect Plan',
      'pay_mthd': 'COMM_PARMS',
      'fund_opt': 'UL9SPP_FUND',
      'term': 'UL9SPP_TERM',
      'ppt': 'UL9SPP_TERM',
      'freq': 'COMM_PARMS',
      'pay_mthd': 'COMM_PARMS',
      'allow_bkdt': 0,
      'fund_opt': 'UL9SPP_FUND',
      'fund_rlvl': 'UL9SPP_RISKLVL',
      'has_fund': true,
      'age': 'UL9SPP_AGE_LMTS',
      'assm_rt': (QNIAPP.IN.touchpoint === "OPS") ? [0.04, 0.08, 0.1729] : [0.04, 0.08],
      'ktax': 0.190,
      'ctg': "U",
      'gst_rt': 0.180,
      'igc_rt': 0.005,
      'uin': '101L175V01',
      'fund_sfin': 'UL9SPP_FUNDSFIN',
      'upsell': 1,
      'prod_versions': ['UL9SPP']
    },
    'EUX1': {
      'id': 'EUX1',
      'name': 'HDFC Life Wealth Elite',
      'pay_mthd': 'COMM_PARMS',
      'fund_opt': 'EUX1_FUND',
      'term': 'EUX1_TERM',
      'ppt': 'EUX1_TERM',
      'freq': 'COMM_PARMS',
      'pay_mthd': 'COMM_PARMS',
      'allow_bkdt': 0,
      'fund_opt': 'EUX1_FUND',
      'fund_rlvl': 'EUX1_RISKLVL',
      'has_fund': true,
      'age': 'EUX1_AGE_LMTS',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.190,
      'ctg': "U",
      'gst_rt': 0.180,
      'uin': '114L087V02',
      'fund_sfin': 'EUX1_FUNDSFIN',
      'upsell': 1,
      'prod_versions': ['EUX1']
    },
    'EGWP': {
      'id': 'EGWP',
      'name': 'HDFC Life Guaranteed Wealth Plus',
      'min_age': 'EGWP_AGE',
      'max_age': 'EGWP_AGE',
      'min_mat_age': 'EGWP_AGE',
      'max_mat_age': 'EGWP_AGE',
      'term': 'EGWP_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'EGWP_TERM',
      'min_prem': 'EGWP_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      'grb_rt': { '1': { 'minterm': 10, 'maxterm': 19, 'rt': 0.08 }, '2': { 'minterm': 20, 'maxterm': 25, 'rt': 0.09 } },
      'ngrb_rt_h': 0.03,
      'ngrb_rt_l': 0.015,
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 1,
      'disc_rt': 0, // To avoid applying 3% discount for CI RIder
      'allow_bkdt': 0,
      'bkdt_rt': 0.13,
      'nri': 1,
      'upsell': '1',
      'uin': '101N165V03',
      'ctg': "T",
      'default_premiumval': 100000,
      "prod_versions": ["EGWP"],
    },
    'EGWPE': {
      'id': 'EGWPE',
      'name': 'HDFC Life Guaranteed Wealth Plus(Spl)',
      'uin': '101N165V03',
      'emp_dis_rt': 1,
      'disc_rt': 0,
      'allow_bkdt': 0,
      'is_spl': 'EGWP',
      'ctg': "T",
      'upsell': '1',
      "prod_versions": ["EGWPE"]
    },
    'ESPP': {
      'id': 'ESPP',
      'name': 'HDFC Life Smart Pension Plan',
      'pay_mthd': 'COMM_PARMS',
      'fund_opt': 'ESPP_FUND',
      'term': 'ESPP_TERM',
      'ppt': 'ESPP_TERM',
      'freq': 'COMM_PARMS',
      'pay_mthd': 'COMM_PARMS',
      'allow_bkdt': 0,
      'fund_opt': 'ESPP_FUND',
      'fund_rlvl': 'ESPP_RISKLVL',
      'min_topup_year': 1,
      'min_topup': 10000,
      'max_topup': 'ESPP_TOPUP',
      'has_topup': true,
      'has_fund': true,
      'age': 'ESPP_AGE_LMTS',
      'assm_rt': [0.04, 0.08],
      'ktax': 0.190,
      'ctg': "U",
      'gst_rt': 0.180,
      'uin': '101L164V02',
      'fund_sfin': 'ESPP_FUNDSFIN',
      'upsell': 1,
      'prod_versions': ['ESPP']
    },
    'ESPPE': {
      'id': 'ESPPE',
      'name': 'HDFC Life Smart Pension Plan (Spl)',
      'uin': '101L164V02',
      'emp_dis_rt': 1,
      'allow_bkdt': 0,
      'is_spl': 'ESPP',
      'min_topup_year': 1,
      'min_topup': 10000,
      'max_topup': 'ESPP_TOPUP',
      'has_topup': true,
      'has_fund': true,
      'ctg': "U",
      'upsell': '1',
      "prod_versions": ["ESPPE"]
    },

    'ESRB': {
      'id': 'ESRB',
      'name': 'HDFC Life Saral Jeevan',
      'min_age': 48,
      'max_age': 720,
      'min_mat_age': 348,
      'max_mat_age': 1164,
      'age': 'ESRB_AGE',
      'mat_age': 'ESRB_AGE',
      'term': 'ESRB_TERM',
      'freq': 'COMM_PARMS',
      'ppt': 'ESRB_TERM',
      'min_sa': 'ESRB_MIN_SUM',
      'min_prem': 'ESRB_POL_PCF_PREM',
      'st_rt': 0.045,
      'ec_rt': 0,
      'gst_rt': 0.045,
      'ktax': 0.0025,
      'tx_2yr_rt': 0.0225,
      'ktx_2yr_rt': 0.02375,
      /*'grb_rt':0.00,
      'ngrb_rt_h':0.045,
      'ngrb_rt_l':0.01,*/
      'pay_mthd': 'COMM_PARMS',
      'emp_dis_rt': 0,
      'allow_bkdt': 0,
      //'bkdt_rt':0.13,
      'pyoterm': 'ESRB_POTERM',
      'nri': 1,
      'uin': '101N160V03',
      'ctg': "T",
      'upsell': 1,
      'default_premiumval': 50000,
      "prod_versions": ["ESRB"]
    },
    'ESRBE': {
      'id': 'ESRBE',
      'name': 'HDFC Life Saral Jeevan (Spl)',
      'emp_dis_rt': 0,
      'uin': '101N160V03',
      'is_spl': 'ESRB',
      'upsell': '1',
      "prod_versions": ["ESRBE"]
    }
  };

  var LOCAL_CH_PTNR_PROD = {

    'International Business': [
      'UL8C2I',
      'HRN',
      'CANC',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7YS1',
      'YSUD',
      'SANCHV9',
      'SAPLUSEV9',
      'UL7LPT2',
      'EALPTPV9',
      'PENPAR',
      'GPP',
      'GPPCOMBO',
      'C2PP',
      'UL8NIV',
      'HUDAY',
      'HUDAYV9',
      'IANP',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'PGNP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'CDAC',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'SANCHP',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'SARJB',
      'SUPH',
      'SARLP',
      'SPP',
      'SPPCOMBO',
      'UL9SPP',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'Online': [
      'UL7ENT',
      'UL7ESP3E',
      'UL7LPT2E',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'SIPPAR',
      'SIPPARV9',
      'SIPPARV9E',
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'MAIP',
      'MAIPE',
      'EAGP',
      'EAGPE',
      'EGII',
      'EGIIE',
      'EALPTP',
      'EALPTPE',
      'EALPTPV9',
      'EALPTPV9E',
      'GPP',
      'GPPCOMBO',
      'GPPE',
      'GPPCOMBOE',
      'IANP',
      'LIFEPAR',
      'LIFEPARE',
      'PENPAR',
      'T2P',
      'SANCHE',
      'SANCH',
      'SANCHV9',
      'SANCHV9E',
      'C2PP',
      'YSUD',
      'YSUDE',
      'UL8C2I',
      'HRN',
      'CANC',
      'CANCE',
      'HUDAYE',
      'HUDAYV9E',
      'UL8C2R',
      'EAHT',
      'UL7YS1',
      'UL7YSE1',
      'UL7NPS4',
      'UL7NPR2',
      'UL7NPR1',
      'UL8NIV',
      'UL8NIVE',
      'UL7LPT2',
      'UL7EAE',
      'UL7EA2',
      'UL7EA1',
      'UL7EA',
      'SIPPARE',
      'SIPPAR',
      'SAPLUSEE',
      'SAPLUSE',
      'SAPLUSEV9',
      'SAPLUSEV9E',
      'C2P3DP',
      //'C2PH',
      'CDAC',
      'CDACE',
      'PGNP',
      'UL8CGE',
      'UL8CG',
      'IUNO',
      'IUNOY',
      'IUNOX',
      'IUNOYE',
      'IUNOXE',
      'UL8CIP',
      'UL9SPP',
      'UL8CIPG',
      'UL8CIPP',
      'SANCHP',
      'SANCHPE',
      'SANPAR',
      'SANPARE',
      'C2PSA',
      'C2TC',
      'GSPV9E',
      'GSPV9',
      'C2PCK',
      'C2PCKR',
      'C2PCKL',
      'C2PCKS',
      'PROTS',
      'C2PRN',
      'SANMAX',
      'C2INSFMP',
      'SARJB',
      'SARJBR',
      'SARJBL',
      'SARJBS',
      'P1C2PLE',
      'P1C2PL',
      'ESTEE',
      'P1C2PS',
      'P1C2PSE',
      'P2C2PEL',
      'P2C2PELE',
      'C1C2PLHE',
      'C1C2PLH',
      'SARLP',
      'SUPHE',
      'SUPH',
      'SPP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'SPPCOMBO',
      'C2PCS',
      'C2PCSR',
      'C2PCSL',
      'C2PCSS',
      'C2POS',
      'EUX1',
      'EGWP',
      'EGWPE',
      'ESPP',
      'ESPPE',
      'ESJ',
      'ESJE',
      'SRPGPP',
      'UL9SPP',
      'ESRB',
      'ESRBE'
    ],
    'Direct': [

      'EIAPE',
      'ESIPE',
      'MAIPE',
      'EAGPE',
      'EGIIE',
      'UL8C2I',
      'EALPTPV9E',
      'GPPE',
      'GPPCOMBOE',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPARE',
      'PENPAR',
      'SANCHV9E',
      'SIPPARV9E',
      'T2P',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3E',
      'UL7LPT2',
      'UL7NPR2',
      'UL7NPS4',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUDE',
      'C2PP',
      'SAPLUSEV9E',
      'HUDAYE',
      'HUDAYV9E',
      'UL8NIVE',
      'UL8APPE',
      'EAHT',
      'UL8CGE',
      'PRAGATHIV9E',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9E',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHPE',
      'C2TC',
      'SANPARE',
      'C2INS',
      'C2INSCG',
      'C2PRN',
      'P1C2PLE',
      'P1C2PSE',
      'P2C2PELE',
      'ESTEE',
      'C2PCK',
      'C2PCS',
      'SANMAX',
      'SARJB',
      'C1C2PLHE',
      'SUPHE',
      'SARLP',
      //'C2INSFMP',
      //'NIVSFMP',
      'C2WNSFMP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWPE',
      'ESPPE',
      'ESJE',
      'SRPGPP',
      'ESRBE'
    ],

    'Exide Direct': [

      'EIAPE',
      'ESIPE',
      'MAIPE',
      'UL8C2I',
      'EALPTPV9E',
      'GPPE',
      'GPPCOMBOE',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPARE',
      'PENPAR',
      'SANCHV9E',
      'SIPPARV9E',
      'T2P',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3E',
      'UL7LPT2',
      'UL7NPR2',
      'UL7NPS4',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUDE',
      'C2PP',
      'SAPLUSEV9E',
      'HUDAYE',
      'HUDAYV9E',
      'UL8NIVE',
      'UL8APPE',
      'EAHT',
      'UL8CGE',
      'PRAGATHIV9E',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9E',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHPE',
      'C2TC',
      'SANPARE',
      'C2INS',
      'C2INSCG',
      'C2PRN',
      'P1C2PLE',
      'P1C2PSE',
      'P2C2PELE',
      'ESTEE',
      'C2PCK',
      'C2PCS',
      'SANMAX',
      'SARJB',
      'C1C2PLHE',
      'SUPHE',
      'SARLP',
      //'C2INSFMP',
      //'NIVSFMP',
      'C2WNSFMP',
      'SRP',
      'SMPP',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWPE',
      'ESPPE',
      'ESJE',
      'SRPGPP',
      'ESRBE'


    ],


    'HDFC Life Protection Vertical': [

      'P1C2PLE',
      'ESTE',
      'SARJB',
      'C2TC',
      'CANC',
      'C2POS',
      'C1C2PLHE',
      'CDAC',
      'C2PH',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'EUX1',
      'P1C2PSE',
      'P2C2PELE',
      'ESPPE',
      'ESJE',
      'SRPGPP'

    ],

    'Defence': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'LIFEPAR',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAPE',
      'ESIPE',
      'MAIPE',
      'EAGPE',
      'EGIIE',
      'T2P',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'C2PP',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'PGNP',
      'CDAC',
      'C2PH',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'C2TC',
      'SANPAR',
      //'SANPARE',
      'P1C2PL',
      'ESTEE',
      'P1C2PS',
      'P2C2PEL',
      'C2PCK',
      'C2PCS',
      'C1C2PLHE',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWPE',
      'ESPPE',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'Ratnakar Bank': [
      //'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'T2P',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'UL8NIV',
      'HUDAY',
      'HUDAYV9',
      'UL8APP',
      //'EAHT',
      'UL8CG',
      //'PRAGATHI',
      'C2P3DP',
      'PGNP',
      //'CDAC',
      //'GSP',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'C2INS',
      'C2INSCG',
      'C2PRN',
      'SARJB',
      'SUPH',
      'SARLP',
      //'C2INSFMP',
      //'NIVSFMP',
      'C2WNSFMP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'HDFC Securities': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'T2P',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'UL8NIV',
      'HUDAY',
      'HUDAYV9',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      //'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'C2TC',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'PROTS',
      'C2INS',
      'C2INSCG',
      'C2PRN',
      'C2PCK',
      //'C2PCS',
      'SANMAX',
      'SARJB',
      'C2WNSA',
      //'C1C2PLH',
      'SUPH',
      'SARLP',
      'C2INSFMP',
      'NIVSFMP',
      'C2WNSFMP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'HDFC Sales': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'UL8NIV',
      'HUDAY',
      'HUDAYV9',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      //'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'C2PH',
      'C2TC',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'PROTS',
      'C2INS',
      'C2INSCG',
      'C2PRN',
      'C2PCK',
      'C2PCS',
      'SANMAX',
      'SARJB',
      'C1C2PLH',
      'SUPH',
      'SARLP',
      'C2INSFMP',
      //'NIVSFMP',
      'C2WNSFMP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'Barclays': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'UL8NIV',
      'HUDAY',
      'HUDAYV9',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'PGNP',
      'CDAC',
      'C2PH',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'C2TC',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PCK',
      'C2PCS',
      'SARJB',
      'C1C2PLH',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'Broca': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'C2TC',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PRN',
      'C2PCK',
      'C2PCS',
      'SANMAX',
      'SARJB',
      'C1C2PLH',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'Indian Bank': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'T2P',
      'CANC',
      'UL8NIV',
      'HUDAY',
      'HUDAYV9',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2INS',
      'C2INSCG',
      'C2PRN',
      'SANMAX',
      'SARJB',
      'SUPH',
      'SARLP',
      //'C2INSFMP',
      //'NIVSFMP',
      'C2WNSFMP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'Saraswat Bank': [
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'EAHT',
      'PRAGATHIV9',
      'C2P3DP',
      'PGNP',
      'CDAC',
      'GSPV9',
      'SANCHP',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'SARJB',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'SPP',
      'UL9SPP',
      'SPPCOMBO',
      /*'EUX1',*/
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],

    'HDFC Bank': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'C2TC',
      'SANPAR',
      'PROTS',
      'C2INS',
      'C2INSCG',
      'C2PRN',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PCK',
      'C2PCS',
      'SANMAX',
      'SARJB',
      'C1C2PLH',
      'SUPH',
      'SARLP',
      'C2INSFMP',
      //'NIVSFMP',
      'C2WNSFMP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'EUX1',
      'EGWP',
      'SPPCOMBO',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'PCVC': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'C2TC',
      'SANPAR',
      'PROTS',
      'C2INS',
      'C2INSCG',
      'C2PRN',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PCK',
      'C2PCS',
      'SANMAX',
      'SARJB',
      'C1C2PLH',
      'SUPH',
      'SARLP',
      'P1C2PLE',
      'P1C2PSE',
      'P2C2PELE',
      'SARJBE',
      'SANCHV9E',
      'C2INSFMP',
      'NIVSFMP',
      'C2WNSFMP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'PCVC_POSP': [
      'SANCHV9',
      'SANCHP',
      'GSPV9'
    ],
    'Agency': [
      'SANPAR',
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'SHP',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'ESJ',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'SANCHP',
      'SIPPARH',
      'EALPTPH',
      'C2TC',
      'SANPAR',
      'PROTS',
      'C2INS',
      'C2INSCG',
      'P1C2PL',
      'P1C2PS',
      'P2C2PEL',
      'ESTE',
      'C2PRN',
      'C2PCK',
      'C2PCS',
      'SANMAX',
      'SARJB',
      'C1C2PLH',
      'SUPH',
      'SARLP',
      'C2INSFMP',
      //'NIVSFMP',
      'C2WNSFMP',
      'SRP',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWP',
      'SMPP',
      'SMPPR',
      'SMPPL',
      'SMPPE',
      'SMPPI',
      'UL9SPP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'


    ],
    'Exide Agency': [
      'SANPAR',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      //'EXLGWP',
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'SIPPARH',
      'EALPTPH',
      'SANPAR',
      'PROTS',
      'C2INS',
      'C2INSCG',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PRN',
      'SANMAX',
      'SARJB',
      'SUPH',
      'SARLP',
      'C2INSFMP',
      //'NIVSFMP',
      'C2WNSFMP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'


    ],

    'Bancassurance - Yes Bank': [
      'SANPAR',
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'SIPPARH',
      'EALPTPH',
      'C2TC',
      'SANPAR',
      'PROTS',
      'C2INS',
      'C2INSCG',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PRN',
      'C2PCK',
      'C2PCS',
      'SANMAX',
      'C1C2PLH',
      'SARJB',
      'SUPH',
      'SARLP',
      //'C2INSFMP',
      //'NIVSFMP',
      'C2WNSFMP',
      /*'SANMAXFIS',*/
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      //'SPPCOMBO'
      'SRPGPP',
      'ESRB'
    ],


    'Agency Business Partner': [
      'SANPAR',
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'UL9SPP',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'SANCHP',
      'SIPPARH',
      'EALPTPH',
      'C2TC',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PCK',
      'C2PCS',
      'C1C2PLH',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'DNA': [
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'SARJB',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'DSC': [
      'UL8C2I',
      'SANCHPE',//Allowing 10 cr premium limit for respective login id
      'SANPARE',//Allowing 10 cr premium limit for respective login id
      'EALPTPV9E',
      'GPPE',
      'GPPCOMBOE',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPARE',
      'PENPAR',
      'SANCHV9E',
      'SIPPARV9E',
      'EIAPE',
      'ESIPE',
      'MAIPE',
      'EAGPE',
      'EGIIE',
      'T2P',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3E',
      'UL7LPT2',
      'UL7NPR2',
      'UL7NPS4',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUDE',
      'C2PP',
      'SAPLUSEV9E',
      'HUDAYE',
      'HUDAYV9E',
      'UL8NIVE',
      'UL8APPE',
      'EAHT',
      'UL8CGE',
      'PRAGATHIV9E',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9E',
      'IUNO',
      'C2TC',
      'P1C2PLE',
      'ESTEE',
      'P1C2PSE',
      'P2C2PELE',
      'C2PCK',
      'C2PCS',
      'SARJB',
      'C1C2PLHE',
      'SUPHE',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'UL9SPP',
      'EUX1',
      'EGWPE',
      'ESPPE',
      'ESJE',
      'SRPGPP',
      'ESRBE'
    ],
    'CDSL': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'UL8NIV',
      'HUDAY',
      'HUDAYV9',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'SANCHP',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'SARJB',
      'SUPHE',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'SPP',
      'SPPCOMBO',
      'UL9SPP',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'Health Insurance': [
      'UL8C2I',
      'EALPTPV9E',
      'GPPE',
      'GPPCOMBOE',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPARE',
      'PENPAR',
      'SANCHV9E',
      'SIPPARV9E',
      'EIAPE',
      'ESIPE',
      'MAIPE',
      'EAGPE',
      'EGIIE',
      'ESTEE',
      'T2P',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3E',
      'UL7LPT2',
      'UL7NPR2',
      'UL7NPS4',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUDE',
      'C2PP',
      'SAPLUSEV9E',
      'HUDAYE',
      'HUDAYV9E',
      'UL8NIVE',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'PGNP',
      'CDAC',
      'GSPV9E',
      'IUNO',
      'SARJB',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'SPP',
      'SPPCOMBO',
      'UL9SPP',
      'EUX1',
      'ESPPE',
      'ESJE',
      'SRPGPP'
    ],
    'Group Sales': [
      'IANP',
      'PGNP',
      'IUNO',
      'SARJB',
      'SARLP',
      'P1C2PLE',
      'ESTEE',
      'P1C2PSE',
      'P2C2PELE',
      'SANCHPE',
      'SANPARE',
      'SANCHE',
      'SANCHV9E',
      'EIAPE',
      'ESIPE',
      'MAIPE',
      'EAGPE',
      'EGIIE',
      'UL8CIP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'EUX1',
      'EGWPE',
      'ESPPE',
      'ESJE',
      'SRPGPP',
      'ESRBE',
      'UL7LPT2E',
      'UL8NIVE',
      'C1C2PLHE',
      'EALPTPV9E',
      'SIPPARV9E',
      'SAPLUSEV9E',
      'HUDAYV9E',
      'UL8CGE',
      'PRAGATHIV9E',
      'GSPE',
      'SUPHE',
      'GPPE',
      'UL8APPE',
      'UL7YSE1',
      'YSUDE',
      'UL7EAE',
      'UL7EA2',
      'UL7EA1',
      'UL7WP1',
      'C2PCS',
      'C2POS',
      'PENPAR',
      'SPP',
      'SPPCOMBO',
      'UL9SPP',
      'CDAC',
      'CANC',
      'EAHT',
      'UL8C2I',
      'GSPV9E'




    ],
    'IDFC Bank': [
      'UL8C2I',
      'EALPTPV9',//IDFC Product Restriction
      'GPP',
      //'HRN',
      'CANC',
      //'LIFEPAR',
      'PENPAR',
      'UL9SPP',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'SMPP',
      'ESTE',
      'EGWP',
      'ESPP',
      'EGII',
      //'T2P',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      //'UL7ESP3',
      'UL7LPT2',
      //'UL7NPR1',
      //'UL7NPS3',
      //'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      //'C2PP',
      'SAPLUSEV9',
      'UL8NIV',
      'HUDAY',
      'HUDAYV9',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'C2P3DP',
      'PGNP',
      'IANP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'SANCHP',
      'PROTS',
      'C2INS',
      'C2INSCG',
      'C2PRN',
      'SANMAX',
      'SARJB',
      'SUPH',
      //'SANPAR',
      'SARLP',
      //'C2INSFMP',
      //'NIVSFMP',
      'C2WNSFMP',
      'SRP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'P1C2PL',
      'P1C2PS',
      //'P2C2PEL',
      'SANPAR',
      'EUX1',
      'ESJ',
      'SRPGPP',
      'ESRB',
      'PRAGATHIV9',
      'C2PCS',
      'C1C2PLH',
      'C2POS',
      'SPP'
    ],
    'Bajaj Finance Ltd': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'T2P',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'UL8NIV',
      'HUDAY',
      'HUDAYV9',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'PGNP',
      'CDAC',
      'C2PH',
      'GSPV9',
      'IUNO',
      'SANCHP',
      'C2TC',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PCK',
      'C2PCS',
      'C1C2PLH',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'UL9SPP',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'Vakrangee': [//check with kiran shindae and team before mapping any product
      'HUDAY',
      'HUDAYV9',
      'SAPLUSEV9',
      'C2PP',
      'CANC',
      'C2P3DP',
      'SANCHV9',
      'IANP',
      'PGNP',
      'YSUD',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'ESTE',
      'GSPV9',
      'SANCHP',
      'SANPAR',
      'SARJB',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],

    'Capital First': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'T2P',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'UL8NIV',
      'HUDAY',
      'HUDAYV9',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'PGNP',
      'CDAC',
      'C2PH',
      'GSPV9',
      'IUNO',
      'SANCHP',
      'C2TC',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PCK',
      'C2PCS',
      'SARJB',
      'C1C2PLH',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'UL9SPP',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'TSCRM': [
      'UL8C2I',
      'EALPTPV9E',
      'GPPE',
      'GPPCOMBOE',
      'IANP',
      'LIFEPARE',
      'PENPAR',
      'SANCHV9E',
      'SIPPARV9E',
      'EIAPE',
      'ESIPE',
      'MAIPE',
      'EAGPE',
      'EGIIE',
      'HRN',
      'CANC',
      'UL7EAE',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3E',
      'UL7LPT2E',
      'UL7NPR2',
      'UL7NPS4',
      'UL7WI1',
      'UL7WP1',
      'UL7YSE1',
      'YSUDE',
      /*'UL8C2I' , */
      'C2PP',
      'SAPLUSEV9E',
      'HUDAYE',
      'HUDAYV9E',
      'UL8NIVE',
      'UL8APPE',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9E',
      'IUNO',
      'SANCHP',
      'C2TC',
      'SANPARE',
      'P1C2PL',
      'ESTEE',
      'P1C2PS',
      'P2C2PEL',
      'C2PCK',
      'C2PCS',
      'SARJB',
      'C1C2PLHE',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'UL9SPP',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],
    'CoOperatives': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'SANCHP',
      'C2TC',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PCK',
      'C2PCS',
      'SARJB',
      'C1C2PLH',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'UL9SPP',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],

    'AMHI': [
      //'C2PH'

    ],


    'NBFC SFB': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'SANCHP',
      'C2TC',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PCK',
      'C2PCS',
      'SARJB',
      'C1C2PLH',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'UL9SPP',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],

    'Speciality Sales': [
      'UL8C2I',
      'EALPTPV9E',
      'GPPE',
      'GPPCOMBOE',
      'IANP',
      'LIFEPARE',
      'PENPAR',
      'SANCHV9E',
      'SIPPARV9',
      'SIPPARV9E',
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'MAIP',
      'MAIPE',
      'EAGP',
      'EAGPE',
      'EGII',
      'EGIIE',
      'T2P',
      'HRN',
      'CANC',
      'UL7EAE',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3E',
      'UL7LPT2E',
      'UL7NPR2',
      'UL7NPS4',
      'UL7WI1',
      'UL7WP1',
      'UL7YSE1',
      'YSUDE',
      'UL8C2I',
      'C2PP',
      'SAPLUSEV9E',
      'HUDAYE',
      'HUDAYV9E',
      'UL8NIVE',
      'UL8APPE',
      'EAHT',
      'UL8CGE',
      'PRAGATHIV9E',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9E',
      'IUNO',
      'SANCHPE',
      'C2TC',
      'SANPARE',
      'P1C2PLE',
      'ESTEE',
      'P1C2PSE',
      'P2C2PELE',
      'C2PCK',
      'C2PCS',
      'C1C2PLH',
      'SUPHE',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'UL9SPP',
      'EUX1',
      'EGWPE',
      'ESPPE',
      'ESJE',
      'SRPGPP',
      'ESRBE'
    ],

    'Bancassurance and New Tie Up': ['UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'UL9SPP',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'SANCHP',
      'C2TC',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'SARJB',
      'C2PCK',
      'C2PCS',
      'C1C2PLH',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],

    'CSB BANK LIMITED': [
      'SANPAR',
      //'UL8C2I',
      'UL9SPP',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'SIPPARH',
      'EALPTPH',
      'C2TC',
      'SANPAR',
      'PROTS',
      'C2INS',
      'C2INSCG',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PRN',
      'C2PCK',
      'C2PCS',
      'SANMAX',
      'C1C2PLH',
      'SARJB',
      'SUPH',
      'SARLP',
      //'C2INSFMP',
      //'NIVSFMP',
      'C2WNSFMP',
      /*'SANMAXFIS',*/
      'SRP',
      'SMPP',
      'C2POS',
      'SPP',
      'EUX1',
      'EGWP',
      'ESPP',
      //'SPPCOMBO'
      'ESJ',
      'SRPGPP',
      'ESRB'

    ],

    'THE SOUTH INDIAN BANK LTD': [
      'SANPAR',
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHP',
      'SIPPARH',
      'EALPTPH',
      'C2TC',
      'SANPAR',
      'PROTS',
      'C2INS',
      'C2INSCG',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PRN',
      'C2PCK',
      'C2PCS',
      'SANMAX',
      'C1C2PLH',
      'SARJB',
      'SUPH',
      'SARLP',
      //'C2INSFMP',
      //'NIVSFMP',
      'C2WNSFMP',
      /*'SANMAXFIS',*/
      'SRP',
      'SMPP',
      'C2POS',
      'SPP',
      'EUX1',
      'EGWP',
      'ESPP',
      //'SPPCOMBO'
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],


    'PNB Housing': [
      'UL8C2I',
      'EALPTPV9E',
      'GPPE',
      'GPPCOMBOE',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPARE',
      'PENPAR',
      'SANCHV9E',
      'SIPPARV9E',
      'EIAPE',
      'ESIPE',
      'MAIPE',
      'EAGPE',
      'EGIIE',
      'T2P',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3E',
      'UL7LPT2',
      'UL7NPR2',
      'UL7NPS4',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUDE',
      'C2PP',
      'SAPLUSEV9E',
      'HUDAYE',
      'HUDAYV9E',
      'UL8NIVE',
      'UL8APPE',
      'EAHT',
      'UL8CGE',
      'PRAGATHIV9E',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9E',
      'IUNO',
      'UL8CIP',
      'UL9SPP',
      'SANCHPE',
      'C2TC',
      'SANPARE',
      'P1C2PLE',
      'ESTEE',
      'P1C2PSE',
      'P2C2PELE',
      'C2PCK',
      'C2PCS',
      'C1C2PLHE',
      'SUPHE',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'UL9SPP',
      'EUX1',
      'EGWPE',
      'ESPPE',
      'ESJE',
      'SRPGPP',
      'ESRBE'
    ],
    'MFD': [
      'UL8C2I',
      'EALPTPV9',
      'CANC',
      'UL7EA1',
      'UL7EA2',
      'UL9SPP',
      'C2PP',
      'SAPLUSEV9',
      'C2P3DP',
      'CDAC',
      'IUNO',
      'PGNP',
      'SANCHP',
      'SANPAR',
      'SUPH',
      'SARLP',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'UL8APP',
      'IANP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'EGWP',
      'SRPGPP',
      'ESRB'
    ],
    'AU Small Finance Bank': [
      'UL8C2I',
      'EALPTPV9',
      'GPP',
      'GPPCOMBO',
      'HRN',
      'CANC',
      'IANP',
      'LIFEPAR',
      'PENPAR',
      'SANCHV9',
      'SIPPARV9',
      'EIAP',
      'ESIP',
      'MAIP',
      'EAGP',
      'EGII',
      'UL7EA',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3',
      'UL7LPT2',
      'UL7NPR1',
      'UL7NPS3',
      'UL7WI1',
      'UL7WP1',
      'UL7YS1',
      'YSUD',
      'C2PP',
      'SAPLUSEV9',
      'HUDAY',
      'HUDAYV9',
      'UL8NIV',
      'UL8APP',
      'EAHT',
      'UL8CG',
      'PRAGATHIV9',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9',
      'IUNO',
      'SANCHP',
      'C2TC',
      'SANPAR',
      'P1C2PL',
      'ESTE',
      'P1C2PS',
      'P2C2PEL',
      'C2PCK',
      'C2PCS',
      'SARJB',
      'C1C2PLH',
      'SUPH',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'UL9SPP',
      'EUX1',
      'EGWP',
      'ESPP',
      'ESJ',
      'SRPGPP',
      'ESRB'
    ],


    'Other': [
      'UL8C2I',
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'MAIP',
      'MAIPE',
      'EAGP',
      'EAGPE',
      'EGII',
      'EGIIE',
      'ESJ',
      'ESJE',
      'SIPPAR',
      'SIPPARE',
      'SIPPARV9',
      'SIPPARV9E',
      'EALPTP',
      'EALPTPV9',
      'EALPTPE',
      'EALPTPV9E',
      'PENPAR',
      'GPP',
      'GPPE',
      'GPPCOMBO',
      'GPPCOMBOE',
      'LIFEPAR',
      'LIFEPARE',
      'SANCH',
      'SANCHE',
      'SANCHV9',
      'SANCHV9E',
      'T2P',
      'C2PP',
      /*'HCCP',*/
      'HASP',
      'HRN',
      'CANC',
      'IANP',
      'UL7LPT2',
      'UL7LPT2E',
      'UL7NPR1',
      'UL7NPR2',
      'UL7EA1',
      'UL7ESP3',
      'UL7ESP3E',
      'UL7EA2',
      'UL7EA',
      'UL7EAE',
      'UL7NPS3',
      'UL7NPS4',
      'UL7WP1',
      'UL7YS1',
      'UL7YSE1',
      'UL7WI1',
      'UL7ENT',
      'UL7ENTE',
      'UL9SPP',
      /*'TASLR',*/
      'YSAC',
      'YSACV9',
      'YSACE',
      'YSACV9E',
      'YSAS',
      'YSASV9',
      'YSASE',
      'YSASV9E',
      'YSCA',
      'YSCAV9',
      'YSCAE',
      'YSCAV9E',
      'YSUD',
      'YSUDE',
      'C2PP',
      'UL8C2I',
      'SAPLUSE',
      'SAPLUSEE',
      'SAPLUSEV9',
      'SAPLUSEV9E',
      'HUDAY',
      'HUDAYE',
      'HUDAYV9',
      'HUDAYV9E',
      'UL8NIV',
      'UL8NIVE',
      'UL8C2R',
      'UL8APP',
      'UL8APPE',
      'CANCE',
      'EAHT',
      'UL8CG',
      'UL8CGE',
      'PRAGATHI',
      'PRAGATHIE',
      'PRAGATHIV9',
      'PRAGATHIV9E',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'CDACE',
      'GSP',
      'GSPE',
      'GSPV9',
      'GSPV9E',
      'IUNO',
      'UL8CIP',
      'SANCHP',
      'SIPPARH',
      'EALPTPH',
      'SANCHP',
      'SANCHPE',
      'C2TC',
      'SANPAR',
      'SANPARE',
      'C2PSA',
      'P1C2PL',
      'P1C2PS',
      'P2C2PEL',
      'P1C2PLE',
      'P1C2PSE',
      'P2C2PELE',
      'ESTE',
      'ESTEE',
      'C2PCK',
      'SARJB',
      'C1C2PLH',
      'C1C2PLHE',
      'SUPH',
      'SUPHE',
      'SARLP',
      'C2PCS',
      'SRP',
      'SMPP',
      'C2POS',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWP',
      'EGWPE',
      'SMPP',
      'SMPPR',
      'SMPPL',
      'SMPPE',
      'SMPPI',
      'UL9SPP',
      'ESPP',
      'ESPPE',
      'ESJ',
      'ESJE',
      'SRPGPP',
      'ESRB',
      'ESRBE'
    ]

  };
  LOCAL_CH_PROD = {
    'Direct': {
      'BSC-OPS': [
        'UL8C2I',
        'EALPTPV9E',
        'GPPE',
        'GPPCOMBOE',
        'IANP',
        'LIFEPARE',
        'PENPAR',
        'SANCHV9E',
        'SIPPARV9E',
        'EIAPE',
        'ESIPE',
        'MAIPE',
        'EAGPE',
        'EGIIE',
        'T2P',
        'HRN',
        'CANC',
        'UL7EAE',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3E',
        'UL7LPT2E',
        'UL7NPR2',
        'UL7NPS4',
        'UL7WI1',
        'UL7WP1',
        'UL7YSE1',
        'YSUDE',
        'UL8C2I',
        'C2PP',
        'SAPLUSEV9E',
        'HUDAYE',
        'HUDAYV9E',
        'UL8NIVE',
        'UL8APPE',
        'EAHT',
        'UL8CGE',
        'PRAGATHIV9E',
        'C2P3DP',
        'C2PH',
        'PGNP',
        'CDAC',
        'GSPV9E',
        'IUNO',
        'UL8CIP',
        'UL9SPP',
        'SANCHPE',
        'C2TC',
        'SANPARE',
        'P1C2PLE',
        'ESTEE',
        'P1C2PSE',
        'P2C2PELE',
        'C2PCK',
        'C2PCS',
        'SARJB',
        'C1C2PLHE',
        'SUPHE',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'C2POS',
        'SPP',
        'SPPCOMBO',
        'EUX1',
        'EGWPE',
        'ESPPE',
        'ESJE',
        'ESRBE'
      ],
      'TAD': [
        'UL8C2I',
        'EALPTPV9E',
        'GPPE',
        'GPPCOMBOE',
        'IANP',
        'LIFEPARE',
        'PENPAR',
        'SANCHV9E',
        'SIPPARV9E',
        'EIAPE',
        'ESIPE',
        'MAIPE',
        'EAGPE',
        'EGIIE',
        'T2P',
        'HRN',
        'CANC',
        'UL7EA',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3',
        'UL7LPT2',
        'UL7NPR1',
        'UL7NPS3',
        'UL7WI1',
        'UL7WP1',
        'UL7YS1',
        'YSUDE',
        'C2PP',
        'SAPLUSEV9E',
        'HUDAYE',
        'HUDAYV9E',
        'UL8NIVE',
        'UL8APPE',
        'EAHT',
        'UL8CGE',
        'PRAGATHIV9E',
        'C2P3DP',
        'C2PH',
        'PGNP',
        'CDAC',
        'GSPV9E',
        'IUNO',
        'UL8CIP',
        'UL9SPP',
        'SANCHPE',
        'C2TC',
        'SANPARE',
        'P1C2PLE',
        'ESTEE',
        'P1C2PSE',
        'P2C2PELE',
        'C2PCK',
        'C2PCS',
        'SARJB',
        'C1C2PLHE',
        'SUPHE',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'C2POS',
        'SPP',
        'SPPCOMBO',
        'EUX1',
        'EGWPE',
        'ESPPE',
        'ESJE',
        'ESRBE'
      ]
    },
    'HDFC Bank': {
      'Tele-Based': [
        'SANCHV9',
        'SANCHP',
        'GSPV9',
        'SUPH'
      ],
      'POSP': [
        'SANCHP',
        'GSPV9',
        'SARLP',
        'SUPH',
        'P1C2PL',
        'IANP',
        'SARJB'
      ]
    },
    'AU Small Finance Bank': {
      'POSP': [
        'SANCHP'
      ]
    },

    'CoOperatives': {
      'Exide': [
        'SANPAR',
        'SANCHP',
        'SUPH',
        'P1C2PL',
        'P1C2PS',
        'EIAP',
        'ESIP',
        'EAGP',
        'EGWP',
        'ESPP',
        'ESJ',
        'EGII',
        'ESRB'
      ]
    },
    'Bancassurance - Yes Bank': {
      'Tele-Based': [
        'SANCHV9',
        'SANCHP',
        'SUPH'
      ]
    },
    'TSCRM': {
      'Bajaj Finance Ltd': [
        'UL8C2I',
        'EALPTPV9',
        'GPP',
        'GPPCOMBO',
        'HRN',
        'CANC',
        'IANP',
        'LIFEPAR',
        'PENPAR',
        'SANCHV9',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'T2P',
        'UL7EA',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3',
        'UL7LPT2',
        'UL7NPR1',
        'UL7NPS3',
        'UL7WI1',
        'UL7WP1',
        'UL7YS1',
        'YSUD',
        'C2PP',
        'SAPLUSEV9',
        'UL8NIV',
        'HUDAY',
        'HUDAYV9',
        'UL8APP',
        'EAHT',
        'UL8CG',
        'PRAGATHIV9E',
        'C2P3DP',
        //'C2PH',
        'PGNP',
        'CDAC',
        'C2PH',
        'GSPV9',
        'IUNO',
        'C2TC',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'C2PCK',
        'C2PCS',
        'SARJB',
        'C1C2PLH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'C2POS',
        'SPP',
        'SPPCOMBO',
        'UL9SPP',
        'EUX1',
        'ESPP',
        'ESJE'
      ]
    },

    'Broca': {
      'ITZ': [
        'UL8C2I',
        'UL9SPP',
        'SAPLUSEV9',
        'HUDAY',
        'HUDAYV9',
        'YSUD',
        'C2P3DP',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'ESTE',
        'CANC',
        'PGNP',
        'GSPV9',
        'IUNO',
        'SARJB',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'EUX1',
        'ESPP',
        'ESJ'
      ]
    },

    'Speciality Sales': {
      'Sourced by channel partner': [
        'UL8C2I',
        'EALPTPV9',
        'GPP',
        'GPPCOMBO',
        'HRN',
        'CANC',
        'IANP',
        'LIFEPAR',
        'PENPAR',
        'SANCHV9',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'UL7EA',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3',
        'UL7LPT2',
        'UL7NPR1',
        'UL7NPS3',
        'UL7WI1',
        'UL7WP1',
        'UL7YS1',
        'UL9SPP',
        'YSUD',
        'C2PP',
        'SAPLUSEV9',
        'HUDAY',
        'HUDAYV9',
        'UL8NIV',
        'UL8APP',
        'EAHT',
        'UL8CG',
        'PRAGATHIV9',
        'C2P3DP',
        'C2PH',
        'PGNP',
        'CDAC',
        'GSPV9',
        'IUNO',
        'SANCHP',
        'C2TC',
        'SANPAR',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'C2PCK',
        'C2PCS',
        'C1C2PLH',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'C2POS',
        'SPP',
        'SPPCOMBO',
        'EUX1',
        'EGWP',
        'ESPP',
        'ESJ',
        'ESRB'
      ]
    },
    'NBFC SFB': {
      'E-Sahaj': [
        'HUDAY',
        'HUDAYV9',
        'SANCHV9',
        'SAPLUSEV9',
        'PRAGATHIV9',
        'C2P3DP',
        'C2PP'
      ],
      'DCB Bank': [
        'SANCHV9',
        'SANCHP',
        'C2P3DP',
        'C2PP',
        'GSPV9',
        'SANPAR',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'SAPLUSEV9',
        'UL8C2I',
        'UL8NIV',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'UL7EA1',
        'PGNP',
        'IUNO',
        'UL7LPT2',
        'UL9SPP',
        'GPP',
        'GPPCOMBO',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'EUX1',
        'EGWP',
        'ESPP',
        'ESJ',
        'ESRB'
      ],

      'Ujjivan SFB': [
        'GSPV9',
        'SANCHP',
        'C2P3DP',
        'C2PP',
        'SANPAR',
        'SANCHV9',
        'UL7EA',
        'UL7EA2',
        'UL7EA1',
        'UL9SPP',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'SUPH',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'UL7LPT2',
        'GPP',
        'GPPCOMBO',
        'PGNP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'EUX1',
        'EGWP',
        'ESPP',
        'ESJ',
        'ESRB',
        'UL7YS1'
      ],
      'Tata Capital Fin Serv Ltd': [
        'C2P3DP',
        'C2PP',
        'CANC',
        //'C2PH',
        'SANCHP',
        'SIPPAR',
        'IANP',
        'PGNP',
        'SANCHV9',
        'IUNO',
        'SANPAR',
        'UL8NIV',
        'UL9SPP',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'EGWP',
        'ESRB'
      ]
    },
    'Bancassurance and New Tie Up': {
      'Catholic Syrian Bank': [
        'UL8C2I',
        'UL9SPP',
        'EALPTPV9',
        'GPP',
        'GPPCOMBO',
        'HRN',
        'CANC',
        'IANP',
        'LIFEPAR',
        'PENPAR',
        'SANCHV9',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'UL7EA',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3',
        'UL7LPT2',
        'UL7NPR1',
        'UL7NPS3',
        'UL7WI1',
        'UL7WP1',
        'UL7YS1',
        'YSUD',
        'C2PP',
        'SAPLUSEV9',
        'HUDAY',
        'HUDAYV9',
        'UL8NIV',
        'UL8APP',
        'EAHT',
        'UL8CG',
        'PRAGATHIV9',
        'C2P3DP',
        'C2PH',
        'PGNP',
        'CDAC',
        'GSPV9',
        'IUNO',
        'SANCHP',
        'C2TC',
        'SANPAR',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'C2PCK',
        'C2PCS',
        'C1C2PLH',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'C2POS',
        'SPP',
        'SPPCOMBO',
        'EUX1',
        'EGWP',
        'ESPP',
        'ESJ',
        'ESRB'
      ],
      'Varthana': [
        'UL8C2I',
        'UL9SPP',
        'EALPTPV9',
        'GPP',
        'GPPCOMBO',
        'HRN',
        'CANC',
        'IANP',
        'LIFEPAR',
        'PENPAR',
        'SANCHV9',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'UL7EA',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3',
        'UL7LPT2',
        'UL7NPR1',
        'UL7NPS3',
        'UL7WI1',
        'UL7WP1',
        'UL7YS1',
        'YSUD',
        'C2PP',
        'SAPLUSEV9',
        'HUDAY',
        'HUDAYV9',
        'UL8NIV',
        'UL8APP',
        'EAHT',
        'UL8CG',
        'PRAGATHIV9',
        'C2P3DP',
        'C2PH',
        'PGNP',
        'CDAC',
        'GSPV9',
        'IUNO',
        'SANCHP',
        'C2TC',
        'SANPAR',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'C2PCK',
        'C2PCS',
        'C1C2PLH',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'C2POS',
        'SPP',
        'SPPCOMBO',
        'EUX1',
        'EGWP',
        'ESPP',
        'ESJ',
        'ESRB'
      ],
      'SBM Bank Ltd': [
        'UL8C2I',
        'UL9SPP',
        'EALPTPV9',
        'GPP',
        'GPPCOMBO',
        'HRN',
        'CANC',
        'IANP',
        'LIFEPAR',
        'PENPAR',
        'SANCHV9',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'UL7EA',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3',
        'UL7LPT2',
        'UL7NPR1',
        'UL7NPS3',
        'UL7WI1',
        'UL7WP1',
        'UL7YS1',
        'YSUD',
        'C2PP',
        'SAPLUSEV9',
        'HUDAY',
        'HUDAYV9',
        'UL8NIV',
        'UL8APP',
        'EAHT',
        'UL8CG',
        'PRAGATHIV9',
        'C2P3DP',
        'C2PH',
        'PGNP',
        'CDAC',
        'GSPV9',
        'IUNO',
        'SANCHP',
        'C2TC',
        'SANPAR',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'SARJB',
        'C2PCK',
        'C2PCS',
        'C1C2PLH',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'C2POS',
        'SPP',
        'SPPCOMBO',
        'EUX1',
        'EGWP',
        'ESPP',
        'ESJ',
        'ESRB'
      ],
      'IFFCO Kissan': [
        'UL8C2I',
        'UL9SPP',
        'EALPTPV9',
        'GPP',
        'GPPCOMBO',
        'HRN',
        'CANC',
        'IANP',
        'LIFEPAR',
        'PENPAR',
        'SANCHV9',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'UL7EA',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3',
        'UL7LPT2',
        'UL7NPR1',
        'UL7NPS3',
        'UL7WI1',
        'UL7WP1',
        'UL7YS1',
        'YSUD',
        'C2PP',
        'SAPLUSEV9',
        'HUDAY',
        'HUDAYV9',
        'UL8NIV',
        'UL8APP',
        'EAHT',
        'UL8CG',
        'PRAGATHIV9',
        'C2P3DP',
        'C2PH',
        'PGNP',
        'CDAC',
        'GSPV9',
        'IUNO',
        'SANCHP',
        'C2TC',
        'SANPAR',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'C2PCK',
        'C2PCS',
        'C1C2PH',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'C2POS',
        'SPP',
        'SPPCOMBO',
        'EUX1',
        'EGWP',
        'ESPP',
        'ESJ',
        'ESRB'
      ],
      'Vakrangee': [//check with kiran shindae and team before mapping any product
        'HUDAYV9',
        'SAPLUSEV9',
        'C2PP',
        'CANC',
        'C2P3DP',
        'SANCHV9',
        'IANP',
        'PGNP',
        'YSUD',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'ESTE',
        'GSPV9',
        'SANCHP',
        'SANPAR',
        'SARJB',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'EUX1',
        'EGWP',
        'ESPP',
        'ESJ',
        'ESRB'
      ],
      'Doha Bank': [
        'UL8C2I',
        'UL9SPP',
        'EALPTPV9',
        'GPP',
        'GPPCOMBO',
        'HRN',
        'CANC',
        'IANP',
        'LIFEPAR',
        'PENPAR',
        'SANCHV9',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'UL7EA',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3',
        'UL7LPT2',
        'UL7NPR1',
        'UL7NPS3',
        'UL7WI1',
        'UL7WP1',
        'UL7YS1',
        'YSUD',
        'C2PP',
        'SAPLUSEV9',
        'HUDAY',
        'HUDAYV9',
        'UL8NIV',
        'UL8APP',
        'EAHT',
        'UL8CG',
        'PRAGATHIV9',
        'C2P3DP',
        'C2PH',
        'PGNP',
        'CDAC',
        'GSPV9',
        'IUNO',
        'SANCHP',
        'C2TC',
        'SANPAR',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'C2PCK',
        'C2PCS',
        'C1C2PLH',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'C2POS',
        'SPP',
        'SPPCOMBO',
        'EUX1',
        'EGWP',
        'ESPP',
        'ESJ',
        'ESRB'
      ],
      'Saptagiri Grameena Bank': [
        'UL8C2I',
        'EALPTPV9',
        'GPP',
        'GPPCOMBO',
        'HRN',
        'CANC',
        'IANP',
        'LIFEPAR',
        'PENPAR',
        'SANCHV9',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'UL7EA',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3',
        'UL7LPT2',
        'UL7NPR1',
        'UL7NPS3',
        'UL7WI1',
        'UL9SPP',
        'UL7WP1',
        'UL7YS1',
        'YSUD',
        'C2PP',
        'SAPLUSEV9',
        'HUDAY',
        'HUDAYV9',
        'UL8NIV',
        'UL8APP',
        'EAHT',
        'UL8CG',
        'PRAGATHIV9',
        'C2P3DP',
        'C2PH',
        'PGNP',
        'CDAC',
        'GSPV9',
        'IUNO',
        'SANCHP',
        'C2TC',
        'SANPAR',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'C2PCK',
        'C2PCS',
        'C1C2PLH',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'C2POS',
        'SPP',
        'SPPCOMBO',
        'EUX1',
        'EGWP',
        'ESPP',
        'ESJ',
        'ESRB'
      ],
      'South Indian Bank': [
        'UL8C2I',
        'UL9SPP',
        'EALPTPV9',
        'GPP',
        'GPPCOMBO',
        'HRN',
        'CANC',
        'IANP',
        'LIFEPAR',
        'PENPAR',
        'SANCHV9',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'UL7EA',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3',
        'UL7LPT2',
        'UL7NPR1',
        'UL7NPS3',
        'UL7WI1',
        'UL7WP1',
        'UL7YS1',
        'YSUD',
        'C2PP',
        'SAPLUSEV9',
        'HUDAY',
        'HUDAYV9',
        'UL8NIV',
        'UL8APP',
        'EAHT',
        'UL8CG',
        'PRAGATHIV9',
        'C2P3DP',
        'C2PH',
        'PGNP',
        'CDAC',
        'GSPV9',
        'IUNO',
        'SANCHP',
        'C2TC',
        'SANPAR',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'C2PCK',
        'C2PCS',
        'C1C2PLH',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'C2POS',
        'SPP',
        'SPPCOMBO',
        'EUX1',
        'EGWP',
        'ESPP',
        'ESJ',
        'ESRB'
      ]

    },
    'Bandhan Bank Ltd': {
      'SP': [
        'UL7EA1',
        'UL8C2I',
        'UL9SPP',
        'C2P3DP',
        'SANCHP',
        'SANCHV9',
        'C2PP',
        'SANPAR',
        'PGNP',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'SARLP',
        'SUPH',
        'EGWP',
        'ESRB'
      ]
    },
    'MFD': {
      'IIFL Wealth': [
        'UL8C2I',
        'UL9SPP',
        'EALPTPV9',
        'CANC',
        'UL7EA1',
        'UL7EA2',
        'C2PP',
        'SAPLUSEV9',
        'C2P3DP',
        'CDAC',
        'IUNO',
        'PGNP',
        'SANCHP',
        'SANPAR',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'EGWP',
        'ESRB'
      ],
      'Bharat Bhushan': [
        'UL8C2I',
        'UL9SPP',
        'EALPTPV9',
        'CANC',
        'UL7EA1',
        'UL7EA2',
        'C2PP',
        'SAPLUSEV9E',
        'C2P3DP',
        'CDAC',
        'IUNO',
        'PGNP',
        'SANCHP',
        'SANPAR',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'EGWP',
        'ESRB'
      ],
      'KIFS': [
        'UL8C2I',
        'EALPTPV9',
        'CANC',
        'UL7EA1',
        'UL7EA2',
        'UL9SPP',
        'C2PP',
        'SAPLUSEV9',
        'C2P3DP',
        'CDAC',
        'IUNO',
        'PGNP',
        'SANCHP',
        'SANPARE',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'EGWP',
        'ESRB'
      ],
      'Self Source': [
        ' UL8C2I',
        'EALPTPV9',
        'CANC',
        'UL7EA1',
        'UL7EA2',
        'UL9SPP',
        'C2PP',
        'SAPLUSEV9',
        'C2P3DP',
        'CDAC',
        'IUNO',
        'PGNP',
        'SANCHP',
        'SANPARE',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'EGWP',
        'ESRB'
      ],
      'Kredre Wealth': [
        'UL8C2I',
        'EALPTPV9',
        'CANC',
        'UL7EA1',
        'UL7EA2',
        'UL9SPP',
        'C2PP',
        'SAPLUSEV9',
        'C2P3DP',
        'CDAC',
        'IUNO',
        'PGNP',
        'SANCHPE',
        'SANPAR',
        'SUPHE',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'EGWPE',
        'ESRBE'
      ],
      'XYZ limited': [
        'UL8C2I',
        'EALPTPV9',
        'UL9SPP',
        'CANC',
        'UL7EA1',
        'UL7EA2',
        'C2PP',
        'SAPLUSEV9',
        'C2P3DP',
        'CDAC',
        'IUNO',
        'PGNP',
        'SANCHP',
        'SANPAR',
        'SUPH',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'EGWP',
        'ESRB'
      ],
      'IMF Limited': [
        'UL8C2I',
        'UL9SPP',
        'EALPTPV9E',
        'CANC',
        'UL7EA1',
        'UL7EA2',
        'C2PP',
        'SAPLUSEV9E',
        'C2P3DP',
        'CDAC',
        'IUNO',
        'PGNP',
        'SANCHPE',
        'SANPARE',
        'SUPHE',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'EGWPE',
        'ESRBE'
      ],
      'Tao Wealth Masters': ['UL8C2I', 'UL9SPP', 'UL8APPE', 'IUNO', 'UL7EA1', 'UL7EA2', 'P1C2PLE', 'P1C2PSE', 'P2C2PELE', 'C2PP', 'EALPTPV9E', 'SAPLUSEV9E', 'SANCHPE', 'SANPARE', 'CANC', 'CDAC', 'PGNP', 'IANP', 'SRP', 'SMPP', 'SMPPL', 'SMPPR', 'SMPPE', 'SMPPI', 'EGWPE', 'ESRBE'],
      'P.H. Financial & Investment': ['UL8C2I', 'UL9SPP', 'UL8APPE', 'IUNO', 'UL7EA1', 'UL7EA2', 'P1C2PLE', 'P1C2PSE', 'P2C2PELE', 'C2PP', 'EALPTPV9E', 'SAPLUSEV9E', 'SANCHPE', 'SANPARE', 'CANC', 'CDAC', 'PGNP', 'IANP', 'SRP', 'SMPP', 'SMPPL', 'SMPPR', 'SMPPE', 'SMPPI', 'EGWPE', 'ESRBE'],
      'RM Asset Advisor LLP': ['UL8C2I', 'UL9SPP', 'UL8APPE', 'IUNO', 'UL7EA1', 'UL7EA2', 'P1C2PLE', 'P1C2PSE', 'P2C2PELE', 'C2PP', 'EALPTPV9E', 'SAPLUSEV9E', 'SANCHPE', 'SANPARE', 'CANC', 'CDAC', 'PGNP', 'IANP', 'SRP', 'SMPP', 'SMPPL', 'SMPPR', 'SMPPE', 'SMPPI', 'EGWPE', 'ESRBE'],
      'Invest-wisely Pvt Limited': ['UL8C2I', 'UL9SPP', 'UL8APPE', 'IUNO', 'UL7EA1', 'UL7EA2', 'P1C2PLE', 'P1C2PSE', 'P2C2PELE', 'C2PP', 'EALPTPV9E', 'SAPLUSEV9E', 'SANCHPE', 'SANPARE', 'CANC', 'CDAC', 'PGNP', 'IANP', 'SRP', 'SMPP', 'SMPPL', 'SMPPR', 'SMPPE', 'SMPPI', 'EGWPE', 'ESRBE'],
      'Incred Wealth': ['UL8C2I', 'UL8APP', 'UL9SPP', 'IUNO', 'UL7EA1', 'UL7EA2', 'P1C2PL', 'P1C2PS', 'P2C2PEL', 'C2PP', 'EALPTPV9', 'SAPLUSEV9', 'SANCHP', 'SANPAR', 'CANC', 'CDAC', 'PGNP', 'IANP', 'SRP', 'SMPP', 'SMPPL', 'SMPPR', 'SMPPE', 'SMPPI', 'EGWP', 'ESRB'],
      'Chronicle Mercantile Pvt Ltd': ['UL8C2I', 'UL9SPP', 'UL8APPE', 'IUNO', 'UL7EA1', 'UL7EA2', 'P1C2PLE', 'P1C2PSE', 'P2C2PELE', 'C2PP', 'EALPTPV9E', 'SAPLUSEV9E', 'SANCHPE', 'SANPARE', 'CANC', 'CDAC', 'PGNP', 'IANP', 'SRP', 'SMPP', 'SMPPL', 'SMPPR', 'SMPPE', 'SMPPI', 'EGWPE', 'ESRBE'],
      'Arvind Shah': ['UL8C2I', 'UL9SPP', 'UL8APP', 'IUNO', 'UL7EA1', 'UL7EA2', 'P1C2PL', 'P1C2PS', 'P2C2PEL', 'C2PP', 'EALPTPV9', 'SAPLUSEV9', 'SANCHP', 'SANPAR', 'CANC', 'CDAC', 'PGNP', 'IANP', 'SRP', 'SMPP', 'SMPPL', 'SMPPR', 'SMPPE', 'SMPPI', 'EGWP', 'ESRB']
    }


  };


  LOCAL_CH_PROD_SPECIALITY = {
    'Direct': {
      'BSC-OPS': [
        'UL8C2I',
        'UL9SPP',
        'EALPTPV9E',
        'GPPE',
        'GPPCOMBOE',
        'IANP',
        'LIFEPARE',
        'PENPAR',
        'SANCHV9E',
        'SIPPARV9E',
        'EIAPE',
        'ESIPE',
        'MAIPE',
        'EAGPE',
        'EGIIE',
        'T2P',
        'HRN',
        'CANC',
        'UL7EAE',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3E',
        'UL7LPT2E',
        'UL7NPR2',
        'UL7NPS4',
        'UL7WI1',
        'UL7WP1',
        'UL7YSE1',
        'YSUDE',
        'UL8C2I',
        'C2PP',
        'SAPLUSEV9E',
        'HUDAYE',
        'HUDAYV9E',
        'UL8NIVE',
        'UL8APPE',
        'EAHT',
        'UL8CGE',
        'PRAGATHIV9E',
        'C2P3DP',
        'C2PH',
        'PGNP',
        'CDAC',
        'GSPV9E',
        'IUNO',
        'UL8CIP',
        'C2TC',
        'P1C2PL',
        'ESTEE',
        'P1C2PS',
        'P2C2PEL',
        'C2PCK',
        'C2PCS',
        'SARJB',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'SPP',
        'SPPCOMBO',
        'EUX1',
        'EGWPE',
        'ESPPE',
        'ESJE'
      ],
      'TAD': [
        'UL8C2I',
        'UL9SPP',
        'EALPTPV9E',
        'GPPE',
        'GPPCOMBOE',
        'IANP',
        'LIFEPARE',
        'PENPAR',
        'SANCHV9E',
        'SIPPARV9E',
        'EIAPE',
        'ESIPE',
        'MAIPE',
        'EAGPE',
        'EGIIE',
        'T2P',
        'HRN',
        'CANC',
        'UL7EA',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3',
        'UL7LPT2',
        'UL7NPR1',
        'UL7NPS3',
        'UL7WI1',
        'UL7WP1',
        'UL7YS1',
        'YSUDE',
        'C2PP',
        'SAPLUSEV9E',
        'HUDAYE',
        'HUDAYV9E',
        'UL8NIVE',
        'UL8APPE',
        'EAHT',
        'UL8CGE',
        'PRAGATHIV9E',
        'C2P3DP',
        'C2PH',
        'PGNP',
        'CDAC',
        'GSPV9E',
        'IUNO',
        'UL8CIP',
        'UL9SPP',
        'C2TC',
        'P1C2PL',
        'ESTEE',
        'P1C2PS',
        'P2C2PEL',
        'C2PCK',
        'C2PCS',
        'SARJB',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'SPP',
        'SPPCOMBO',
        'EUX1',
        'ESPPE',
        'ESJE'
      ]
    },
    'TSCRM': {
      'Bajaj Finance Ltd': [
        'UL8C2I',
        'UL9SPP',
        'EALPTPV9',
        'GPP',
        'GPPCOMBO',
        'HRN',
        'CANC',
        'IANP',
        'LIFEPAR',
        'PENPAR',
        'SANCHV9',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'T2P',
        'UL7EA',
        'UL7EA1',
        'UL7EA2',
        'UL7ESP3',
        'UL7LPT2',
        'UL7NPR1',
        'UL7NPS3',
        'UL7WI1',
        'UL7WP1',
        'UL7YS1',
        'YSUD',
        'C2PP',
        'SAPLUSEV9',
        'UL8NIV',
        'HUDAY',
        'HUDAYV9',
        'UL8APP',
        'EAHT',
        'UL8CG',
        'PRAGATHIV9E',
        'C2P3DP',
        //'C2PH',
        'PGNP',
        'CDAC',
        'C2PH',
        'GSPV9',
        'IUNO',
        'C2TC',
        'P1C2PL',
        'ESTE',
        'P1C2PS',
        'P2C2PEL',
        'C2PCK',
        'C2PCS',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'SPP',
        'SPPCOMBO',
        'EUX1',
        'ESPP',
        'ESJ'
      ]
    },

    'Broca': {
      'ITZ': [
        'UL8C2I',
        'UL9SPP',
        'SAPLUSEV9',
        'HUDAY',
        'HUDAYV9',
        'YSUD',
        'C2P3DP',
        'C2PP',
        'SIPPARV9',
        'EIAP',
        'ESIP',
        'MAIP',
        'EAGP',
        'EGII',
        'CANC',
        'PGNP',
        'GSPV9',
        'IUNO',
        'SARJB',
        'SARLP',
        'SRP',
        'SMPP',
        'SMPPL',
        'SMPPR',
        'SMPPE',
        'SMPPI',
        'EUX1',
        'ESPP',
        'ESJ'
      ]
    }
  };

  LOCAL_CH_PROD_SPEC_SELF = {
    'Speciality Sales': [
      'UL8C2I',
      'UL9SPP',
      'EALPTPV9E',
      'GPPE',
      'GPPCOMBOE',
      'IANP',
      'LIFEPARE',
      'PENPAR',
      'SANCHV9E',
      'SIPPARV9E',
      'EIAPE',
      'ESIPE',
      'MAIPE',
      'EAGPE',
      'EGIIE',
      'T2P',
      'HRN',
      'CANC',
      'UL7EAE',
      'UL7EA1',
      'UL7EA2',
      'UL7ESP3E',
      'UL7LPT2E',
      'UL7NPR2',
      'UL7NPS4',
      'UL7WI1',
      'UL7WP1',
      'UL7YSE1',
      'YSUDE',
      'UL8C2I',
      'C2PP',
      'SAPLUSEV9E',
      'HUDAYE',
      'HUDAYV9E',
      'UL8NIVE',
      'UL8APPE',
      'EAHT',
      'UL8CGE',
      'PRAGATHIV9E',
      'C2P3DP',
      'C2PH',
      'PGNP',
      'CDAC',
      'GSPV9E',
      'IUNO',
      'SANCHPE',
      'C2TC',
      'SANPARE',
      'P1C2PLE',
      'ESTEE',
      'P1C2PSE',
      'P2C2PELE',
      'C2PCK',
      'C2PCS',
      'SUPHE',
      'SARLP',
      'SRP',
      'SMPP',
      'SMPPL',
      'SMPPR',
      'SMPPE',
      'SMPPI',
      'SPP',
      'SPPCOMBO',
      'EUX1',
      'EGWPE',
      'ESPPE',
      'ESJE',
      'ESRBE'
    ]
  };

  var LOCAL_CAT_PROD = {

    'Investment': [

      'UL8C2I',
      'UL7EA',
      'UL7EA2',
      'UL7EA1',
      'UL7WI1',
      'UL7ESP3',
      'UL7WP1',
      'UL7LPT2',
      'UL7ENT',
      'UL7EAE',
      'UL7ESP3E',
      'UL7LPT2E',
      'UL7ENTE',
      'UL8NIV',
      'UL8NIVE',
      'IUNO',
      'UL8CIP',
      'EUX1',
      'UL9SPP'

    ],
    'Protection': [
      'SARJB',
      'SARJBE',
      'P1C2PL',
      'P1C2PLE',
      'P1C2PS',
      'P1C2PSE',
      'ESTE',
      'ESTEE',
      'P2C2PEL',
      'P2C2PELE',
      //'C2P3DP',
      // 'C2PP',
      'T2P',
      'TASLR',
      'C2PSA'
    ],

    'Combi': [
      'C1C2PLH',
      'C1C2PLHE',
      'C2PH',
      //'C2TC',
      //'C2PCK',
      'C2PCS',
      'C2POS'
      /*'SIPPARH',
      'EALPTPH'*/

    ],

    'MyMixCombo': [
      'PROTS',
      'C2INS',
      'C2INSCG',
      'C2PRN',
      'SANMAX',
      'C2WNSA',
      'C2INSFMP',
      'NIVSFMP',
      'C2WNSFMP'
    ],
    'Predefinedcombos': [
      'SANMAX',
      'C2INSFMP',
      'NIVSFMP',
      'SRPGPP'
    ],
    'MyOwnMixCombo': [
      'SANMAX'
    ],


    'Savings': [
      'LIFEPAR',
      'LIFEPARE',
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'MAIP',
      'MAIPE',
      'EAGP',
      'EAGPE',
      'EGII',
      'EGIIE',
      //'EXLGWP',
      //'EALPTP',
      //'EALPTPE',
      'EALPTPV9',
      'EALPTPV9E',
      //'SIPPAR',
      //'SIPPARE',
      'SIPPARV9',
      'SIPPARV9E',
      //'SANCH',
      //'SANCHE',
      //'SANCHV9',
      //'SANCHV9E',
      //'SAPLUSE',
      //'SAPLUSEE',
      'SAPLUSEV9',
      'SAPLUSEV9E',
      'HUDAYV9',
      'HUDAYV9E',
      //'HUDAY',
      //'HUDAYE',
      'UL8CG',
      'UL8CGE',
      //'PRAGATHI',
      //'PRAGATHIE',
      'PRAGATHIV9',
      'PRAGATHIV9E',
      //'GSP',
      //'GSPE',
      'GSPV9',
      'GSPV9E',
      'SANCHP',
      'SANCHPE',
      'SANPAR',
      'SANPARE',
      'SUPH',
      'SUPHE',
      'EGWP',
      'EGWPE',
      'ESRB',
      'ESRBE',
      'ESJ',
      'ESJE'
    ],
    'Pension': [

      'UL7NPR1',
      'UL7NPR2',
      'UL7NPS3',
      'UL7NPS4',
      'PENPAR',
      'GPP',
      'GPPE',
      'GPPCOMBO',
      'GPPCOMBOE',
      'IANP',
      'UL8APP',
      'UL8APPE',
      'UL8C2R',
      'PGNP',
      'SARLP',
      'SRP',
      'SPP',
      'SPPCOMBO',
      'SMPP',
      'SMPPR',
      'SMPPL',
      'SMPPE',
      'SMPPI',
      'ESPP',
      'ESPPE'
    ],
    'Children': [
      'UL7YS1',
      'UL7YSE1',
      'YSAC',
      'YSACE',
      'YSAS',
      'YSASE',
      'YSCA',
      'YSCAE',
      'YSUD',
      'YSUDE'
    ],
    /*'Joint Life':[
        'IANP',
        'HASP'
      ],*/
    'Health': [
      'CDAC',
      'CDACE',
      'CANC',
      'CANCE',
      'EAHT',
      'HRN',
      'SHP'
    ]

  };

  var LOCAL_RIDER_LIST = new Array();
  LOCAL_RIDER_LIST = [
    'INAD',
    'C4CI',
    'PPR',
    'ECI4',
    'ECI25',
    'ETR',
    'ADDDB',
    'HPR',
    'WOP'
  ];

  var LOCAL_RIDER_PRODUCT_MAPPING = {

    'INAD': [
      'C2PP',
      'SIPPAR',
      'SIPPARE',
      'SIPPARV9',
      'SIPPARV9E',
      'UL7YS1',
      'UL7YSE1',
      'SANCH',
      'SANCHE',
      'C2P3DP',
      'SANCHP',
      'SANCHPE',
      'UL7EA',
      'UL7EAE',
      'UL8C2I',
      'UL7EA1',
      'UL7EA2',
      'SANCHV9',
      'SANCHV9E',
      'EALPTP',
      'EALPTPE',
      'EALPTPV9',
      'EALPTPV9E',
      'SANPAR',
      'SANPARE',
      'IUNO',
      'SAPLUSE',
      'SAPLUSEE',
      'SAPLUSEV9',
      'SAPLUSEV9E',
      'UL8NIV',
      'UL8NIVE',
      'UL7LPT2',
      'UL7LPT2E',
      'UL7YS1',
      'PRAGATHIV9',
      'PRAGATHIV9E',
      'HUDAYV9',
      'HUDAYV9E',
      'YSUD',
      'YSUDE',
      'UL8CIP',
      'P1C2PL',
      'P1C2PLE',
      'P1C2PS',
      'P1C2PSE',
      'P2C2PEL',
      'P2C2PELE',
      'SARJB',
      'SARJBE',
      'SUPH',
      'SUPHE',
      'UL9SPP',
      'ESRB',
      'ESRBE',
      'EGII',
      'EGIIE',
      'EGWP',
      'EGWPE',
      'ESJ',
      'ESJE',
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'EAGP',
      'EAGPE'
      /*'SPP',
      'SPPR',
      'SPPL',
      'SPPS'*/

    ],


    'C4CI': [
      'C2PP',
      'SIPPAR',
      'SIPPARE',
      'SIPPARV9',
      'SIPPARV9E',
      'UL7YS1',
      'UL7YSE1',
      'EALPTP',
      'EALPTPE',
      'EALPTPV9',
      'EALPTPV9E',
      'SANCH',
      'SANCHE',
      'SAPLUSE',
      'SAPLUSEE',
      'SAPLUSEV9',
      'SAPLUSEV9E',
      'C2P3DP',
      'SANCHP',
      'SANCHPE',
      'UL7EA',
      'UL7EAE',
      'UL8C2I',
      'UL7EA1',
      'UL7EA2',
      'SANCHV9',
      'SANCHV9E',
      'SANPAR',
      'SANPARE',
      'UL8NIV',
      'UL8NIVE',
      'UL7LPT2',
      'UL7LPT2E',
      'PRAGATHIV9',
      'PRAGATHIV9E',
      'HUDAYV9',
      'HUDAYV9E',
      'YSUD',
      'YSUDE',
      'UL8CIP',
      'P1C2PL',
      'P1C2PLE',
      'P1C2PS',
      'P1C2PSE',
      'P2C2PEL',
      'P2C2PELE',
      'SUPH',
      'SUPHE',
      'UL9SPP',
      'ESRB',
      'ESRBE',
      'EGII',
      'EGIIE',

      'EGWP',
      'EGWPE',
      'ESJ',
      'ESJE',
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'EAGP',
      'EAGPE'
      /*'SPP',
       'SPPR',
       'SPPL',
       'SPPS'*/

    ],
    'HPR': [
      'SANCHP',
      'SANCHPE',
      'P1C2PS',
      'P1C2PSE',
      'P1C2PL',
      'P1C2PLE'
    ],
    'PPR': [
      'C2PP',
      'UL7EA1',
      'C2P3DP',
      'SANCHP',
      'SANCHPE',
      'UL8C2I',
      'UL8CIP',
      'SANPAR',
      'SANPARE',
      'UL7EA2',
      'UL7EA',
      'UL7EAE',
      'SANCHV9',
      'SANCHV9E',
      'SIPPARV9',
      'SIPPARV9E',
      'UL7LPT2',
      'UL7LPT2E',
      'UL7EA1',
      'P1C2PL',
      'P1C2PLE',
      'P1C2PS',
      'P1C2PSE',
      'P2C2PEL',
      'P2C2PELE',
      'SARJB',
      'UL8NIV',
      'UL8NIVE',
      'SARJBE',
      'SUPH',
      'SUPHE',
      'UL9SPP',
      'ESRB',
      'ESRBE',
      'EGII',
      'EGIIE',
      'EGWP',
      'EGWPE',
      'ESJ',
      'ESJE',
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'EAGP',
      'EAGPE'
      /*'SPP',
      'SPPR',
      'SPPL',
      'SPPS'*/
    ],
    'ECI4': [
      /*'EIAP',
      'EIAPE',*/
      /*'ESIP',
      'ESIPE',*/
      'MAIP',
      'MAIPE',
      /*'EAGP',
      'EAGPE',*/
      /*'EGII',
      'EGIIE',*/
      'ESTE',
      'ESTEE'
      /*'EGWP',
     'EGWPE'*/
    ],
    'ECI25': [
      /* 'EIAP',
       'EIAPE',*/
      /*'ESIP',
      'ESIPE',*/
      'MAIP',
      'MAIPE',
      /*'EAGP',
      'EAGPE',*/
      /*'EGII',
      'EGIIE',*/
      'ESTE',
      'ESTEE'
      /*'EGWP',
     'EGWPE'*/
    ],
    'ETR': [
      /*'EIAP',
      'EIAPE',*/
      /*'ESIP',
     'ESIPE',*/
      'MAIP',
      'MAIPE',
      /* 'EAGP',
      'EAGPE'*/
      /*'EGII',
      'EGIIE',*/
      /*'EGWP',
      'EGWPE'*/
    ],
    'ADDDB': [
      /*'EIAP',
      'EIAPE',*/
      /*'ESIP',
     'ESIPE',*/
      'ESTE',
      'ESTEE'
      /*'EGII',
      'EGIIE'*/
    ],

    'WOP': [
      'SANCHP',
      'SANCHPE'
    ]
  };
  var LOCAL_RIDER_PRODUCT_MAPPING_OPS = {

    'INAD': [

      'P1C2PL',
      'P1C2PS',
      'P2C2PEL',
      'C2PP',
      'SIPPAR',
      'SIPPARE',
      'SIPPARV9',
      'SIPPARV9E',
      'SANCH',
      'SANCHE',
      'SANCHV9',
      'SANCHV9E',
      'C2P3DP',
      'SANCHP',
      'SANCHPE',
      'UL7EA',
      'UL7EAE',
      'UL8C2I',
      'UL7EA2',
      'UL7EA1',
      'SANPAR',
      'SANPARE',
      'SAPLUSEV9',
      'SAPLUSEV9E',
      'UL8NIVE',
      'UL8NIV',
      'UL7LPT2E',
      'UL7LPT2',
      'IUNO',
      'UL7YS1',
      'EALPTPV9',
      'UL8CIP',
      'YSUD',
      'YSUDE',
      'SARJB',
      'P1C2PLE',
      'P1C2PSE',
      'P2C2PELE',
      'SUPH',
      'SUPHE',
      'UL9SPP',
      'ESRB',
      'ESRBE',
      'EGII',
      'EGIIE',
      'EGWP',
      'EGWPE',
      'ESJ',
      'ESJE',
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'EAGP',
      'EAGPE'
      /*'SPP',
      'SPPR',
      'SPPS',
      'SPPL'*/
    ],


    'C4CI': [
      'P1C2PL',
      'P1C2PS',
      'P2C2PEL',
      'C2PP',
      'SIPPAR',
      'SIPPARE',
      'SIPPARV9',
      'SIPPARV9E',
      'EALPTP',
      'EALPTPE',
      'EALPTPV9',
      'EALPTPV9E',
      'SANCH',
      'SANCHE',
      'SANCHV9',
      'SANCHV9E',
      'SAPLUSE',
      'SAPLUSEE',
      'SAPLUSEV9',
      'SAPLUSEV9E',
      'C2P3DP',
      'SANCHP',
      'SANCHPE',
      'UL7EA',
      'UL7EAE',
      'UL7EA1',
      'UL7EA2',
      'UL8C2I',
      'SANPAR',
      'SANPARE',
      'UL8NIVE',
      'UL8NIV',
      'UL7LPT2E',
      'UL7LPT2',
      'UL7YS1',
      'UL8CIP',
      'YSUD',
      'YSUDE',
      'P1C2PLE',
      'P1C2PSE',
      'P2C2PELE',
      'SUPH',
      'SUPHE',
      'UL9SPP',
      'ESRB',
      'ESRBE',
      'EGII',
      'EGIIE',
      'EGWP',
      'EGWPE',
      'ESJ',
      'ESJE',
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'EAGP',
      'EAGPE'
      /*'SPP',
      'SPPR',
      'SPPS',
      'SPPL'*/
    ],
    'SANCHV9': ['C2PSA'],
    'PPR': [
      'P1C2PL',
      'P1C2PS',
      'P2C2PEL',
      'C2PP',
      'C2P3DP',
      'SANCHP',
      'SANCHPE',
      'UL8C2I',
      'SANPAR',
      'SANPARE',
      'UL8CIP',
      'UL7EA',
      'UL7EAE',
      'SANCHV9',
      'SANCHV9E',
      'SIPPARV9',
      'SIPPARV9E',
      'UL7LPT2',
      'UL7LPT2E',
      'UL7EA1',
      'UL7EA2',
      'SARJB',
      'UL8NIV',
      'UL8NIVE',
      'P1C2PLE',
      'P1C2PSE',
      'P2C2PELE',
      'SUPH',
      'SUPHE',
      'UL9SPP',
      'ESRB',
      'ESRBE',
      'EGII',
      'EGIIE',
      'EGWP',
      'EGWPE',
      'ESJ',
      'ESJE',
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'EAGP',
      'EAGPE'
      /*'SPP',
      'SPPR',
      'SPPS',
      'SPPL'*/
    ],
    'ECI4': [
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'EGWP',
      'EGWPE',
      'ESTE',
      'ESTEE',
      'MAIP',
      'MAIPE',
      'EAGP',
      'EAGPE'
    ],
    'HPR': [
      'SANCHP',
      'SANCHPE',
      'P1C2PS',
      'P1C2PSE',
      'P1C2PL',
      'P1C2PLE'
    ],
    'ECI25': [
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'EGWP',
      'EGWPE',
      'ESTE',
      'ESTEE',
      'MAIP',
      'MAIPE',
      'EAGP',
      'EAGPE'
    ],
    'ETR': [
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'EGWP',
      'EGWPE',
      'MAIP',
      'MAIPE',
      'EAGP',
      'EAGPE'
    ],
    'ADDDB': [
      'EIAP',
      'EIAPE',
      'ESIP',
      'ESIPE',
      'ESTE',
      'ESTEE'
    ],
  };

  var LOCAL_NRI = new Array();
  // add the products to which NRI is applicable
  LOCAL_NRI = [
    'UL7EA2',
    'EIAP',
    'EIAPE',
    'ESIP',
    'ESIPE',
    'MAIP',
    'MAIPE',
    'EAGP',
    'EAGPE',
    'EGII',
    'EGIIE',
    'ESJ',
    'ESJE',
    //'EXLGWP',
    'UL7EA1',
    'UL7WI1',
    'UL7ESP3',
    'UL7LPT2',
    'UL7WP1',
    'UL7EA',
    'UL7ENT',
    'LIFEPAR',
    'EALPTP',
    'EALPTPE',
    'EALPTPV9',
    'SIPPAR',
    'SIPPARV9',
    'UL7YS1',
    'EALPTPV9E',
    'LIFEPARE',
    'SIPPARE',
    'SIPPARV9E',
    'UL7LPT2E',
    'UL7EAE',
    'UL7ESP3E',
    'UL7ENTE',
    'UL7YSE1',
    'SANCH',
    'SANCHV9',
    'SANCHE',
    'SANCHV9E',
    'YSAC',
    'YSACV9',
    'YSACE',
    'YSACV9E',
    'YSAS',
    'YSASV9',
    'YSASE',
    'YSASV9E',
    'YSCA',
    'YSCAV9',
    'YSCAE',
    'YSCAV9E',
    'UL8C2I',
    'C2PP',
    'HUDAY',
    'HUDAYE',
    'HUDAYV9',
    'HUDAYV9E',
    'UL8NIV',
    'UL8NIVE',
    'SAPLUSE',
    'SAPLUSEE',
    'SAPLUSEV9',
    'SAPLUSEV9E',
    'UL7NPR1',
    'UL7NPR2',
    'UL7NPS3',
    'UL7NPS4',
    'PENPAR',
    'GPP',
    'GPPE',
    'GPPCOMBO',
    'GPPCOMBOE',
    'IANP',
    'UL8APP',
    'UL8APPE',
    'UL8C2R',
    'UL8CG',
    'UL8CGE',
    'PRAGATHI',
    'PRAGATHIE',
    'PRAGATHIV9',
    'PRAGATHIV9E',
    'C2P3DP',
    'YSUD',
    'YSUDE',
    'PGNP',
    'IUNO',
    'UL8CIP',
    'UL9SPP',
    'SANCHP',
    'SANCHPE',
    'SANPAR',
    'SANPARE',
    'P1C2PL',
    'P1C2PLE',
    'P1C2PS',
    'P1C2PSE',
    'P2C2PEL',
    'P2C2PELE',
    'ESTE',
    'ESTEE',
    'SUPH',
    'SUPHE',
    'SANMAX',
    'SRP',
    'SMPP',
    'SMPPR',
    'SMPPL',
    'SMPPE',
    'SMPPI',
    'SPP',
    'SPPCOMBO',
    'EUX1',
    'EGWP',
    'EGWPE',
    //'SARJB',
    'ESPP',
    'ESPPE',
    'ESRB',
    'ESRBE',
    'C2INSFMP'
  ];
  var LOCAL_RIDER_CHECK_ONLOAD_BANDHAN = new Array();

  LOCAL_RIDER_CHECK_ONLOAD_BANDHAN = ['SUPH', 'UL8C2I', 'P1C2PL', 'P1C2PS', 'P2C2PEL', 'SANPAR', 'UL7EA1', 'SANCHP'];

  var LOCAL_RIDER_CHECK_ONLOAD = new Array();

  LOCAL_RIDER_CHECK_ONLOAD = ['C2PP', 'SIPPAR', 'SIPPARE', 'SIPPARV9', 'SIPPARV9E', 'UL8NIVE', 'UL7YS1', 'UL7YSE1', 'EALPTP', 'EALPTPE', 'EALPTPV9', 'EALPTPV9E', 'SANCH', 'SANCHE', 'SANCHV9', 'SANCHV9E', 'SAPLUSE', 'SAPLUSEE', 'SAPLUSEV9', 'SAPLUSEV9E', 'C2P3DP', 'SANCHP', 'SANCHPE', 'IUNO', 'UL7YS1', 'YSUD', 'YSUDE', 'SANPAR', 'SANPARE', 'UL7EA2', 'UL7EA1', 'UL7EA', 'UL7EAE', 'UL7LPT2', 'UL8NIV', 'P1C2PL', 'P1C2PLE', 'EIAP', 'EIAPE', 'ESTE', 'ESTEE', 'ESIP', 'ESIPE', 'MAIP', 'MAIPE', 'EAGP', 'EAGPE', 'EGII', 'EGIIE'];

  var LOCAL_PPR_CHECK_ONLOAD = new Array(); //PPR rider array for ULIPs
  LOCAL_PPR_CHECK_ONLOAD = ['UL8C2I', 'UL7EA2', 'UL7EA1', 'UL7EA', 'UL8NIV'];

  var LOCAL_GENDER_TO_BE_DISPLAYED_LIST = new Array(); //List of Products for which the gender should be displayed -- This is written for Edit OPS Screen --
  LOCAL_GENDER_TO_BE_DISPLAYED_LIST = ['P1C2PL', 'C2PP', 'UL8C2I', 'UL8C2R', 'EAHT', 'CANC', 'CANCE', 'YSAC', 'YSACV9', 'YSACE', 'YSACV9E', 'YSAS', 'YSASV9', 'YSASE', 'YSASV9E', 'YSCA', 'YSCAV9', 'YSCAE', 'YSCAV9E', 'YSUD', 'YSUDE', 'IANP', 'C2P3DP', 'EALPTP', 'EALPTPV9', 'EALPTPE', 'EALPTPV9E', 'SAPLUSE', 'SAPLUSEE', 'SAPLUSEV9', 'SAPLUSEV9E', 'SIPPAR', 'SIPPARE', 'SIPPARV9', 'SIPPARV9E', 'SANCH', 'SANCHE', 'PGNP', 'UL8CGE', 'UL8CG', 'GPP', 'GPPE', 'GPPCOMBO', 'GPPCOMBOE', 'PENPAR', 'UL8EA', 'UL8EAE', 'UL9EA', 'UL9EAE', 'UL8EA1', 'UL8EA2', 'UL9EA2', 'UL8ESP3', 'UL8ESP3E', 'UL8LPT2', 'UL8LPT2E', 'UL8YS1', 'UL8YSE1', 'UL8WP1', 'UL8WP2', 'UL8WP3', 'UL9WP1', 'UL9WP2', 'UL9WP3', 'UL8NIVR', 'UL8NIVL', 'UL8NIVS', 'UL8NIVER', 'UL8NIVEL', 'UL8NIVES', 'UL9NIVR', 'UL9NIVL', 'UL9NIVS', 'UL9NIVER', 'UL9NIVEL', 'UL9NIVES', 'IUNOXE', 'IUNOX', 'IUNOYE', 'IUNOY', 'IUNO', 'UL8CIP', 'UL8CIPG', 'UL8CIPP', 'UL9CIP', 'UL9CIPG', 'UL9CIPP', 'UL10CIP', 'UL10CIPG', 'UL10CIPP', 'SANCHP', 'SANCHPE', 'SANCHPV9E', 'SANCHPV9', 'SANCHV9', 'SANCHV9E', 'GSP', 'GSPE', 'GSPV9', 'GSPV9E', 'SUPH', 'SUPHE', 'SRP', 'SPP', 'SPPR', 'SPPS', 'SPPL', 'P1C2PS', 'EIAP', 'ESTE', 'UL9SPP', 'P2C2PEL', 'ESIP', 'MAIP', 'EGWP', 'UL7LPT2', 'UL7EA', 'UL7EA2', 'UL7EA1', 'UL7WP1', 'SANPAR', 'UL7YS1', 'UL8NIV', 'EAGP', 'EGII', 'SMPP1', 'SMPP2', 'SMPP3', 'SMPP4', 'SMPP5', 'SMPP6', 'SMPP7', 'SMPP8', 'SMPP1E', 'SMPP2E', 'SMPP3E', 'SMPP4E', 'SMPP5E', 'SMPP6E', 'SMPP7E', 'SMPP8E', 'SMPP', 'SARJB', 'SARJBR', 'SARJBL', 'SARJBS', 'SARJBER', 'SARJBEL', 'SARJBES', 'SARJBE'];

  //Add products for which city state to be hidden
  var LOCAL_PROD_LIST_FOR_CITY_STATE_SHOW = ['C2PH', 'C2PHR', 'C2PHL', 'C2PHS', 'C2PHV9R', 'C2PHV9L', 'C2PHV9S'];

  //To Hide foregin national and OCI
  var LOCAL_NONIND = new Array();
  LOCAL_NONIND = ['UL8CG', 'UL8CGE'];

  var LOCAL_Dispnri_Hideothers = new Array();
  LOCAL_Dispnri_Hideothers = ['CDAC', 'CDACE', 'GSP', 'GSPE', 'GSPV9', 'GSPV9E', 'SARLP'];

  //To Hide foregin national
  var LOCAL_Hide_Forign_National = new Array();
  LOCAL_Hide_Forign_National = ['PRAGATHI', 'PRAGATHIE', 'PRAGATHIV9', 'PRAGATHIV9E', 'IUNO', 'UL8CIP'];

  //Display Premium Break up
  var LOCAL_PremiumBreakup_Upsell = new Array();
  LOCAL_PremiumBreakup_Upsell = ['EAHT', 'SHP', 'CDAC', 'CDACE', 'CANC', 'CANCE', 'C2PH'];

  var LOCAL_MYMIX_CPMBO_MAPPING = {
    'PROTS': ['C2PP', 'SANCHV9'],
    'C2PRN': ['C2P3DP', 'SANCHV9'],
    'C2INS': ['UL8C2I', 'SANCHV9'],
    'C2INSCG': ['UL8C2I', 'SANCHV9'],
    'SANMAX': ['SANCHP', 'SANPAR'],
    'SANMAXFIS': ['SANCHP', 'SANPAR'],
    'C2WNSA': ['UL8CIP', 'SANCHV9'],
    'C2INSFMP': ['UL8C2I', 'SUPH'],
    'NIVSFMP': ['UL8NIV', 'SUPH'],
    'C2WNSFMP': ['UL8CIP', 'SUPH'],
    'SRPGPP': ['SRP', 'GPP']


  };


  var LOCAL_RIDER_LIST_ONLOAD = {
    'SUPH': [
      'INAD',
      'C4CI',
      'PPR'
    ],
    'C2PP': [

      'C4CI',
      'INAD',
      'PPR'

    ],
    'C2POS': [

      'C4CI'
    ],
    'SARJB': [
      'INAD',
      'PPR'
    ],
    'UL8NIV': [

      'C4CI',
      'INAD',
      'PPR'

    ],

    'UL8NIVE': [

      'C4CI',
      'INAD',
      'PPR',

    ],
    'SIPPAR': [

      'C4CI',
      'INAD'

    ],

    'SIPPARE': [

      'C4CI',
      'INAD'

    ],
    'SIPPARV9': [

      'C4CI',
      'INAD'

    ],

    'SIPPARV9E': [

      'C4CI',
      'INAD'

    ],
    'YSUD': [

      'C4CI',
      'INAD'

    ],

    'YSUDE': [

      'C4CI',
      'INAD'

    ],

    'EALPTP': [
      'C4CI',
      'INAD'

    ],

    'EALPTPE': [

      'C4CI',
      'INAD'

    ],

    'EALPTPV9': [
      'C4CI',
      'INAD'

    ],

    'EALPTPV9E': [
      'C4CI',
      'INAD'

    ],

    'PRAGATHIV9': [
      'C4CI',
      'INAD'

    ],

    'PRAGATHIV9E': [
      'C4CI',
      'INAD'

    ],



    'SANCH': [

      'C4CI',
      'INAD'

    ],

    'SANCHE': [

      'C4CI',
      'INAD'

    ],
    'SANCHV9': [

      'C4CI',
      'INAD'

    ],

    'SANCHV9E': [

      'C4CI',
      'INAD'

    ],

    'SAPLUSE': [

      'C4CI',
      'INAD'

    ],
    'SAPLUSEV9': [

      'C4CI',
      'INAD'

    ],

    'SAPLUSEE': [

      'C4CI',
      'INAD'

    ],
    'SAPLUSEV9E': [

      'C4CI',
      'INAD'

    ],
    'C2P3DP': [
      'INAD',
      'C4CI',
      'PPR'
    ],
    'SANCHP': [
      'INAD',
      'C4CI',
      'PPR',
      //'HPR'
    ],
    'SANCHPE': [
      'INAD',
      'C4CI',
      'PPR',
      //'HPR'
    ],
    'SUPH': [
      'INAD',
      'C4CI',
      'PPR'
    ],
    'SUPHE': [
      'INAD',
      'C4CI',
      'PPR'
    ],

    'UL7EA': [
      'INAD',
      'C4CI'
    ],
    'UL7EAE': [
      'INAD',
      'C4CI'
    ],
    'UL8C2I': [
      'INAD',
      'C4CI'
    ],
    'UL7EA1': [
      'INAD',
      'C4CI'
    ],
    'UL7EA2': [
      'INAD',
      'C4CI'
    ],
    'SANPAR': [
      'INAD',
      'C4CI',
      'PPR'
    ],
    'SANPARE': [
      'INAD',
      'C4CI',
      'PPR'
    ],
    'IUNO': [
      'INAD'
    ],
    'UL7YS1': [
      'INAD',
      'C4CI'
    ],
    'UL7YSE1': [
      'INAD',
      'C4CI'
    ],
    'UL7LPT2': [
      'INAD',
      'C4CI'
    ],
    'UL7LPT2E': [
      'INAD',
      'C4CI'
    ],
    'UL8CIP': [
      'INAD',
      'C4CI'
    ],
    'HUDAYV9': [
      'INAD',
      'C4CI'
    ],
    'HUDAYV9E': [
      'INAD',
      'C4CI'
    ],
    'UL7LPT2': [
      'C4CI',
      'INAD'
    ],
    'UL8NIV': [
      'C4CI',
      'INAD'
    ],
    'P1C2PL': [
      'INAD',
      'C4CI',
      'PPR'
    ],
    'P1C2PLE': [
      'INAD',
      'C4CI',
      'PPR'
    ],
    'P1C2PS': [
      'INAD',
      'C4CI',
      'PPR'
    ],
    'P1C2PSE': [
      'INAD',
      'C4CI',
      'PPR'
    ],
    'P2C2PEL': [
      'INAD',
      'C4CI',
      'PPR'
    ],
    'P2C2PELE': [
      'INAD',
      'C4CI',
      'PPR'
    ],
    'EIAP': [
      'ECI4'
      //'ECI25'
    ],
    'EIAPE': [
      'ECI4'
      //'ECI25'
    ],
    'ESIP': [
      'ECI4'
    ],
    'ESIPE': [
      'ECI4'
    ],
    'MAIP': [
      'ECI4'
    ],
    'MAIPE': [
      'ECI4'
    ],
    'EAGP': [
      'ECI4'
    ],
    'EAGPE': [
      'ECI4'
    ],

    /*      'EGII' : [
                            'ECI4'
                          ],
   'EGIIE' : [
            'ECI4'
            ],  */
    'ESTE': [
      'ECI4'
    ],
    'ESTEE': [
      'ECI4'
    ],
    'EGWP': [
      'ECI4',
      'ECI25',
      'ETR'
    ],
    'EGWPE': [
      'ECI4',
      'ECI25',
      'ETR'
    ],
    'ESRB': [
      'INAD',
      'C4CI',
      'PPR'
    ],
    'ESRBE': [
      'INAD',
      'C4CI',
      'PPR'
    ],
    'UL9SPP': ['INAD',
      'C4CI',
      'PPR']

  };


  var LOCAL_PPR_RIDER_AUTO_TICK_LIST = {
    'C2P3DP': {
      "Regular": { 'check': "PPR_CC", 'uncheck': "PPR_ADC" },
      "Limited": { 'check': "PPR_ADC", 'uncheck': "PPR_CC" }
    },
    'P1C2PL': {
      "Regular": { 'uncheck': "PPR_ADC" },
      "Limited": {/*'check':"PPR_ADC",*/'uncheck': "PPR_CC" }
    },
    'P1C2PLE': {
      "Regular": { 'uncheck': "PPR_ADC" },
      "Limited": {/*'check':"PPR_ADC",*/'uncheck': "PPR_CC" }
    },
    'P1C2PS': {
      "Regular": { 'check': "PPR_CC", 'uncheck': "PPR_ADC" },
      "Limited": { 'check': "PPR_ADC", 'uncheck': "PPR_CC" }
    },
    'P1C2PSE': {
      "Regular": { 'check': "PPR_CC", 'uncheck': "PPR_ADC" },
      "Limited": { 'check': "PPR_ADC", 'uncheck': "PPR_CC" }
    },
    'P2C2PEL': {
      "Regular": { 'check': "PPR_CC", 'uncheck': "PPR_ADC" },
      "Limited": { 'check': "PPR_ADC", 'uncheck': "PPR_CC" }
    },
    'P2C2PELE': {
      "Regular": { 'check': "PPR_CC", 'uncheck': "PPR_ADC" },
      "Limited": { 'check': "PPR_ADC", 'uncheck': "PPR_CC" }
    },
    'C2PP': {
      "Regular": { 'check': "PPR_CC", 'uncheck': "PPR_ADC" },
      "Limited": { 'check': "PPR_ADC", 'uncheck': "PPR_CC" }
    },
    'SANPAR': { 'check': "PPR_ADC", 'uncheck': "PPR_CC" },
    'SANPARE': { 'check': "PPR_ADC", 'uncheck': "PPR_CC" },
    'SANCHP': { 'check': "PPR_ADC", 'uncheck': "PPR_CC" },
    'SANCHPE': { 'check': "PPR_ADC", 'uncheck': "PPR_CC" },
    'UL9SPP': { 'check': "PPR_ADC" },
    'EGII': { 'HDFC Bank': { 'check': "PPR_ADC" } },
    'UL7EA1': {
      'HDFC Sales': { 'check': "PPR_CC", 'uncheck': "PPR_ADC" },
      'HDFC Securities': { 'check': "PPR_CC", 'uncheck': "PPR_ADC" },
      'HDFC Bank': { 'check': "PPR_PAC" },
      'Ratnakar Bank': { 'check': "PPR_ADC" },
      'IDFC Bank': { 'check': "PPR_ADC" }
    },
    'UL7EA2': {
      'HDFC Sales': { 'check': "PPR_CC", 'uncheck': "PPR_ADC" },
      'HDFC Securities': { 'check': "PPR_CC", 'uncheck': "PPR_ADC" },
      'HDFC Bank': { 'check': "PPR_PAC" },
      'Ratnakar Bank': { 'check': "PPR_ADC" },
      'IDFC Bank': { 'check': "PPR_ADC" }
    },
    'UL7EA': {
      'HDFC Sales': { 'check': "PPR_CC", 'uncheck': "PPR_ADC" },
      'HDFC Securities': { 'check': "PPR_CC", 'uncheck': "PPR_ADC" },
      'HDFC Bank': { 'check': "PPR_PAC" },
      'Ratnakar Bank': { 'check': "PPR_ADC" },
      'IDFC Bank': { 'check': "PPR_ADC" }
    },
    'UL8C2I': {
      'HDFC Bank': { 'check': "PPR_ADC" },
      'Ratnakar Bank': { 'check': "PPR_ADC" },
      'IDFC Bank': { 'check': "PPR_ADC" }
    },
    'UL8NIV': {
      'HDFC Bank': { 'check': "PPR_ADC" },
      'Ratnakar Bank': { 'check': "PPR_ADC" },
      'IDFC Bank': { 'check': "PPR_ADC" }
    }
  };
  var LOCAL_AADHAR_STATE_MAP = {
    'Chhattisgarh': 'Chattisgarh',
    'A & N Islands': 'Andaman & Nicobar Islands',
    'Puducherry': 'Pondicherry',
    'Jammu Kashmir': 'Jammu & Kashmir',
    'Ladakh': 'Jammu & Kashmir'
  };

  var LOCAL_CHANNEL_ILLUSTRATION_MAP = {
    'Agency': 'Agency',
    'Exide Agency': 'Exide Agency',
    'Bancassurance - Yes Bank': 'Bancassurance - Yes Bank',
    'Agency Business Partner': 'Agency Business Partner',
    'Direct': 'Direct',
    'HDFC Life Protection Vertical': 'HDFC Life Protection Vertical',
    'Defence': 'Defence',
    'DSC': 'DSC',
    'HDFC Bank': 'HDFC Bank',
    'HDFC Sales': 'HDFC Sales',
    'HDFC Securities': 'HDFC securities',
    'Broca': 'Broca',
    'Indian Bank': 'Indian Bank',
    'Ratnakar Bank': 'RBL Bank Ltd',
    'Saraswat Bank': 'Saraswat Bank',
    'International Business': 'International Business',
    'CSB BANK LIMITED': 'CSB BANK LIMITED',
    'THE SOUTH INDIAN BANK LTD': 'THE SOUTH INDIAN BANK LTD',
    'Exide Direct': 'Exide Direct',
    'CDSL': 'CDSL',
    // 'Barclays' : 'Barclays', // For hiding Barclays Channel in illustration
    'DNA': 'DNA',
    'Health Insurance': 'Health Insurance',
    'Group Sales': 'Group Sales',
    'IDFC Bank': 'IDFC FIRST Bank',
    'Bajaj Finance Ltd': 'Bajaj Finance Ltd',
    'Vakrangee': 'Vakrangee',
    'Capital First': 'Capital First',
    'Online': 'Direct - Online',
    'TSCRM': 'TSCRM',
    'CoOperatives': 'CoOperatives',
    'NBFC SFB': 'NBFC SFB',
    'AU Small Finance Bank': 'AU Small Finance Bank',
    'Speciality Sales': 'Speciality Sales',
    'AMHI': 'AMHI',
    'PNB Housing': 'PNB Housing'
    /*( however at this point there are no products mapped for this channel)
'Agency':'Financial Consultant',
'HDFC Bank':'HDFC Bank',
'HDB Financials':'HDB Financial Services',
'HDFC Bank - NRI':'HDFC Bank',
'HDFC Ltd - Metro':'HDFC',
'HDFC Ltd - nonMetro':'HDFC',
'Saraswat':'Saraswat Bank',
'Indian Bank':'Indian Bank',
'Brokers':'Broker',
'Direct Sales Force (Direct)':'Direct - Direct',
'SocGen':'Societe Generale',
'Muthoot':'Muthoot Finance',
'HDFC Securities':'HDFC Securities',
'Agency Preferred':'Financial Consultant (Preferred)',
'Online':'Direct - Online',
'Worksite(direct)':'Direct - Worksite',
'Employees':'Direct - Employees',
'ITIFSL':'ITI Financial Services',
'Branch Sales Channel(direct)':'Branch Sales Channel',
'loyalty (direct)':'Direct - Loyalty',
'Telemarketing (direct)':'Direct - Telemarketing',
'Broker Preferred':'Broker (Preferred)',
'Ratnakar Bank':'Ratnakar Bank',
'Ratnakar Bank Preffered':'Ratnakar Bank',
'New Channel for only Annuity':'New Channel for only Annuity',
'International business':'International business'*/
  };
  var LOCAL_CHANNEL_COMMISSION_BAND_MAP = {
    'A': ['Agency', 'Exide Agency', 'International Business', 'Agency Business Partner', 'Bancassurance - Yes Bank'],
    'B': ['HDFC Sales', 'HDFC Securities', 'Ratnakar Bank', 'HDB Financials', 'HDFC Ltd - Metro', 'HDFC Ltd - nonMetro', 'Saraswat Bank', 'Indian Bank', 'SocGen', 'Muthoot', 'HDFC Securities', 'Agency Preferred', 'ITIFSL', 'Ratnakar Bank', 'Ratnakar Bank Preffered', 'IDFC Bank', 'Bajaj Finance Ltd', 'Capital First', 'CDSL', 'TSCRM-Bajaj Finance Ltd'],
    'C': ['HDFC Bank', 'HDFC Bank - NRI'],
    'D': ['Broca', 'Brokers', 'CoOperatives', 'NBFC SFB', 'AU Small Finance Bank', 'Speciality Sales', 'AMHI', 'CSB BANK LIMITED', 'THE SOUTH INDIAN BANK LTD'],
    'E': ['Direct', 'Exide Direct', 'HDFC Life Protection Vertical', 'DSC', 'Defence', 'Direct Sales Force (Direct)', 'Online', 'Worksite(direct)', 'Employees', 'Branch Sales Channel(direct)', 'loyalty (direct)', 'telemarketing (direct)', 'New Channel for only Annuity', 'TSCRM', 'Speciality Sales-Self-generated', 'PNB Housing'],
    'F': ['Broker Preferred']
  };
  var LOCAL_COMMISSION_CONSIDER_CHANNEL = { // Use this structure if Channel or subchannel needs to be considered for calculation of commission
    'CHANNELPARTNER1': {
      'Channel': ['Channel1', 'Channel2'],
      'SubChannel': ['SubChannel1', 'SubChannel2']
    }
  };


  var LOCAL_STP_CHANNEL_PARTNERS = new Array();
  LOCAL_STP_CHANNEL_PARTNERS = [
    'HDFC Bank',
    'Ratnakar Bank',
  ];


  var LOCAL_STP_NB_JOURNEY_NA = new Array();
  LOCAL_STP_NB_JOURNEY_NA = [
    'HDFC Bank',
    'Ratnakar Bank',
    'IDFC Bank',
    'Online',
    'Bancassurance - Yes Bank'
  ];

  var LOCAL_YESBANK_POSP_AGENT_TYPE = new Array();
  LOCAL_YESBANK_POSP_AGENT_TYPE = [
    'QA',
    'QB',
    'PV'
  ];

  var LOCAL_AUBANK_POSP_AGENT_TYPE = new Array();
  LOCAL_AUBANK_POSP_AGENT_TYPE = [
    'QA'
  ];

  var LOCAL_PARTNER_CLIENT_JOURNEY = new Array();
  LOCAL_PARTNER_CLIENT_JOURNEY = [
    'Bancassurance - Yes Bank'
  ];

  var LOCAL_STP_COMBI_PRODS = new Array();
  LOCAL_STP_COMBI_PRODS = [
    'SIPPARH',
    'SAPUSEH',
    'EALPTPH',
    'C2PCK',
    'C1C2PLH',
    'C1C2PLHE',
    'C2PCS',
    'C2POS'
  ];

  var LOCAL_MYMIX_COMBI_PRODS = new Array();
  LOCAL_MYMIX_COMBI_PRODS = [
    'SANCH',
    'SANCHV9',
    'UL8CIP'
  ];

  var LOCAL_EKYC_CHANNEL_PARTNERS = new Array();
  LOCAL_EKYC_CHANNEL_PARTNERS = [
    'Vakrangee'
  ];


  var LOCAL_BFL_CHANNEL_PARTNERS = new Array();
  LOCAL_BFL_CHANNEL_PARTNERS = [
    //'TSCRM'
    'Bajaj Finance Ltd'
  ];

  var LOCAL_BFL_CHANNEL_SUBCHANNEL = new Array();
  LOCAL_BFL_CHANNEL_SUBCHANNEL = [
    'Bajaj Finance Ltd'
  ];



  var LOCAL_STP_OFFLINE_CHANNEL_PARTNERS = new Array();
  LOCAL_STP_OFFLINE_CHANNEL_PARTNERS = [
    'IDFC Bank'

  ];//


  var LOCAL_MYMIX_ID_CHANNEL_PARTNERS = new Array();
  LOCAL_MYMIX_ID_CHANNEL_PARTNERS = [


  ];


  var LOCAL_REVAMPED_BI_PRODUCTS = new Array();
  LOCAL_REVAMPED_BI_PRODUCTS = ['SANCHP', 'SANPAR'];

  var STP_CHANNEL_PARTNERS_HOUSEHOLD_INCOME = new Array();  //<!--   STP House hold changes-->
  STP_CHANNEL_PARTNERS_HOUSEHOLD_INCOME = [
    'HDFC Bank'

  ];

  var STP_CHANNEL_PARTNERS_CONFIGURABLE = new Array();   //<!--   STP House hold changes-->
  STP_CHANNEL_PARTNERS_CONFIGURABLE = [
    'HDFC Bank'

  ];
  /*STP_CHANNEL_PARTNERS_CONFIGURABLE
   * product channel mapping to show NRI for a particular channel
   */
  var LOCAL_NRI_CHANNEL_PARTNERS = {

    'CANC': [
      'International Business'

    ]
  };

  var STP_MOBILE_NEW_VALIDATIONS = {
    'HDFC Bank': {
      'RESS_RI': 'no',
      'other': 'yes'
    },
    'Ratnakar Bank': {
      'RESS_RI': 'no',
      'other': 'no'
    },
    'International Business': {
      'RESS_RI': 'no',
      'other': 'yes'
    }
  };


  var LOCAL_KEYALLIANCE_CHANNEL = {
    'Bancassurance and New Tie Up': [
      'IFFCO Kissan',
      'Vakrangee',
      'Catholic Syrian Bank',
      'Varthana',
      'SBM Bank Ltd',
      'Doha Bank',
      'Saptagiri Grameena Bank',
      'South Indian Bank'

    ]
  };

  var LOCAL_TELEBASED_SUBCHANNEL = [

    'DT',
    'UOBD',
    'TASU'

  ];

  var LOCAL_MFD_CHANNEL = {
    'MFD': [
      'CA',
      'Direct',
      'Agent',
      'Broker',
      'IMF'
    ]
  };

  var LOCAL_PRAN_APPLICABLE = new Array();

  LOCAL_PRAN_APPLICABLE = [

  ];
  var LOCAL_TELEBASED_CHANNEL_PARTNERS = new Array();

  LOCAL_TELEBASED_CHANNEL_PARTNERS = [
    'HDFC Bank',
    'HDFC Securities',
    'HDFC Sales'
  ];

  LOCAL_PROPOSER_PRODUCTS = [
    'CANC',
    'EAHT',
    'CDAC',
    'UL8CIP',
    'C2WNSA',
    'SHP',
    'UL9SPP'
  ];
  LOCAL_HEALTH_PRODUCTS = [
    'CANC',
    'EAHT',
    'CDAC',
    'SHP'
  ];


  var LOCAL_MYMIX_COMB_PROD = new Array();
  LOCAL_MYMIX_COMB_PROD = {
    'HDFC Bank': ['C2P3DP', 'SANCHV9'],
    'HDFC Securities': ['SANCHV9', 'C2P3DP'],
    'Broca': ['C2P3DP', 'SANCHV9']
  };
  var LOCAL_RDR_TICK_PROD = new Array();
  LOCAL_RDR_TICK_PROD = {
    'HDFC Securities': ['UL7EA', 'UL7EA1', 'UL7EA2'],
    'HDFC Sales': ['UL7EA', 'UL7EA1', 'UL7EA2']
  };

  var LOCAL_VERSION_8_PRODS = new Array();

  LOCAL_VERSION_8_PRODS = [
    'SANCHP',
    'SANCHPE',
    'UL8EA1',
    'UL8EA2',
    'UL8EA',
    'UL8EAE',
    'UL8NIV',
    'UL8NIVE',
    'UL9LPT2',
    'UL9LPT2E',
    'C2P3DPR',
    'C2P3DPL',
    'C2P3DPS',
    'C2P3DPER',
    'C2P3DPEL',
    'C2P3DPES',
    'UL8CIP',
    'UL8CIPP',
    'UL8CIPG',
    'UL8APP',
    'UL8APPE',
    'UL8YS1',
    'UL8YSE1',
    'UL8WP1',
    'UL8WP2',
    'UL8WP3',
    'YSAC',
    'YSACE',
    'YSAS',
    'YSASE',
    'YSCA',
    'YSCAE',
    'UL8CG',
    'UL8CGE'

  ];


  var LOCAL_KERALA_BRANCH_CODE = new Array();
  LOCAL_KERALA_BRANCH_CODE = [
    '0104',
    '0226',
    '0167',
    '0165',
    '0103',
    '0782',
    '0234',
    '0171',
    '0235',
    '0163',
    '0220',
    '0221',
    '0102',
    '0224',
    '0166',
    '0239',
    '0238',
    '0099',
    '0506',
    '0337',
    '0164',
    '0222',
    '0223',
    '0228',
    '0464',
    '0218',
    '0231',
    '0229',
    '0168',
    '0100',
    '0615',
    '0346',
    '0169',
    '0232',
    '0233',
    '0170',
    '0219',
    '0101'
  ];
  var new_EMRPMA_logic_products = ['SANPAR', 'SDANPARE'];
  var LOCAL_MULTIPLE_COUNTER_PROD = ['SANCHP', 'SANPAR', 'SUPH', 'ESRB', 'EGII', 'ESJ', 'EGWP', 'EAGP', 'ESIP', 'EIAP'];
  var FUND_CLASSIFICATION = {
    'Hybrid': [
      'BALANCED_FUND',
      'PENSION_SUPER_PLUS_2012',
      'GROWTH_FUND'
    ],
    'Equity': [
      'BLUE_CHIP_FUND',
      'CAPITAL_GROWTH_FUND',
      'DISCOVERY_FUND',
      'DIVERSIFIED_EQUITY_FUND',
      'EQUITY_ADVANTAGE_FUND',
      'EQUITY_PLUS_FUND',
      'OPPORTUNITIES_FUND',
      'ENVIRONMENT_SOCIAL_GOVERNANCE_FUND',
      'PENSION_EQUITY_PLUS_FUND',
      'SUSTAINABLE_EQUITY_FUND',
      'CAPPED_NIFTY_INDEX_FUND',
      'MIDCAP_FUND',
      'PRIME_EQUITY_FUND',
      'ACTIVE_ASSET_ALLOCATION_FUND',
      'LARGECAP_PENSION_FUND',
      'PRIME_EQUITY_PENSION_FUND'
    ],
    'Debt': [
      'CAPITAL_SECURE_FUND',
      'BOND_FUND',
      'CONSERVATIVE_FUND',
      'INCOME_FUND',
      'LIQUID_FUND',
      'PENSION_INCOME_FUND',
      'SECURE_MANAGED_FUND',
      'SECURE_ADVANTAGE_FUND',
      'SECURE_FUND',
      'PRESERVER_FUND',
      'PRESERVER_PENSION_FUND'
    ]
  };

  var LOCAL_ISNP_PAYEE_CODE = new Array();
  LOCAL_ISNP_PAYEE_CODE = [/*'A0288819',*/'IG675448', 'BZ752691', 'DQ412363'];

  var LOCAL_ISNP_PROD_PARTNERS = new Array();
  LOCAL_ISNP_PROD_PARTNERS = ['P1C2PL', 'SANCHP', 'SANPAR', 'IANP', 'PGNP', 'P1C2PS', 'ESRB', 'EGII', 'SMPP', 'GPP'];

  var LOCAL_ISNP_PROD_TEBT = new Array();
  LOCAL_ISNP_PROD_TEBT = ['P1C2PL', 'SANCHP', 'SANPAR', 'PGNP', 'P1C2PS', 'ESRB', 'EGII'];

  var LOCAL_ISNP_AGNT_PRVLG = new Array();
  LOCAL_ISNP_AGNT_PRVLG = ['RAJYOGFC', 'ISNP', 'GEMFC'];

  var LOCAL_ISNP_CHNL_PTNR = new Array();
  LOCAL_ISNP_CHNL_PTNR = ['Agency'];

  function PRODUCT_DETAILS() { };

  PRODUCT_DETAILS.availableProd = [];
  PRODUCT_DETAILS.uwProducts = [];
  PRODUCT_DETAILS.get = function (prod_id, prop) {
    if ((QNIAPP.IN.chnlptnr == "Bancassurance - Yes Bank" && QNIAPP.IN.ismymix && typeof mymix_data != undefined && prop == 'name') ||
      (QNIAPP.IN.chnlptnr == "Bancassurance - Yes Bank" && QNIAPP.IN.YesMymix && prop == 'name')) {
      prop = 'yesbank_name';
    }
    return (LOCAL_PRODUCT_DETAILS[prod_id] && LOCAL_PRODUCT_DETAILS[prod_id][prop]) ? LOCAL_PRODUCT_DETAILS[prod_id][prop] : '';
  };
  PRODUCT_DETAILS.getChMapForIllustration = function (channel) {
    channel = QNIAPP.IN.chnlptnr ? QNIAPP.IN.chnlptnr : channel;
    return LOCAL_CHANNEL_ILLUSTRATION_MAP[channel] ? LOCAL_CHANNEL_ILLUSTRATION_MAP[channel] : ''/* 'Financial Consultant'*/;
  };
  PRODUCT_DETAILS.getTebtStateName = function (state) {
    return LOCAL_AADHAR_STATE_MAP[state] ? LOCAL_AADHAR_STATE_MAP[state] : '';
  };

  PRODUCT_DETAILS.getProdListByChannel = function (ch_id) {
    arr_loc = (ch_id == 'Other') ? ch_id : QNIAPP.IN.chnlptnr;
    if (QNIAPP.IN.chnlptnr == "Bancassurance and New Tie Up" && QNIAPP.leaddata && QNIAPP.leaddata['cooperativebranchname'] != "" && QNIAPP.PRODUCT_DETAILS.isKeyAllianceApplicable(QNIAPP.IN.chnlptnr, QNIAPP.leaddata['cooperativebranchname']) && LOCAL_CH_PROD[arr_loc] && LOCAL_CH_PROD[arr_loc][QNIAPP.leaddata['cooperativebranchname']]) {
      return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD[arr_loc][QNIAPP.leaddata['cooperativebranchname']]);
    }
    else if (QNIAPP.IN.chnlptnr == "NBFC SFB") {
      if (QNIAPP.leaddata && QNIAPP.leaddata.cooperativebranchname == "Bandhan Bank Ltd" && QNIAPP.PRODUCT_DETAILS.isSpLeadApplicable() && LOCAL_CH_PROD[QNIAPP.leaddata.cooperativebranchname] && LOCAL_CH_PROD[QNIAPP.leaddata.cooperativebranchname]['SP']) {
        return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD[QNIAPP.leaddata.cooperativebranchname]['SP']);
      }
      else if (QNIAPP.leaddata && (QNIAPP.leaddata.cooperativebranchname == "DCB Bank" || QNIAPP.leaddata.cooperativebranchname == "Ujjivan SFB")) {
        return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD[QNIAPP.IN.chnlptnr][QNIAPP.leaddata.cooperativebranchname]);
      }
      else if (QNIAPP.leaddata && QNIAPP.leaddata.cooperativebranchname == "Tata Capital Fin Serv Ltd") {
        return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD[QNIAPP.IN.chnlptnr][QNIAPP.leaddata.cooperativebranchname]);
      }
      else if (QNIAPP.IN.chnlptnr == "NBFC SFB" && typeof channelcode != "undefined" && channelcode != null && LOCAL_CH_PROD[arr_loc] && LOCAL_CH_PROD[arr_loc][channelcode]) {
        return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD[arr_loc][channelcode]);
      }
      else {
        return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PTNR_PROD[arr_loc] ? LOCAL_CH_PTNR_PROD[arr_loc] : LOCAL_CH_PTNR_PROD['Other']);  // Remove this
      }
    }
    /*else if(QNIAPP.IN.chnlptnr == "CoOperatives" && QNIAPP.leaddata && QNIAPP.leaddata['OPSCreditSource'] && QNIAPP.leaddata['OPSCreditSource'] == "Exide" && LOCAL_CH_PROD[arr_loc] && LOCAL_CH_PROD[arr_loc][QNIAPP.leaddata['OPSCreditSource']]){
      return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD[arr_loc][QNIAPP.leaddata['OPSCreditSource']]);
     }*/
    else if (QNIAPP.IN.chnlptnr == "HDFC Bank" && QNIAPP.IN.pcvcflg && QNIAPP.IN.pcvcflg == "PCVCLEAD") {
      if (QNIAPP.IN.apptype == "TEBT") {
        return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PTNR_PROD['PCVC']);
      }
      else {
        return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PTNR_PROD['PCVC_POSP']);
      }
    }
    //HDFC POSP Integration
    else if (QNIAPP.IN.chnlptnr == "HDFC Bank" && QNIAPP.leaddata && QNIAPP.leaddata['chnl'] == 'POSP') {
      return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD['HDFC Bank']['POSP']);
    }
    else if (QNIAPP.IN.chnlptnr == "AU Small Finance Bank" && QNIAPP.IN.Qt.qtdtls.pospflag == 'Y') {
      return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD['AU Small Finance Bank']['POSP']);
    }
    else if (QNIAPP.IN.chnlptnr == "Bancassurance - Yes Bank" && (typeof agentType != "undefined" && QNIAPP.PRODUCT_DETAILS.isYESBANKPOSPApplicable(agentType))) {
      return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD['Bancassurance - Yes Bank']['Tele-Based']);
    }
    else if (QNIAPP.PRODUCT_DETAILS.isTeleBasedSubchnlApplicable(QNIAPP.IN.subchnl)) {
      return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD[QNIAPP.IN.chnlptnr][QNIAPP.IN.chnl]);
    }
    else if (QNIAPP.IN.chnlptnr == "Speciality Sales") {
      if (QNIAPP.leaddata && LOCAL_CH_PROD[arr_loc] && LOCAL_CH_PROD[arr_loc][QNIAPP.leaddata.leadsrc]) {
        return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD[arr_loc][QNIAPP.leaddata.leadsrc]);
      }
      else if (GFWK_APP_ID && GFWK_APP_ID === 'wms') {
        return LOCAL_CH_PTNR_PROD['Other'];
      }
      else {
        return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PTNR_PROD[arr_loc] ? LOCAL_CH_PTNR_PROD[arr_loc] : LOCAL_CH_PTNR_PROD['Other']);  // Remove this
      }

    }
    else if (QNIAPP.IN.chnlptnr == "MFD") {
      if (QNIAPP.leaddata && QNIAPP.leaddata.cooperativebranchname && LOCAL_CH_PROD[arr_loc] && LOCAL_CH_PROD[arr_loc][QNIAPP.leaddata.cooperativebranchname]) {
        return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD[arr_loc][QNIAPP.leaddata.cooperativebranchname]);
      }
      else if (QNIAPP.IN.Qt.qtdtls.leaddata && QNIAPP.IN.Qt.qtdtls.leaddata.cooperativebranchname && LOCAL_CH_PROD[arr_loc] && LOCAL_CH_PROD[arr_loc][QNIAPP.IN.Qt.qtdtls.leaddata.cooperativebranchname]) {
        return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD[arr_loc][QNIAPP.IN.Qt.qtdtls.leaddata.cooperativebranchname]);
      }
      else if (GFWK_APP_ID && GFWK_APP_ID === 'wms') {
        return LOCAL_CH_PTNR_PROD['Other'];
      }
      else {
        return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PTNR_PROD[arr_loc] ? LOCAL_CH_PTNR_PROD[arr_loc] : LOCAL_CH_PTNR_PROD['Other']);  // Remove this
      }

    }
    else if (LOCAL_CH_PROD[arr_loc] && LOCAL_CH_PROD[arr_loc][QNIAPP.IN.subchnl]) {
      return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PROD[arr_loc][QNIAPP.IN.subchnl]);
    }

    return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PTNR_PROD[arr_loc] ? LOCAL_CH_PTNR_PROD[arr_loc] : LOCAL_CH_PTNR_PROD['Other']);  // Remove this
  };

  PRODUCT_DETAILS.getProductSubchnlList = function () {
    var LCL_SUBCHNL_LIST = [];
    if (LOCAL_CH_PROD[QNIAPP.IN.chnlptnr]) {
      for (var subchnl in LOCAL_CH_PROD[QNIAPP.IN.chnlptnr]) {
        LCL_SUBCHNL_LIST.push(subchnl);
      }
    }
    return LCL_SUBCHNL_LIST;
  };

  PRODUCT_DETAILS.refreshProdList = function (prodListFromChnl) {
    /** QNIAPP.IN.prodList is the array of products from WODM in case of STP
     *  and prodListFromChnl is from the channel to product mapping in this file **/
    var LOCAL_PROD_LIST = new Array();
    if (QNIAPP.leaddata && QNIAPP.leaddata.cooperativebranchname == "Equitas Small Fn Bnk" && QNIAPP.leaddata.RBLLeadMode == "Integrated") {
      QNIAPP.IN.enhFilter = 'N';
    }
    if (QNIAPP.IN.prodList && QNIAPP.IN.prodList.length > 0 /*&& QNIAPP.IN.OtherProdStp=='N'*/ && QNIAPP.IN.enhFilter == 'N' && !QNIAPP.IN.ismymix && !QNIAPP.IN.YesMymix) {   //<!--   STP House hold changes, if user want to choose non stp products OtherProdStp is Y -->
      $.each(prodListFromChnl, function (index) {
        if (jQuery.inArray(prodListFromChnl[index], QNIAPP.IN.prodList) != -1) {
          LOCAL_PROD_LIST.push(prodListFromChnl[index]);
        }
      });
    } else if (QNIAPP.IN.SpecProdList && QNIAPP.IN.SpecProdList.length > 0 && QNIAPP.IN.SpecProdFlag == 'Y') {
      LOCAL_PROD_LIST = QNIAPP.IN.SpecProdList;
    } else {
      // use the default channel to product mapping
      LOCAL_PROD_LIST = prodListFromChnl;
    }
    return LOCAL_PROD_LIST;
  };

  PRODUCT_DETAILS.getNRIProdList = function () {
    return LOCAL_NRI;
  };

  PRODUCT_DETAILS.getProdListByAge = function (ch_id, cat_id, age_min, age_max) {
    var mylist = [];
    for (ar in LOCAL_CH_PTNR_PROD[ch_id]) {
      var prod_id = LOCAL_CH_PTNR_PROD[ch_id][ar];
      if (jQuery.inArray(PRODUCT_DETAILS.get(prod_id, 'name'), PRODUCT_DETAILS.getProdListByCategory(cat_id, ch_id)) != -1) {
        if (((parseInt(age_min) * 12) >= parseInt(PRODUCT_DETAILS.get(prod_id, 'min_age')))
          && ((parseInt(age_min) * 12) <= parseInt(PRODUCT_DETAILS.get(prod_id, 'max_age')))) {
          if (((parseInt(age_max) * 12) >= parseInt(PRODUCT_DETAILS.get(prod_id, 'min_age')))
            && ((parseInt(age_max) * 12) <= parseInt(PRODUCT_DETAILS.get(prod_id, 'max_age')))) {
            mylist.push(PRODUCT_DETAILS.get(prod_id, 'name'));
          }
        };
      }
    };
    return mylist;
  };
  PRODUCT_DETAILS.getCategoryOfProduct = function (id) {
    for (key in LOCAL_CAT_PROD) {

      if (jQuery.inArray(id, LOCAL_CAT_PROD[key]) >= 0) {
        return key;
      }
    }
  };
  PRODUCT_DETAILS.getProductCategory = function () {
    var cat_arr = [];
    for (key in LOCAL_CAT_PROD) {
      if (PRODUCT_DETAILS.getProdListByCategory(key, QNIAPP.IN.chnlptnr, "").length > 0) {
        cat_arr.push(key);
      }
    }

    return cat_arr;
  };
  PRODUCT_DETAILS.getProdListByCategory = function (category, channel, is_nri) {
    var list_arr = [], nri_ch_list = [], nri_arr = [], prod_ch = [];
    channel = (channel === '') ? 'Other' : channel;
    prod_ch = PRODUCT_DETAILS.getProdListByChannel(channel);
    nri_arr = (is_nri === '1') ? PRODUCT_DETAILS.getNRIProdList() : '';
    if (is_nri === '1') {
      for (var i = 0; i < nri_arr.length; i++) {
        if (jQuery.inArray(nri_arr[i], prod_ch) != -1) {
          nri_ch_list.push(nri_arr[i]);
        }
      }
    }
    else {
      nri_ch_list = prod_ch;
    }
    if (category && category !== null && category.length >= 1) {
      if (category == "Select-One") {
        return PRODUCT_DETAILS.filterUnavailableProd(nri_ch_list);
      }
      else {
        //for(var k=0;k<category.length;k++){
        var prod_cat = (category !== 'Select-One') ? LOCAL_CAT_PROD[category] : "";

        var remove_arr = ["SMPPL", "SMPPR", "SMPPE", "SMPPI"];
        var i = 0;
        if (QNIAPP.IN.isOwnMix === false) {
          for (i = 0; i < prod_cat.length; i++) {
            prod_cat = $.grep(prod_cat, function (n) {
              return n != remove_arr[i];
            });
          }
        }
        for (var i = 0; i < prod_cat.length; i++) {
          if (jQuery.inArray(prod_cat[i], nri_ch_list) != -1) {
            list_arr.push(prod_cat[i]);
          }
        }
        //}
        return (QNIAPP.IN.ismymixQQC && QNIAPP.IN.ismymixQQC == true) ? prod_cat : PRODUCT_DETAILS.filterUnavailableProd(list_arr);
      }
    }
    else if (is_nri === '1') {
      return PRODUCT_DETAILS.filterUnavailableProd(nri_ch_list);
    }
    return PRODUCT_DETAILS.filterUnavailableProd(prod_ch);
  };
  PRODUCT_DETAILS.getChannelCommissionMap = function (key) {
    return LOCAL_CHANNEL_COMMISSION_BAND_MAP[key];
  };

  PRODUCT_DETAILS.getBandForChannel = function (channel) {
    var channel_comm = QNIAPP.IN.chnlptnr;
    jQuery.each(LOCAL_COMMISSION_CONSIDER_CHANNEL, function (chnlptnr, obj) {
      if (QNIAPP.IN.chnlptnr === chnlptnr) {
        if (QNIAPP.IN.chnl && (QNIAPP.IN.chnl !== "") && (jQuery.inArray(QNIAPP.IN.chnl, LOCAL_COMMISSION_CONSIDER_CHANNEL[chnlptnr]['Channel']) !== -1)) {
          channel_comm = channel_comm + '-' + QNIAPP.IN.chnl;
          if (QNIAPP.IN.comissionsubchnl && (QNIAPP.IN.comissionsubchnl !== "") && jQuery.inArray(QNIAPP.IN.comissionsubchnl, LOCAL_COMMISSION_CONSIDER_CHANNEL[chnlptnr]['SubChannel'])) {
            channel_comm = channel_comm + '-' + QNIAPP.IN.comissionsubchnl;
          }
        }
      }
    });
    if (QNIAPP.IN.comissionsubchnl && QNIAPP.IN.comissionsubchnl != "") {
      channel_comm = channel_comm + '-' + QNIAPP.IN.comissionsubchnl;
    }

    //Discount need to apply for speciality sales channel based on channel partner and product codes
    var NON_DISC_ARR = ['UL8C2I', 'UL7WI1', 'UL7WP1', 'UL7EA1', 'UL7EA2'];
    if (QNIAPP.IN.chnlptnr == "Speciality Sales" && jQuery.inArray(QNIAPP.IN.id, NON_DISC_ARR) == -1) {
      if (QNIAPP.leaddata && QNIAPP.leaddata.leadsrc && QNIAPP.leaddata.leadsrc == "Self-generated") {
        channel_comm = QNIAPP.IN.chnlptnr + '-' + QNIAPP.leaddata.leadsrc;
      }
    }
    for (band in LOCAL_CHANNEL_COMMISSION_BAND_MAP) {
      if (jQuery.inArray(channel_comm, PRODUCT_DETAILS.getChannelCommissionMap(band)) !== -1) {
        return band;
      }
    }
    return '-';
  };
  PRODUCT_DETAILS.getProductList = function () {
    var prod_arr = [];
    for (key in LOCAL_PRODUCT_DETAILS) {
      prod_arr.push(key);
    }
    return prod_arr;
  };
  PRODUCT_DETAILS.getQniProdCode = function (prod_id) {
    var prod_list = QNIAPP.PRODUCT_DETAILS.getProductList();
    for (var key in prod_list) {
      if (QNIAPP.PRODUCT_DETAILS.get(prod_list[key], "prod_versions") !== "") {
        if (jQuery.inArray(prod_id, QNIAPP.PRODUCT_DETAILS.get(prod_list[key], "prod_versions")) !== -1) {
          return PRODUCT_DETAILS.get(prod_list[key], "prod_versions")[0];
        }
      }
    }
    return prod_id;
  };
  PRODUCT_DETAILS.isQniProdCode = function (prod_id) {
    var prod_list = QNIAPP.PRODUCT_DETAILS.getProductList();
    for (var key in prod_list) {
      if (prod_list[key] === prod_id) {
        return true;
      }
      if (QNIAPP.PRODUCT_DETAILS.get(prod_list[key], "prod_versions") !== "") {
        if (jQuery.inArray(prod_id, QNIAPP.PRODUCT_DETAILS.get(prod_list[key], "prod_versions")) !== -1) {
          return true;
        }
      }
    }
    return false;
  };

  PRODUCT_DETAILS.getSplRiderList = function (prod_id) {
    var rider_list = new Array();
    for (var i = 0; i < LOCAL_RIDER_LIST.length; i++) {
      var rider_cd = LOCAL_RIDER_LIST[i];
      var riderObj = new Array();
      if ($('#touchpoint_id').val() === 'OPS') {
        if (jQuery.inArray(prod_id, LOCAL_RIDER_PRODUCT_MAPPING_OPS[rider_cd]) !== -1) {
          riderObj.push(rider_cd);
          riderObj.push(QNIAPP.CONSTS[rider_cd]);
          rider_list.push(riderObj);
        }
      } else {
        if (jQuery.inArray(prod_id, LOCAL_RIDER_PRODUCT_MAPPING[rider_cd]) !== -1) {
          riderObj.push(rider_cd);
          riderObj.push(QNIAPP.CONSTS[rider_cd]);
          rider_list.push(riderObj);
        }
      }

    }
    return rider_list;
  };
  PRODUCT_DETAILS.getDefaultRiderChecklistOnLoad = function (prod_id) {
    var isValid = false;
    for (var i = 0; i < LOCAL_RIDER_CHECK_ONLOAD.length; i++) {
      if (jQuery.inArray(prod_id, LOCAL_RIDER_CHECK_ONLOAD) !== -1 && (QNIAPP.IN.chnlptnr != "Bancassurance - Yes Bank")) {
        isValid = true;
      }

    }
    return isValid;
  };

  PRODUCT_DETAILS.getDefaultRiderChecklistOnLoadBandhan = function (prod_id) {
    var isValid = false;
    if (QNIAPP.leaddata && QNIAPP.leaddata.cooperativebranchname == "Bandhan Bank Ltd") {

      for (var i = 0; i < LOCAL_RIDER_CHECK_ONLOAD_BANDHAN.length; i++) {
        if (jQuery.inArray(prod_id, LOCAL_RIDER_CHECK_ONLOAD_BANDHAN) !== -1) {
          isValid = true;
        }

      }
    }
    return isValid;
  };


  PRODUCT_DETAILS.getPPRRiderOnLoad = function (prod_id) {
    var isValid = false;
    for (var i = 0; i < LOCAL_PPR_CHECK_ONLOAD.length; i++) {
      if (!(GFWK_APP_ID && GFWK_APP_ID === 'wms') && (QNIAPP.IN.action != "viewQ") && ((jQuery.inArray(prod_id, LOCAL_PPR_CHECK_ONLOAD) !== -1 && (QNIAPP.IN.chnlptnr == "HDFC Bank" || QNIAPP.IN.chnlptnr == "Ratnakar Bank" || QNIAPP.IN.chnlptnr == "IDFC Bank")) || (QNIAPP.IN.id == 'EGII' && QNIAPP.IN.chnlptnr == "HDFC Bank"))) {
        if (((QNIAPP.IN.id == 'UL7EA' || QNIAPP.IN.id == 'UL7EA1' || QNIAPP.IN.id == 'UL7EA2') && QNIAPP.IN.chnlptnr == "HDFC Bank")) {
          return false;
        }
        else {
          isValid = true;
        }
      }

    }
    return isValid;
  };

  //LOCAL_LONG_JOURNEY_LIST

  PRODUCT_DETAILS.getGenderToBeDisplayed = function (prod_id) {
    var isValid = false;
    for (var i = 0; i < LOCAL_GENDER_TO_BE_DISPLAYED_LIST.length; i++) {
      if (jQuery.inArray(prod_id, LOCAL_GENDER_TO_BE_DISPLAYED_LIST) !== -1) {
        isValid = true;
      }

    }
    return isValid;
  };

  PRODUCT_DETAILS.getCityStateToBeDisaplyed = function (prod_id) {
    var isValid = false;
    for (var i = 0; i < LOCAL_PROD_LIST_FOR_CITY_STATE_SHOW.length; i++) {
      if (jQuery.inArray(prod_id, LOCAL_PROD_LIST_FOR_CITY_STATE_SHOW) < 0) {
        isValid = true;
      }
    }
    return isValid;
  };



  PRODUCT_DETAILS.getriderListOnLoad = function (prod_id) {

    return LOCAL_RIDER_LIST_ONLOAD[prod_id] ? LOCAL_RIDER_LIST_ONLOAD[prod_id] : '';
  };

  PRODUCT_DETAILS.setUWandAvailableProducts = function (GQNI_PRODUCT) {
    PRODUCT_DETAILS.availableProd = [];
    PRODUCT_DETAILS.uwProducts = [];
    if (GQNI_PRODUCT && !isEmptyObject(GQNI_PRODUCT)) {
      for (var prod_cd in GQNI_PRODUCT) {
        var qni_prod_cd = PRODUCT_DETAILS.getQniProdCode(prod_cd);
        if (jQuery.inArray(qni_prod_cd, PRODUCT_DETAILS.availableProd) === -1) {
          PRODUCT_DETAILS.availableProd.push(qni_prod_cd);
          if (GQNI_PRODUCT[prod_cd][5][0] === "Y") {
            PRODUCT_DETAILS.uwProducts.push(qni_prod_cd);
          }
        }
      }
    }
  };

  PRODUCT_DETAILS.checkProductAvaliablity = function (qniproduct) {
    var availableProd = [];
    var prodAvaliableFlag = false;
    qniproduct = PRODUCT_DETAILS.getQniProdCode(qniproduct);
    if (GQNI_PRODUCT && !isEmptyObject(GQNI_PRODUCT)) {
      for (var prod_cd in GQNI_PRODUCT) {
        var qni_prod_cd = PRODUCT_DETAILS.getQniProdCode(prod_cd);
        if (jQuery.inArray(qni_prod_cd, availableProd) === -1) {
          availableProd.push(qni_prod_cd);
        }
      }
      if (jQuery.inArray(qniproduct, availableProd) !== -1) {
        prodAvaliableFlag = true;

      }

    }
    return prodAvaliableFlag;
  };

  PRODUCT_DETAILS.checkProductAvaliablity_OPS = function (qniproduct) {
    var availableProd = [];
    var prodAvaliableFlag = false;
    qniproduct = PRODUCT_DETAILS.getQniProdCode(qniproduct);
    if (GOPS_PRODUCT && !isEmptyObject(GOPS_PRODUCT)) {
      for (var prod_cd in GOPS_PRODUCT) {
        var qni_prod_cd = PRODUCT_DETAILS.getQniProdCode(prod_cd);
        if (jQuery.inArray(qni_prod_cd, availableProd) === -1) {
          availableProd.push(qni_prod_cd);
        }
      }
      if (jQuery.inArray(qniproduct, availableProd) !== -1) {
        prodAvaliableFlag = true;

      }

    }
    return prodAvaliableFlag;
  };

  PRODUCT_DETAILS.filterUnavailableProd = function (list_arr) {
    if (!QNIAPP.IN.ismymix && PRODUCT_DETAILS.availableProd.length > 0) {
      for (var i in list_arr) {
        if (jQuery.inArray(list_arr[i], PRODUCT_DETAILS.availableProd) === -1) {
          list_arr.splice(i, 1);
        }
      }
    }
    return list_arr;
  };
  // To check if STP workflow is applicable for a particular channel partner
  PRODUCT_DETAILS.isSTPApplicable = function (chnlptnr) {
    if (jQuery.inArray(chnlptnr, LOCAL_STP_CHANNEL_PARTNERS) !== -1 && !(GFWK_APP_ID && GFWK_APP_ID === 'wms')) {
      return true;
    } else if (chnlptnr == 'IDFC Bank' && !(GFWK_APP_ID && GFWK_APP_ID === 'wms')) {
      var lead_dt = (QNIAPP.leaddata && QNIAPP.leaddata['crtdt']) ? new Date(QNIAPP.leaddata['crtdt']) : new Date();
      var leadCreatedtDt = new Date(lead_dt.getFullYear(), lead_dt.getMonth(), lead_dt.getDate());
      var deploydate = new Date(QNIAPP.CONSTS.IDFCDepDt);
      var ddate = new Date(deploydate.getFullYear(), deploydate.getMonth(), deploydate.getDate());

      if (leadCreatedtDt >= ddate) {
        return true;
      } else {
        return false;
      }
    }
    else {
      return false;
    }
  };
  PRODUCT_DETAILS.isYESBANKPOSPApplicable = function (agentType) {
    if (jQuery.inArray(agentType, LOCAL_YESBANK_POSP_AGENT_TYPE) != -1) {
      return true;
    } else {
      return false;
    }

  };

  PRODUCT_DETAILS.isRevampedIllustrationApplicable = function () {
    if (jQuery.inArray(QNIAPP.IN.id, LOCAL_REVAMPED_BI_PRODUCTS) != -1) {
      return true;
    } else {
      return false;
    }

  };

  PRODUCT_DETAILS.isAUBANKPOSPApplicable = function (agentType) {
    if (jQuery.inArray(agentType, LOCAL_AUBANK_POSP_AGENT_TYPE) != -1) {
      return true;
    } else {
      return false;
    }

  };


  PRODUCT_DETAILS.isSTPNBJOURNEYApplicable = function (chnlptnr) {
    if (jQuery.inArray(chnlptnr, LOCAL_STP_NB_JOURNEY_NA) == -1 && !(GFWK_APP_ID && GFWK_APP_ID === 'wms')) {
      return true;
    }
    else {
      return false;
    }
  };

  PRODUCT_DETAILS.isPARTNERClientApplicable = function (chnlptnr) {
    if (jQuery.inArray(chnlptnr, LOCAL_PARTNER_CLIENT_JOURNEY) != -1 && !(GFWK_APP_ID && GFWK_APP_ID === 'wms')) {
      return true;
    }
    else {
      return false;
    }
  };


  PRODUCT_DETAILS.isCombiApplicable = function (prod_id) {//
    // QNIAPP.bankData.stp_prod='';
    if (jQuery.inArray(prod_id, LOCAL_STP_COMBI_PRODS) !== -1) {
      return true;
    } else {
      return false;
    }

  };

  PRODUCT_DETAILS.getMymixCombination = function (prod_id) {
    if (jQuery.inArray(prod_id, LOCAL_MYMIX_COMBI_PRODS) != -1 && !(GFWK_APP_ID && GFWK_APP_ID === 'wms')) {
      if (QNIAPP.IN.Qt.qtdtls.mymixindex == "comb2" && (QNIAPP.IN.id == "SANCHV9" || QNIAPP.IN.id == "SANCH")) {
        return true;
      }
      else if (QNIAPP.IN.id == "UL8CIP") {
        return true;
      }
      else {
        return false;
      }
    }
  };


  PRODUCT_DETAILS.isSTPdownStreamApplicable = function () {
    // QNIAPP.bankData.stp_prod='';
    if (QNIAPP.bankData && QNIAPP.bankData.stp_prod) {
      return true;
    } else {
      return false;
    }

  };

  PRODUCT_DETAILS.isEKYCApplicable = function (chnlptnr) {
    if (jQuery.inArray(chnlptnr, LOCAL_EKYC_CHANNEL_PARTNERS) !== -1 && !(GFWK_APP_ID && GFWK_APP_ID === 'wms')) {
      return true;
    } else {
      return false;
    }
  };


  PRODUCT_DETAILS.isBFLApplicable = function (chnlptnr) {
    if (jQuery.inArray(chnlptnr, LOCAL_BFL_CHANNEL_PARTNERS) !== -1 && !(GFWK_APP_ID && GFWK_APP_ID === 'wms')) {
      return true;
    } else {
      return false;
    }
  };

  PRODUCT_DETAILS.isTelebasedApplicable = function (chnlptnr) { //Telesales aplicability for different channel partners
    if (jQuery.inArray(chnlptnr, LOCAL_TELEBASED_CHANNEL_PARTNERS) !== -1 && !(GFWK_APP_ID && GFWK_APP_ID === 'wms')) {
      return true;
    } else {
      return false;
    }
  };


  PRODUCT_DETAILS.isOfflineSTPApplicable = function (chnlptnr) {
    if (jQuery.inArray(chnlptnr, LOCAL_STP_OFFLINE_CHANNEL_PARTNERS) !== -1) {
      return true;
    } else {
      return false;
    }
  };


  PRODUCT_DETAILS.isMyMixIdApplicable = function (chnlptnr) {
    if (jQuery.inArray(chnlptnr, LOCAL_MYMIX_ID_CHANNEL_PARTNERS) !== -1 && $("#leadid_id").val() && $("#leadid_id").val() !== "") {
      return true;
    } else {
      return false;
    }
  };


  PRODUCT_DETAILS.getTEBTProdforMyMix = function (mymix_prod, quote_iden) {
    if (quote_iden == 'Q1') {
      return LOCAL_MYMIX_CPMBO_MAPPING[mymix_prod][0];
    } else if (quote_iden == 'Q2') {
      return LOCAL_MYMIX_CPMBO_MAPPING[mymix_prod][1];
    }
    return LOCAL_MYMIX_CPMBO_MAPPING[mymix_prod];
  };


  PRODUCT_DETAILS.isSTP_For_Household = function (chnlptnr) {  //<!--   STP House hold changes


    var validdate = false;
    if (QNIAPP.PRODUCT_DETAILS.isSTPApplicable(QNIAPP.IN.chnlptnr)) {
      var lead_dt = (QNIAPP.leaddata && QNIAPP.leaddata['crtdt']) ? new Date(QNIAPP.leaddata['crtdt']) : new Date();
      var leadCreatedtDt = new Date(lead_dt.getFullYear(), lead_dt.getMonth(), lead_dt.getDate());
      var deploydate = new Date(QNIAPP.CONSTS.HouseholdDepDt);
      var ddate = new Date(deploydate.getFullYear(), deploydate.getMonth(), deploydate.getDate());

      if (leadCreatedtDt >= ddate) {
        validdate = true;
      }
    }
    if (jQuery.inArray(chnlptnr, STP_CHANNEL_PARTNERS_HOUSEHOLD_INCOME) !== -1 && !(GFWK_APP_ID && GFWK_APP_ID === 'wms') && (QNIAPP.leaddata && QNIAPP.leaddata['datasrc'] == "CRMNext") && validdate) {
      return true;
    }
    else if ((GFWK_APP_ID && GFWK_APP_ID === 'wms') && jQuery.inArray(chnlptnr, STP_CHANNEL_PARTNERS_HOUSEHOLD_INCOME) !== -1 && (QNIAPP.IN.Qt.qtdtls.leaddata && QNIAPP.IN.Qt.qtdtls.leaddata['datasrc'] == "CRMNext") && validdate) {
      return true;
    }
    else {
      return false;
    }
  };

  PRODUCT_DETAILS.isSTP_FOR_IB_CRMNEXT = function () {  //<!--   IB CRM NEXT STP
    if (!(GFWK_APP_ID && GFWK_APP_ID === 'wms') && QNIAPP.IN.chnlptnr == "International Business" && (QNIAPP.leaddata && QNIAPP.leaddata['datasrc'] == "CRMNext")) {
      return true;
    }
    else if ((GFWK_APP_ID && GFWK_APP_ID === 'wms') && QNIAPP.IN.chnlptnr == "International Business" && (QNIAPP.IN.Qt.qtdtls.leaddata && QNIAPP.IN.Qt.qtdtls.leaddata['datasrc'] == "CRMNext")) {
      return true;
    }
    else {
      return false;
    }
  };

  PRODUCT_DETAILS.isSTP_For_Configurable = function (chnlptnr) {  //<!--   STP House hold changes
    var validdate = false;
    if (QNIAPP.PRODUCT_DETAILS.isSTPApplicable(QNIAPP.IN.chnlptnr)) {
      var lead_dt = (QNIAPP.leaddata && QNIAPP.leaddata['crtdt']) ? new Date(QNIAPP.leaddata['crtdt']) : new Date();
      var leadCreatedtDt = new Date(lead_dt.getFullYear(), lead_dt.getMonth(), lead_dt.getDate());

      var deploydate = new Date(QNIAPP.CONSTS.HouseholdDepDt);
      var ddate = new Date(deploydate.getFullYear(), deploydate.getMonth(), deploydate.getDate());

      if (leadCreatedtDt >= ddate) {
        validdate = true;
      }
    }


    if (jQuery.inArray(chnlptnr, STP_CHANNEL_PARTNERS_CONFIGURABLE) !== -1 && !(GFWK_APP_ID && GFWK_APP_ID === 'wms') && (QNIAPP.leaddata && QNIAPP.leaddata['datasrc'] == "CRMNext") && validdate) {
      return true;
    } else {
      return false;
    }
  };
  /*
   * To make NRI  visible for a particular channel
   * input passed is : channel partner and product id
   *
   */

  PRODUCT_DETAILS.isNriApplicablefrChnl = function (chnlptnr, product_id) {
    if (jQuery.inArray(chnlptnr, LOCAL_NRI_CHANNEL_PARTNERS[product_id]) !== -1) {
      return true;
    } else {
      return false;
    }
  };

  PRODUCT_DETAILS.toHideNriForProd = function (pord_id) {
    if (jQuery.inArray(pord_id, LOCAL_NRI) === -1) {
      return true;
    } else {
      return false;
    }
  };

  PRODUCT_DETAILS.toDispNriHideOther = function (pord_id) {
    if (jQuery.inArray(pord_id, LOCAL_Dispnri_Hideothers) != -1) {
      return true;
    } else {
      return false;
    }
  };


  PRODUCT_DETAILS.toHide_NONIND_ForProd = function (pord_id) {
    if (jQuery.inArray(pord_id, LOCAL_NONIND) != -1) {
      return true;
    } else {
      return false;
    }
  };

  PRODUCT_DETAILS.toHide_Forign_National = function (pord_id) {
    if (jQuery.inArray(pord_id, LOCAL_Hide_Forign_National) != -1) {
      return true;
    } else {
      return false;
    }
  };

  PRODUCT_DETAILS.toDispPremiumBreakup = function (prod_id) {
    if (jQuery.inArray(prod_id, LOCAL_PremiumBreakup_Upsell) != -1) {
      return true;
    } else {
      return false;
    }
  };

  PRODUCT_DETAILS.isCopChannelExist = function (chnlptnr) {
    for (chnl in LOCAL_CH_PTNR_PROD) {
      if (chnl === chnlptnr && chnl !== "Other") {
        return true;
      }
    }
    return false;
  };



  PRODUCT_DETAILS.getProdListByCopChannel = function (ch_id) {  // Written only for PASA to load cop channel products instead of channel partner

    return PRODUCT_DETAILS.refreshProdList(LOCAL_CH_PTNR_PROD[ch_id] ? LOCAL_CH_PTNR_PROD[ch_id] : LOCAL_CH_PTNR_PROD['Other']);  // Remove this
  };




  PRODUCT_DETAILS.isSTPMobnoValApplicable = function (residentstatus) {
    residentstatus = residentstatus ? residentstatus : QNIAPP.IN.Qt.qtdtls.residentstatus ? QNIAPP.IN.Qt.qtdtls.residentstatus : QNIAPP.bankData.residentstatus;
    prop = residentstatus == "RESS_RI" ? "RESS_RI" : "other";
    return STP_MOBILE_NEW_VALIDATIONS[QNIAPP.IN.chnlptnr] && STP_MOBILE_NEW_VALIDATIONS[QNIAPP.IN.chnlptnr][prop] ? STP_MOBILE_NEW_VALIDATIONS[QNIAPP.IN.chnlptnr][prop] : "";
  };

  PRODUCT_DETAILS.isPranApplicable = function (channelpatner) {
    var isParnApplicable = false;
    if (!jQuery.inArray(channelpatner, LOCAL_PRAN_APPLICABLE) != -1) {
      isParnApplicable = true;
    }
    return isParnApplicable;
  };
  // bussiness category appliacble check
  PRODUCT_DETAILS.isBusnCateAppl = function () {
    var isBusnCateApplicable = true;
    if (QNIAPP.IN.id === QNIAPP.CONSTS.UNO && QNIAPP.IN.Qt.qtdtls.jlflag && QNIAPP.IN.Qt.qtdtls.jlflag === 'Y') {
      isBusnCateApplicable = false;
    }
    return isBusnCateApplicable;
  };
  PRODUCT_DETAILS.isProposerExists = function (id) {
    var isProposerExists = false;
    if (jQuery.inArray(id, LOCAL_PROPOSER_PRODUCTS) != -1) {
      isProposerExists = true;
    }
    return isProposerExists;
  };
  PRODUCT_DETAILS.isHealthAadharFlow = function (id) {
    var isHealthAadharFlow = false;
    if (jQuery.inArray(id, LOCAL_HEALTH_PRODUCTS) != -1) {
      isHealthAadharFlow = true;
    }
    return isHealthAadharFlow;
  };
  PRODUCT_DETAILS.isCorporateNameApplicable = function (id) {
    var corporateNameFlag = false;
    if (id === "PGNP") {
      corporateNameFlag = true;
    } else if (id === "IANP") {
      if (QNIAPP.IANP_val.isEnhanced()) {
        corporateNameFlag = true;
      }
    }
    return corporateNameFlag;
  };

  PRODUCT_DETAILS.isKeyAllianceApplicable = function (dist_channel, lead_channel) {
    var isKeyAlliance = false;
    if (jQuery.inArray(lead_channel, LOCAL_KEYALLIANCE_CHANNEL[dist_channel]) != -1) {
      isKeyAlliance = true;
    }
    return isKeyAlliance;
  };

  /*PRODUCT_DETAILS.isAuBankProdList=function(chnlptnr){
       return LOCAL_CH_PTNR_PROD[chnlptnr];
    };*/
  //POSP Integration ashwini
  PRODUCT_DETAILS.isTeleBasedSubchnlApplicable = function (sub_channel) {
    var isTelebased = false;
    if (QNIAPP.IN.chnlptnr == "HDFC Bank" && QNIAPP.IN.chnl == "Tele-Based" && jQuery.inArray(sub_channel, LOCAL_TELEBASED_SUBCHANNEL) != -1) {
      isTelebased = true;
    }
    else if (QNIAPP.IN.chnlptnr == "Bancassurance - Yes Bank" && QNIAPP.IN.chnl == "Tele-Based" && (typeof agentType != "undefined" && QNIAPP.PRODUCT_DETAILS.isYESBANKPOSPApplicable(agentType)) && jQuery.inArray(sub_channel, LOCAL_TELEBASED_SUBCHANNEL) != -1) {
      isTelebased = true;
    }
    return isTelebased;
  };
  PRODUCT_DETAILS.isChnlptnrMFD = function (dist_channel, plantype) {
    var isMFD = false;
    if (jQuery.inArray(plantype, LOCAL_MFD_CHANNEL[dist_channel]) != -1) {
      isMFD = true;
    }
    return isMFD;
  };

  PRODUCT_DETAILS.isMyMixCombiApplicable = function (id) {
    var isMyMix = false;
    for (var channel in LOCAL_MYMIX_COMB_PROD) {
      if (channel == QNIAPP.IN.chnlptnr) {
        if (jQuery.inArray(id, LOCAL_MYMIX_COMB_PROD[channel]) != -1) {
          isMyMix = true;
        }
      }
    }
    return isMyMix;
  };
  PRODUCT_DETAILS.riderAutoTickByChnl = function (id) {
    var tickflg = false;
    for (var channel in LOCAL_RDR_TICK_PROD) {
      if (channel == QNIAPP.IN.chnlptnr) {
        if (jQuery.inArray(id, LOCAL_RDR_TICK_PROD[channel]) != -1) {
          tickflg = true;
        }
      }
    }
    return tickflg;
  };
  PRODUCT_DETAILS.isVersion8Applicable = function (id) {
    var isV8flag = false;
    if (jQuery.inArray(id, LOCAL_VERSION_8_PRODS) != -1) {
      isV8flag = true;
    }
    return isV8flag;
  };


  PRODUCT_DETAILS.isSpLeadApplicable = function () {
    var isSpLead = false;
    var logged_user = USERID ? USERID : "";
    if (QNIAPP.leaddata && QNIAPP.leaddata['SPuserid'] && QNIAPP.leaddata['SPposrowid'] && logged_user == QNIAPP.leaddata['SPuserid']) {
      isSpLead = true;
    }
    else if (QNIAPP.IN.chnlptnr == "Saraswat Bank" && QNIAPP.leaddata && QNIAPP.leaddata['SPuserid'] && QNIAPP.leaddata['SPposrowid']) {
      isSpLead = true;
    }
    return isSpLead;
  };

  PRODUCT_DETAILS.isKeralaCessApplicable = function (branchcode, emptype) {
    if (branchcode.length == 1) {
      branchcode = 0o0 + branchcode;
    }
    else if (branchcode.length == 2) {
      branchcode = 0o0 + branchcode;
    }
    else if (branchcode.length == 3) {
      branchcode = 0 + branchcode;
    }
    if (QNIAPP.IN.chnlptnr == "Agency" || QNIAPP.IN.chnlptnr == "Exide Agency") {
      if (jQuery.inArray(branchcode, LOCAL_KERALA_BRANCH_CODE) != -1) {
        return true;
      }
    }
    else if (jQuery.inArray(branchcode, LOCAL_KERALA_BRANCH_CODE) != -1 && emptype != "Dummy") {
      return true;
    }
    return false;
  };
  PRODUCT_DETAILS.isnpPayeeCdCheck = function (paycd) {

    if (QNIAPP.IN.chnlptnr == "Broca") {
      if (jQuery.inArray(paycd, LOCAL_ISNP_PAYEE_CODE) != -1) {
        return true;
      }
    }
    return false;
  };

  PRODUCT_DETAILS.isnpProductCheck = function (prodcd) {

    if (jQuery.inArray(prodcd, LOCAL_ISNP_PROD_PARTNERS) != -1) {
      return false;
    }

    return true;
  };

  PRODUCT_DETAILS.isnpProdList = function () {
    return LOCAL_ISNP_PROD_TEBT;
  };

  PRODUCT_DETAILS.isnpAgentPrivilageCheck = function (agntprivilege) {
    if (jQuery.inArray(QNIAPP.IN.chnlptnr, LOCAL_ISNP_CHNL_PTNR) != -1/* && jQuery.inArray(agntprivilege,LOCAL_ISNP_AGNT_PRVLG) != -1*/) {
      return true;
    }
    return false;
  };


  PRODUCT_DETAILS.checkIsnpflag = function (prodcd, subchannel) {
    if (jQuery.inArray(prodcd, LOCAL_ISNP_PROD) != -1) {
      if (QNIAPP.IN.chnlptnr == "Broca") {
        if (payclt != '' && QNIAPP.PRODUCT_DETAILS.isnpPayeeCdCheck(payclt)) {
          return true;
        }
        else if (emptype != "Dummy" && (subchannel == "RenewBuy" || subchannel == "Funds India")) {
          return true;
        }
      }/*else if(QNIAPP.IN.chnlptnr == "HDFC Bank"){
    		return true;
    	}*/
    }
    return false;
  };
  PRODUCT_DETAILS.isNewEMRPMALogicApplicable = function () {
    if ($.inArray(QNIAPP.IN.id, new_EMRPMA_logic_products) != -1) {
      return true;
    }
    return false;
  };
  PRODUCT_DETAILS.checkMultipleCounterProdList = function (prodid) {
    if (jQuery.inArray(prodid, LOCAL_MULTIPLE_COUNTER_PROD) != -1) {
      if (prodid == "SUPH" && QNIAPP.IN.Qt.qtdtls.jlflag && QNIAPP.IN.Qt.qtdtls.jlflag == "Y") {
        return false;
      }
      else {
        return true;
      }
    }
    return false;
  };
  PRODUCT_DETAILS.getFundCategory = function () {
    var fund_details = {};
    var fund_details_arr = [];
    var is_new_cat;
    var is_source_fund;
    QNIAPP.OUT.FUND_CAT_DET = [];
    for (var fund in QNIAPP.IN.Qt.qtdtls.fund) {
      if (QNIAPP.IN.Qt.qtdtls.fund[fund].percent != '' && parseInt(QNIAPP.IN.Qt.qtdtls.fund[fund].percent) > 0) {
        for (fund_cat in FUND_CLASSIFICATION) {
          if ($.inArray(QNIAPP.IN.Qt.qtdtls.fund[fund].name_cd, FUND_CLASSIFICATION[fund_cat]) != -1) {
            fund_details['category'] = fund_cat;
            fund_details['percent'] = QNIAPP.IN.Qt.qtdtls.fund[fund].percent;
            fund_details['name'] = QNIAPP.IN.Qt.qtdtls.fund[fund].name;
            fund_details_arr.push(fund_details);
            fund_details = {};
          }
        }
      }
    }
    for (var i = 0; i < fund_details_arr.length; i++) {
      is_new_cat = true;
      is_source_fund = false;
      if (QNIAPP.IN.Qt.qtdtls.sysTransPlan === "Y") {
        is_source_fund = (QNIAPP.IN.Qt.qtdtls.sourceFund === fund_details_arr[i].name) ? true : false;
      }
      if (!is_source_fund) {
        for (var j = 0; j < QNIAPP.OUT.FUND_CAT_DET.length; j++) {
          if (fund_details_arr[i].category == QNIAPP.OUT.FUND_CAT_DET[j].category) {
            QNIAPP.OUT.FUND_CAT_DET[j].percent += parseInt(fund_details_arr[i].percent);
            //alert('j='+j);
            is_new_cat = false;
          }
        }
      }
      if (is_new_cat) {
        var temp_obj = {};
        temp_obj['category'] = fund_details_arr[i].category;
        temp_obj['percent'] = parseInt(fund_details_arr[i].percent);
        temp_obj['source_fund'] = is_source_fund ? "Y" : "N";
        QNIAPP.OUT.FUND_CAT_DET.push(temp_obj);
      }
    }

  };
  /* PRODUCT_DETAILS.UwDiscApplicable=function(){
     var UwDisc = false;
     if(QNIAPP.IN.Qt.qtdtls.uwdiscflg=='Y' && QNIAPP.IN.chnlptnr== QNIAPP.CONSTS.HDFCBANKCH){
       UwDisc = true;
     }
     return UwDisc;
   };*/


  /*  PRODUCT_DETAILS.isSpRoleApplicable=function(user_role){
    var isSpRole = false;
    var LOCAL_spROLE = new Array();
    LOCAL_spROLE =['CC','BC'];
    if(jQuery.inArray(user_role,LOCAL_spROLE) != -1){
      isSpRole = true;
      }
        return isSpRole;
    };*/
  PRODUCT_DETAILS.getPPRRiderOpt = function () {

    if (QNIAPP.IN.id == 'SANPAR' || QNIAPP.IN.id == 'SANPARE' || QNIAPP.IN.id == 'SANCHP' || QNIAPP.IN.id == 'SANCHPE' || QNIAPP.IN.id == 'UL9SPP') {
      return LOCAL_PPR_RIDER_AUTO_TICK_LIST[QNIAPP.IN.id];
    } else if (QNIAPP.IN.id == 'UL7EA' || QNIAPP.IN.id == 'UL7EA1' || QNIAPP.IN.id == 'UL7EA2' || QNIAPP.IN.id == 'UL8C2I' || QNIAPP.IN.id == 'UL8NIV' || QNIAPP.IN.id == 'EGII') {
      return LOCAL_PPR_RIDER_AUTO_TICK_LIST[QNIAPP.IN.id][QNIAPP.IN.chnlptnr];
    }
    else {
      return LOCAL_PPR_RIDER_AUTO_TICK_LIST[QNIAPP.IN.id][QNIAPP.IN.Qt.qtdtls.pptopt];
    }
  };
  PRODUCT_DETAILS.isCombiBackdtApplicable = function () {
    if (QNIAPP.IN.combID && QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.combID)) {
      LOCAL_PRODUCT_DETAILS[QNIAPP.IN.id]['allow_bkdt'] = 0;
    } else {
      LOCAL_PRODUCT_DETAILS[QNIAPP.IN.id]['allow_bkdt'] = 1;
    }
  };
  return PRODUCT_DETAILS;
}();
if (QNIAPP.IN.isservice === "N" && (QNIAPP.IN.touchpoint !== 'OPS' && GQNI_PRODUCT && !isEmptyObject(GQNI_PRODUCT)) && !(GFWK_APP_ID && GFWK_APP_ID === 'wms')) {
  QNIAPP.PRODUCT_DETAILS.setUWandAvailableProducts(GQNI_PRODUCT);
}
if (QNIAPP.IN.isservice === "N") {
  loadDependentScripts(["static-mod/qni/js/common/qni_common_parms.js", "static-mod/qni/js/common/qni_common_render.js"], remoteURL, null);
}
QNIAPP.UWR_ACT = function () {
  function UWR_ACT() { };
  var index_storein = 0;
  UWR_ACT.processUWInputs = function (response, final_json_uw) {
    switch (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ctg')) {
      case 'U': {
        //for ulip
        /**
         * 1) check for emr and/or pma for Main Benefit
         * 2) check for riders. If present check for emr and/or pma for riders along with the emrduration ,pmaduration
         * 3) generate new quote
         * 4) create the response
         * 5) call the java api for the pdf and get the bytestream
         */
        QNIAPP.UWR_ACT.processULIP(response, final_json_uw);

        /*if(!QNIAPP.UWR_ACT.processULIP()){  // ---Commented as response to be send from process ulip
          return QNIAPP.COMM_NODE.sendErrorResponseToService(response,"",0);
        }
        else{
          return QNIAPP.COMM_NODE.processNsendToService(response,"UW");
        }*/
        break;
      }
      case 'T': {
        //for traditional
        /**
         * 1) check for altered values
         * 2) check for emr pmr
         * 3) calculate excess premium
         * 4) generate the quote
         * 5)
         * 6)
         * 7)call the java api for the pdf and get the bytestream
         */
        QNIAPP.UWR_ACT.processTraditional(response, final_json_uw);
        /*if(!QNIAPP.UWR_ACT.processTraditional()){ // ---Commented as response to be send from process Traditional
          return QNIAPP.COMM_NODE.sendErrorResponseToService(response,"",0);
        }
        else{
          return QNIAPP.COMM_NODE.processNsendToService(response,"UW");
        }*/
        break;
      }
      case 'P': {
        //for protection
        if (QNIAPP.IN.id == "C2PP" || QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE" || QNIAPP.IN.id == "SARJB" || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE" || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE" || QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
          QNIAPP.UWR_ACT.processProtection(response, final_json_uw);
        }
        else {
          QNIAPP.UWR_ACT.processProtection_C2P3DP(response, final_json_uw);
        }

        /*if(!QNIAPP.UWR_ACT.processProtection()){ // ---Commented as response to be send from process protection
          return QNIAPP.COMM_NODE.sendErrorResponseToService(response,"",0);
        }
        else{
          return QNIAPP.COMM_NODE.processNsendToService(response,"UW");
        }*/
        break;
      }
      case 'H': {
        // for health
        if (QNIAPP.IN.id == "HRN") {
          QNIAPP.UWR_ACT.processHealth(response, final_json_uw);
        }
        else if (QNIAPP.IN.id == "CDAC") {
          QNIAPP.UWR_ACT.processHealth_CDAC(response, final_json_uw); // For Cardiac Care
        }

        /*if(!QNIAPP.UWR_ACT.processHealth()){ //// ---Commented as response to be send from process Health
          return QNIAPP.COMM_NODE.sendErrorResponseToService(response,"",0);
        }
        else{
          return QNIAPP.COMM_NODE.processNsendToService(response,"UW");
        }*/
        break;
      }

      case 'C': {
        QNIAPP.UWR_ACT.processCombi(response, final_json_uw);
        break;
      }
    };
  };

  //for underwriter upsell
  UWR_ACT.processUpsell = function (response, final_json_upsell) {
    var isvalid = false;
    QNIAPP['body'] = [];
    QNIAPP['OP'] = [];
    QNIAPP.IN.Qt.lifeassured = [];
    QNIAPP.UWR_ACT.setBasicInputs();
    //considering single life
    if (QNIAPP.UWR_ACT.checkandSetAlteredInputs(0)) {
      QNIAPP.OUT.touchpoint = QNIAPP.IN.Qt.qtdtls.touchpoint;
      isvalid = window['QNIAPP'][QNIAPP.IN.Qt.qtdtls.id]['validate']('I');
      QNIAPP.OUT.prodname = QNIAPP.IN.Qt.qtdtls.prodname;
      QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.qtdtls.premium;
      QNIAPP.IN.Qt.totpremium = QNIAPP.OUT.totPremium;
      QNIAPP.IN.Qt.totpremium = QNIAPP.IN.Qt.totpremium + "";
      QNIAPP.IN.Qt.qtdtls.totpremium = QNIAPP.IN.Qt.totpremium;
      QNIAPP.IN.Qt.tottax = (QNIAPP.OUT.appTax) ? ((QNIAPP.OUT.apptax) ? QNIAPP.OUT.apptax : 0) : 0;
      logger.error("Process Upsell Error ---->" + QNIAPP.ERR);
      if (isvalid) {
        //QNIAPP.OUT.partyid = QNIAPP.lifeassured[0].partyid;
        QNIAPP.OUT.partyid = "000000";
        QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'PROPOSED_UPSELL');
        QNIAPP.IN.Qt.status_rk = "32341";
        QNIAPP.UWR_ACT.storeINJsonArray(0);
        QNIAPP.UWR_ACT.storeOUTJsonArray(0);
        final_json_upsell = QNIAPP.COMM_NODE.createFinalResponseJson(final_json_upsell); //---Final response will be created if isvalid is true
        if (final_json_upsell.head.status && final_json_upsell.head.status == "Success") {
          return QNIAPP.COMM_NODE.processNsendToService(response, "UW", final_json_uw, QNIAPP['OP']);// ---Final response to be sent
        }
      }
      else {
        return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0); //--Error response will be send if isvalid is false
      }
    }
    //QNIAPP.COMM_NODE.createErrorResponseJson(); //--error response will be created from sendErrorResponseToService
    //QNIAPP.COMM_NODE.createFinalResponseJson(); // ---Final response json will be send on local variable final_json_upsell
    //return isvalid; // ---Commented
  };

  //for ops finalize
  UWR_ACT.opsFinalize = function (response, final_json_ops) { //---Final_json to be passed
    var reqObj = {}; //---Declared reqobj as local
    //global.reqObj = reqObj; //--commented
    QNIAPP['body'] = [];
    QNIAPP['OP'] = [];
    QNIAPP.IN.touchpoint = "OPS";
    QNIAPP.IN.Qt.qtdtls.prodcat = QNIAPP.COMM_CALC.getProductCategory(QNIAPP.IN.id);
    request = require('../../../../static/node/node_modules/request');
    //-----commented as appnum generator will be called after preparing final response
    //var headers ={"X-Requested-With":"XMLHttpRequest"  , 'Content-Type': 'application/html'};
    //logger.info("URL TO HIT FOR APPNUM ------>"+QNIAPP['config'].app_num_generator);

    //request.post({ url: QNIAPP['config'].app_num_generator, headers: headers ,form: {'body.prodcat':QNIAPP.IN.Qt.qtdtls.prodcat,'body.touchpoint':QNIAPP.IN.touchpoint} },function (error, resp, body) {
    /*if (!error && resp.statusCode == 200 && body!=="") {
      logger.info("Response from App Generator--->"+body);
      body = JSON.parse(body);
      logger.info("App Number--->"+body.body.appnum);
      QNIAPP.IN.Qt.appnum = body.body.appnum ;
      QNIAPP.IN.Qt.qtdtls.appnum = QNIAPP.IN.Qt.appnum;*/
    QNIAPP.IN.Qt.chnlptnr = "Online";
    QNIAPP.IN.Qt.subchnl = "Online";
    QNIAPP.IN.Qt.chnl = "Online";
    QNIAPP.IN.Qt.qtdtls.qtstatus = "Finalized";
    QNIAPP.IN.Qt.qtstatus = "Finalized";
    QNIAPP.IN.Qt.qtdtls['instype'] = (typeof QNIAPP.IN.Qt.qtdtls.policyType != 'undefined' && QNIAPP.IN.Qt.qtdtls.policyType === 'KeyMan') ? "INST_BUSN" : "INST_INDV";
    QNIAPP.IN.Qt['instype'] = QNIAPP.IN.Qt.qtdtls['instype'];
    QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.qtdtls.premium;
    if (QNIAPP.IN['id'] == "UL8C2I" || QNIAPP.IN['id'] == "UL8C2R") {
      QNIAPP.IN.Qt.qtdtls.sumAssured = QNIAPP.IN.Qt.qtdtls.sumAssured + '';
    }
    QNIAPP.COMM_CALC.setAdditionalInputs(QNIAPP.IN.Qt, QNIAPP.IN.Qt.lifeassurednm);
    QNIAPP.UWR_ACT.storeINJsonArray(0);
    QNIAPP.UWR_ACT.storeOUTJsonArray(0);
    var OP_Finalize = [];
    OP_Finalize = QNIAPP['OP'];
    //QNIAPP.COMM_NODE.createErrorResponseJson(); //----error will be handled through sendErrorResponseToService
    final_json_ops = QNIAPP.COMM_NODE.createFinalResponseJson(final_json_ops);//---final_json_ops to be passed to create response
    QNIAPP.COMM_CALC.prepareRequest(reqObj);
    $.each(reqObj.body.quote.quotedtls, function (key, value) {	// covert number type to string
      if (typeof value == 'number') {
        reqObj.body.quote.quotedtls[key] = value.toString();
      }
    }
    );
    reqObj.body.quote.chnlptnr = QNIAPP.IN.Qt.chnlptnr;
    reqObj.body.isservice = "Y";
    reqObj.body.quote.subchnl = QNIAPP.IN.Qt.subchnl;
    reqObj.body.quote.chnl = QNIAPP.IN.Qt.chnl;
    // ---calling appnum generator
    var headers = { "X-Requested-With": "XMLHttpRequest", 'Content-Type': 'application/html' };
    request.post({ url: QNIAPP['config'].app_num_generator, headers: headers, form: { 'body.prodcat': QNIAPP.IN.Qt.qtdtls.prodcat, 'body.touchpoint': QNIAPP.IN.touchpoint } }, function (error, resp, body) {
      if (!error && resp.statusCode == 200 && body !== "") {
        logger.info("Response from App Generator--->" + body);
        body = JSON.parse(body);
        logger.info("App Number--->" + body.body.appnum);
        final_json_ops.body.quotes[0].appnum = body.body.appnum;
        final_json_ops.body.quotes[0].qtdtls.appnum = body.body.appnum;
        reqObj.body.appnum = body.body.appnum;
        reqObj.body.quote.quotedtls['appnum'] = body.body.appnum;
        OP_Finalize[0]['appnum'] = body.body.appnum;
        //final_json_ops.body.quotes['qtdtls'].appnum = body.body.appnum;
        QNIAPP.COMM_NODE.processNsendToOPSFinalize(response, 'OPS', final_json_ops, reqObj, OP_Finalize); //For OPS finalize final_json_ops,reqObj to be passed in parameter
      }
      else {
        logger.error("Error In Application Number Generation :: " + error);
        QNIAPP.COMM_NODE.sendErrorResponseToService(response, "Error In Application Number Generation ", 0);
      }
    });
  };

  //For Finalize
  UWR_ACT.FinalizeEdit = function (response, final_json_edit) {
    var reqObj = {}; // ---declared as local variable
    //global.reqObj = reqObj; // commented by
    QNIAPP['body'] = [];
    QNIAPP['OP'] = [];
    QNIAPP.IN.touchpoint = QNIAPP.IN.Qt.qtdtls.touchpoint;
    QNIAPP.IN.Qt.qtdtls.prodcat = QNIAPP.COMM_CALC.getProductCategory(QNIAPP.IN.id);
    var oldAppnum = QNIAPP.IN.Qt.qtdtls.appnum; //Taking old application no. from request
    request = require('../../../../static/node/node_modules/request');
    //-----commented as appnum generator will be called after preparing final response
    //var headers ={"X-Requested-With":"XMLHttpRequest"  , 'Content-Type': 'application/html'};
    //logger.info("URL TO HIT FOR APPNUM ------>"+QNIAPP['config'].app_num_generator);

    //request.post({ url: QNIAPP['config'].app_num_generator, headers: headers ,form: {'body.prodcat':QNIAPP.IN.Qt.qtdtls.prodcat,'body.touchpoint':QNIAPP.IN.touchpoint} },function (error, resp, body) {
    //if (!error && resp.statusCode == 200 && body!=="") {
    //logger.info("Response from App Generator--->"+body);
    //body = JSON.parse(body);
    //logger.info("App Number--->"+body.body.appnum);
    //QNIAPP.IN.Qt.appnum = body.body.appnum ;
    //QNIAPP.IN.Qt.qtdtls.appnum = QNIAPP.IN.Qt.appnum;
    QNIAPP.IN.Qt.instype = (QNIAPP.IN.Qt.qtdtls.instype) ? QNIAPP.IN.Qt.qtdtls.instype : "";
    QNIAPP.IN.Qt.subinstype = (QNIAPP.IN.Qt.qtdtls.subinstype) ? QNIAPP.IN.Qt.qtdtls.subinstype : "";
    if (QNIAPP.IN.Qt.qtdtls.touchpoint == "OPS") {
      QNIAPP.IN.Qt.chnlptnr = "Online";
      QNIAPP.IN.Qt.subchnl = "Online";
      QNIAPP.IN.Qt.chnl = "Online";
    }
    else {
      QNIAPP.IN.Qt.chnlptnr = QNIAPP.IN.Qt.qtdtls.chnlptnr;
      QNIAPP.IN.Qt.subchnl = QNIAPP.IN.Qt.qtdtls.subchnl;
      QNIAPP.IN.Qt.chnl = QNIAPP.IN.Qt.qtdtls.chnl;
    }
    QNIAPP.IN.Qt.qtdtls.qtstatus = "Finalized";
    QNIAPP.IN.Qt.qtstatus = "Finalized";
    logger.info("INSTYPE -->" + QNIAPP.IN.Qt.qtdtls['instype']);
    //QNIAPP.IN.Qt.qtdtls['instype']= 'INST_INDV';
    //QNIAPP.IN.Qt['instype']= 'INST_INDV';
    QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.qtdtls.premium;
    QNIAPP.COMM_CALC.setAdditionalInputs(QNIAPP.IN.Qt, QNIAPP.IN.Qt.lifeassurednm);
    QNIAPP.UWR_ACT.storeINJsonArray(0);
    //QNIAPP.UWR_ACT.storeOUTJsonArray(0);
    //QNIAPP.COMM_NODE.createErrorResponseJson(); //----error will be handled through sendErrorResponseToService
    QNIAPP.COMM_CALC.generateQuoteNo('q');
    //QNIAPP.IN.Qt.appnum = QNIAPP.IN.Qt.qtdtls.appnum;
    //QNIAPP.COMM_NODE.createFinalizeResponseJson();
    //QNIAPP.COMM_CALC.prepareRequest(reqObj);
    QNIAPP.IN.Qt.quoteid = QNIAPP.IN.Qt.qtdtls.quoteid;
    QNIAPP.COMM_CALC.prepareRequest(reqObj);
    if (QNIAPP.head.source && QNIAPP.head.source.indexOf("OCP") != -1) { //For OCP Application in dedupe scenario
      reqObj.body.quote.touchpoint = "OCP";
    }
    if (QNIAPP.IN.Qt.qtdtls.touchpoint == "OPS" && (QNIAPP.IN.Qt.qtdtls.source && QNIAPP.IN.Qt.qtdtls.source != "")) {
      reqObj.body.opssource = QNIAPP.IN.Qt.qtdtls.source;
    }
    if ((QNIAPP.IN.chnlptnr == "HDFC Bank" || QNIAPP.IN.chnlptnr == 'International Business') && QNIAPP.IN.Qt.qtdtls.sMatrixData && QNIAPP.IN.Qt.qtdtls.sMatrixData != "" && QNIAPP.IN.Qt.qtdtls.sMatrixData.marginal_income) {
      reqObj.body.quote.marginal_income = (QNIAPP.IN.Qt.qtdtls.sMatrixData.marginal_income) ? QNIAPP.IN.Qt.qtdtls.sMatrixData.marginal_income : "";
    }
    else if (QNIAPP.IN.chnlptnr == "HDFC Bank" && QNIAPP.IN.Qt.qtdtls.sourceofapp && QNIAPP.IN.Qt.qtdtls.sourceofapp == "POSP" && QNIAPP.IN.Qt.qtdtls.marginal_income && QNIAPP.IN.Qt.qtdtls.marginal_income != "") {
      reqObj.body.quote.marginal_income = QNIAPP.IN.Qt.qtdtls.marginal_income; //FOR POSP EDIT
    }
    if (QNIAPP.IN.Qt.qtdtls.touchpoint == "OPS" && QNIAPP.IN.Qt.qtdtls.marginal_income && QNIAPP.IN.Qt.qtdtls.marginal_income != "") {
      reqObj.body.quote.marginal_income = QNIAPP.IN.Qt.qtdtls.marginal_income;
    }
    if (QNIAPP.IN.Qt.qtdtls.touchpoint == "OPS") {
      $.each(reqObj.body.quote.quotedtls, function (key, value) {	//added for converting json number type to string
        if (typeof value == 'number') {
          reqObj.body.quote.quotedtls[key] = value.toString();
        }
      }
      );
    }

    //QNIAPP.COMM_NODE.createFinalizeResponseJson(reqObj);// -- commented
    reqObj.body.isservice = "Y";
    if (QNIAPP.IN.Qt.qtdtls.touchpoint == "OPS") {
      reqObj.body.quote.subchnl = "Online";
      reqObj.body.quote.chnl = "Online";
      reqObj.body.quote.chnlptnr = "Online";
    }
    else {
      reqObj.body.quote.chnlptnr = QNIAPP.IN.Qt.chnlptnr;
      reqObj.body.quote.subchnl = QNIAPP.IN.Qt.subchnl;
      reqObj.body.quote.chnl = QNIAPP.IN.Qt.chnl;
    }
    QNIAPP.OUT.partyid = "000000";
    QNIAPP.UWR_ACT.storeOUTJsonArray(0);
    var OP_Edit = [];
    OP_Edit = QNIAPP['OP'];
    final_json_edit = QNIAPP.COMM_NODE.createFinalizeResponseJson(reqObj, final_json_edit);//-- after changes to reqObj finalize response to be created
    // ---calling appnum generator
    var headers = { "X-Requested-With": "XMLHttpRequest", 'Content-Type': 'application/html' };
    request.post({ url: QNIAPP['config'].app_num_generator, headers: headers, form: { 'body.prodcat': QNIAPP.IN.Qt.qtdtls.prodcat, 'body.touchpoint': QNIAPP.IN.touchpoint, 'body.oldAppnum': oldAppnum } }, function (error, resp, body) {
      if (!error && resp.statusCode == 200 && body !== "") {
        logger.info("Response from App Generator--->" + body);
        body = JSON.parse(body);
        logger.info("App Number--->" + body.body.appnum);
        final_json_edit.body.appnum = body.body.appnum;
        final_json_edit.body.quote.quotedtls['appnum'] = body.body.appnum;
        OP_Edit[0]['appnum'] = body.body.appnum;
        if (final_json_edit.head.status && final_json_edit.head.status == "Success") {
          logger.info("Final Response Json --->" + JSON.stringify(final_json_edit));
          QNIAPP.COMM_NODE.processNsendToService(response, 'QNI_FINALIZE', final_json_edit, OP_Edit);  // --Final response to be send after success in head
        }
      }
      else {
        logger.error("Error In Application Number Generation :: " + error);
        QNIAPP.COMM_NODE.sendErrorResponseToService(response, "Error In Application Number Generation ", 0);
      }
    });
  };

  //For instaLifeQni Finalize
  UWR_ACT.instaLifeQni = function (response, final_json_insta) {
    QNIAPP['body'] = [];
    QNIAPP['OP'] = [];
    if (QNIAPP.other.nodesource == "SOA" || QNIAPP.other.nodesource == "BFL_PASA") { //For Insta Life finalize quote
      QNIAPP.IN.touchpoint = QNIAPP.IN.Qt.qtdtls.touchpoint;
      QNIAPP.IN.Qt.qtdtls.prodcat = QNIAPP.COMM_CALC.getProductCategory(QNIAPP.IN.id);
      request = require('../../../../static/node/node_modules/request');
      // ---Appnum generator calling after preparing final response
      //var headers ={"X-Requested-With":"XMLHttpRequest"  , 'Content-Type': 'application/html'};
      //logger.info("URL TO HIT FOR APPNUM ------>"+QNIAPP['config'].app_num_generator);

      //request.post({ url: QNIAPP['config'].app_num_generator, headers: headers ,form: {'body.prodcat':QNIAPP.IN.Qt.qtdtls.prodcat,'body.touchpoint':QNIAPP.IN.touchpoint} },function (error, resp, body) {
      //if (!error && resp.statusCode == 200 && body!==""){
      //logger.info("Response from App Generator--->"+body);
      //body = JSON.parse(body);
      //logger.info("App Number--->"+body.body.appnum);
      QNIAPP.IN.Qt.appnum = (QNIAPP.other.appnum && QNIAPP.other.appnum !== "") ? QNIAPP.other.appnum : "";
      QNIAPP.IN.Qt.qtdtls.appnum = QNIAPP.IN.Qt.appnum;
      QNIAPP.IN.Qt.instype = (QNIAPP.IN.Qt.qtdtls.instype) ? QNIAPP.IN.Qt.qtdtls.instype : "";
      QNIAPP.IN.Qt.subinstype = (QNIAPP.IN.Qt.qtdtls.subinstype) ? QNIAPP.IN.Qt.qtdtls.subinstype : "";
      QNIAPP.IN.Qt.chnlptnr = (QNIAPP.IN.Qt.qtdtls.chnlptnr) ? QNIAPP.IN.Qt.qtdtls.chnlptnr : "";
      QNIAPP.IN.Qt.subchnl = (QNIAPP.IN.Qt.qtdtls.subchnl) ? QNIAPP.IN.Qt.qtdtls.subchnl : "";
      QNIAPP.IN.Qt.chnl = (QNIAPP.IN.Qt.qtdtls.chnl) ? QNIAPP.IN.Qt.qtdtls.chnl : "";
      if (QNIAPP.IN.Qt.qtdtls.smatrixdtls && QNIAPP.IN.Qt.qtdtls.smatrixdtls != "") {// suitability matrix details will be present in smatrixdtls in request
        QNIAPP.IN.Qt.qtdtls.sMatrixData = {};
        for (var key in QNIAPP.IN.Qt.qtdtls.smatrixdtls) { // adding suitability matrix details into sMatrixData from smatrixdtls
          QNIAPP.IN.Qt.qtdtls.sMatrixData[key] = QNIAPP.IN.Qt.qtdtls.smatrixdtls[key];
        }
        QNIAPP.IN.Qt.qtdtls.sMatrixData.accno = QNIAPP.IN.Qt.qtdtls.smatrixdtls.bankaccno;
        QNIAPP.IN.Qt.qtdtls.sMatrixData.proposerBuyingForItself = (QNIAPP.IN.Qt.qtdtls.smatrixdtls.islasameasproposer && QNIAPP.IN.Qt.qtdtls.smatrixdtls.islasameasproposer == "Y") ? "Yes" : "No";
        QNIAPP.IN.Qt.qtdtls.sMatrixData.laSameAsPayor = (QNIAPP.IN.Qt.qtdtls.smatrixdtls.islasameaspayor && QNIAPP.IN.Qt.qtdtls.smatrixdtls.islasameaspayor == "Y") ? "Yes" : "No";
        QNIAPP.IN.Qt.qtdtls.sMatrixData.objective = QNIAPP.IN.Qt.qtdtls.smatrixdtls.objofins;
        QNIAPP.IN.Qt.qtdtls.sMatrixData.riskHorizon = QNIAPP.IN.Qt.qtdtls.smatrixdtls.invthrzn;
        QNIAPP.IN.Qt.qtdtls.sMatrixData.riskProfile = QNIAPP.IN.Qt.qtdtls.smatrixdtls.invtrskprofile;
        $.each(QNIAPP.IN.Qt.qtdtls.sMatrixData, function (key, value) {
          if (key == 'bankcustid' || key == 'bankaccno' || key == 'islasameasproposer' || key == 'islasameaspayor' || key == 'objofins' || key == 'invthrzn' || key == 'invtrskprofile') {
            delete QNIAPP.IN.Qt.qtdtls.sMatrixData[key];
          }
        }
        );
      }
      if (final_json_insta.head && !final_json_insta.head.status) {
        QNIAPP.COMM_CALC.generateQuoteNo('q');
        QNIAPP.IN.Qt.appnum = QNIAPP.IN.Qt.qtdtls.appnum;
        QNIAPP.IN.Qt.quoteid = QNIAPP.IN.Qt.qtdtls.quoteid;
        if (QNIAPP.IN.chnlptnr == "HDFC Bank" && QNIAPP.IN.Qt.qtdtls.sourceofapp && QNIAPP.IN.Qt.qtdtls.sourceofapp == "POSP") {
          QNIAPP.IN.Qt.qtdtls.srctz_la = (QNIAPP.IN.Qt.qtdtls.age && QNIAPP.IN.Qt.qtdtls.age >= 60) ? 'Y' : 'N';
          QNIAPP.IN.Qt.qtdtls.srctz_pr = (QNIAPP.IN.Qt.qtdtls.page && QNIAPP.IN.Qt.qtdtls.page >= 60) ? 'Y' : 'N';
          QNIAPP.IN.Qt.qtdtls.srctz_co = (QNIAPP.IN.Qt.qtdtls.srctz_la == "Y" || QNIAPP.IN.Qt.qtdtls.srctz_pr == "Y") ? 'Y' : 'N';
        }
        QNIAPP.COMM_CALC.prepareRequest(final_json_insta);
        if (QNIAPP.IN.Qt.qtdtls.smatrixdtls && QNIAPP.IN.Qt.qtdtls.smatrixdtls != "") {
          final_json_insta.body.ismatrixflag = "Y";
          final_json_insta.body['smatrixdtls'] = {};
          final_json_insta.body['smatrixdtls'] = QNIAPP.IN.Qt.qtdtls.smatrixdtls;
          delete final_json_insta.body.quote.quotedtls['smatrixdtls'];

        }
        if (QNIAPP.IN.Qt.qtdtls.sMatrixData && QNIAPP.IN.Qt.qtdtls.sMatrixData != "" && QNIAPP.PRODUCT_DETAILS.isSTPNBJOURNEYApplicable(QNIAPP.IN.chnlptnr)) {
          final_json_insta.body['ismatrixflag'] = 'N';
          final_json_insta.body['smatrixdtls'] = {};
          final_json_insta.body['smatrixdtls']['dob'] = (QNIAPP.IN.Qt.qtdtls.sMatrixData.dob) ? (QNIAPP.IN.Qt.qtdtls.sMatrixData.dob) : "";
          final_json_insta.body['smatrixdtls']['income'] = (QNIAPP.IN.Qt.qtdtls.sMatrixData.houseincome) ? (QNIAPP.IN.Qt.qtdtls.sMatrixData.houseincome) : "";
          final_json_insta.body['smatrixdtls']['maritalstatus'] = (QNIAPP.IN.Qt.qtdtls.sMatrixData.lifestage) ? (QNIAPP.IN.Qt.qtdtls.sMatrixData.lifestage) : "";
          final_json_insta.body['smatrixdtls']['invtrskprofile'] = (QNIAPP.IN.Qt.qtdtls.sMatrixData.invtype) ? (QNIAPP.IN.Qt.qtdtls.sMatrixData.invtype) : "";
          final_json_insta.body['smatrixdtls']['objofins'] = (QNIAPP.IN.Qt.qtdtls.sMatrixData.protneeds) ? (QNIAPP.IN.Qt.qtdtls.sMatrixData.protneeds) : "";
          final_json_insta.body['smatrixdtls']['checkboxflg'] = (QNIAPP.IN.Qt.qtdtls.sMatrixData.confirmcheckbox) ? (QNIAPP.IN.Qt.qtdtls.sMatrixData.confirmcheckbox) : "";
          final_json_insta.body['smatrixdtls']['needflag'] = (QNIAPP.IN.Qt.qtdtls.sMatrixData.needflag) ? (QNIAPP.IN.Qt.qtdtls.sMatrixData.needflag) : "";
        }
        if (QNIAPP.IN.chnlptnr == "HDFC Bank" && QNIAPP.IN.Qt.qtdtls.sourceofapp && QNIAPP.IN.Qt.qtdtls.sourceofapp == "POSP") {
          final_json_insta.body.quote.marginal_income = (QNIAPP.IN.Qt.qtdtls.marginal_income) ? QNIAPP.IN.Qt.qtdtls.marginal_income : "";
        }
        var resBody = {};
        resBody = final_json_insta.body;
        final_json_insta.body = {};
        final_json_insta.body.outputjsillustration = QNIAPP.OUT;
        final_json_insta.body.outputjson = resBody;
        final_json_insta.body.outputjson.quote.quotestatus = "New";
        final_json_insta.body.outputjson.quote.chnl = QNIAPP.IN.Qt.chnl;
        final_json_insta.body.outputjson.quote.subchnl = QNIAPP.IN.Qt.subchnl;
        final_json_insta.body.outputjson.quote.chnlptnr = QNIAPP.IN.Qt.chnlptnr;
        final_json_insta.body.outputjson.leadid = "";
        final_json_insta.body.outputjson.gender_cd = resBody.quote.quotedtls.lifeassured[0].gender_cd;
        final_json_insta.body.outputjson.quote.gender_cd = final_json_insta.body.outputjson.gender_cd;
        final_json_insta.body.outputpdf = {};
        final_json_insta.body.quotedtls = {};
        final_json_insta.body.outputquote = {};
        final_json_insta.body.quotedtls = resBody.quote.quotedtls;
        final_json_insta.body.quotedtls.touchpoint = QNIAPP.IN.Qt.qtdtls.touchpoint;
        final_json_insta.body.quoteid = resBody.quote.quoteid;
        final_json_insta.head.status = "Success";
        final_json_insta.head.msg = "Success";
        final_json_insta.head.txnid = (QNIAPP.head.txnid) ? QNIAPP.head.txnid : "";
      }
      QNIAPP['OP'] = [];
      QNIAPP.OUT.partyid = "000000"; //partyid hard-coded for file-net issue before app-sub
      QNIAPP.UWR_ACT.storeOUTJsonArray(0);
      var OP_Insta = [];
      OP_Insta = QNIAPP['OP'];
      if (QNIAPP.other.appnum && QNIAPP.other.appnum !== "") { // ---If appnum is passed in insta life request
        logger.info("Response for InstaLife QNI---->" + JSON.stringify(final_json_insta));
        QNIAPP.COMM_NODE.processNsendToService(response, "I-POS", final_json_insta, OP_Insta);
      }
      else { //if appnum is not passed in request generating appnum
        var headers = { "X-Requested-With": "XMLHttpRequest", 'Content-Type': 'application/html' };
        request.post({ url: QNIAPP['config'].app_num_generator, headers: headers, form: { 'body.prodcat': QNIAPP.IN.Qt.qtdtls.prodcat, 'body.touchpoint': QNIAPP.IN.touchpoint } }, function (error, resp, body) {
          if (!error && resp.statusCode == 200 && body !== "") {
            logger.info("Response from App Generator--->" + body);
            body = JSON.parse(body);
            logger.info("App Number--->" + body.body.appnum);
            final_json_insta.body.outputjson.appnum = body.body.appnum;
            final_json_insta.body.outputjson.quote.quotedtls['appnum'] = body.body.appnum;
            OP_Insta[0]['appnum'] = body.body.appnum;
            logger.info("Response for InstaLife QNI---->" + JSON.stringify(final_json_insta));
            QNIAPP.COMM_NODE.processNsendToService(response, 'I-POS', final_json_insta, OP_Insta);  // --Final response to be send after success in head
          }
          else {
            logger.error("Error In Application Number Generation :: " + error);
            QNIAPP.COMM_NODE.sendErrorResponseToService(response, "Error In Application Number Generation ", 0);
          }
        });
      }
    }
    else {
      if (QNIAPP.other.nodesource == "PASA" || QNIAPP.other.nodesource == "EasyNsure") {  //For Meta Pasa save quote
        if (final_json_insta.head && !final_json_insta.head.status) {
          QNIAPP.COMM_CALC.generateQuoteNo('q');
          QNIAPP.IN.Qt.quoteid = QNIAPP.IN.Qt.qtdtls.quoteid;
          QNIAPP.COMM_CALC.prepareRequest(final_json_insta);
          var resBody = {};
          resBody = final_json_insta.body;
          final_json_insta.body = {};
          final_json_insta.body.outputjsillustration = QNIAPP.OUT;
          final_json_insta.body.outputjson = resBody;
          final_json_insta.body.outputjson.quote.quotestatus = "New";
          final_json_insta.body.outputjson.quote.chnl = QNIAPP.IN.Qt.chnl;
          final_json_insta.body.outputjson.quote.subchnl = QNIAPP.IN.Qt.subchnl;
          final_json_insta.body.outputjson.quote.chnlptnr = QNIAPP.IN.Qt.chnlptnr;
          final_json_insta.body.outputjson.leadid = (QNIAPP.IN.Qt.qtdtls.leadid) ? QNIAPP.IN.Qt.qtdtls.leadid : "";
          final_json_insta.body.outputjson.gender_cd = resBody.quote.quotedtls.lifeassured[0].gender_cd;
          final_json_insta.body.outputjson.quote.gender_cd = final_json_insta.body.outputjson.gender_cd;
          final_json_insta.body.outputpdf = {};
          final_json_insta.body.quotedtls = {};
          final_json_insta.body.outputquote = {};
          final_json_insta.body.quotedtls = resBody.quote.quotedtls;
          final_json_insta.body.quotedtls.touchpoint = QNIAPP.IN.Qt.qtdtls.touchpoint;
          if (QNIAPP.other.nodesource == "PASA") {
            final_json_insta.body.quotedtls.isPasa = "Y";
            final_json_insta.body.quotedtls.isMtngReqd = "N";
            final_json_insta.body.quotedtls.isPasaquoteEdited = "N";
            final_json_insta.body.quotedtls.previousappnum = (QNIAPP.IN.Qt.qtdtls.previousappnum) ? QNIAPP.IN.Qt.qtdtls.previousappnum : "";
            final_json_insta.body.quotedtls.lifeassuredclientid = (QNIAPP.IN.Qt.qtdtls.lifeassuredclientid) ? QNIAPP.IN.Qt.qtdtls.lifeassuredclientid : "";
          }
          final_json_insta.body.quoteid = resBody.quote.quoteid;
          final_json_insta.head.status = "Success";
          final_json_insta.head.msg = "Success";
          final_json_insta.head.txnid = (QNIAPP.head.txnid) ? QNIAPP.head.txnid : "";
        }
        //QNIAPP.COMM_NODE.createErrorResponseJson(); //---commented
        QNIAPP.COMM_NODE.sendInputsToStore(response, final_json_insta);
        logger.info("Response for PASA---->" + JSON.stringify(final_json_insta));
      }

    }
  };

  // for Independent QNI
  UWR_ACT.independentQni = function (response, final_json_ocp) { //  --- final_json to be passed
    if (QNIAPP.other.nodesource === "SOA" && QNIAPP.other.generateonlyflag == "N") { // --- For finalise quote generateonlyflag will be N
      QNIAPP.IN.touchpoint = "OPS";
      QNIAPP.IN.Qt.qtdtls.prodcat = QNIAPP.COMM_CALC.getProductCategory(QNIAPP.IN.id);
      request = require('../../../../static/node/node_modules/request');
      // ---Calling appnum generator after preparing final response
      //var headers ={"X-Requested-With":"XMLHttpRequest"  , 'Content-Type': 'application/html'};
      //logger.info("URL TO HIT FOR APPNUM ------>"+QNIAPP['config'].app_num_generator);
      //logger.info("userId "+QNIAPP.head.userid);
      //request.post({ url: QNIAPP['config'].app_num_generator, headers: headers ,form: {'body.prodcat':QNIAPP.IN.Qt.qtdtls.prodcat,'body.touchpoint':QNIAPP.IN.touchpoint,'body.useridsrvc':QNIAPP.head.userid} },function (error, resp, body) {
      //if (!error && resp.statusCode == 200 && body!==""){
      //logger.info("Response from App Generator--->"+body);
      //body = JSON.parse(body);
      //logger.info("App Number--->"+body.body.appnum);


      QNIAPP.IN.Qt.appnum = (QNIAPP.other.appnum && QNIAPP.other.appnum !== "") ? QNIAPP.other.appnum : "";

      QNIAPP.IN.Qt.qtdtls.appnum = QNIAPP.IN.Qt.appnum;
      //QNIAPP.IN.appnum=QNIAPP.IN.Qt.appnum;
      QNIAPP.IN.chnl = "Online";
      QNIAPP.IN.chnlptnr = "Online";
      QNIAPP.IN.Qt.chnlptnr = "Online";
      QNIAPP.IN.Qt.chnl = "Online";
      QNIAPP.IN.Qt.qtdtls.chnl = "Online";
      QNIAPP.IN.Qt.qtdtls.chnlptnr = "Online";
      QNIAPP.IN.subchnl = "Online";
      QNIAPP.IN.Qt.subchnl = "Online";
      QNIAPP.IN.Qt.qtdtls.subchnl = "Online";
      if (QNIAPP.IN.Qt.qtdtls.opssource && QNIAPP.IN.Qt.qtdtls.opssource != "") {
        QNIAPP.IN.Qt.qtdtls.source = QNIAPP.IN.Qt.qtdtls.opssource;
      }

      if (final_json_ocp.head && !final_json_ocp.head.status) {

        QNIAPP.COMM_CALC.generateQuoteNo('q');
        QNIAPP.IN.Qt.appnum = QNIAPP.IN.Qt.qtdtls.appnum;
        QNIAPP.IN.Qt.quoteid = QNIAPP.IN.Qt.qtdtls.quoteid;

        QNIAPP.COMM_CALC.prepareRequest(final_json_ocp);
        var resBody = {};
        resBody = final_json_ocp.body;
        final_json_ocp.body = {};
        final_json_ocp.body.outputjsillustration = QNIAPP.OUT;
        final_json_ocp.body.outputjson = resBody;
        final_json_ocp.body.outputjson.opssource = (QNIAPP.IN.Qt.qtdtls.opssource) ? (QNIAPP.IN.Qt.qtdtls.opssource) : QNIAPP.CONSTS.DEFAULT_SOURCE_CODE;
        final_json_ocp.body.outputjson.quote.proposerbuyingforitself = (QNIAPP.IN.Qt.qtdtls.proposerBuyingForItself) ? (QNIAPP.IN.Qt.qtdtls.proposerBuyingForItself) : '';
        final_json_ocp.body.outputjson.quote.quotestatus = "New";
        final_json_ocp.body.outputjson.quote.chnl = "Online";
        final_json_ocp.body.outputjson.quote.subchnl = "Online";
        final_json_ocp.body.outputjson.quote.chnlptnr = "Online";
        final_json_ocp.body.outputjson.leadid = "";
        final_json_ocp.body.outputjson.gender_cd = resBody.quote.quotedtls.lifeassured[0].gender_cd;
        final_json_ocp.body.outputjson.quote.gender_cd = final_json_ocp.body.outputjson.gender_cd;
        final_json_ocp.body.outputjson.quote.prmmulfactor = resBody.quote.quotedtls.prmmulfactor;
        final_json_ocp.body.outputpdf = {};
        final_json_ocp.body.quotedtls = {};
        final_json_ocp.body.outputquote = {};
        final_json_ocp.body.quotedtls = resBody.quote.quotedtls;
        $.each(final_json_ocp.body.quotedtls, function (key, value) {	// convert number type to string
          if (typeof value == 'number') {
            final_json_ocp.body.quotedtls[key] = value.toString();
          }
        }
        );
        final_json_ocp.body.quotedtls.touchpoint = "OPS";
        final_json_ocp.body.quoteid = resBody.quote.quoteid;
        final_json_ocp.head.status = "Success";
        final_json_ocp.head.msg = "Success";
        final_json_ocp.head.txnid = (QNIAPP.head.txnid) ? QNIAPP.head.txnid : "";

      }

      QNIAPP['OP'] = [];
      QNIAPP.OUT.partyid = "000000"; //partyid hard-coded for file-net issue before app-sub
      QNIAPP.OUT.appnum = QNIAPP.IN.Qt.qtdtls.appnum;
      QNIAPP.OUT.quoteid = QNIAPP.IN.Qt.qtdtls.quoteid;
      QNIAPP.OUT.id = QNIAPP.IN.Qt.qtdtls.id;
      QNIAPP.UWR_ACT.storeOUTJsonArray(0);
      var OP_OCP = [];
      OP_OCP = QNIAPP['OP'];
      if (QNIAPP.other.appnum && QNIAPP.other.appnum != "") { //If appnum is passed in OCP request
        logger.info("Response for Independent QNI---->" + JSON.stringify(final_json_ocp));
        QNIAPP.COMM_NODE.processNsendToService(response, "OCP", final_json_ocp, OP_OCP);
      }

      else { //If appnum is not passed in OCP request generating appnum
        var headers = { "X-Requested-With": "XMLHttpRequest", 'Content-Type': 'application/html' };
        request.post({ url: QNIAPP['config'].app_num_generator, headers: headers, form: { 'body.prodcat': QNIAPP.IN.Qt.qtdtls.prodcat, 'body.touchpoint': QNIAPP.IN.touchpoint, 'body.useridsrvc': QNIAPP.head.userid, 'body.agentcode': QNIAPP.IN.Qt.qtdtls.agentcd } }, function (error, resp, body) {
          if (!error && resp.statusCode == 200 && body !== "") {
            logger.info("Response from App Generator--->" + body);
            body = JSON.parse(body);
            logger.info("App Number--->" + body.body.appnum);
            final_json_ocp.body.outputjsillustration.appnum = body.body.appnum;
            final_json_ocp.body.outputjson.appnum = body.body.appnum;
            final_json_ocp.body.outputjson.quote.quotedtls['appnum'] = body.body.appnum;
            OP_OCP[0].appnum = body.body.appnum;
            logger.info("Response for Independent QNI---->" + JSON.stringify(final_json_ocp));
            QNIAPP.COMM_NODE.processNsendToService(response, 'OCP', final_json_ocp, OP_OCP);  // --Final response to be send after success in head
          }
          else {
            logger.error("Error In Application Number Generation :: " + error);
            QNIAPP.COMM_NODE.sendErrorResponseToService(response, "Error In Application Number Generation ", 0);
          }

        });
      }
    } else {  // For OCP redirection/Save Quote for partners
      QNIAPP.IN.touchpoint = "OPS";
      if (final_json_ocp.head && !final_json_ocp.head.status) {
        QNIAPP.COMM_CALC.generateQuoteNo('q');
        QNIAPP.IN.Qt.quoteid = QNIAPP.IN.Qt.qtdtls.quoteid;
        QNIAPP.COMM_CALC.prepareRequest(final_json_ocp);
        var resBody = {};
        resBody = final_json_ocp.body;
        final_json_ocp.body = {};
        final_json_ocp.body.outputjsillustration = QNIAPP.OUT;
        final_json_ocp.body.outputjson = resBody;
        final_json_ocp.body.outputjson.quote.quotestatus = "New";
        final_json_ocp.body.outputjson.leadid = "";
        final_json_ocp.body.outputjson.gender_cd = resBody.quote.quotedtls.lifeassured[0].gender_cd;
        final_json_ocp.body.outputjson.quote.gender_cd = final_json_ocp.body.outputjson.gender_cd;
        final_json_ocp.body.outputpdf = {};
        final_json_ocp.body.quotedtls = {};
        final_json_ocp.body.outputquote = {};
        final_json_ocp.body.quotedtls = resBody.quote.quotedtls;
        final_json_ocp.body.quotedtls.source = (final_json_ocp.body.quotedtls.source && final_json_ocp.body.quotedtls.source != "") ? final_json_ocp.body.quotedtls.source : QNIAPP.CONSTS.DEFAULT_SOURCE_CODE;
        final_json_ocp.body.quotedtls.touchpoint = "OPS";
        final_json_ocp.body.quoteid = resBody.quote.quoteid;
        final_json_ocp.head.status = "Success";
        final_json_ocp.head.msg = "Success";
        final_json_ocp.head.txnid = (QNIAPP.head.txnid) ? QNIAPP.head.txnid : "";
      }
      QNIAPP['OP'] = [];
      QNIAPP.UWR_ACT.storeOUTJsonArray(0);
      //QNIAPP.COMM_NODE.processNsendToService(response,"UW",); //  ----upload is not required in this case so commented.
      //QNIAPP.COMM_NODE.createErrorResponseJson(); //  --- Final error json to handled from validate (I)
      QNIAPP.COMM_NODE.sendInputsToStore(response, final_json_ocp);
      logger.info("Response for Independent QNI---->" + JSON.stringify(final_json_ocp));
    }
  };

  UWR_ACT.OpsValidate = function (response, final_json_validate) {   //For OPS Finalize quote validate
    var reqObj = {}; //  ----- reqobj is locally vriable declraed
    //global.reqObj = reqObj;   //commented by
    QNIAPP['body'] = [];
    QNIAPP.IN.Qt.appnum = QNIAPP.IN.Qt.qtdtls.appnum;
    QNIAPP.IN.Qt.qtdtls.qtstatus = "Finalized";
    QNIAPP.IN.Qt.qtstatus = "Finalized";
    QNIAPP.IN.Qt['instype'] = QNIAPP.IN.Qt.qtdtls['instype'];
    QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.qtdtls.premium;
    if (QNIAPP.IN['id'] == "UL8C2I" || QNIAPP.IN['id'] == "UL8C2R" || QNIAPP.IN['id'] == "PGNP") {
      QNIAPP.IN.Qt.qtdtls.sumAssured = QNIAPP.IN.Qt.qtdtls.sumAssured + '';
    }
    QNIAPP.COMM_CALC.setAdditionalInputs(QNIAPP.IN.Qt, QNIAPP.IN.Qt.lifeassurednm);
    //QNIAPP.UWR_ACT.storeINJsonArray(0);
    QNIAPP.COMM_CALC.prepareRequest(reqObj);

    $.each(reqObj.body.quote.quotedtls, function (key, value) {	//added for converting json number type to string
      if (typeof value == 'number') {
        reqObj.body.quote.quotedtls[key] = value.toString();
      }
    }
    );
    logger.error("quote response in node ---->" + reqObj.body.quote.quotedtls);
    reqObj.body.parentappnum = (QNIAPP.other.parentappnum) ? (QNIAPP.other.parentappnum) : "";
    reqObj.body.isDyn = (QNIAPP.other.isDyn !== '') ? (QNIAPP.other.isDyn) : "";
    reqObj.body.action = (QNIAPP.other.action) ? (QNIAPP.other.action) : "";
    reqObj.body.ismatrixflag = (QNIAPP.other.ismatrixflag) ? (QNIAPP.other.ismatrixflag) : "";
    //QNIAPP.COMM_NODE.createErrorResponseJson(); //--- error response will be handled through validate(I)
    final_json_validate = QNIAPP.COMM_NODE.createFinalizeResponseJson(reqObj, final_json_validate);
    if (final_json_validate.head.status && final_json_validate.head.status == "Success") {
      QNIAPP.COMM_NODE.sendInputsToStore(response, final_json_validate);
      logger.info("Final Response Json---->" + JSON.stringify(final_json_validate));

    }
  };

  UWR_ACT.processHealth_CDAC = function (response, final_json_uw) {
    index_storein = 0;
    QNIAPP.ERR = [];
    var quote_index_tostore = 0;
    var to_update = true;
    var todo_rateup = false;
    QNIAPP.IN.Qt.totpremium = 0;
    QNIAPP.IN.Qt.excessrate = 0;
    QNIAPP['body'] = [];
    QNIAPP['OP'] = [];
    QNIAPP.IN.Qt.lifeassured = [];
    QNIAPP.UWR_ACT.storeOriginalQuote();
    QNIAPP.OUT.touchpoint = QNIAPP.IN.Qt.qtdtls.touchpoint;
    //only single life products hence taking index as 0 for lifeassured
    var isaltered = QNIAPP.UWR_ACT.checkandSetAlteredInputs(0);
    if (QNIAPP.lifeassured[0].emr || QNIAPP.lifeassured[0].pma) {
      todo_rateup = true;
    }
    if (isaltered) { // when there are alterations applied
      QNIAPP.UWR_ACT.setBasicInputs();
      to_update = false;
    }
    var isvalid_base = eval("QNIAPP." + QNIAPP.IN.Qt.qtdtls.id + ".validate('I')"); //calling validate(I) for new  premium calculation
    var premium_to_apply = QNIAPP.OUT.premium; //updated premium after alteration
    if (!isvalid_base) { // if validate (I) returns false
      todo_rateup = false; //don't rateup
    }

    //checking emr and pma
    if (todo_rateup) {//in case of only rateup and validate(I) is true
      QNIAPP.IN.Qt['qtdtls']['rateup'] = {};
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB'] = {};
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'] = {};
      logger.error("Process Health in todo_rateup Error ---->" + QNIAPP.ERR);
      if (UWR_ACT.processEMRPMAForHealth_CDAC(premium_to_apply)) {
        logger.error("Process Health Rateup Error ---->" + QNIAPP.ERR);
        //logger.info("Protection After Rateup Error FINAL_JSON ---->"+final_json.head["errors"]);
        QNIAPP.IN.Qt.qtdtls.premium = parseInt(premium_to_apply) + parseInt(QNIAPP.IN.Qt.excessPremium[0]); //single life
        QNIAPP.OUT.partyid = QNIAPP.lifeassured[0].partyid;
        QNIAPP.UWR_ACT.resetOutxexcesspremium('H');
        QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
        QNIAPP.UWR_ACT.storeINJsonArray(quote_index_tostore);
        QNIAPP.UWR_ACT.storeOUTJsonArray(quote_index_tostore);
        quote_index_tostore = quote_index_tostore + 1; // if emr calculation successful then update quote_index_tostore flag to 1
      }
      if (QNIAPP.ERR && QNIAPP.ERR.length > 0) {
        isvalid_base = false;
      }
    }

    if (isaltered && isvalid_base && quote_index_tostore == 0) { //to generate a new quote for alterations alone
      QNIAPP.OUT.partyid = QNIAPP.lifeassured[0].partyid;
      QNIAPP.UWR_ACT.calcTotalPremium(0, 0, QNIAPP.IN.Qt.qtdtls.premium);
      QNIAPP.UWR_ACT.calcTaxes();
      QNIAPP.UWR_ACT.genJsonForQuoteInputs(to_update, 'Proposed_UW');
      QNIAPP.UWR_ACT.storeINJsonArray(quote_index_tostore);
      QNIAPP.UWR_ACT.storeOUTJsonArray(quote_index_tostore);
    }

    if (QNIAPP.ERR.length === 0) {
      QNIAPP.UWR_ACT.addLifeAssuredDetails(0);//assuming single life  inserting into qi_counter offer details table
    }

    if (QNIAPP.ERR.length == 0) {
      final_json_uw = QNIAPP.COMM_NODE.createFinalResponseJson(final_json_uw);
      if (final_json_uw.head.status && final_json_uw.head.status == "Success") {
        return QNIAPP.COMM_NODE.processNsendToService(response, "UW", final_json_uw, QNIAPP['OP']);
      }
    }
    else {
      return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0);
    }
  };

  UWR_ACT.processULIP = function (response, final_json_uw) {
    QNIAPP.IN.Qt['qtdtls']['rateup'] = {};
    QNIAPP['body'] = [];
    QNIAPP['OP'] = [];
    QNIAPP.IN.Qt.lifeassured = [];
    //only single life products hence taking index as 0 for lifeassured
    QNIAPP.UWR_ACT.storeOriginalQuote();
    QNIAPP.OUT.touchpoint = QNIAPP.IN.Qt.qtdtls.touchpoint;
    //QNIAPP.UWR_ACT.checkandSetAlteredInputs(0);
    var checkAlteredVal = false;
    if (QNIAPP.IN.id === QNIAPP.CONSTS.UNO) {
      if (QNIAPP.IN.Qt.qtdtls.jlflag && QNIAPP.IN.Qt.qtdtls.jlflag === 'Y') {
        checkAlteredVal = QNIAPP.UWR_ACT.checkandSetAlteredInputs_JL();
      } else {
        if (QNIAPP.lifeassured[0].pma != '' && parseInt(QNIAPP.lifeassured[0].pma) != 0) {
          checkAlteredVal = false;
          QNIAPP.ERR.push('PML is not applicable for HDFC Life Classic One');
        } else {
          checkAlteredVal = QNIAPP.UWR_ACT.checkandSetAlteredSAForULIP(0);
        }
      }
    } else if (QNIAPP.IN.id === QNIAPP.CONSTS.CIP) {
      checkAlteredVal = QNIAPP.UWR_ACT.checkandSetAlteredSAForUL8CIP();
    } else {
      checkAlteredVal = QNIAPP.UWR_ACT.checkandSetAlteredSAForULIP(0);
    }

    if (!checkAlteredVal) {
      return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0);// ---If error error response will be send in the response
      //return false;
    }
    //QNIAPP.UWR_ACT.checkandSetAlteredInputs(0);
    QNIAPP.UWR_ACT.processForMainBenefit(0);
    QNIAPP.UWR_ACT.processForRiders(0);
    QNIAPP.UWR_ACT.setBasicInputs();
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) { //For Rider decline scenario
      QNIAPP.UWR_ACT.deleteUlipRiders();  // checking for internal rider decline
      index_storein = QNIAPP.IN.Qt.qtdtls.rider.length - 1;
    }
    //generating new quote for the emr pma
    //if(QNIAPP.IN.Qt.qtdtls.id==="UL7YS1"){QNIAPP.IN.Qt.qtdtls.benefit = QNIAPP.IN.Qt.qtdtls.benefit+" Benefit";}
    QNIAPP.IN.override_flag = true;
    if (QNIAPP.lifeassured[0].rider && QNIAPP.lifeassured[0].rider.length > 0) {
      QNIAPP.UWR_ACT.checkAndSetSplRidersForUlip(); // For IB,CI EMR/PML/alterations
    }
    QNIAPP.OUT['prodname'] = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'name');
    var isvalid = eval("QNIAPP." + QNIAPP.IN.Qt.qtdtls.id + ".validate('I')");
    if (isvalid && QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && (QNIAPP.ERR.length == 0)) {
      QNIAPP.IN.Qt.rider = [];
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']) && QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
          if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "INAD") {
            QNIAPP.OUT.inad = true;
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "C4CI") {
            QNIAPP.OUT.c4ci = true;
          }
          QNIAPP.IN.Qt.rider[i] = [];
          var rider_premium_to_apply = 0;
          var todo_rateup_for_rider = false;
          is_valid_rider = eval("QNIAPP." + QNIAPP.IN.Qt.qtdtls.rider[i].name + ".validate('I')");
          if (is_valid_rider) {
            if (QNIAPP.IN.Qt.qtdtls['rider'][i].emr || QNIAPP.IN.Qt.qtdtls['rider'][i].pma) {
              rider_premium_to_apply = QNIAPP.IN.Qt.qtdtls['rider'][i].premium; //For IB and CI
              todo_rateup_for_rider = true;
            }
            if (todo_rateup_for_rider) {
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup'] = {};
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup']['MB'] = {};
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup']['MB']['yrwise'] = {};
              logger.error("Process ulip in todo_rateup for IB rider Error ---->" + QNIAPP.ERR);
              if (UWR_ACT.processEMRPMAForUlipSplRider(rider_premium_to_apply, i)) {
                QNIAPP.IN.Qt.qtdtls['rider'][i].premium = parseFloat(rider_premium_to_apply) + parseInt(QNIAPP.IN.Qt['rider'][i].excessPremium[0]); //single life
              }
            }
          }
          if (QNIAPP.ERR && QNIAPP.ERR.length > 0) {
            QNIAPP['body'] = [];
            isvalid = false;
            break;
          }
        }
      }
    }
    QNIAPP.OUT.IRR = 0;
    logger.error("Process ULIP Error ---->" + QNIAPP.ERR);
    if (isvalid && QNIAPP.ERR.length == 0) {
      //QNIAPP.IN.Qt.tottax = "";
      var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };
      QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.qtdtls.premium;
      QNIAPP.IN.Qt.qtdtls.ppt = QNIAPP.IN.Qt.qtdtls.ppt + "";
      QNIAPP.IN.Qt.ppt = QNIAPP.IN.Qt.qtdtls.ppt;
      var ridertottax = 0;
      var ridertotpremium = 0;
      if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
        QNIAPP.UWR_ACT.calcTaxes_UlipSplRider();
        for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
          if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N" && (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']))) {
            ridertottax = ridertottax + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].tax);
            ridertotpremium = ridertotpremium + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium);
          }
        }
      }
      QNIAPP.IN.Qt.tottax = parseInt(QNIAPP.IN.Qt.qtdtls.tottax) + (ridertottax);
      QNIAPP.IN.Qt.totpremium = parseInt(QNIAPP.IN.Qt.qtdtls.premium) + ridertotpremium + QNIAPP.IN.Qt.tottax;
      QNIAPP.IN.Qt.qtdtls.totPremium = QNIAPP.IN.Qt.totpremium;
      QNIAPP.IN.Qt.qtdtls.totpremium = QNIAPP.IN.Qt.totpremium;
      QNIAPP.IN.Qt.totannpremium = QNIAPP.IN.Qt.totpremium * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
      QNIAPP.IN.Qt.qtdtls.totAnnPremium = QNIAPP.IN.Qt.totannpremium;
      QNIAPP.OUT.totPremium = QNIAPP.IN.Qt.totpremium;
      QNIAPP.OUT.partyid = QNIAPP.lifeassured[0].partyid;
      QNIAPP.COMM_CALC.calcTotalPremium();
      QNIAPP.UWR_ACT.addLifeAssuredDetails_ulip(0);//assuming single life
      if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
        QNIAPP.UWR_ACT.resetoutxexcesspremiumforULIP();
        QNIAPP.UWR_ACT.deleteUlipSplRiders(); // checking for IB and CI decline
      }
      QNIAPP.COMM_CALC.calculateRiderPremiumandTax();
      QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
      if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
        for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
          if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) {
            QNIAPP.IN.Qt.premium = parseInt(QNIAPP.IN.Qt.premium) + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium);
          }
        }
      }
      QNIAPP.UWR_ACT.storeINJsonArray(0);
      QNIAPP.UWR_ACT.storeOUTJsonArray(0);
      final_json_uw = QNIAPP.COMM_NODE.createFinalResponseJson(final_json_uw);//  ----final response when isvalid is true
      if (final_json_uw.head.status && final_json_uw.head.status == "Success") {
        return QNIAPP.COMM_NODE.processNsendToService(response, "UW", final_json_uw, QNIAPP['OP']);
      }
    }
    else {
      return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0); // ----If isvalid is false then error response will be sent
    }
    //assuming no counter offer in this case
    /*QNIAPP.COMM_NODE.createErrorResponseJson(); // ---commented as error response will be handled in isvalid flg
            QNIAPP.COMM_NODE.createFinalResponseJson(); // ---commented
        return isvalid;*/
  };

  UWR_ACT.processTraditional = function (response, final_json_uw) {
    index_storein = 0;
    QNIAPP.ERR = [];
    var quote_index_tostore = 0;
    var to_update = true;
    var todo_rateup = false;
    var isvalid_base = false;
    var is_valid_rider = true;
    var rider_flg = false;
    var is_multiplecounteroffer_base = false;
    var counteroffer_success = true;
    var riderRateupFlag = true;
    //var isvalid_rider_altered = false; //Declared inside rider for loop
    //var todo_rateup_for_rider = false; // Declared inside rider for loop
    //var is_counteroffer_required = false;
    //var is_counteroffer_required_IBRider = false;
    QNIAPP.IN.Qt.totpremium = 0;
    QNIAPP.IN.Qt.excessrate = 0;
    QNIAPP['body'] = [];
    QNIAPP['OP'] = [];
    QNIAPP.IN.Qt.lifeassured = [];
    if (QNIAPP.IN.id == "SANCHP") {
      if (QNIAPP.IN.Qt.qtdtls.plan === "Guaranteed Income") {
        if (QNIAPP.IN.Qt.qtdtls.income_term && QNIAPP.IN.Qt.qtdtls.income_term != "") {
          QNIAPP.IN.Qt.qtdtls.income_term = QNIAPP.IN.Qt.qtdtls.income_term;
        } else {
          if (QNIAPP.IN.Qt.qtdtls.ppt == "10") {
            QNIAPP.IN.Qt.qtdtls.income_term = "10";
          } else if (QNIAPP.IN.Qt.qtdtls.ppt == "12") {
            QNIAPP.IN.Qt.qtdtls.income_term = "12";
          }
        }
      }
      if (QNIAPP.IN.Qt.qtdtls.plan === "Long Term Income") {
        if (QNIAPP.IN.Qt.qtdtls.income_term && QNIAPP.IN.Qt.qtdtls.income_term != "") {
          QNIAPP.IN.Qt.qtdtls.income_term = QNIAPP.IN.Qt.qtdtls.income_term;
        } else {
          if (QNIAPP.IN.Qt.qtdtls.ppt == "5" || QNIAPP.IN.Qt.qtdtls.ppt == "6") {
            QNIAPP.IN.Qt.qtdtls.income_term = "30";
          } else if (QNIAPP.IN.Qt.qtdtls.ppt == "10" || QNIAPP.IN.Qt.qtdtls.ppt == "12") {
            QNIAPP.IN.Qt.qtdtls.income_term = "25";
          }
        }

      }
    }
    QNIAPP.UWR_ACT.storeOriginalQuote();
    QNIAPP.OUT.touchpoint = QNIAPP.IN.Qt.qtdtls.touchpoint;
    if (QNIAPP.IN.Qt.qtdtls.incpbackDt && (QNIAPP.IN.Qt.qtdtls.incpDt != QNIAPP.IN.Qt.qtdtls.incpbackDt)) {
      QNIAPP.IN.Qt.qtdtls.incpbackDt = '';
    }
    QNIAPP.IN.Qt.qtdtls.qtbkDt = QNIAPP.IN.Qt.qtdtls.qtDt;

    if (QNIAPP.IN.Qt.qtdtls.incpbackDt && (QNIAPP.IN.Qt.qtdtls.qtbkDt == QNIAPP.IN.Qt.qtdtls.incpbackDt)) {
      QNIAPP.IN.Qt.qtdtls.incpbackDt = '';
    }


    //only single life products hence taking index as 0 for lifeassured
    var isaltered = QNIAPP.UWR_ACT.checkandSetAlteredInputs(0);
    if (QNIAPP.IN.id == "SANCHP" || QNIAPP.IN.id == "SUPH" || QNIAPP.IN.id == "ESIP" || QNIAPP.IN.id == "EIAP" || QNIAPP.IN.id == "EGII" || QNIAPP.IN.id == "ESRB" || QNIAPP.IN.id == "EAGP" || QNIAPP.IN.id == "ESJ") {
      var isreqaltered = false;
      if (QNIAPP.lifeassured[0].altsumassured && QNIAPP.lifeassured[0].altsumassured !== "") {
        QNIAPP.IN.Qt.qtdtls.sumAssured = QNIAPP.lifeassured[0].altsumassured;
        isreqaltered = true;
      }

      if (QNIAPP.lifeassured[0].altterm && QNIAPP.lifeassured[0].altterm !== "") {
        isreqaltered = true;
      }

      if (isreqaltered && QNIAPP.IN.id != "SUPH" && QNIAPP.IN.id != "ESIP" && QNIAPP.IN.id != "EIAP" && QNIAPP.IN.id != "EGII" && QNIAPP.IN.id != "ESRB" && QNIAPP.IN.id != "EAGP" && QNIAPP.IN.id != "ESJ") {
        QNIAPP['ERR'].push("Alterations not allowed for Sanchay Plus Product");
        return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0);
      }
      if (isreqaltered && QNIAPP.IN.id == "SUPH") {
        QNIAPP['ERR'].push("Alterations not allowed for Sanchay Fixed Maturity Plan Product");
        return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0);
      }
      if (isreqaltered && (QNIAPP.IN.id == "ESIP" || QNIAPP.IN.id == "EIAP" || QNIAPP.IN.id == "EGII" || QNIAPP.IN.id == "ESRB" || QNIAPP.IN.id == "EAGP" || QNIAPP.IN.id == "ESJ")) {
        QNIAPP['ERR'].push("Alterations not allowed for this Product");
        return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0);
      }

    }
    var premium_to_apply = QNIAPP.IN.Qt.qtdtls.premium;
    if (QNIAPP.lifeassured[0].emr || QNIAPP.lifeassured[0].pma) {
      todo_rateup = true;
    }
    if (QNIAPP.lifeassured[1] && (QNIAPP.lifeassured[1].emr || QNIAPP.lifeassured[1].pma)) {
      todo_rateup = true;
    }
    if (isaltered && QNIAPP.IN.id === 'SANPAR') {
      QNIAPP.ERR.push('Sum Assured and term alteration not allowed for HDFC Life Sanchay Par Advantage');
      isaltered = false;
      todo_rateup = false;
      isvalid_base = false;
      return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0);
    }
    if (QNIAPP.lifeassured[0].rider && QNIAPP.lifeassured[0].rider.length > 0) {
      for (var i = 0; i < QNIAPP.lifeassured[0].rider.length; i++) {
        if (QNIAPP.lifeassured[0].rider[i].name == "RIDER_CRITICAL_ILLNESS_4" || QNIAPP.lifeassured[0].rider[i].name == "RIDER_CRITICAL_ILLNESS_25" || QNIAPP.lifeassured[0].rider[i].name == "RIDER_TERM" || QNIAPP.lifeassured[0].rider[i].name == "RIDER_ACCIDENTAL_DEATH_DISABILITY") {
          if (QNIAPP.lifeassured[0].rider[i].emr != "" || QNIAPP.lifeassured[0].rider[i].pma != "" || QNIAPP.lifeassured[0].rider[i].altsumassured != "" || QNIAPP.lifeassured[0].rider[i].altterm != "") {
            riderRateupFlag = false;
          }
        }
      }
      if (riderRateupFlag == true) {
        QNIAPP.UWR_ACT.checkAndSetRidersForC2P3D();
      }
    }
    /*		 if ((QNIAPP.IN.id == "SANCHP" || QNIAPP.IN.id == "SANPAR") && todo_rateup && QNIAPP.lifeassured[0].adjpremium && QNIAPP.lifeassured[0].adjpremium == "Y"){
           QNIAPP.IN.Qt.qtdtls.sumAssured = '0';
           premium_to_apply = UWR_ACT.calcAdjustPremium();
           QNIAPP.IN.Qt.qtdtls.premium = premium_to_apply;
           QNIAPP.IN.Qt.qtdtls.lifeassured[0].premium = premium_to_apply + "";
    
         }*/
    if (QNIAPP.IN.chnlptnr == "Defence" && (QNIAPP.IN.id == "SANCHP" || QNIAPP.IN.id == "SANPAR") && QNIAPP.IN.Qt.qtdtls.pmaFlag && QNIAPP.IN.Qt.qtdtls.pmaFlag == "Y") {
      QNIAPP.IN.Qt.qtdtls.pmaFlag = "N";
      QNIAPP.IN.Qt.qtdtls.sumAssured = '0';
      premium_to_apply = QNIAPP.IN.Qt.qtdtls.adjusPremium;
      QNIAPP.IN.Qt.qtdtls.premium = premium_to_apply;
    }
    isvalid_base = eval("QNIAPP." + QNIAPP.IN.Qt.qtdtls.id + ".validate('I')");
    if (isaltered) { // when there are alterations applied
      QNIAPP.UWR_ACT.setBasicInputs();
      logger.error("Process Traditional Error Alteration---->" + QNIAPP.ERR);
      //logger.info("Protection After Alteration Error FINAL_JSON ---->"+final_json.head["errors"]);
      if (isvalid_base) {
        premium_to_apply = QNIAPP.OUT.premium;
      }
      to_update = false;
    }
    if (isaltered && !isvalid_base) { //alteration fails
      todo_rateup = false; //don't rateup
    }
    if (!isvalid_base) {
      todo_rateup = false;
    }

    //checking emr and pma
    if (todo_rateup) {//in case of only rateup or if alterations are success
      QNIAPP.IN.Qt['qtdtls']['rateup'] = {};
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB'] = {};
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'] = {};
      //var is_valid_new = eval("QNIAPP."+QNIAPP.IN.Qt.qtdtls.id+".validate('I')");
      logger.error("Process Traditional in todo_rateup Error ---->" + QNIAPP.ERR);
      if (QNIAPP.IN.id == "SANCHP" || QNIAPP.IN.id == "SANPAR" || QNIAPP.IN.id == "SUPH") {
        QNIAPP.IN.Qt.qtdtls.lifeassured[0].sumassured = QNIAPP.IN.Qt.qtdtls.sumAssured + "";
      }
      //logger.info("Traditional in todo_rateup Error FINAL_JSON ---->"+final_json.head["errors"]);
      if (UWR_ACT.processEMRPMAForTraditional(premium_to_apply)) {
        //is_counteroffer_required = (QNIAPP.IN.Qt.excessPremium[0])?true:false; //single life
        //generating the new quote with the rateup
        QNIAPP.IN.Qt.qtdtls.premium = parseInt(premium_to_apply) + parseInt(QNIAPP.IN.Qt.excessPremium[0]) + ((QNIAPP.IN.Qt.excessPremium[1]) ? parseInt(QNIAPP.IN.Qt.excessPremium[1]) : 0); //single life
        if (QNIAPP.IN.Qt.qtdtls.premium > QNIAPP.upsell['Q1']['IN'].premium) {
          is_multiplecounteroffer_base = true;
        }
        else {
          is_multiplecounteroffer_base = false;
          counteroffer_success = false;
        }
        QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.qtdtls.premium;
        QNIAPP.UWR_ACT.resetOutxexcesspremium('T');
        logger.error("Process Tradition Rateup Error ---->" + QNIAPP.ERR);
        //logger.info("Tradition After Rateup Error FINAL_JSON ---->"+final_json.head["errors"]);
        QNIAPP.UWR_ACT.resetOutxexcessbkdtpremium();
        if (isvalid_base) {//success
          QNIAPP.OUT.partyid = QNIAPP.lifeassured[0].partyid;
          QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
          QNIAPP.UWR_ACT.addLifeAssuredDetails(0);//assuming single life
          QNIAPP.UWR_ACT.storeINJsonArray(quote_index_tostore);
          QNIAPP.UWR_ACT.storeOUTJsonArray(quote_index_tostore);
          //quote_index_tostore = quote_index_tostore +1;
        }
        else {
          is_multiplecounteroffer_base = false; // to be generated only when the quote with emr and/or pma is valid
        }
      }
      if (QNIAPP.ERR && QNIAPP.ERR.length > 0) {
        is_multiplecounteroffer_base = false;
        isvalid_base = false;
      }
    }
    if (todo_rateup) {
      quote_index_tostore = quote_index_tostore + 1;
    }
    if (isvalid_base && quote_index_tostore == 0) {
      QNIAPP.OUT.partyid = QNIAPP.lifeassured[0].partyid;
      QNIAPP.UWR_ACT.calcTotalPremium(0, 0, QNIAPP.IN.Qt.qtdtls.premium);
      QNIAPP.UWR_ACT.calcTaxes();
      QNIAPP.UWR_ACT.genJsonForQuoteInputs(to_update, 'Proposed_UW');
      QNIAPP.UWR_ACT.addLifeAssuredDetails(0);
      QNIAPP.UWR_ACT.storeINJsonArray(quote_index_tostore);
      QNIAPP.UWR_ACT.storeOUTJsonArray(quote_index_tostore);
    }


    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && QNIAPP.ERR.length == 0) {
      QNIAPP.IN.Qt.rider = [];
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
          QNIAPP.IN.Qt.rider[i] = [];
          var rider_premium_to_apply = 0;
          var todo_rateup_for_rider = false;
          is_valid_rider = eval("QNIAPP." + QNIAPP.IN.Qt.qtdtls.rider[i].name + ".validate('I')");
          if (riderRateupFlag == false) {
            is_valid_rider = false;
            QNIAPP.ERR.push("Rateup is not allowed for the selected riders.");
          }
          if (is_valid_rider) {
            if (QNIAPP.IN.Qt.qtdtls['rider'][i].emr || QNIAPP.IN.Qt.qtdtls['rider'][i].pma) {
              rider_premium_to_apply = QNIAPP.IN.Qt.qtdtls['rider'][i].premium; //For IB CI and PPR
              todo_rateup_for_rider = true;
            }
            if (todo_rateup_for_rider) {
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup'] = {};
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup']['MB'] = {};
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup']['MB']['yrwise'] = {};
              logger.error("Process traditional in todo_rateup for IB rider Error ---->" + QNIAPP.ERR);
              if (UWR_ACT.processEMRPMAForIB_rider(rider_premium_to_apply, i)) {
                QNIAPP.IN.Qt.qtdtls['rider'][i].premium = parseInt(rider_premium_to_apply) + parseInt(QNIAPP.IN.Qt['rider'][i].excessPremium[0]); //single life
              }
            }
          }
          if (QNIAPP.ERR && QNIAPP.ERR.length > 0) {
            QNIAPP['body'] = [];
            break;
          }
        }
      }

    }
    if (QNIAPP.ERR.length == 0 && QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && is_valid_rider) {
      QNIAPP.UWR_ACT.calcTaxes_ibcippr_rider();
      QNIAPP.UWR_ACT.resetOutxexcesspremium_ibcippr();
      QNIAPP.UWR_ACT.addLifeAssuredDetails(0);
      rider_flg = QNIAPP.UWR_ACT.deleteC2P3DRiders(); //for resetting the rider obj after checking decline condition
      QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
          QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.premium + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium);
        }
      }
      index_storein = QNIAPP.IN.Qt.qtdtls.rider.length - 1;
    }

    if (rider_flg) { //If rider is present then only without any error
      QNIAPP.UWR_ACT.storeINJsonArray(0); //After rider obj has been reset successfully without any error.
      QNIAPP.UWR_ACT.storeOUTJsonArray(0);

    }
    if (QNIAPP.IN.id == 'SANCH' || QNIAPP.IN.id == 'SANCHE' || QNIAPP.IN.id == 'SANCHV9' || QNIAPP.IN.id == 'SANCHV9E') {
      LOCAL_MAX_PREM_PERCENT_ALL_RIDERS = 0.3;
      var total_riders_prem = 0;
      base_prem = QNIAPP.IN.Qt.qtdtls.premium;
      if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length == 2) {
        total_riders_prem = parseInt(QNIAPP.IN.Qt.qtdtls.rider[0].premium) + parseInt(QNIAPP.IN.Qt.qtdtls.rider[1].premium);
      }
      if (parseInt(total_riders_prem) > (parseFloat(LOCAL_MAX_PREM_PERCENT_ALL_RIDERS) * parseInt(base_prem))) {
        QNIAPP['ERR'].push('Calculated total rider premium is greater than 30% of the base premium ' + base_prem);
        return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0); // ---Error response will be returned in this scenario
      }
    }

    if (QNIAPP.ERR && QNIAPP.ERR.length > 0) {
      QNIAPP['body'] = [];
    }
    if (QNIAPP.PRODUCT_DETAILS.checkMultipleCounterProdList(QNIAPP.IN.id) && QNIAPP.IN.chnlptnr != "Defence" && is_multiplecounteroffer_base && QNIAPP.ERR.length == 0 && QNIAPP.IN.illustrationGeneration !== 1) {//to be generated only in rateup cases or alteration + rateup
      var counter_off_index = 0;
      //QNIAPP TO BE SET WITH ORIGINAL QUOTE DETAILS FOR THE COUNTEROFFER
      QNIAPP.UWR_ACT.resetQuoteInputs();
      QNIAPP.OUT = {};
      QNIAPP.ERR = [];
      QNIAPP.IN.Qt.lifeassured = [];
      counter_off_index = 1;
      if (QNIAPP.lifeassured[0].rider && QNIAPP.lifeassured[0].rider.length > 0) {
        QNIAPP.UWR_ACT.checkAndSetRidersForC2P3D();
      }
      counteroffer_success = QNIAPP.UWR_ACT.generateMultipleCounterOfferForTraditional(counter_off_index);
    }
    if (QNIAPP.PRODUCT_DETAILS.checkMultipleCounterProdList(QNIAPP.IN.id) && QNIAPP.IN.chnlptnr != "Defence" && QNIAPP.ERR.length == 0 && QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && counteroffer_success && QNIAPP.IN.illustrationGeneration !== 1) {
      var counter_off_index = 1;
      if (!is_multiplecounteroffer_base) {
        QNIAPP.UWR_ACT.resetQuoteInputs();
        QNIAPP.IN.Qt.lifeassured = [];
        QNIAPP.OUT = {};
        var isaltered = QNIAPP.UWR_ACT.checkandSetAlteredInputs(0);
        QNIAPP.UWR_ACT.checkAndSetRidersForC2P3D();
      }
      QNIAPP.ERR = [];
      QNIAPP.UWR_ACT.generateMultipleCounterOfferForRider(counter_off_index, is_multiplecounteroffer_base);
    }
    if (QNIAPP.body.length != 0) {
      QNIAPP.ERR = [];
    }

    //QNIAPP.COMM_NODE.createErrorResponseJson();
    //QNIAPP.COMM_NODE.createFinalResponseJson();

    if (QNIAPP.ERR.length == 0) {
      final_json_uw = QNIAPP.COMM_NODE.createFinalResponseJson(final_json_uw); // --Final response json to be created when error is zero

      if (final_json_uw.head.status && final_json_uw.head.status == "Success") {
        return QNIAPP.COMM_NODE.processNsendToService(response, "UW", final_json_uw, QNIAPP['OP']);  // --Final response to be send
      }
    }
    else {
      return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0); // ---Error response to be send when there is error
    }

    /*		if(final_json.head.status && final_json.head.status == "Success"){  //--- Commented
          return true;
        }
        return false;*/
  };

  UWR_ACT.processProtection = function (response, final_json_uw) {
    index_storein = 0;
    QNIAPP.ERR = [];
    var isvalid_base = false;
    var quote_index_tostore = 0;
    var to_update = true;
    var todo_rateup = false;
    var is_valid_rider = true;
    var rider_flg = false;
    var counteroffer_success = true;
    var riderRateupFlag = true;
    QNIAPP.IN.Qt.totpremium = 0;
    //var is_counteroffer_required = false;
    QNIAPP.IN.Qt.excessrate = 0;
    QNIAPP['body'] = [];
    QNIAPP['OP'] = [];
    var is_multiplecounteroffer_base = false;
    QNIAPP.IN.Qt.lifeassured = [];
    QNIAPP.UWR_ACT.storeOriginalQuote();
    QNIAPP.OUT.touchpoint = QNIAPP.IN.Qt.qtdtls.touchpoint;
    if (QNIAPP.IN.Qt.qtdtls.incpbackDt && (QNIAPP.IN.Qt.qtdtls.incpDt != QNIAPP.IN.Qt.qtdtls.incpbackDt)) {
      QNIAPP.IN.Qt.qtdtls.incpbackDt = '';
    }
    QNIAPP.IN.Qt.qtdtls.qtbkDt = QNIAPP.IN.Qt.qtdtls.qtDt;

    if (QNIAPP.IN.Qt.qtdtls.incpbackDt && (QNIAPP.IN.Qt.qtdtls.qtbkDt == QNIAPP.IN.Qt.qtdtls.incpbackDt)) {
      QNIAPP.IN.Qt.qtdtls.incpbackDt = '';
    }
    //only single life products hence taking index as 0 for lifeassured

    var isaltered = QNIAPP.UWR_ACT.checkandSetAlteredInputs(0);
    var premium_to_apply = QNIAPP.IN.Qt.qtdtls.premium;
    if (QNIAPP.lifeassured[0].emr || QNIAPP.lifeassured[0].pma) {
      todo_rateup = true;
    }
    if (QNIAPP.lifeassured[0].rider && QNIAPP.lifeassured[0].rider.length > 0) {
      for (var i = 0; i < QNIAPP.lifeassured[0].rider.length; i++) {
        if (QNIAPP.lifeassured[0].rider[i].name == "RIDER_CRITICAL_ILLNESS_4" || QNIAPP.lifeassured[0].rider[i].name == "RIDER_CRITICAL_ILLNESS_25" || QNIAPP.lifeassured[0].rider[i].name == "RIDER_TERM" || QNIAPP.lifeassured[0].rider[i].name == "RIDER_ACCIDENTAL_DEATH_DISABILITY") {
          if (QNIAPP.lifeassured[0].rider[i].emr != "" || QNIAPP.lifeassured[0].rider[i].pma != "" || QNIAPP.lifeassured[0].rider[i].altsumassured != "" || QNIAPP.lifeassured[0].rider[i].altterm != "") {
            riderRateupFlag = false;
          }
        }
      }
      if (riderRateupFlag == true) {
        QNIAPP.UWR_ACT.checkAndSetRidersForC2P3D();
        if ((QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") && QNIAPP.ERR && QNIAPP.ERR.length > 0) {
          return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0);

        }
      }

    }
    isvalid_base = (QNIAPP.IN.id == "C2PP") ? eval("QNIAPP.C2PP.validate('I')") : eval("QNIAPP." + QNIAPP.IN.id + ".validate('I')");
    if (isaltered && isvalid_base) { // when there are alterations applied for base or el
      QNIAPP.UWR_ACT.setBasicInputs();
      premium_to_apply = QNIAPP.OUT.premium;
      to_update = false;
    }
    if (isaltered && !isvalid_base) { //alteration fails
      todo_rateup = false; //don't rateup
    }
    if (!isvalid_base) {
      todo_rateup = false;
    }
    if (QNIAPP.lifeassured[0].alttobaccostatus && QNIAPP.lifeassured[0].alttobaccostatus == "Y" && premium_to_apply > QNIAPP.upsell['Q1']['IN'].premium) {
      is_multiplecounteroffer_base = true;
    }
    //checking emr and pma
    if (todo_rateup) {//in case of only rateup or if alterations are success
      QNIAPP.IN.Qt['qtdtls']['rateup'] = {};
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB'] = {};
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'] = {};
      logger.error("Process Protection in todo_rateup Error ---->" + QNIAPP.ERR);
      //logger.info("Protection in todo_rateup Error FINAL_JSON ---->"+final_json.head["errors"]);
      if (UWR_ACT.processEMRPMAForProtection(premium_to_apply)) {
        //is_counteroffer_required = (QNIAPP.IN.Qt.excessPremium[0])?true:false; //single life
        QNIAPP.IN.Qt.qtdtls.premium = parseInt(premium_to_apply) + parseInt(QNIAPP.IN.Qt.excessPremium[0]); //single life
        if (QNIAPP.IN.Qt.qtdtls.premium > QNIAPP.upsell['Q1']['IN'].premium) { //to generate multiple counter offer
          is_multiplecounteroffer_base = true;
        }
        else {
          is_multiplecounteroffer_base = false;
          counteroffer_success = false; //not to generate multiple counter offer
        }
        QNIAPP.UWR_ACT.resetOutxexcesspremium('P');
        logger.error("Process Protection Rateup Error ---->" + QNIAPP.ERR);
        //logger.info("Protection After Rateup Error FINAL_JSON ---->"+final_json.head["errors"]);
        QNIAPP.UWR_ACT.resetOutxexcessbkdtpremium();
        if (isvalid_base) {//success
          QNIAPP.OUT.partyid = QNIAPP.lifeassured[0].partyid;
          QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
          QNIAPP.UWR_ACT.addLifeAssuredDetails(0);//assuming single life
          QNIAPP.UWR_ACT.storeINJsonArray(quote_index_tostore);
          QNIAPP.UWR_ACT.storeOUTJsonArray(quote_index_tostore);
        }
        else {
          is_multiplecounteroffer_base = false; // to be generated only when the quote with emr and/or pma is valid
        }
      }
      if (QNIAPP.ERR && QNIAPP.ERR.length > 0) {
        is_multiplecounteroffer_base = false;
        isvalid_altered = false;
      }
    }
    if (todo_rateup) {
      quote_index_tostore = quote_index_tostore + 1;
    }

    if (isvalid_base && quote_index_tostore == 0) { //to generate a new quote for alterations alone
      QNIAPP.OUT.partyid = QNIAPP.lifeassured[0].partyid;
      QNIAPP.UWR_ACT.calcTotalPremium(0, 0, QNIAPP.IN.Qt.qtdtls.premium);
      QNIAPP.UWR_ACT.calcTaxes();
      QNIAPP.UWR_ACT.genJsonForQuoteInputs(to_update, 'Proposed_UW');
      QNIAPP.UWR_ACT.addLifeAssuredDetails(0);
      QNIAPP.UWR_ACT.storeINJsonArray(quote_index_tostore);
      QNIAPP.UWR_ACT.storeOUTJsonArray(quote_index_tostore);
    }
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && QNIAPP.ERR.length == 0) {
      QNIAPP.IN.Qt.rider = [];
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
          QNIAPP.IN.Qt.rider[i] = [];
          var rider_premium_to_apply = 0;
          var todo_rateup_for_rider = false;
          if (QNIAPP.IN.Qt.qtdtls.rider[i].name != "EP") is_valid_rider = eval("QNIAPP." + QNIAPP.IN.Qt.qtdtls.rider[i].name + ".validate('I')");
          //if(QNIAPP.IN.Qt.qtdtls.rider[i].name =="EP") QNIAPP.UWR_ACT.checkAndSetRidersForC2P3D();
          if (riderRateupFlag == false) {
            is_valid_rider = false;
            QNIAPP.ERR.push("Rateup is not allowed for the selected riders.");
          }
          if (is_valid_rider) {
            if (QNIAPP.IN.Qt.qtdtls['rider'][i].emr || QNIAPP.IN.Qt.qtdtls['rider'][i].pma) {
              rider_premium_to_apply = QNIAPP.IN.Qt.qtdtls['rider'][i].premium; //For IB CI and PPR
              todo_rateup_for_rider = true;
            }
            if (todo_rateup_for_rider) {
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup'] = {};
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup']['MB'] = {};
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup']['MB']['yrwise'] = {};
              logger.error("Process Protection in todo_rateup for IB rider Error ---->" + QNIAPP.ERR);
              if (UWR_ACT.processEMRPMAForIB_rider(rider_premium_to_apply, i)) {
                QNIAPP.IN.Qt.qtdtls['rider'][i].premium = parseInt(rider_premium_to_apply) + parseInt(QNIAPP.IN.Qt['rider'][i].excessPremium[0]); //single life
              }
            }

          }
          if (QNIAPP.ERR && QNIAPP.ERR.length > 0) {
            QNIAPP['body'] = [];
            break;
          }
        }
      }
    }
    if (QNIAPP.ERR.length == 0 && QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && is_valid_rider) {
      QNIAPP.UWR_ACT.calcTaxes_ibcippr_rider();
      if (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE" || QNIAPP.IN.id == "SARJB" || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE" || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE" || QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
        QNIAPP.UWR_ACT.resetOutxexcesspremium_ibcippr();
      }
      QNIAPP.UWR_ACT.addLifeAssuredDetails(0);
      rider_flg = QNIAPP.UWR_ACT.deleteC2P3DRiders(); //for resetting the rider obj after checking decline condition
      QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
          QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.premium + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium);
        }
      }
      index_storein = QNIAPP.IN.Qt.qtdtls.rider.length - 1;
    }

    if (rider_flg) { //If rider is present then only without any error
      QNIAPP.UWR_ACT.storeINJsonArray(0); //After rider obj has been reset successfully without any error.
      QNIAPP.UWR_ACT.storeOUTJsonArray(0);
    }
    if (QNIAPP.ERR && QNIAPP.ERR.length > 0) {
      QNIAPP['body'] = [];
    }
    if (!QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.combID) && (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PS") && is_multiplecounteroffer_base && QNIAPP.ERR.length == 0 && QNIAPP.IN.illustrationGeneration !== 1) {//to be generated only in rateup cases or alteration + rateup
      var counter_off_index = 0;
      //QNIAPP TO BE SET WITH ORIGINAL QUOTE DETAILS FOR THE COUNTEROFFER
      QNIAPP.UWR_ACT.resetQuoteInputs();
      QNIAPP.OUT = {};
      QNIAPP.ERR = [];
      QNIAPP.IN.Qt.lifeassured = [];
      counter_off_index = 1;
      if (QNIAPP.lifeassured[0].rider && QNIAPP.lifeassured[0].rider.length > 0) {
        QNIAPP.UWR_ACT.checkAndSetRidersForC2P3D();
      }
      counteroffer_success = QNIAPP.UWR_ACT.generateMultipleCounterOfferForProtection(counter_off_index);
    }
    if (!QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.combID) && (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PS") && QNIAPP.ERR.length == 0 && QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && counteroffer_success && QNIAPP.IN.illustrationGeneration !== 1) {
      var counter_off_index = 1;
      if (!is_multiplecounteroffer_base) {
        QNIAPP.UWR_ACT.resetQuoteInputs();
        QNIAPP.IN.Qt.lifeassured = [];
        QNIAPP.OUT = {};
        var isaltered = QNIAPP.UWR_ACT.checkandSetAlteredInputs(0);
        QNIAPP.UWR_ACT.checkAndSetRidersForC2P3D();
      }
      QNIAPP.ERR = [];
      QNIAPP.UWR_ACT.generateMultipleCounterOfferForRider(counter_off_index, is_multiplecounteroffer_base);

    }
    if (QNIAPP.body.length != 0) {
      QNIAPP.ERR = [];
    }
    if (QNIAPP.ERR.length == 0) {
      if (!QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.combID)) {
        final_json_uw = QNIAPP.COMM_NODE.createFinalResponseJson(final_json_uw);

        if (final_json_uw.head.status && final_json_uw.head.status == "Success") {
          return QNIAPP.COMM_NODE.processNsendToService(response, "UW", final_json_uw, QNIAPP['OP']);
        }
      }
    }
    else {
      return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0);
    }
    //QNIAPP.COMM_NODE.createErrorResponseJson();
    //QNIAPP.COMM_NODE.createFinalResponseJson();

    /*if(final_json.head.status && final_json.head.status == "Success"){ // ---Commented
      return true;
    }
    return false;*/
  };

  UWR_ACT.processHealth = function (response, final_json_uw) {
    //var isvalid = false;
    //var to_update = true;
    QNIAPP['body'] = [];
    QNIAPP['OP'] = [];
    QNIAPP.IN.Qt.lifeassured = [];
    QNIAPP.IN.Qt.excessrate = 0;
    //no differential sum assured at life level for the current health product
    //checking if dependents have been reduced
    QNIAPP.OUT.touchpoint = QNIAPP.IN.Qt.qtdtls.touchpoint;
    QNIAPP.UWR_ACT.setPartyidDeps();
    QNIAPP.UWR_ACT.checkAndSetDependentsNo();
    //checking emr and pma
    var is_valid_new = eval("QNIAPP." + QNIAPP.IN.Qt.qtdtls.id + ".validate('I')");
    var to_rateup = QNIAPP.UWR_ACT.processEMRPMAForHealth();
    //generating the new quote with the modified deps
    if (is_valid_new && to_rateup) {
      QNIAPP.UWR_ACT.calcTotalPremiumForHealth();
      QNIAPP.UWR_ACT.calcTaxesForHealth();
      QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
      QNIAPP.IN.Qt.qtdtls.lifeassured = QNIAPP.IN.Qt.qtdtls.deps;
      QNIAPP.IN.Qt.lifeassured = QNIAPP.IN.Qt.qtdtls.deps;
      QNIAPP.UWR_ACT.resetOutobjectHealth();
      QNIAPP.UWR_ACT.storeINJsonArray(0);
      QNIAPP.UWR_ACT.storeOUTJsonArray(0);
      final_json_uw = QNIAPP.COMM_NODE.createFinalResponseJson(final_json_uw);
      if (final_json_uw.head.status && final_json_uw.head.status == "Success") {
        return QNIAPP.COMM_NODE.processNsendToService(response, "UW", final_json_uw, QNIAPP['OP']);

      }
    }

    //QNIAPP.COMM_NODE.createErrorResponseJson();
    //QNIAPP.COMM_NODE.createFinalResponseJson();
    //no counter offer in this case as fixed list of sum assured
    else {
      return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0);
    }
    /*if(final_json.head.status && final_json.head.status == "Success"){ // --Commented
      return true;
    }
    return false;*/
  };

  UWR_ACT.checkAndSetTopupForC2P3DP = function () {
    if ((QNIAPP.lifeassured[0].altsumassured && (QNIAPP.lifeassured[0].altsumassured !== "") &&
      (QNIAPP.lifeassured[0].altsumassured != QNIAPP.IN.Qt.qtdtls.sumAssured)) ||
      (QNIAPP.lifeassured[0].emr && QNIAPP.lifeassured[0].emr != "") ||
      (QNIAPP.lifeassured[0].pma && QNIAPP.lifeassured[0].pma != "")) {
      return true;
    }
    if (QNIAPP.lifeassured[0].rider && QNIAPP.lifeassured[0].rider.length > 0) {
      for (var j = 0; j < QNIAPP.IN.Qt.qtdtls.rider.length; j++) {
        if (!(QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[j]['name']))) {
          for (var i = 0; i < QNIAPP.lifeassured[0].rider.length; i++) {
            if (QNIAPP.lifeassured[0].rider[i]['name'] == QNIAPP.IN.Qt.qtdtls.rider[j]['name_cd']) {
              if ((QNIAPP.lifeassured[0].rider[i].altsumassured && (QNIAPP.lifeassured[0].rider[i].altsumassured != "") &&
                QNIAPP.lifeassured[0].rider[i].altsumassured != QNIAPP.IN.Qt.qtdtls.rider[j].sumAssured) ||
                (QNIAPP.lifeassured[0].rider[i].emr && QNIAPP.lifeassured[0].rider[i].emr != "") ||
                (QNIAPP.lifeassured[0].rider[i].pma && QNIAPP.lifeassured[0].rider[i].pma != "")) {
                return true;
              }
            }
          }
        }
      }
    }
    return false;
  };

  UWR_ACT.processProtection_C2P3DP = function (response, final_json_uw) {
    QNIAPP.ERR = [];
    var isvalid_base = false;
    var quote_index_tostore = 0;
    var to_update = true;
    var todo_rateup = false;
    QNIAPP.IN.Qt.totpremium = 0;
    //var is_counteroffer_required = false;
    QNIAPP.IN.Qt.excessrate = 0;
    var is_valid_rider = true;
    var rider_flg = false;
    QNIAPP['body'] = [];
    QNIAPP['OP'] = [];
    QNIAPP.IN.Qt.lifeassured = [];
    QNIAPP.UWR_ACT.storeOriginalQuote();
    QNIAPP.OUT.touchpoint = QNIAPP.IN.Qt.qtdtls.touchpoint;
    if (QNIAPP.UWR_ACT.checkAndSetTopupForC2P3DP()) {
      QNIAPP.IN.Qt.qtdtls.topupFlag = "N";
      QNIAPP.IN.Qt.qtdtls.topupPercentage = "";
    }
    var isaltered = QNIAPP.UWR_ACT.checkandSetAlteredInputs_C2P3DP(0);
    if (QNIAPP.lifeassured[0].emr || QNIAPP.lifeassured[0].pma) {
      todo_rateup = true;
    }
    if (QNIAPP.IN.Qt.qtdtls.uwdiscflg && (isaltered || todo_rateup)) {
      QNIAPP.IN.Qt.qtdtls.uwdiscflg = "N";
    }
    if (QNIAPP.lifeassured[0].rider && QNIAPP.lifeassured[0].rider.length > 0) {
      QNIAPP.UWR_ACT.checkAndSetRidersForC2P3D();
    }
    if (QNIAPP.IN.Qt.qtdtls.uwdiscflg && QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if ((QNIAPP.IN.Qt.qtdtls.rider[i].name == QNIAPP.CONSTS.EL || QNIAPP.IN.Qt.qtdtls.rider[i].name == QNIAPP.CONSTS.ELI)) {
          if ((QNIAPP.IN.Qt.qtdtls.rider[i].emr && QNIAPP.IN.Qt.qtdtls.rider[i].emr != "") || (QNIAPP.IN.Qt.qtdtls.rider[i].pma && QNIAPP.IN.Qt.qtdtls.rider[i].pma != "")) {
            QNIAPP.IN.Qt.qtdtls.uwdiscflg = "N";
          }
        }
      }
    }

    isvalid_base = eval("QNIAPP.C2P3DP.validate('I')");
    var premium_to_apply = QNIAPP.IN.Qt.qtdtls.premium;
    if (isaltered && isvalid_base) { // when there are alterations applied for base or el
      QNIAPP.UWR_ACT.setBasicInputs();
      //isvalid_altered = eval("QNIAPP.C2P3DP.validate('I')");
      //logger.error("Process Protection Alteration Error ---->"+QNIAPP.ERR);
      //logger.info("Protection After Alteration Error FINAL_JSON ---->"+final_json.head["errors"]);
      premium_to_apply = QNIAPP.OUT.premium;
      to_update = false;
    }
    if (isaltered && !isvalid_base) { //alteration fails
      todo_rateup = false; //don't rateup
    }
    //checking emr and pma
    if (todo_rateup) {//in case of only rateup or if alterations are success
      QNIAPP.IN.Qt['qtdtls']['rateup'] = {};
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB'] = {};
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'] = {};
      //var is_valid_new = eval("QNIAPP.C2P3DP.validate('I')");
      logger.error("Process Protection in todo_rateup Error ---->" + QNIAPP.ERR);
      //logger.info("Protection in todo_rateup Error FINAL_JSON ---->"+final_json.head["errors"]);
      if (todo_rateup) {
        if (UWR_ACT.processEMRPMAForProtection(premium_to_apply)) {
          is_counteroffer_required = (QNIAPP.IN.Qt.excessPremium[0]) ? true : false; //single life
          QNIAPP.IN.Qt.qtdtls.premium = parseFloat(premium_to_apply) + parseInt(QNIAPP.IN.Qt.excessPremium[0]); //single life
        }
      }
      if (isvalid_base) {//success
        QNIAPP.OUT.partyid = QNIAPP.lifeassured[0].partyid;
        QNIAPP.UWR_ACT.calcTaxes_C2P3DP();
        QNIAPP.UWR_ACT.resetOutxexcesspremium_C2P3DP();
        QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
        //QNIAPP.IN.Qt.premium = Math.round(parseFloat(QNIAPP.IN.Qt.qtdtls.premium));
        QNIAPP.UWR_ACT.addLifeAssuredDetails_C2P3DP(0);
        QNIAPP.UWR_ACT.storeINJsonArray(quote_index_tostore);
        QNIAPP.UWR_ACT.storeOUTJsonArray(quote_index_tostore);
      }
      else {
        is_counteroffer_required = false; // to be generated only when the quote with emr and/or pma is valid
      }
      if (QNIAPP.ERR && QNIAPP.ERR.length > 0) {
        is_counteroffer_required = false;
        isvalid_base = false;
      }
    }
    if (todo_rateup) {
      quote_index_tostore = quote_index_tostore + 1;
    }

    if (isvalid_base && quote_index_tostore == 0) { //to generate a new quote for alterations alone
      QNIAPP.OUT.partyid = QNIAPP.lifeassured[0].partyid;
      QNIAPP.UWR_ACT.calcTaxes_C2P3DP();
      QNIAPP.UWR_ACT.genJsonForQuoteInputs(to_update, 'Proposed_UW');
      QNIAPP.UWR_ACT.addLifeAssuredDetails_C2P3DP(0);
      QNIAPP.UWR_ACT.storeINJsonArray(quote_index_tostore);
      QNIAPP.UWR_ACT.storeOUTJsonArray(quote_index_tostore);
    }
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && (QNIAPP.ERR.length == 0)) {
      QNIAPP.IN.Qt.rider = [];
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
          QNIAPP.IN.Qt.rider[i] = [];
          var rider_premium_to_apply = 0;
          var todo_rateup_for_rider = false;
          if ((QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']))) {
            is_valid_rider = eval("QNIAPP." + QNIAPP.IN.Qt.qtdtls.rider[i].name + ".validate('I')");
          }
          else {  // For Extra Life and Extra Life income
            QNIAPP.IN.Qt.qtdtls.rider[i].premium = QNIAPP.IN.Qt.qtdtls.elPremium;
            QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured = QNIAPP.IN.Qt.qtdtls.elSumAssured;
            QNIAPP.IN.Qt.qtdtls.rider[i].sumassured = QNIAPP.IN.Qt.qtdtls.elBaseSumAssured;
          }
          if (is_valid_rider) {
            if (QNIAPP.IN.Qt.qtdtls['rider'][i].emr || QNIAPP.IN.Qt.qtdtls['rider'][i].pma) {
              if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) {
                rider_premium_to_apply = QNIAPP.IN.Qt.qtdtls['rider'][i].premium; //For IB and CI
              }
              else {
                rider_premium_to_apply = QNIAPP.IN.Qt.qtdtls.elPremium; //For Extra Life and Extra Life Income
              }
              todo_rateup_for_rider = true;
            }
            if (todo_rateup_for_rider) {
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup'] = {};
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup']['MB'] = {};
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup']['MB']['yrwise'] = {};
              logger.error("Process Protection in todo_rateup for IB rider Error ---->" + QNIAPP.ERR);
              if (UWR_ACT.processEMRPMAForEL_rider(rider_premium_to_apply, i)) {
                QNIAPP.IN.Qt.qtdtls['rider'][i].premium = parseFloat(rider_premium_to_apply) + parseInt(QNIAPP.IN.Qt['rider'][i].excessPremium[0]); //single life
              }
            }
          }
          if (QNIAPP.ERR && QNIAPP.ERR.length > 0) {
            QNIAPP['body'] = [];
            break;
          }
        }
      }
    }
    if (QNIAPP.ERR.length == 0 && QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && is_valid_rider) {
      QNIAPP.UWR_ACT.calcTaxes_C2P3DP_rider();
      QNIAPP.UWR_ACT.calctotalpremium_C2P3D();
      QNIAPP.UWR_ACT.resetOutxexcesspremium_C2P3DP();
      QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
      QNIAPP.IN.Qt.premium = parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium);
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N" && ((QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])))) {
          if (QNIAPP.IN.Qt.qtdtls.rider[i].name == "INAD" || QNIAPP.IN.Qt.qtdtls.rider[i].name == "PPR_ADC") {
            if (parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium) > ((0.30) * parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium))) {
              QNIAPP['ERR'].push('Calculated rider premium is greater than 30% of the base premium ' + QNIAPP.IN.Qt.qtdtls.combinedPremium);
              return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0); //Error response to be returned
            }
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[i].name == "C4CI" || QNIAPP.IN.Qt.qtdtls.rider[i].name == "PPR_PAC") {
            if (parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium) > (parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium))) {
              QNIAPP['ERR'].push('Calculated rider premium is greater than 100% of the base premium ' + QNIAPP.IN.Qt.qtdtls.combinedPremium);
              return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0); //Error response to be returned
            }
          }
          QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.premium + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium);
        }
      }
      QNIAPP.UWR_ACT.addLifeAssuredDetails_C2P3DP(0);
      rider_flg = QNIAPP.UWR_ACT.deleteC2P3DRiders(); //for resetting the rider obj after checking decline condition
      index_storein = QNIAPP.IN.Qt.qtdtls.rider.length - 1;

    }

    if (rider_flg) { //If rider is present then only without any error
      QNIAPP.UWR_ACT.storeINJsonArray(0); //After rider obj has been reset successfully without any error.
      QNIAPP.UWR_ACT.storeOUTJsonArray(0);

    }

    if (QNIAPP.ERR.length == 0) {
      if (QNIAPP.IN.id == "C2P3DP" && !QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.Qt.qtdtls.id)) { //For Optima response will be send from processCombi
        final_json_uw = QNIAPP.COMM_NODE.createFinalResponseJson(final_json_uw);
        if (final_json_uw.head.status && final_json_uw.head.status == "Success") {
          return QNIAPP.COMM_NODE.processNsendToService(response, "UW", final_json_uw, QNIAPP['OP']);
        }
      }
    }
    else {
      return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0);
    }


    //QNIAPP.COMM_NODE.createErrorResponseJson();


    //QNIAPP.COMM_NODE.createFinalResponseJson();

  };


  UWR_ACT.processCombi = function (response, final_json_uw) {
    QNIAPP.OP = [];
    QNIAPP.IN.Qt.lifeassured = [];
    //var is_valid_c2p3dp = true;
    if (QNIAPP.IN.Qt.qtdtls.id == "C2PCK") {
      QNIAPP.IN.id = "C2P3DP";
    }
    if (QNIAPP.IN.combID === "C1C2PLH" || QNIAPP.IN.combID === "C1C2PLHE" || QNIAPP.IN.combID === "C2PCS" || QNIAPP.IN.combID === "C2POS") {
      QNIAPP.IN['id'] = 'P1C2PL';
      if (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.combID, 'is_spl')) {
        QNIAPP.IN['spl'] = 'P1C2PLE';
      }
      UWR_ACT.processProtection(response, final_json_uw);
    } else {
      UWR_ACT.processProtection_C2P3DP(response, final_json_uw); //Handling C2P3DP lifeassured request
    }
    /*if(QNIAPP.body.length == 0){ //If C2P3DP is standard calling validate(I) of c2p3dp
       is_valid_c2p3dp = eval("QNIAPP.C2P3DP.validate('I')");
    }*/
    if (QNIAPP.IN.Qt.qtdtls.id == "C2PCK") {
      QNIAPP.IN.id = "C2PCK";
    }
    if (QNIAPP.IN.Qt.qtdtls.id == "C2PCS") {
      QNIAPP.IN.id = "C2PCS";
    }
    if (QNIAPP.IN.Qt.qtdtls.id == "C2POS") {
      QNIAPP.IN.id = "C2POS";
    }
    var c2p3dp_premium = QNIAPP.IN.Qt.qtdtls.premium;
    //if(is_valid_c2p3dp){ //if c2p3dp rate up is successful then only proceeding with combi rateup
    QNIAPP.UWR_ACT.checkAndSetexternallifeassured();
    if (QNIAPP.IN.combID === "C2POS") { // For optima secure rateup starts here
      if (!window['QNIAPP']['C2POS']['validate']('I')) {
        return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0);
      } else {
        request = require('../../../../static/node/node_modules/request');
        //request = require('request');
        var url = QNIAPP['config'].qni_api;
        var headers = { "X-Requested-With": "XMLHttpRequest", 'Content-Type': 'application/html' };
        var appnum = "";
        var appnum = QNIAPP.IN.Qt.qtdtls.appnum;
        if (QNIAPP.IN.chnlptnr == "Direct" || QNIAPP.IN.chnlptnr == "DSC" || QNIAPP.IN.chnlptnr == "Direct-Loyalty" || QNIAPP.IN.chnlptnr == "HDFC Life Protection Vertical" || QNIAPP.IN.chnlptnr == "Direct-BSC-Sales" || QNIAPP.IN.chnlptnr == "TSCRM") {

          QNIAPP.IN.Qt.qtdtls.onlinediscountcategory = "Y";
        }
        else if (QNIAPP.IN.chnlptnr == "Online") {

          QNIAPP.IN.Qt.qtdtls.onlinediscountcategory = "O";

        } else {

          QNIAPP.IN.Qt.qtdtls.onlinediscountcategory = "N";
        }

        var agentcode = QNIAPP.IN.Qt.qtdtls.agentcode;
        if (typeof agentcode != "undefined" && agentcode != "" && agentcode == "00602350") {

          QNIAPP.IN.Qt.qtdtls.onlinediscountcategory = "Y";

        }
        var empemail = "";
        if (typeof QNIAPP.IN.Qt.qtdtls.EmployeeEmail != "undefined" && QNIAPP.IN.Qt.qtdtls.EmployeeEmail != "") { empemail = QNIAPP.IN.Qt.qtdtls.EmployeeEmail; }
        var empcode = "";
        if (typeof QNIAPP.IN.Qt.qtdtls.EmployeeCode != "undefined" && QNIAPP.IN.Qt.qtdtls.EmployeeCode != "") { empcode = QNIAPP.IN.Qt.qtdtls.EmployeeCode; }
        var policynoErgo = (typeof QNIAPP.IN.Qt.qtdtls.policynoErgo != "undefined" && QNIAPP.IN.Qt.qtdtls.policynoErgo == "") ? "false" : "true";
        var SA = (QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.INDV) ? QNIAPP.IN.Qt.qtdtls.externallifeassured[0].ext_sumAssured : QNIAPP.IN.Qt.qtdtls.ext_sumAssured;
        var count = 0;
        var laArray_obj = new Array();
        var laArray_obj_old = new Array();
        for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.externallifeassured.length; i++) {
          laArray_obj_old[i] = {};
          laArray_obj_old[i] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i];

        }
        console.log("old ext LA" + JSON.stringify(laArray_obj_old));
        for (var i = 1; i <= QNIAPP.IN.Qt.qtdtls.externallifeassured.length; i++) {
          logger.info("Dele flg====>" + QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].deleteflg);
          if (QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].deleteflg == "N") { //if delete flag is Y, LA element will not be pushed
            laArray_obj[count] = {};
            laArray_obj[count] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1];
            count++;
          }
        }
        QNIAPP.IN.Qt.qtdtls.externallifeassured = laArray_obj;
        console.log("New EXT LA==" + JSON.stringify(QNIAPP.IN.Qt.qtdtls.externallifeassured));
        var json = { "PolicyStartDate": getSysDtDDMMYYYYString(), "ProposalDate": getSysDtDDMMYYYYString(), "PolicyType": QNIAPP.IN.Qt.qtdtls.externaloption, "TypeofPlan": QNIAPP.IN.Qt.qtdtls.externalplan, "PolicyTenure": QNIAPP.IN.Qt.qtdtls.externalterm, "SumInsured": SA, "Deductible": QNIAPP.IN.Qt.qtdtls.externaldedamt, "Installment_Type": "SINGLE", "Proposer_Mailing_PinCode": QNIAPP.IN.Qt.qtdtls.pincode, "laarray": laArray_obj, "LoyalityDiscount": policynoErgo, "Online_Discount_Category": QNIAPP.IN.Qt.qtdtls.onlinediscountcategory, "PreviousPolicyNumber": QNIAPP.IN.Qt.qtdtls.policynoErgo, "Proposer_FirstName": QNIAPP.IN.Qt.qtdtls.fname, "Proposer_LastName": QNIAPP.IN.Qt.qtdtls.lname, "Proposer_DateofBirth": QNIAPP.IN.Qt.qtdtls.dob, "Proposer_Email": QNIAPP.IN.Qt.qtdtls.email, "Proposer_Mobile": QNIAPP.IN.Qt.qtdtls.mobno, "Proposer_Gender": QNIAPP.IN.Qt.qtdtls.gender, "Insured_Nationality": "India", "Insured_ResidenceStatus": "Indian", "appnum": appnum, "empemail": empemail, "empcode": empcode, "empfalg": QNIAPP.IN.Qt.qtdtls.isExtEmployee };
        logger.info("URL to Hit API is ---->" + url);
        request.post({ url: url, form: { "data": JSON.stringify(json) }, headers: headers }, function (error, resp, body) {
          json = JSON.stringify(json);
          logger.info("Request=====>" + json);
          if (!error && resp.statusCode == 200 && body != "") {
            logger.info("Response body from API------------>" + body);
            QNIAPP.OSAPIRESP = $.parseJSON(body);
            if (QNIAPP.OSAPIRESP.StatusCode == 200) {
              is_valid_new = true;
              QNIAPP.APIRespFlag = true;
              QNIAPP.apiflagOS = false;
              QNIAPP.APISucess = true;
              QNIAPP.C2POS.validate('I');
              if ((QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.IND1 || QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.IND2 || QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.INDV)) {
                QNIAPP.UWR_ACT.calcualteExtraPremium_Individual(); //For individual excess premium will be added to each external LA
              }
              if (QNIAPP.IN.combID == "C2POS" && QNIAPP.IN.Qt.qtdtls.externaloption == "Family") {
                QNIAPP.UWR_ACT.calcualteExtraPremium_Family();
              }
              if (QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.FLOAT1 || QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.FLOAT2 || QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.FLOAT) {
                QNIAPP.UWR_ACT.calcualteExtraPremium_Floater(); //For floater excess premium will be added to primary external LA
              }
              if (is_valid_new) {
                for (var i = 0; i < laArray_obj_old.length; i++) {
                  for (var j = 0; j < QNIAPP.IN.Qt.qtdtls.externallifeassured.length; j++) {
                    if (laArray_obj_old[i].deleteflg == QNIAPP.IN.Qt.qtdtls.externallifeassured[j].deleteflag && laArray_obj_old[i].partyid == QNIAPP.IN.Qt.qtdtls.externallifeassured[j].partyid) {
                      laArray_obj_old[i].ext_premium = QNIAPP.IN.Qt.qtdtls.externallifeassured[j].ext_premium;
                      laArray_obj_old[i].ext_tax = QNIAPP.IN.Qt.qtdtls.externallifeassured[j].ext_tax;
                      laArray_obj_old[i].ext_rider_premium = QNIAPP.IN.Qt.qtdtls.externallifeassured[j].ext_rider_premium ? QNIAPP.IN.Qt.qtdtls.externallifeassured[j].ext_rider_premium : 0;
                      laArray_obj_old[i].ext_rider_tax = QNIAPP.IN.Qt.qtdtls.externallifeassured[j].ext_rider_tax ? QNIAPP.IN.Qt.qtdtls.externallifeassured[j].ext_rider_tax : 0;
                      laArray_obj_old[i].ext_sumAssured = QNIAPP.IN.Qt.qtdtls.externallifeassured[j].ext_sumAssured;
                      laArray_obj_old[i].excess_premium = QNIAPP.IN.Qt.qtdtls.externallifeassured[j].excess_premium;
                      break;
                    }
                  }
                }
                QNIAPP.UWR_ACT.calcTotalPremiumForCombi();
                QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
                if (QNIAPP.IN.combID == "C2POS") {
                  UWR_ACT.addLifeAssuredDetails(0);
                  for (var i = 1; i <= laArray_obj_old.length; i++) {
                    QNIAPP.IN.Qt.lifeassured[i] = {};
                    if (laArray_obj_old[i - 1].deleteflg == "N") {
                      QNIAPP.IN.Qt.lifeassured[i]['excesspremium'] = laArray_obj_old[i - 1].excess_premium;
                      QNIAPP.IN.Qt.lifeassured[i]['oldpremium'] = (QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_rider_premium) ? parseInt(QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_premium) + parseInt(QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_rider_premium) : QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_premium;
                      QNIAPP.IN.Qt.lifeassured[i]['premium'] = (laArray_obj_old[i - 1].ext_rider_premium) ? parseInt(laArray_obj_old[i - 1].ext_premium) + parseInt(laArray_obj_old[i - 1].ext_rider_premium) : laArray_obj_old[i - 1].ext_premium; //Revised premium contains base premium and el premium after rateup
                      QNIAPP.IN.Qt.lifeassured[i]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_sumAssured;
                      QNIAPP.IN.Qt.lifeassured[i]['sumassured'] = laArray_obj_old[i - 1].ext_sumAssured;
                      QNIAPP.IN.Qt.lifeassured[i]['tottax'] = (laArray_obj_old[i - 1].ext_rider_tax) ? parseInt(laArray_obj_old[i - 1].ext_tax) + parseInt(laArray_obj_old[i - 1].ext_rider_tax) : laArray_obj_old[i - 1].ext_tax;
                      QNIAPP.IN.Qt.lifeassured[i]['oldterm'] = QNIAPP.upsell['Q1']['IN'].externalterm;
                      QNIAPP.IN.Qt.lifeassured[i]['term'] = QNIAPP.IN.Qt.qtdtls.externalterm;
                      QNIAPP.IN.Qt.lifeassured[i]['partyid'] = laArray_obj_old[i - 1].partyid;
                      QNIAPP.IN.Qt.lifeassured[i]['deleteflg'] = laArray_obj_old[i - 1].deleteflg;
                      QNIAPP.IN.Qt.lifeassured[i]['componenttype'] = "ExternalBase";
                    }
                    else {
                      QNIAPP.IN.Qt.lifeassured[i]['excesspremium'] = "";
                      QNIAPP.IN.Qt.lifeassured[i]['oldpremium'] = (QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_rider_premium) ? parseInt(QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_premium) + parseInt(QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_rider_premium) : QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_premium;
                      QNIAPP.IN.Qt.lifeassured[i]['premium'] = ""; //Revised premium contains base premium and el premium after rateup
                      QNIAPP.IN.Qt.lifeassured[i]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_sumAssured;
                      QNIAPP.IN.Qt.lifeassured[i]['sumassured'] = "";
                      QNIAPP.IN.Qt.lifeassured[i]['tottax'] = "";
                      QNIAPP.IN.Qt.lifeassured[i]['oldterm'] = QNIAPP.upsell['Q1']['IN'].externalterm;
                      QNIAPP.IN.Qt.lifeassured[i]['term'] = "";
                      QNIAPP.IN.Qt.lifeassured[i]['partyid'] = laArray_obj_old[i - 1].partyid;
                      QNIAPP.IN.Qt.lifeassured[i]['deleteflg'] = laArray_obj_old[i - 1].deleteflg;//FOR DECLINE scenarios
                      QNIAPP.IN.Qt.lifeassured[i]['componenttype'] = "ExternalBase";
                    }
                  }
                }
                if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
                  for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
                    if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
                      QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.premium + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium);
                    }
                  }
                }
                QNIAPP.UWR_ACT.resetOutobjectCombi();
                QNIAPP.UWR_ACT.storeINJsonArray(0);
                QNIAPP.UWR_ACT.storeOUTJsonArray(0);
              }
              //}
              QNIAPP.APIRespFlag = false;
              if (QNIAPP.ERR.length == 0) {
                final_json_uw = QNIAPP.COMM_NODE.createFinalResponseJson(final_json_uw);
                return QNIAPP.COMM_NODE.processNsendToService(response, "UW", final_json_uw, QNIAPP['OP']);
              }
              else {
                return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0);
              }
            }
            else {
              if (QNIAPP.OSAPIRESP && QNIAPP.OSAPIRESP.Error) {
                ErrorMsg = QNIAPP.OSAPIRESP.Error;
                QNIAPP.ERR.push(ErrorMsg);
                QNIAPP.COMM_NODE.sendErrorResponseToService(response, "Error In API Response", 0);
              }
              else {
                ErrorMsg = QNIAPP.OSAPIRESP;
                QNIAPP.ERR.push(ErrorMsg);
                QNIAPP.COMM_NODE.sendErrorResponseToService(response, "Error In API Response", 0);
              }
            }
          }
          else {
            logger.error("Error In Secure API :: " + error);
            QNIAPP.COMM_NODE.sendErrorResponseToService(response, "Error In Secure API", 0);
            QNIAPP.apiflagOS = true;
            QNIAPP.APIRespFlag = false;
            QNIAPP.APISucess = false;
          }
        });
      }
    } // optima secure rateup ends

    else { // other than optima secure rateup
      if (QNIAPP.IN.combID === "C1C2PLH" || QNIAPP.IN.combID === "C1C2PLHE") {
        var is_valid_new = QNIAPP.AMHI.validate('I');
      }
      else if (QNIAPP.IN.combID === "C2PCS") {
        is_valid_new = QNIAPP.C2PCS.validate('I');
      }

      else {
        var is_valid_new = QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.Qt.qtdtls.id) ? eval("QNIAPP.CORONAK.validate('I')") : eval("QNIAPP." + QNIAPP.IN.Qt.qtdtls.id + ".validate('I')");
      }

      if (QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.IND1 || QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.IND2 || QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.INDV) {
        QNIAPP.UWR_ACT.calcualteExtraPremium_Individual(); //For individual excess premium will be added to each external LA
      }
      if (QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.FLOAT1 || QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.FLOAT2 || QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.FLOAT) {
        QNIAPP.UWR_ACT.calcualteExtraPremium_Floater(); //For floater excess premium will be added to primary external LA
      }
      if (is_valid_new) {
        QNIAPP.UWR_ACT.calcTotalPremiumForCombi();
        QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
        if (QNIAPP.IN.combID === "C1C2PLH" || QNIAPP.IN.combID === "C1C2PLHE") {
          UWR_ACT.addLifeAssuredDetails(0);
          for (var i = 1; i <= QNIAPP.IN.Qt.qtdtls.externallifeassured.length; i++) {
            QNIAPP.IN.Qt.lifeassured[i] = {};
            if (QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].deleteflg == "N") {
              QNIAPP.IN.Qt.lifeassured[i]['excesspremium'] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].excess_premium;
              QNIAPP.IN.Qt.lifeassured[i]['oldpremium'] = (QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_rider_premium) ? parseInt(QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_premium) + parseInt(QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_rider_premium) : QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_premium;
              QNIAPP.IN.Qt.lifeassured[i]['premium'] = (QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_rider_premium) ? parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_premium) + parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_rider_premium) : QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_premium; //Revised premium contains base premium and el premium after rateup
              QNIAPP.IN.Qt.lifeassured[i]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_sumAssured;
              QNIAPP.IN.Qt.lifeassured[i]['sumassured'] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_sumAssured;
              QNIAPP.IN.Qt.lifeassured[i]['tottax'] = (QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_rider_tax) ? parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_tax) + parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_rider_tax) : QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_tax;
              QNIAPP.IN.Qt.lifeassured[i]['oldterm'] = QNIAPP.upsell['Q1']['IN'].externalterm;
              QNIAPP.IN.Qt.lifeassured[i]['term'] = QNIAPP.IN.Qt.qtdtls.externalterm;
              QNIAPP.IN.Qt.lifeassured[i]['partyid'] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].partyid;
              QNIAPP.IN.Qt.lifeassured[i]['deleteflg'] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].deleteflg;
              QNIAPP.IN.Qt.lifeassured[i]['componenttype'] = "ExternalBase";
            }
            else {
              QNIAPP.IN.Qt.lifeassured[i]['excesspremium'] = "";
              QNIAPP.IN.Qt.lifeassured[i]['oldpremium'] = (QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_rider_premium) ? parseInt(QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_premium) + parseInt(QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_rider_premium) : QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_premium;
              QNIAPP.IN.Qt.lifeassured[i]['premium'] = ""; //Revised premium contains base premium and el premium after rateup
              QNIAPP.IN.Qt.lifeassured[i]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_sumAssured;
              QNIAPP.IN.Qt.lifeassured[i]['sumassured'] = "";
              QNIAPP.IN.Qt.lifeassured[i]['tottax'] = "";
              QNIAPP.IN.Qt.lifeassured[i]['oldterm'] = QNIAPP.upsell['Q1']['IN'].externalterm;
              QNIAPP.IN.Qt.lifeassured[i]['term'] = "";
              QNIAPP.IN.Qt.lifeassured[i]['partyid'] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].partyid;
              QNIAPP.IN.Qt.lifeassured[i]['deleteflg'] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].deleteflg;//FOR DECLINE scenarios
              QNIAPP.IN.Qt.lifeassured[i]['componenttype'] = "ExternalBase";
            }
          }
        } else {
          QNIAPP.IN.Qt.qtdtls.premium = c2p3dp_premium;
          UWR_ACT.addLifeAssuredDetails_C2P3DP();

        }
        if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
          for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
            if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
              QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.premium + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium);
            }
          }
        }
        QNIAPP.UWR_ACT.resetOutobjectCombi();
        QNIAPP.UWR_ACT.storeINJsonArray(0);
        QNIAPP.UWR_ACT.storeOUTJsonArray(0);
        //}
      }

      if (QNIAPP.ERR.length == 0) {
        final_json_uw = QNIAPP.COMM_NODE.createFinalResponseJson(final_json_uw);
        return QNIAPP.COMM_NODE.processNsendToService(response, "UW", final_json_uw, QNIAPP['OP']);
      }
      else {
        return QNIAPP.COMM_NODE.sendErrorResponseToService(response, "", 0);
      }

    }

  };

  UWR_ACT.setBasicInputs = function () {
    //setting the dts to system date for calculating new quote
    QNIAPP.IN.Qt.qtdtls.qtDt = getSysDtDDMMYYYYString();
    //QNIAPP.IN.Qt.qtdtls.incpDt = getSysDtDDMMYYYYString(); inception date should not be overridden
  };

  UWR_ACT.calcAdjustPremium = function () {
    var rateup_rt = 0;
    var premiumtoapply = 0;
    var rate_table_val_emr = 0;
    var rate_table_val_pma = 0;
    var rate_table_val_emr_rateA = 0;
    var rate_table_val_emr_rateB = 0;
    var emr_val = 0;
    var pma_val = 0;
    var prem_rate = '';
    var PREM_CONV_FC = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_POL_PCF_PREM']['get'](QNIAPP.IN.Qt.qtdtls.freq, 'fac');
    var EMP_DISC = (QNIAPP.IN['spl'] === '-') ? QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "emp_dis_rt") : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['spl'], "emp_dis_rt");
    if (QNIAPP.IN.id == "SANCHP") {
      prem_rate = QNIAPP.SANCHP_DBMRATE.get(Math.floor(QNIAPP.IN.Qt.qtdtls.age));
    }
    QNIAPP.IN.Qt['qtdtls']['rateup'] = {};
    QNIAPP.IN.Qt['qtdtls']['rateup']['MB'] = {};
    rateup_rt = require("../master/" + (QNIAPP.IN.Qt.qtdtls.id) + "/qni_" + (QNIAPP.IN.Qt.qtdtls.id).toLowerCase() + "_nu_rates.js");
    if (QNIAPP.lifeassured[0].emr) {
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['emr'] = QNIAPP.lifeassured[0].emr;
      emr_val = QNIAPP.lifeassured[0].emr;
      if (QNIAPP.IN.id == "SANCHP") {
        rate_table_val_emr_rateA = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_EMR_RATE']['get']('rate_a');
        rate_table_val_emr_rateB = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_EMR_RATE']['get']('rate_b');
      }
      else if (QNIAPP.IN.id == "SANPAR") {
        rate_table_val_emr = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_EMR_RATE']['get']();//rates are wrt per 1000SA
      }
    }
    if (QNIAPP.lifeassured[0].pma) {
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['pma'] = QNIAPP.lifeassured[0].pma;
      pma_val = QNIAPP.lifeassured[0].pma;
      rate_table_val_pma = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_PMA_RATE']['get']();
    }
    if (QNIAPP.IN.id == "SANPAR") {
      premiumtoapply = QNIAPP.IN.Qt.qtdtls.premium / (1 + ((rate_table_val_emr / 1000) * (emr_val / 25)) + ((rate_table_val_pma / 1000) * (pma_val / 0.5)));
    }
    else if (QNIAPP.IN.id == "SANCHP") {
      if (QNIAPP.IN.Qt.qtdtls.isnpFlg == "Y") {
        EMP_DISC = QNIAPP.PRODUCT_DETAILS.get("SANCHPE", "emp_dis_rt");
      }
      var prem1 = (QNIAPP.IN.Qt.qtdtls.premium / PREM_CONV_FC) / (1 + (prem_rate * EMP_DISC * ((rate_table_val_emr_rateA * (emr_val / 25)) + (rate_table_val_pma * pma_val / 0.5))));
      var SA1 = (prem1 * prem_rate * EMP_DISC);
      var prem2 = ((QNIAPP.IN.Qt.qtdtls.premium / PREM_CONV_FC) - ((rate_table_val_emr_rateA - rate_table_val_emr_rateB) * (emr_val / 25) * 3000000)) / (1 + (rate_table_val_emr_rateB * (emr_val / 25) * prem_rate * EMP_DISC) + (prem_rate * EMP_DISC * rate_table_val_pma * (pma_val / 0.5)));
      premiumtoapply = (SA1 <= 3000000) ? (prem1 * PREM_CONV_FC) : (prem2 * PREM_CONV_FC);
    }
    return Math.round(premiumtoapply);
  };

  UWR_ACT.processForMainBenefit = function (laindex) {
    var iteration_loop = QNIAPP.IN.Qt.qtdtls.term;
    var iteration_loop_emr = QNIAPP.IN.Qt.qtdtls.term;
    var iteration_loop_pma = QNIAPP.IN.Qt.qtdtls.term;
    if ((QNIAPP.IN.id === QNIAPP.CONSTS.CIP) && (QNIAPP.IN.Qt.qtdtls.benefit === QNIAPP.CONSTS.PWO)) {
      var prp_emr = 0, prp_pma = 0, life_emr = 0, life_pma = 0, prp_emr_dur = 0, prp_pma_dur = 0, life_emr_dur = 0, life_pma_dur = 0;
    }
    //laindex=QNIAPP.UWR_ACT.getIndex(laindex,'emr');
    QNIAPP.IN.Qt['qtdtls']['rateup']['MB'] = {};
    QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'] = {};
    for (var laindex = 0; laindex < QNIAPP.lifeassured.length; laindex++) { // added to handle Joint Life EMR
      if (!QNIAPP.UWR_ACT.isEmrDurationSameAsTerm(QNIAPP.lifeassured[laindex].emr, QNIAPP.lifeassured[laindex].emrduration)) {
        iteration_loop_emr = QNIAPP.lifeassured[laindex].emrduration;
      }
      if (!QNIAPP.UWR_ACT.isPmaDurationSameAsTerm(QNIAPP.lifeassured[laindex].pma, QNIAPP.lifeassured[laindex].pmaduration)) {
        iteration_loop_pma = QNIAPP.lifeassured[laindex].pmaduration;
      }
      if ((QNIAPP.IN.id === QNIAPP.CONSTS.CIP) && (QNIAPP.IN.Qt.qtdtls.benefit === QNIAPP.CONSTS.PWO)) {
        if (QNIAPP.IN.Qt.qtdtls.proposerPartyId === QNIAPP.lifeassured[laindex].partyid) {
          prp_emr = QNIAPP.lifeassured[laindex].emr;
          prp_pma = QNIAPP.lifeassured[laindex].pma;
          prp_emr_dur = QNIAPP.lifeassured[laindex].emrduration;
          prp_pma_dur = QNIAPP.lifeassured[laindex].pmaduration;
        } else {
          life_emr = QNIAPP.lifeassured[laindex].emr,
            life_pma = QNIAPP.lifeassured[laindex].pma;
          life_emr_dur = QNIAPP.lifeassured[laindex].emrduration;
          life_pma_dur = QNIAPP.lifeassured[laindex].pmaduration;
        }
      } else {
        QNIAPP.UWR_ACT.createULIPEMRPMAObject(iteration_loop, iteration_loop_emr, iteration_loop_pma, laindex);
      }
    }
    if ((QNIAPP.IN.id === QNIAPP.CONSTS.CIP) && (QNIAPP.IN.Qt.qtdtls.benefit === QNIAPP.CONSTS.PWO)) {
      QNIAPP.UWR_ACT.createUWPartyEMRPMAObject(iteration_loop, prp_emr_dur, prp_pma_dur, life_emr_dur, life_pma_dur, prp_emr, prp_pma, life_emr, life_pma);
    }
  };
  /*	UWR_ACT.getIndex=function(laindex,field_name){
      if(QNIAPP.IN.id===QNIAPP.CONSTS.UNO && QNIAPP.IN.Qt.qtdtls.jlflag && QNIAPP.IN.Qt.qtdtls.jlflag==='Y'){
         var index=0;
         var tempValue=0;
         for(var i=0;i<(QNIAPP.lifeassured).length;i++){
          if(eval('QNIAPP.lifeassured['+i+'].'+field_name)&&eval('QNIAPP.lifeassured['+i+'].'+field_name)!==""&&tempValue<eval('QNIAPP.lifeassured['+i+'].'+field_name)){
            index=i;
            tempValue=eval('QNIAPP.lifeassured['+i+'].'+field_name);
          }
         }
        laindex=index;
      }
        return laindex;
    };*/
  UWR_ACT.processForRiders = function (laindex) {
    var iteration_loop = QNIAPP.IN.Qt.qtdtls.term;
    var iteration_loop_emr = QNIAPP.IN.Qt.qtdtls.term;
    var iteration_loop_pma = QNIAPP.IN.Qt.qtdtls.term;
    if (QNIAPP.lifeassured[laindex].rider && QNIAPP.lifeassured[laindex].rider.length > 0) {
      for (var la_rid_index = 0; la_rid_index < QNIAPP.lifeassured[laindex].rider.length; la_rid_index++) {
        var la_rider_rec = QNIAPP.lifeassured[laindex].rider[la_rid_index];
        var rider_name = UWR_ACT.identifyRider(la_rider_rec.name);
        if (!QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, rider_name)) {
          if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
            for (var x = 0; x < QNIAPP.IN.Qt.qtdtls.rider.length; x++) {
              var rid_elem = QNIAPP.IN.Qt.qtdtls.rider[x];
              if (la_rider_rec.deleteflg === 'N') {
                if (UWR_ACT.identifyRider(la_rider_rec.name) == (rid_elem.name)) {
                  if (la_rider_rec.emr && la_rider_rec.emrduration) {
                    if (!QNIAPP.UWR_ACT.isEmrDurationSameAsTerm(la_rider_rec.emr, la_rider_rec.emrduration)) {
                      iteration_loop_emr = la_rider_rec.emrduration;
                    }
                  }
                  if (la_rider_rec.pma && la_rider_rec.pmaduration) {
                    if (!QNIAPP.UWR_ACT.isPmaDurationSameAsTerm(la_rider_rec.pma && la_rider_rec.pmaduration)) {
                      iteration_loop_pma = la_rider_rec.pmaduration;
                    }
                  }
                  QNIAPP.UWR_ACT.createEMRPMAObjectForRiders(UWR_ACT.identifyRider(rid_elem.name), iteration_loop, iteration_loop_emr, iteration_loop_pma, laindex, la_rid_index);
                }
              }
              else {
                la_rider_rec['deleteflg'] = "Y";
              }

            }
          }
        }
      }
    }
  };

  UWR_ACT.deleteUlipRiders = function () {
    var rider_obj = new Array();
    var count = 0;
    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
      if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") { //if delete flag is Y, rider element will not be pushed
        rider_obj[count] = {};
        rider_obj[count] = QNIAPP.IN.Qt.qtdtls.rider[i];
        count++;
      }
    }
    QNIAPP.IN.Qt.qtdtls.rider = rider_obj;
    var internalRdr = QNIAPP.COMM_CALC.getInternalRider();
    if (QNIAPP.IN.Qt.qtdtls.id == "UL7EA") {
      var rider_str = "";
      var len = (internalRdr && internalRdr.length > 0) ? internalRdr.length : 0;
      $.each(internalRdr, function (index, rider_elem) {
        rider_str = rider_str + rider_elem.name + ((index < (len - 1)) ? ":" : "");
      });
      rider_str = QNIAPP.UL7EA_RIDERS.getRiderName(rider_str);
      QNIAPP.IN.Qt.qtdtls['optionalriders'] = (internalRdr && internalRdr.length > 0) ? rider_str : "";
    }
    else if (QNIAPP.IN.Qt.qtdtls.id != "UL8NIV") {
      QNIAPP.IN.Qt.qtdtls['optionalriders'] = (internalRdr && internalRdr[0]) ? QNIAPP.CONSTS[internalRdr[0].name] : "";
    }
  };

  UWR_ACT.deleteC2P3DRiders = function () { //For C2P3D EL/IB/CI rider
    var rider_obj = new Array();
    var rider_obj_out = new Array();
    var count = 0;
    var splrider_count = 0;
    var pprrider_count = 0;
    var out_count = 0;
    var riderCI4Present = false;
    var riderCI25Present = false;
    var riderTermPresent = false;
    var riderAdddbPresent = false;
    QNIAPP.IN.Qt.qtdtls.optionalriders = "";
    QNIAPP.IN.Qt.qtdtls.optionalextriders = "";
    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
      if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "Y" && (!(QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])))) {
        QNIAPP.ERR.push("Rider cannot be decline/postpone/reject for the selected option. Invalid !! Cannot Proceed");
        return false; //Extra Life is implicit rider cant be decline for c2p3d
      }
      else if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
        rider_obj[count] = {};
        rider_obj[count] = QNIAPP.IN.Qt.qtdtls.rider[i];
        count++;
        if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']) && (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "INAD" || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "C4CI")) {
          //rider_obj_out[splrider_count] = {};
          //rider_obj_out[splrider_count] = QNIAPP.OUT.rider[i];
          splrider_count++;
          if (splrider_count == '1') {
            if (QNIAPP.IN.id == 'EGII' || QNIAPP.IN.id == 'EGIIE' || QNIAPP.IN.id == 'EGWP' || QNIAPP.IN.id == 'EGWPE' || QNIAPP.IN.id == 'EIAP' || QNIAPP.IN.id == 'EIAPE' || QNIAPP.IN.id == 'ESIP' || QNIAPP.IN.id == 'ESIPE' || QNIAPP.IN.id == 'EAGP' || QNIAPP.IN.id == 'EAGPE') {
              QNIAPP.IN.Qt.qtdtls.optionalextriders = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
            }
            else {
              QNIAPP.IN.Qt.qtdtls.optionalriders = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
            }
          }
          if (splrider_count == '2') {
            if (QNIAPP.IN.id == 'EGII' || QNIAPP.IN.id == 'EGIIE' || QNIAPP.IN.id == 'EGWP' || QNIAPP.IN.id == 'EGWPE' || QNIAPP.IN.id == 'EIAP' || QNIAPP.IN.id == 'EIAPE' || QNIAPP.IN.id == 'ESIP' || QNIAPP.IN.id == 'ESIPE' || QNIAPP.IN.id == 'EAGP' || QNIAPP.IN.id == 'EAGPE') {
              QNIAPP.IN.Qt.qtdtls.optionalextriders = 'Income Benefit & Critical Illness';
            }
            else {
              QNIAPP.IN.Qt.qtdtls.optionalriders = 'Income Benefit & Critical Illness'; //if 2 spl rider
            }
          }
        }
        else if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "PPR_PAC" || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "PPR_ADC" || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "PPR_CC") {
          pprrider_count++;
        }

        else if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "ECI4" || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "ECI25" || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "ETR" || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "ADDDB") {

          if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == 'ECI4') {
            riderCI4Present = true;
            if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
              QNIAPP.IN.Qt.qtdtls['optionalextriders'] = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
            }
            else {
              QNIAPP.IN.Qt.qtdtls['optionalriders'] = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
            }

          }
          else if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == 'ECI25') {
            riderCI25Present = true;
            if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
              QNIAPP.IN.Qt.qtdtls['optionalextriders'] = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
            }
            else {
              QNIAPP.IN.Qt.qtdtls['optionalriders'] = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
            }
          }
          else if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == 'ETR') {
            riderTermPresent = true;
            if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
              QNIAPP.IN.Qt.qtdtls['optionalextriders'] = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
            }
            else {
              QNIAPP.IN.Qt.qtdtls['optionalriders'] = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
            }
          }
          else if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == 'ADDDB') {
            riderAdddbPresent = true;
            if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
              QNIAPP.IN.Qt.qtdtls['optionalextriders'] = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
            }
            else {
              QNIAPP.IN.Qt.qtdtls['optionalriders'] = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
            }
          }

          if (riderCI4Present && riderTermPresent && riderAdddbPresent) {
            if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
              QNIAPP.IN.Qt.qtdtls['optionalextriders'] = 'Critical Illness(4) & Term & Accidental Death Disablity';
            }
            else {
              QNIAPP.IN.Qt.qtdtls['optionalriders'] = 'Critical Illness(4) & Term & Accidental Death Disablity';
            }

          }
          else if (riderCI25Present && riderTermPresent && riderAdddbPresent) {
            if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
              QNIAPP.IN.Qt.qtdtls['optionalextriders'] = 'Critical Illness(25) & Term & Accidental Death Disablity';
            }
            else {
              QNIAPP.IN.Qt.qtdtls['optionalriders'] = 'Critical Illness(25) & Term & Accidental Death Disablity';
            }

          }
          else if (riderCI4Present && riderTermPresent) {
            if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
              QNIAPP.IN.Qt.qtdtls['optionalextriders'] = 'Critical Illness(4) & Term';
            }
            else {
              QNIAPP.IN.Qt.qtdtls['optionalriders'] = 'Critical Illness(4) & Term';
            }

          }
          else if (riderCI25Present && riderTermPresent) {
            if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
              QNIAPP.IN.Qt.qtdtls['optionalextriders'] = 'Critical Illness(25) & Term';
            }
            else {
              QNIAPP.IN.Qt.qtdtls['optionalriders'] = 'Critical Illness(25) & Term';
            }

          }
          else if (riderCI4Present && riderAdddbPresent) {
            if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
              QNIAPP.IN.Qt.qtdtls['optionalextriders'] = 'Critical Illness(4) & Accidental Death Disablity';
            }
            else {
              QNIAPP.IN.Qt.qtdtls['optionalriders'] = 'Critical Illness(4) & Accidental Death Disablity';
            }

          }
          else if (riderCI25Present && riderAdddbPresent) {
            if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
              QNIAPP.IN.Qt.qtdtls['optionalextriders'] = 'Critical Illness(25) & Accidental Death Disablity';
            }
            else {
              QNIAPP.IN.Qt.qtdtls['optionalriders'] = 'Critical Illness(25) & Accidental Death Disablity';
            }

          }
          else if (riderTermPresent && riderAdddbPresent) {
            if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
              QNIAPP.IN.Qt.qtdtls['optionalextriders'] = 'Term & Accidental Death Disablity';
            }
            else {
              QNIAPP.IN.Qt.qtdtls['optionalriders'] = 'Term & Accidental Death Disablity';
            }

          }
        }
        if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "EP" && (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE")) {
          QNIAPP.IN.Qt.qtdtls['optionalriders'] = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
        }
      }
    }
    QNIAPP.IN.Qt.qtdtls.rider = rider_obj;
    if (pprrider_count == "1") {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "PPR_PAC" || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "PPR_ADC" || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "PPR_CC") {
          QNIAPP.IN.Qt.qtdtls['optionalpprextriders'] = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
        }
      }
    }
    if (pprrider_count == "0") {
      QNIAPP.IN.Qt.qtdtls['optionalpprextriders'] = "";
    }

    if (QNIAPP.OUT.rider && QNIAPP.OUT.rider.length > 0) {
      for (var k = 0; k < QNIAPP.OUT.rider.length; k++) {
        if (QNIAPP.OUT.rider[k].deleteflg == "N") {
          rider_obj_out[out_count] = {};
          rider_obj_out[out_count] = QNIAPP.OUT.rider[k];
          out_count++;

        }

      }
    }
    QNIAPP.OUT.rider = rider_obj_out;
    return true;
  };
  UWR_ACT.deleteUlipSplRiders = function () { //For ULIP IB/CI rider
    var rider_obj = new Array();
    var count = 0;
    var splrider_count = 0;
    var pprrider_count = 0;
    QNIAPP.IN.Qt.qtdtls.optionalextriders = "";
    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
      if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
        rider_obj[count] = {};
        rider_obj[count] = QNIAPP.IN.Qt.qtdtls.rider[i];
        count++;
        if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']) && (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "INAD" || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "C4CI")) {
          splrider_count++;
          if (splrider_count == '1') {
            QNIAPP.IN.Qt.qtdtls.optionalextriders = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
          }
          if (splrider_count == '2') {
            QNIAPP.IN.Qt.qtdtls.optionalextriders = 'Income Benefit & Critical Illness'; //if 2 spl rider
          }
        }
        else if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "PPR_PAC" || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "PPR_ADC" || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "PPR_CC") {
          pprrider_count++;
        }
      }
    }
    QNIAPP.IN.Qt.qtdtls.rider = rider_obj;
    if (pprrider_count == "1") {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "PPR_PAC" || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "PPR_ADC" || QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "PPR_CC") {
          QNIAPP.IN.Qt.qtdtls['optionalpprextriders'] = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name];
        }
      }
    }
    if (pprrider_count == "0") {
      QNIAPP.IN.Qt.qtdtls['optionalpprextriders'] = "";
    }
  };

  UWR_ACT.genJsonForQuoteInputs = function (to_update, status) {
    QNIAPP.COMM_CALC.setAdditionalInputs(QNIAPP.IN.Qt, QNIAPP.IN.Qt.lifeassurednm);
    QNIAPP.IN.Qt.qtdtls.premium = QNIAPP.IN.Qt.premium;
    QNIAPP.IN.Qt.qtdtls.totPremium = (QNIAPP.IN.Qt.totpremium) ? QNIAPP.IN.Qt.totpremium : "";
    QNIAPP.IN.Qt.qtdtls.totAnnPremium = (QNIAPP.IN.Qt.totannpremium) ? QNIAPP.IN.Qt.totannpremium : "";
    QNIAPP.IN.Qt.qtdtls.product = QNIAPP.upsell['Q1'].IN.product;
    QNIAPP.IN.Qt.product = QNIAPP.upsell['Q1'].IN.product;
    QNIAPP.IN.Qt.qtdtls.prodcat = QNIAPP.upsell['Q1'].IN.prodcat;
    QNIAPP.IN.Qt.qtdtls.prodcat_cd = QNIAPP.upsell['Q1'].IN.prodcat_cd;
    if (!to_update && QNIAPP.IN.illustrationGeneration !== 1) {
      //QNIAPP.IN['touchpoint'] = QNIAPP['other'].touchpoint;
      QNIAPP.IN.Qt['touchpoint'] = QNIAPP['other'].touchpoint;
      QNIAPP.IN.Qt['refquoteid'] = (QNIAPP.upsell['Q1'].IN.quoteid) ? (QNIAPP.upsell['Q1'].IN.quoteid) : (QNIAPP.IN.Qt.qtdtls.quoteid);
      QNIAPP.IN.Qt.qtstatus = status;
      QNIAPP.COMM_CALC.generateQuoteNo('q');
      QNIAPP.IN.Qt.quoteid = QNIAPP.IN.Qt.qtdtls.quoteid;
    }
  };

  UWR_ACT.addLifeAssuredDetails = function (index) {
    QNIAPP.IN.Qt.lifeassured[index] = {};
    if (QNIAPP.IN.id == "SUPH") {
      QNIAPP.IN.Qt.lifeassured[index]['excesspremium'] = QNIAPP.IN.Qt.excesspremium ? QNIAPP.IN.Qt.excesspremium : "";
    }
    else {
      QNIAPP.IN.Qt.lifeassured[index]['excesspremium'] = (QNIAPP.IN.Qt.excessPremium && QNIAPP.IN.Qt.excessPremium[index]) ? QNIAPP.IN.Qt.excessPremium[index] : "";
    }
    QNIAPP.IN.Qt.lifeassured[index]['oldpremium'] = QNIAPP.upsell['Q1']['IN'].premium;
    QNIAPP.IN.Qt.lifeassured[index]['premium'] = QNIAPP.IN.Qt.qtdtls.premium;
    QNIAPP.IN.Qt.lifeassured[index]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].sumAssured;
    QNIAPP.IN.Qt.lifeassured[index]['sumassured'] = QNIAPP.IN.Qt.qtdtls.sumAssured;
    QNIAPP.IN.Qt.lifeassured[index]['oldtax'] = QNIAPP.upsell['Q1']['IN'].tottax;
    QNIAPP.IN.Qt.lifeassured[index]['tottax'] = QNIAPP.IN.Qt.qtdtls.tottax;
    QNIAPP.IN.Qt.lifeassured[index]['oldterm'] = QNIAPP.upsell['Q1']['IN'].term;
    QNIAPP.IN.Qt.lifeassured[index]['term'] = QNIAPP.IN.Qt.qtdtls.term;
    QNIAPP.IN.Qt.lifeassured[index]['partyid'] = QNIAPP.lifeassured[index].partyid;
    QNIAPP.IN.Qt.lifeassured[index]['deleteflg'] = (QNIAPP.lifeassured[index].deleteflg) ? QNIAPP.lifeassured[index].deleteflg : "";
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) { //For IB/CI/PPR Rider (inserting in QI_COUNTEROFFER_DTLS table).
      QNIAPP.IN.Qt.lifeassured[index].optionalriders = new Array();
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        QNIAPP.IN.Qt.lifeassured[index].optionalriders[i] = {};
        if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N" && QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) {
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['excesspremium'] = (QNIAPP.IN.Qt['rider'] && QNIAPP.IN.Qt['rider'][i].excessPremium && QNIAPP.IN.Qt['rider'][i].excessPremium[index]) ? QNIAPP.IN.Qt['rider'][i].excessPremium[index] : "";
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['oldpremium'] = QNIAPP.upsell['Q1']['IN'].rider[i].premium;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['premium'] = QNIAPP.IN.Qt.qtdtls.rider[i].premium;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].rider[i].sumAssured;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['sumassured'] = QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['oldterm'] = QNIAPP.upsell['Q1']['IN'].rider[i].term;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['term'] = QNIAPP.IN.Qt.qtdtls.rider[i].term;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['deleteflg'] = QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['name'] = QNIAPP.IN.Qt.qtdtls.rider[i].name_cd;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['oldtax'] = QNIAPP.upsell['Q1']['IN'].rider[i].tax;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['tottax'] = QNIAPP.IN.Qt.qtdtls.rider[i].tax;
        }
        else if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "Y" && QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) { // For rider decline scenarios
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['excesspremium'] = "";
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['oldpremium'] = QNIAPP.upsell['Q1']['IN'].rider[i].premium;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['premium'] = "";
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].rider[i].sumAssured;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['sumassured'] = "";
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['oldterm'] = QNIAPP.upsell['Q1']['IN'].rider[i].term;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['term'] = "";
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['deleteflg'] = "Y";
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['name'] = QNIAPP.IN.Qt.qtdtls.rider[i].name_cd;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['oldtax'] = QNIAPP.upsell['Q1']['IN'].rider[i].tax;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['tottax'] = "";
        }
        else if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N" && !QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']) && QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "EP") {
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['excesspremium'] = (QNIAPP.IN.Qt['rider'] && QNIAPP.IN.Qt['rider'][i].excessPremium && QNIAPP.IN.Qt['rider'][i].excessPremium[index]) ? QNIAPP.IN.Qt['rider'][i].excessPremium[index] : "";
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['oldpremium'] = QNIAPP.upsell['Q1']['IN'].rider[i].premium;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['premium'] = QNIAPP.IN.Qt.qtdtls.rider[i].premium;
          QNIAPP.OUT['extPremium'] = (QNIAPP.IN.Qt.lifeassured[index].optionalriders[i].premium) ? parseInt(QNIAPP.IN.Qt.lifeassured[index].optionalriders[i].premium) : 0;

          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].rider[i].sumAssured;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['sumassured'] = QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured;
          QNIAPP.OUT['extSA'] = (QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured) ? parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured) : 0;

          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['oldterm'] = QNIAPP.upsell['Q1']['IN'].rider[i].term;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['term'] = QNIAPP.IN.Qt.qtdtls.rider[i].term;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['deleteflg'] = QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['name'] = QNIAPP.IN.Qt.qtdtls.rider[i].name_cd;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['oldtax'] = QNIAPP.upsell['Q1']['IN'].rider[i].tax;
          QNIAPP.IN.Qt.lifeassured[index].optionalriders[i]['tottax'] = QNIAPP.IN.Qt.qtdtls.rider[i].tax;
        }
      }
    }
  };


  UWR_ACT.addLifeAssuredDetails_C2P3DP = function () {  //For inserting in QI_COUNTEROFFER_DTLS table
    QNIAPP.IN.Qt.lifeassured[0] = {};
    QNIAPP.IN.Qt.lifeassured[0]['excesspremium'] = (QNIAPP.IN.Qt.excessPremium && QNIAPP.IN.Qt.excessPremium[0]) ? QNIAPP.IN.Qt.excessPremium[0] : "";
    QNIAPP.IN.Qt.lifeassured[0]['oldpremium'] = QNIAPP.upsell['Q1']['IN'].combinedPremium;
    QNIAPP.IN.Qt.lifeassured[0]['premium'] = QNIAPP.IN.Qt.qtdtls.combinedPremium; //Revised premium contains base premium and el premium after rateup
    QNIAPP.IN.Qt.lifeassured[0]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].sumAssured;
    QNIAPP.IN.Qt.lifeassured[0]['sumassured'] = QNIAPP.IN.Qt.qtdtls.sumAssured;
    QNIAPP.IN.Qt.lifeassured[0]['oldtax'] = QNIAPP.upsell['Q1']['IN'].tottax;
    QNIAPP.IN.Qt.lifeassured[0]['tottax'] = QNIAPP.IN.Qt.qtdtls.tottax;
    QNIAPP.IN.Qt.lifeassured[0]['oldterm'] = QNIAPP.upsell['Q1']['IN'].term;
    QNIAPP.IN.Qt.lifeassured[0]['term'] = QNIAPP.IN.Qt.qtdtls.term;
    QNIAPP.IN.Qt.lifeassured[0]['topup'] = QNIAPP.IN.Qt.qtdtls.topupFlag;
    QNIAPP.IN.Qt.lifeassured[0]['oldtopup'] = QNIAPP.upsell['Q1']['IN'].topupFlag;
    QNIAPP.IN.Qt.lifeassured[0]['topupPercentage'] = QNIAPP.IN.Qt.qtdtls.topupPercentage;
    QNIAPP.IN.Qt.lifeassured[0]['oldtopupPercentage'] = QNIAPP.upsell['Q1']['IN'].topupPercentage;
    QNIAPP.IN.Qt.lifeassured[0]['lumpsum'] = (QNIAPP.IN.Qt.qtdtls.lumpsum) ? (QNIAPP.IN.Qt.qtdtls.lumpsum) : "";
    QNIAPP.IN.Qt.lifeassured[0]['oldlumpsum'] = (QNIAPP.upsell['Q1']['IN'].lumpsum) ? (QNIAPP.upsell['Q1']['IN'].lumpsum) : "";
    QNIAPP.IN.Qt.lifeassured[0]['monthlyincome'] = (QNIAPP.IN.Qt.qtdtls.monthlyIncome) ? (QNIAPP.IN.Qt.qtdtls.monthlyIncome) : "";
    QNIAPP.IN.Qt.lifeassured[0]['oldmonthlyincome'] = (QNIAPP.upsell['Q1']['IN'].monthlyIncome) ? (QNIAPP.upsell['Q1']['IN'].monthlyIncome) : "";
    QNIAPP.IN.Qt.lifeassured[0]['partyid'] = QNIAPP.lifeassured[0].partyid;
    QNIAPP.IN.Qt.lifeassured[0]['deleteflg'] = (QNIAPP.lifeassured[0].deleteflg) ? QNIAPP.lifeassured[0].deleteflg : "";
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) { //For Extra Life and Extra Life Income consent letter letter (inserting in QI_COUNTEROFFER_DTLS table).
      QNIAPP.IN.Qt.lifeassured[0].optionalriders = new Array();
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        QNIAPP.IN.Qt.lifeassured[0].optionalriders[i] = {};
        if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['excesspremium'] = (QNIAPP.IN.Qt['rider'] && QNIAPP.IN.Qt['rider'][i].excessPremium && QNIAPP.IN.Qt['rider'][i].excessPremium[0]) ? QNIAPP.IN.Qt['rider'][i].excessPremium[0] : "";
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['oldpremium'] = (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.upsell['Q1']['IN'].rider[i]['name'])) ? QNIAPP.upsell['Q1']['IN'].rider[i].premium : 0;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['premium'] = (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) ? QNIAPP.IN.Qt.qtdtls.rider[i].premium : 0;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].rider[i].sumAssured;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['sumassured'] = QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['oldterm'] = QNIAPP.upsell['Q1']['IN'].rider[i].term;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['term'] = QNIAPP.IN.Qt.qtdtls.rider[i].term;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['deleteflg'] = QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['name'] = QNIAPP.IN.Qt.qtdtls.rider[i].name_cd;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['oldtax'] = QNIAPP.upsell['Q1']['IN'].rider[i].tax;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['tottax'] = QNIAPP.IN.Qt.qtdtls.rider[i].tax;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['lumpsum'] = (QNIAPP.IN.Qt.qtdtls.elLumpSum) ? (QNIAPP.IN.Qt.qtdtls.elLumpSum) : "";
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['oldlumpsum'] = (QNIAPP.upsell['Q1']['IN'].elLumpSum) ? (QNIAPP.upsell['Q1']['IN'].elLumpSum) : "";
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['monthlyincome'] = (QNIAPP.IN.Qt.qtdtls.elMonthlyIncome) ? (QNIAPP.IN.Qt.qtdtls.elMonthlyIncome) : "";
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['oldmonthlyincome'] = (QNIAPP.upsell['Q1']['IN'].elMonthlyIncome) ? (QNIAPP.upsell['Q1']['IN'].elMonthlyIncome) : "";
        }
        else if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "Y") {
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['excesspremium'] = "";
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['oldpremium'] = QNIAPP.upsell['Q1']['IN'].rider[i].premium;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['premium'] = "";
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].rider[i].sumAssured;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['sumassured'] = "";
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['oldterm'] = QNIAPP.upsell['Q1']['IN'].rider[i].term;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['term'] = "";
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['deleteflg'] = "Y";
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['name'] = QNIAPP.IN.Qt.qtdtls.rider[i].name_cd;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['oldtax'] = QNIAPP.upsell['Q1']['IN'].rider[i].tax;
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['tottax'] = "";
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['lumpsum'] = "";
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['oldlumpsum'] = (QNIAPP.upsell['Q1']['IN'].elLumpSum) ? (QNIAPP.upsell['Q1']['IN'].elLumpSum) : "";
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['monthlyincome'] = "";
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[i]['oldmonthlyincome'] = (QNIAPP.upsell['Q1']['IN'].elMonthlyIncome) ? (QNIAPP.upsell['Q1']['IN'].elMonthlyIncome) : "";
        }
      }
    }

    if (QNIAPP.IN.id == "C2PH" || QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.Qt.qtdtls.id)) {
      for (var i = 1; i <= QNIAPP.IN.Qt.qtdtls.externallifeassured.length; i++) {
        QNIAPP.IN.Qt.lifeassured[i] = {};
        if (QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].deleteflg == "N") {
          QNIAPP.IN.Qt.lifeassured[i]['excesspremium'] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].excess_premium;
          QNIAPP.IN.Qt.lifeassured[i]['oldpremium'] = (QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_rider_premium) ? parseInt(QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_premium) + parseInt(QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_rider_premium) : QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_premium;
          QNIAPP.IN.Qt.lifeassured[i]['premium'] = (QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_rider_premium) ? parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_premium) + parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_rider_premium) : QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_premium; //Revised premium contains base premium and el premium after rateup
          QNIAPP.IN.Qt.lifeassured[i]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_sumAssured;
          QNIAPP.IN.Qt.lifeassured[i]['sumassured'] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_sumAssured;
          QNIAPP.IN.Qt.lifeassured[i]['tottax'] = (QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_rider_tax) ? parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_tax) + parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_rider_tax) : QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].ext_tax;
          QNIAPP.IN.Qt.lifeassured[i]['oldterm'] = QNIAPP.upsell['Q1']['IN'].externalterm;
          QNIAPP.IN.Qt.lifeassured[i]['term'] = QNIAPP.IN.Qt.qtdtls.externalterm;
          QNIAPP.IN.Qt.lifeassured[i]['partyid'] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].partyid;
          QNIAPP.IN.Qt.lifeassured[i]['deleteflg'] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].deleteflg;
          QNIAPP.IN.Qt.lifeassured[i]['componenttype'] = "ExternalBase";
        }
        else {
          QNIAPP.IN.Qt.lifeassured[i]['excesspremium'] = "";
          QNIAPP.IN.Qt.lifeassured[i]['oldpremium'] = (QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_rider_premium) ? parseInt(QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_premium) + parseInt(QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_rider_premium) : QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_premium;
          QNIAPP.IN.Qt.lifeassured[i]['premium'] = ""; //Revised premium contains base premium and el premium after rateup
          QNIAPP.IN.Qt.lifeassured[i]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].externallifeassured[i - 1].ext_sumAssured;
          QNIAPP.IN.Qt.lifeassured[i]['sumassured'] = "";
          QNIAPP.IN.Qt.lifeassured[i]['tottax'] = "";
          QNIAPP.IN.Qt.lifeassured[i]['oldterm'] = QNIAPP.upsell['Q1']['IN'].externalterm;
          QNIAPP.IN.Qt.lifeassured[i]['term'] = "";
          QNIAPP.IN.Qt.lifeassured[i]['partyid'] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].partyid;
          QNIAPP.IN.Qt.lifeassured[i]['deleteflg'] = QNIAPP.IN.Qt.qtdtls.externallifeassured[i - 1].deleteflg;//FOR DECLINE scenarios
          QNIAPP.IN.Qt.lifeassured[i]['componenttype'] = "ExternalBase";
        }
      }
    }
  };

  UWR_ACT.addLifeAssuredDetails_ulip = function () {  //For inserting in QI_COUNTEROFFER_DTLS table
    var count = 0;
    QNIAPP.IN.Qt.lifeassured[0] = {};
    QNIAPP.IN.Qt.lifeassured[0]['excesspremium'] = (QNIAPP.IN.Qt.excessPremium && QNIAPP.IN.Qt.excessPremium[0]) ? QNIAPP.IN.Qt.excessPremium[0] : "";
    QNIAPP.IN.Qt.lifeassured[0]['oldpremium'] = QNIAPP.upsell['Q1']['IN'].premium;
    QNIAPP.IN.Qt.lifeassured[0]['premium'] = QNIAPP.IN.Qt.qtdtls.premium; //Revised premium contains base premium and el premium after rateup
    QNIAPP.IN.Qt.lifeassured[0]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].sumAssured;
    QNIAPP.IN.Qt.lifeassured[0]['sumassured'] = QNIAPP.IN.Qt.qtdtls.sumAssured;
    QNIAPP.IN.Qt.lifeassured[0]['oldtax'] = QNIAPP.upsell['Q1']['IN'].tottax;
    QNIAPP.IN.Qt.lifeassured[0]['tottax'] = QNIAPP.IN.Qt.qtdtls.tottax;
    QNIAPP.IN.Qt.lifeassured[0]['oldterm'] = QNIAPP.upsell['Q1']['IN'].term;
    QNIAPP.IN.Qt.lifeassured[0]['term'] = QNIAPP.IN.Qt.qtdtls.term;
    QNIAPP.IN.Qt.lifeassured[0]['partyid'] = QNIAPP.lifeassured[0].partyid;
    QNIAPP.IN.Qt.lifeassured[0]['deleteflg'] = (QNIAPP.lifeassured[0].deleteflg) ? QNIAPP.lifeassured[0].deleteflg : "";
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) { //For Extra Life and Extra Life Income consent letter letter (inserting in QI_COUNTEROFFER_DTLS table).
      QNIAPP.IN.Qt.lifeassured[0].optionalriders = new Array();
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) {
          QNIAPP.IN.Qt.lifeassured[0].optionalriders[count] = {};
          if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['excesspremium'] = (QNIAPP.IN.Qt['rider'] && QNIAPP.IN.Qt['rider'][i].excessPremium && QNIAPP.IN.Qt['rider'][i].excessPremium[0]) ? QNIAPP.IN.Qt['rider'][i].excessPremium[0] : "";
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['oldpremium'] = (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.upsell['Q1']['IN'].rider[i]['name'])) ? QNIAPP.upsell['Q1']['IN'].rider[i].premium : 0;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['premium'] = (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) ? QNIAPP.IN.Qt.qtdtls.rider[i].premium : 0;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].rider[i].sumAssured;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['sumassured'] = QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['oldterm'] = QNIAPP.upsell['Q1']['IN'].rider[i].term;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['term'] = QNIAPP.IN.Qt.qtdtls.rider[i].term;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['deleteflg'] = QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['name'] = QNIAPP.IN.Qt.qtdtls.rider[i].name_cd;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['oldtax'] = QNIAPP.upsell['Q1']['IN'].rider[i].tax;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['tottax'] = QNIAPP.IN.Qt.qtdtls.rider[i].tax;
          }
          else if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "Y") {
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['excesspremium'] = "";
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['oldpremium'] = QNIAPP.upsell['Q1']['IN'].rider[i].premium;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['premium'] = "";
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['oldsumassured'] = QNIAPP.upsell['Q1']['IN'].rider[i].sumAssured;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['sumassured'] = "";
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['oldterm'] = QNIAPP.upsell['Q1']['IN'].rider[i].term;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['term'] = "";
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['deleteflg'] = "Y";
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['name'] = QNIAPP.IN.Qt.qtdtls.rider[i].name_cd;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['oldtax'] = QNIAPP.upsell['Q1']['IN'].rider[i].tax;
            QNIAPP.IN.Qt.lifeassured[0].optionalriders[count]['tottax'] = "";
          }
          count = count + 1;
        }
      }
    }
  };

  UWR_ACT.isEmrDurationSameAsTerm = function (emr, emr_dur) {
    var ret_flag = true;
    if (emr && emr_dur) {
      ret_flag = (emr_dur == QNIAPP.IN.Qt.qtdtls.term) ? true : false;
    }
    return ret_flag;
  };

  UWR_ACT.isPmaDurationSameAsTerm = function (pma, pma_dur) {
    var ret_flag = true;
    if (pma && pma_dur) {
      ret_flag = (pma_dur == QNIAPP.IN.Qt.qtdtls.term) ? true : false;
    }
    return ret_flag;
  };

  UWR_ACT.createULIPEMRPMAObject = function (iteration, emr_iteration, pma_iteration, laindex) {
    for (var i = 0; i < iteration; i++) {
      if (laindex == 0) {
        QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i] = [];
        QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i][0] = 0;
        QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i][1] = 0;
      }
      else {
        QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i][2] = 0;
        QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i][3] = 0;
      }

      if (i < pma_iteration) {
        if (laindex == 0) {
          QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i][1] = QNIAPP.lifeassured[laindex].pma;
        }
        else {
          QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i][3] = QNIAPP.lifeassured[laindex].pma;
        }
      }
      if (i < emr_iteration) {
        if (laindex == 0) {
          QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i][0] = QNIAPP.lifeassured[laindex].emr;
        }
        else {
          QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i][2] = QNIAPP.lifeassured[laindex].emr;
        }
      }
    }
  };
  UWR_ACT.createUWPartyEMRPMAObject = function (iteration, prp_emr_dur, prp_pma_dur, life_emr_dur, life_pma_dur, prp_emr, prp_pma, life_emr, life_pma) {
    for (var i = 0; i < iteration; i++) {
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i] = [];
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i][0] = (i < life_emr_dur) ? life_emr : 0;
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i][1] = (i < life_pma_dur) ? life_pma : 0;
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i][2] = (i < prp_emr_dur) ? prp_emr : 0;
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][i][3] = (i < prp_pma_dur) ? prp_pma : 0;
    }
  };
  UWR_ACT.createEMRPMAObjectForRiders = function (rider_nm, iteration, emr_iteration, pma_iteration, laindex, ridindex) {
    ridername_json = { 'Extra Life': "EL", "Extra Health": "EH", "Extra Disability": "ED", "EL": "EL", "EH": "EH", "ED": "ED" };
    var rider_code = ridername_json[rider_nm];
    QNIAPP.IN.Qt['qtdtls']['rateup'][rider_code] = {};
    QNIAPP.IN.Qt['qtdtls']['rateup'][rider_code]['yrwise'] = {};
    for (var i = 0; i < iteration; i++) {
      QNIAPP.IN.Qt['qtdtls']['rateup'][rider_code]['yrwise'][i] = [];
      QNIAPP.IN.Qt['qtdtls']['rateup'][rider_code]['yrwise'][i][0] = 0;
      QNIAPP.IN.Qt['qtdtls']['rateup'][rider_code]['yrwise'][i][1] = 0;
      if (i < pma_iteration) {
        QNIAPP.IN.Qt['qtdtls']['rateup'][rider_code]['yrwise'][i][1] = QNIAPP.lifeassured[laindex].rider[ridindex].pma;
      }
      if (i < emr_iteration) {
        QNIAPP.IN.Qt['qtdtls']['rateup'][rider_code]['yrwise'][i][0] = QNIAPP.lifeassured[laindex].rider[ridindex].emr;
      }
    }
  };

  UWR_ACT.checkandSetAlteredInputs = function (index) {
    var isaltered = false;
    if (QNIAPP.lifeassured[index].altsumassured && QNIAPP.lifeassured[index].altsumassured !== "") {
      QNIAPP.IN.Qt.qtdtls.sumAssured = QNIAPP.lifeassured[index].altsumassured;
      isaltered = true;
    }
    if (QNIAPP.lifeassured[index].altterm && QNIAPP.lifeassured[index].altterm !== "") {
      QNIAPP.IN.Qt.qtdtls.term = QNIAPP.lifeassured[index].altterm + "";
      QNIAPP.IN.Qt.term = QNIAPP.IN.Qt.qtdtls.term + "";
      //ppt_arr = (typeof(QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'],'ppt'))==='string')?eval('QNIAPP.'+QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'],'ppt')+((is_pptEqTerm)?'.getPT()':'.getPPT('+QNIAPP.IN.Qt.qtdtls.term+');')):QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'],'ppt');
      if (QNIAPP.IN.id !== "UL8NIV" && QNIAPP.IN.id !== "UL8CG" && QNIAPP.IN.id !== "UL9CG" && QNIAPP.IN.id !== "ESTE" && QNIAPP.IN.id !== "ESTEE") {
        ppt_arr = (typeof (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt')) === 'string') ? eval('QNIAPP.' + QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt') + '.getPPT(' + QNIAPP.IN.Qt.qtdtls.term + ');') : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt');
      }
      else if (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE" || QNIAPP.IN.id == "SARJB" || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE" || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE" || QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
        ppt_arr = eval('QNIAPP.' + QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt') + '.getPPT();');
      }
      else {
        ppt_arr = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_TERM']['getPPT'](QNIAPP.IN.Qt.qtdtls.pptOption, QNIAPP.IN.Qt.qtdtls.term);
      }
      if (ppt_arr.length == 1) {
        QNIAPP.IN.Qt.qtdtls.ppt = ppt_arr[0] + "";
        QNIAPP.IN.Qt.ppt = QNIAPP.IN.Qt.qtdtls.ppt;
      } else {
        for (var ppt in ppt_arr) {
          if (parseInt(ppt_arr[ppt]) >= parseInt(QNIAPP.IN.Qt.qtdtls.ppt)) {
            QNIAPP.IN.Qt.qtdtls.ppt = ppt_arr[ppt] + "";
            QNIAPP.IN.Qt.ppt = QNIAPP.IN.Qt.qtdtls.ppt;
            break;
          }
        }
      }
      if (QNIAPP.IN.id === "SIPPAR" || QNIAPP.IN.id === "SIPPARE" || QNIAPP.IN.id === "SIPPARV9" || QNIAPP.IN.id === "SIPPARV9E") {
        QNIAPP.IN.Qt.qtdtls.pyout = (parseInt(QNIAPP.IN.Qt.qtdtls.term) - parseInt(QNIAPP.IN.Qt.qtdtls.ppt)) + "";
        QNIAPP.IN.Qt.pyout = QNIAPP.IN.Qt.qtdtls.pyout;
      }
      isaltered = true;
    }
    if (QNIAPP.lifeassured[index].alttobaccostatus && QNIAPP.lifeassured[index].alttobaccostatus !== "") {
      QNIAPP.IN.Qt.qtdtls.tobstatus = (QNIAPP.lifeassured[index].alttobaccostatus === "Y") ? "1" : "0";
      isaltered = true;
    }
    if (QNIAPP.IN.id == 'CDAC' && QNIAPP.lifeassured[index].altmedicalflg && QNIAPP.lifeassured[index].altmedicalflg !== "") {
      QNIAPP.IN.Qt.qtdtls.medicalFlg = (QNIAPP.lifeassured[index].altmedicalflg === "Y") ? "Y" : "N";
      isaltered = true;
    }
    return isaltered;
  };

  UWR_ACT.checkandSetAlteredInputsForMultipleCounter = function (index) {
    var isaltered = false;
    if (QNIAPP.lifeassured[index].altterm && QNIAPP.lifeassured[index].altterm !== "") {
      QNIAPP.IN.Qt.qtdtls.term = QNIAPP.lifeassured[index].altterm + "";
      QNIAPP.IN.Qt.term = QNIAPP.IN.Qt.qtdtls.term + "";
      //ppt_arr = (typeof(QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'],'ppt'))==='string')?eval('QNIAPP.'+QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'],'ppt')+((is_pptEqTerm)?'.getPT()':'.getPPT('+QNIAPP.IN.Qt.qtdtls.term+');')):QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'],'ppt');
      if (QNIAPP.IN.id !== "UL8NIV" && QNIAPP.IN.id !== "UL8CG" && QNIAPP.IN.id !== "UL9CG") {
        ppt_arr = (typeof (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt')) === 'string') ? eval('QNIAPP.' + QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt') + '.getPPT(' + QNIAPP.IN.Qt.qtdtls.term + ');') : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt');
      }

      else if (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE" || QNIAPP.IN.id == "SARJB") {
        ppt_arr = eval('QNIAPP.' + QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt') + '.getPPT();');
      }

      else {
        ppt_arr = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_TERM']['getPPT'](QNIAPP.IN.Qt.qtdtls.pptOption, QNIAPP.IN.Qt.qtdtls.term);
      }
      if (ppt_arr.length == 1) {
        QNIAPP.IN.Qt.qtdtls.ppt = ppt_arr[0] + "";
        QNIAPP.IN.Qt.ppt = QNIAPP.IN.Qt.qtdtls.ppt;
      } else {
        for (var ppt in ppt_arr) {
          if (parseInt(ppt_arr[ppt]) >= parseInt(QNIAPP.IN.Qt.qtdtls.ppt)) {
            QNIAPP.IN.Qt.qtdtls.ppt = ppt_arr[ppt] + "";
            QNIAPP.IN.Qt.ppt = QNIAPP.IN.Qt.qtdtls.ppt;
            break;
          }
        }
      }
      if (QNIAPP.IN.id === "SIPPAR" || QNIAPP.IN.id === "SIPPARE" || QNIAPP.IN.id === "SIPPARV9" || QNIAPP.IN.id === "SIPPARV9E") {
        QNIAPP.IN.Qt.qtdtls.pyout = (parseInt(QNIAPP.IN.Qt.qtdtls.term) - parseInt(QNIAPP.IN.Qt.qtdtls.ppt)) + "";
        QNIAPP.IN.Qt.pyout = QNIAPP.IN.Qt.qtdtls.pyout;
      }
      isaltered = true;
    }
    if (QNIAPP.lifeassured[index].alttobaccostatus && QNIAPP.lifeassured[index].alttobaccostatus !== "") {
      QNIAPP.IN.Qt.qtdtls.tobstatus = (QNIAPP.lifeassured[index].alttobaccostatus === "Y") ? "1" : "0";
      isaltered = true;
    }
    return isaltered;
  };

  UWR_ACT.checkandSetAlteredInputs_JL = function () {
    var isAltValid = false;
    var jl_sumassured = {};
    var jl_term = {};
    var jl_pml = {};
    jl_sumassured = QNIAPP.UWR_ACT.processAlteredInputs_JL(QNIAPP.lifeassured, "altsumassured");
    jl_term = QNIAPP.UWR_ACT.processAlteredInputs_JL(QNIAPP.lifeassured, "altterm");
    jl_pml = QNIAPP.UWR_ACT.processAlteredInputs_JL(QNIAPP.lifeassured, "pma");
    isAltValid = QNIAPP.UWR_ACT.chkPrcsdAltInp_JL(jl_sumassured, "sumAssured") && QNIAPP.UWR_ACT.chkPrcsdAltInp_JL(jl_term, "term") && QNIAPP.UWR_ACT.chkPrcsdAltInp_JL(jl_pml, "pma");
    return isAltValid;
  };
  UWR_ACT.processAlteredInputs_JL = function (lifeassured, altered_field) {
    var jl_altered = { 'alteredValue': 0, 'count': 0, 'singleValue': 0 };
    for (var i = 0; i < lifeassured.length; i++) {
      if (eval('lifeassured[' + i + '].' + altered_field) && eval('lifeassured[' + i + '].' + altered_field) !== "") {
        if (jl_altered['count'] > 0 && (eval('lifeassured[' + (i - 1) + '].' + altered_field) === eval('lifeassured[' + i + '].' + altered_field))) {
          jl_altered['alteredValue'] = eval('lifeassured[' + i + '].' + altered_field);
        }
        jl_altered['count']++;
        if (jl_altered['count'] === 1) {
          jl_altered['singleValue'] = eval('lifeassured[' + i + '].' + altered_field);
        }
      }
    }
    return jl_altered;
  };
  UWR_ACT.chkPrcsdAltInp_JL = function (alt_obj, alt_field) {
    var isAltValid = true;
    var errmsg = 'Term or Sumassured alteration not allowed for joint life';
    if (alt_obj.count > 0) {
      if (alt_field == 'pma') {
        QNIAPP.ERR.push('PML is not applicable for HDFC Life Classic One');
        isAltValid = false;
      } else {
        if (alt_obj.alteredValue > 0) {
          if (alt_obj.alteredValue !== eval('QNIAPP.IN.Qt.qtdtls.' + alt_field)) {
            QNIAPP.ERR.push(errmsg);
            isAltValid = false;
          }
        }
        else {
          if (alt_obj.singleValue !== eval('QNIAPP.IN.Qt.qtdtls.' + alt_field)) {
            isAltValid = false;
            QNIAPP.ERR.push(errmsg);
          }
        }
      }
    }
    return isAltValid;
  };
  UWR_ACT.checkandSetAlteredSAForUL8CIP = function () {
    var isValidAlt = true;
    var restrictFields = ['altsumassured'];
    if (QNIAPP.IN.Qt.qtdtls.benefit === QNIAPP.CONSTS.GYBO) {
      restrictFields.push('altterm');
    }
    var altField = '';
    for (var i = 0; i < QNIAPP.lifeassured.length; i++) {
      for (var j = 0; j < restrictFields.length; j++) {
        if (eval('QNIAPP.lifeassured[' + i + '].' + restrictFields[j]) != '' && parseInt(eval('QNIAPP.lifeassured[' + i + '].' + restrictFields[j])) != 0) {
          altField = restrictFields[j];
          if (altField !== 'pma') {//pma is applicable for click to invest plus
            if (parseInt(eval('QNIAPP.lifeassured[' + i + '].' + restrictFields[j])) != parseInt(eval('QNIAPP.IN.Qt.qtdtls.' + QNIAPP.UL8CIP_PROP_MAP[restrictFields[j]]))) {
              isValidAlt = false;
            }
          } else {
            isValidAlt = false;
          }
          break;
        }
      }
    }
    if (!isValidAlt) {
      QNIAPP.ERR.push(QNIAPP.UL8CIP_PROP_MAP[altField] + ' alteration is not applicable for ' + QNIAPP.IN.Qt.qtdtls.benefit);
    } else {
      if (QNIAPP.IN.Qt.qtdtls.benefit === QNIAPP.CONSTS.PWO) {
        var termObj = QNIAPP.UWR_ACT.processAlteredInputs_JL(QNIAPP.lifeassured, "altterm");
        if (termObj.alteredValue > 0) {
          if (termObj.alteredValue !== QNIAPP.IN.Qt.qtdtls.term) {
            QNIAPP.IN.Qt.qtdtls.term = termObj.alteredValue;
          }
        } else {
          if (termObj.singleValue > 0) {
            if (termObj.singleValue !== QNIAPP.IN.Qt.qtdtls.term) {
              isValidAlt = false;
              QNIAPP.ERR.push("For both life assureds alter term should be same");
            }
          }
        }
      } else {
        isValidAlt = QNIAPP.UWR_ACT.checkandSetAlteredSAForULIP(0);
      }
    }
    return isValidAlt;
  };
  UWR_ACT.checkandSetAlteredInputs_C2P3DP = function (index) {
    var isaltered = false;
    if (QNIAPP.lifeassured[index].altterm && QNIAPP.lifeassured[index].altterm !== "") {
      QNIAPP.IN.Qt.qtdtls.term = QNIAPP.lifeassured[index].altterm + "";
      QNIAPP.IN.Qt.term = QNIAPP.IN.Qt.qtdtls.term + "";
      ppt_arr = (typeof (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt')) === 'string') ? eval('QNIAPP.' + QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt') + '.getPPT(' + QNIAPP.IN.Qt.qtdtls.term + ');') : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt');
      if (ppt_arr.length == 1) {
        QNIAPP.IN.Qt.qtdtls.ppt = ppt_arr[0] + "";
        QNIAPP.IN.Qt.ppt = QNIAPP.IN.Qt.qtdtls.ppt;
      } else {
        for (var ppt in ppt_arr) {
          if (parseInt(ppt_arr[ppt]) >= parseInt(QNIAPP.IN.Qt.qtdtls.ppt)) {
            QNIAPP.IN.Qt.qtdtls.ppt = ppt_arr[ppt] + "";
            QNIAPP.IN.Qt.ppt = QNIAPP.IN.Qt.qtdtls.ppt;
            break;
          }
        }
      }
      if (QNIAPP.IN.Qt.qtdtls.option == QNIAPP.CONSTS.IR) {
        var term = parseInt(QNIAPP.IN.Qt.qtdtls.term);
        var suboption = QNIAPP.IN.Qt.qtdtls.suboption;
        var saConvFac = QNIAPP.C2P3DP_MI_SA_CONV_FAC.getSAConversionFactor(QNIAPP.IN.Qt.qtdtls.age, term, suboption);
        var monthlyIncome = (QNIAPP.IN.Qt.qtdtls.sumAssured) / (saConvFac);
        QNIAPP.IN.Qt.qtdtls.monthlyIncome = Math.round(monthlyIncome);

      }
      isaltered = true;
    }
    if (QNIAPP.lifeassured[index].altsumassured && QNIAPP.lifeassured[index].altsumassured !== "") {
      var lumpsum = (QNIAPP.IN.Qt.qtdtls.lumpsum) ? parseInt(QNIAPP.IN.Qt.qtdtls.lumpsum) : 0;
      var ir = (QNIAPP.IN.Qt.qtdtls.increaseIncomePercentage) ? parseInt(QNIAPP.IN.Qt.qtdtls.increaseIncomePercentage) : 0;
      var ip = (QNIAPP.IN.Qt.qtdtls.incomeTerm) ? parseInt(QNIAPP.IN.Qt.qtdtls.incomeTerm) : 0;
      if (QNIAPP.IN.Qt.qtdtls.option == QNIAPP.CONSTS.I || QNIAPP.IN.Qt.qtdtls.option == QNIAPP.CONSTS.ELI) { //For Income and extra life income
        var temp_baseSumassured = (QNIAPP.IN.Qt.qtdtls.baseSumAssured * QNIAPP.lifeassured[index].altsumassured) / QNIAPP.IN.Qt.qtdtls.sumAssured;
        QNIAPP.IN.Qt.qtdtls.lumpsum = Math.round((lumpsum * QNIAPP.lifeassured[index].altsumassured) / QNIAPP.IN.Qt.qtdtls.sumAssured);
        var sigma_yi = (temp_baseSumassured - QNIAPP.IN.Qt.qtdtls.lumpsum);
        var yearlyIncome = (sigma_yi * 2) / ((2 + ((ir / 100) * (ip - 1))) * (ip));
        QNIAPP.IN.Qt.qtdtls.monthlyIncome = Math.round(yearlyIncome / 12);
        isaltered = true;
      }
      else if (QNIAPP.IN.Qt.qtdtls.option == QNIAPP.CONSTS.IR) { // for income replacement option
        var term = parseInt(QNIAPP.IN.Qt.qtdtls.term);
        var suboption = QNIAPP.IN.Qt.qtdtls.suboption;
        var saConvFac = QNIAPP.C2P3DP_MI_SA_CONV_FAC.getSAConversionFactor(QNIAPP.IN.Qt.qtdtls.age, term, suboption);
        var monthlyIncome = (QNIAPP.lifeassured[index].altsumassured) / (saConvFac);
        QNIAPP.IN.Qt.qtdtls.monthlyIncome = Math.round(monthlyIncome);
        isaltered = true;
      }
      else {
        QNIAPP.IN.Qt.qtdtls.sumAssured = QNIAPP.lifeassured[index].altsumassured; //for rest of the option
        isaltered = true;
      }

    }

    if (QNIAPP.lifeassured[index].alttobaccostatus && QNIAPP.lifeassured[index].alttobaccostatus !== "") {
      QNIAPP.IN.Qt.qtdtls.tobstatus = (QNIAPP.lifeassured[index].alttobaccostatus === "Y") ? "1" : "0";
      isaltered = true;
    }
    return isaltered;
  };

  // check and set altered parameters for IB rider
  UWR_ACT.checkandSetAlteredInputsForIBRider = function (index, rider_index) {
    var isaltered = false;

    if (QNIAPP.lifeassured[index]['rider'][rider_index].altsumassured && QNIAPP.lifeassured[index]['rider'][rider_index].altsumassured !== "") {
      QNIAPP.IN.Qt.qtdtls['rider'][rider_index].sumAssured = QNIAPP.lifeassured[index]['rider'][rider_index].altsumassured;
      QNIAPP.IN.Qt.qtdtls['rider'][rider_index].sumassured = QNIAPP.lifeassured[index]['rider'][rider_index].altsumassured;
      isaltered = true;
    }
    if (QNIAPP.lifeassured[index]['rider'][rider_index].altterm && QNIAPP.lifeassured[index]['rider'][rider_index].altterm !== "") {
      QNIAPP.IN.Qt.qtdtls['rider'][rider_index].term = QNIAPP.lifeassured[index]['rider'][rider_index].altterm + "";
      QNIAPP.IN.Qt['rider'][rider_index].term = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].term + "";
      if (QNIAPP.IN.Qt.qtdtls.rider[rider_index].pptopt && QNIAPP.IN.Qt.qtdtls.rider[rider_index].pptopt == 'Regular') {
        QNIAPP.IN.Qt.qtdtls['rider'][rider_index].ppt = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].term;
        QNIAPP.IN.Qt['rider'][rider_index].ppt = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].ppt;
      }
      else {
        ppt_arr = eval('QNIAPP.' + QNIAPP.IN.Qt.qtdtls['rider'][rider_index].name + '_TERM.getPPT(' + QNIAPP.IN.Qt.qtdtls['rider'][rider_index].term + ');');
        if (ppt_arr.length == 1) {
          QNIAPP.IN.Qt.qtdtls['rider'][rider_index].ppt = ppt_arr[0] + "";

          QNIAPP.IN.Qt['rider'][rider_index].ppt = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].ppt;
        } else {
          for (var ppt in ppt_arr) {
            if (parseInt(ppt_arr[ppt]) >= parseInt(QNIAPP.IN.Qt.qtdtls['rider'][rider_index].ppt)) {
              QNIAPP.IN.Qt.qtdtls['rider'][rider_index].ppt = ppt_arr[ppt] + "";
              QNIAPP.IN.Qt['rider'][rider_index].ppt = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].ppt;
              break;
            }
          }
        }
      }
      isaltered = true;
    }

    /**TOB status not applicable for rider alteration*/
    /* if(QNIAPP.lifeassured[index].alttobaccostatus && QNIAPP.lifeassured[index].alttobaccostatus!==""){
      QNIAPP.IN.Qt.qtdtls.tobstatus = (QNIAPP.lifeassured[index].alttobaccostatus === "Y")?"1":"0";
      isaltered=true;
    }*/
    return isaltered;
  };

  UWR_ACT.checkandSetAlteredInputs_EL = function (riderobj, riderclob) { //For C2P3DP Extra Life and Extra Life Income rider
    if (riderobj.altsumassured && riderobj.altsumassured !== "") {
      if (riderclob.name == QNIAPP.CONSTS.EL) {
        QNIAPP.IN.Qt.qtdtls.elSumAssured = riderobj.altsumassured;
        if (QNIAPP.IN.Qt.qtdtls.uwdiscflg) {
          QNIAPP.IN.Qt.qtdtls.uwdiscflg = "N";
        }
      }
      else if (riderclob.name == QNIAPP.CONSTS.ELI) {
        var lumpsum = (QNIAPP.IN.Qt.qtdtls.elLumpSum) ? parseInt(QNIAPP.IN.Qt.qtdtls.elLumpSum) : 0;
        var ir = (QNIAPP.IN.Qt.qtdtls.increaseIncomePercentage) ? parseInt(QNIAPP.IN.Qt.qtdtls.increaseIncomePercentage) : 0;
        var ip = (QNIAPP.IN.Qt.qtdtls.incomeTerm) ? parseInt(QNIAPP.IN.Qt.qtdtls.incomeTerm) : 0;
        var temp_elbaseSumassured = (QNIAPP.IN.Qt.qtdtls.elBaseSumAssured * riderobj.altsumassured) / riderclob.sumAssured;
        QNIAPP.IN.Qt.qtdtls.elLumpSum = Math.round((lumpsum * riderobj.altsumassured) / riderclob.sumAssured);
        var sigma_yi_eli = (temp_elbaseSumassured - QNIAPP.IN.Qt.qtdtls.elLumpSum);
        var elyearlyincome = (sigma_yi_eli * 2) / ((2 + ((ir / 100) * (ip - 1))) * (ip));
        QNIAPP.IN.Qt.qtdtls.elMonthlyIncome = Math.round(elyearlyincome / 12);
        if (QNIAPP.IN.Qt.qtdtls.uwdiscflg) {
          QNIAPP.IN.Qt.qtdtls.uwdiscflg = "N";
        }
      }
      else if (riderclob.name == "EP") {
        if (riderobj.altsumassured < 1000000) {
          QNIAPP.ERR.push('Sum assured is less than the min allowed SA 1000000 for Extra Protection rider ');
          //return QNIAPP.COMM_NODE.sendErrorResponseToService("",0);
        }
        else {
          QNIAPP.IN.Qt.qtdtls.epSumAssured = riderobj.altsumassured;

          riderclob.sumAssured = riderobj.altsumassured;

          riderclob.sumassured = riderobj.altsumassured;
        }

      }
      else {
        riderclob.sumAssured = riderobj.altsumassured;
        riderclob.sumassured = riderobj.altsumassured;
      }
    }
    if (riderobj.altterm && riderobj.altterm !== "") {
      riderclob.term = riderobj.altterm;
      if (riderclob.name == QNIAPP.CONSTS.EL || riderclob.name == QNIAPP.CONSTS.ELI) {
        if (QNIAPP.IN.Qt.qtdtls.uwdiscflg) {
          QNIAPP.IN.Qt.qtdtls.uwdiscflg = "N";
        }
        QNIAPP.IN.Qt.qtdtls.elTerm = riderclob.term;
        ppt_arr = (typeof (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt')) === 'string') ? eval('QNIAPP.' + QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt') + '.getPPT(' + QNIAPP.IN.Qt.qtdtls.elTerm + ');') : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ppt');
        if (ppt_arr.length == 1) {
          riderclob.ppt = ppt_arr[0] + "";
          QNIAPP.IN.Qt.qtdtls.elPpt = riderclob.ppt;
        } else {
          for (var ppt in ppt_arr) {
            if (parseInt(ppt_arr[ppt]) >= parseInt(riderclob.ppt)) {
              riderclob.ppt = ppt_arr[ppt] + "";
              QNIAPP.IN.Qt.qtdtls.elPpt = riderclob.ppt;
              break;
            }
          }
        }
      }
      else if (riderclob.name == 'PPR_PAC' || riderclob.name == 'PPR_ADC') {
        if (riderclob.pptopt && riderclob.pptopt == "Regular") {
          riderclob.ppt = riderclob.term;
        }
      }
      else {  // To verify alt term scenarioos of ib and ci------
        if (riderclob.pptopt && riderclob.pptopt == "Regular") {
          if (riderclob.name == "EP" && ((QNIAPP.lifeassured[0].altterm !== "" && riderobj.altterm != QNIAPP.lifeassured[0].altterm) || (QNIAPP.lifeassured[0].altterm == "" && riderobj.altterm != QNIAPP.IN.Qt.qtdtls.term))) {
            QNIAPP.ERR.push("Extra Protection Rider term should be same as base term " + QNIAPP.lifeassured[0].altterm);
            //return QNIAPP.COMM_NODE.sendErrorResponseToService(response,"",0);
          }
          else {
            riderclob.ppt = riderclob.term;
          }

        }
        else {
          ppt_arr = eval('QNIAPP.' + riderclob.name + '_TERM.getPPT(' + riderclob.term + ');');
          if (ppt_arr.length == 1) {
            riderclob.ppt = ppt_arr[0] + "";

          } else {
            for (var ppt in ppt_arr) {
              if (parseInt(ppt_arr[ppt]) >= parseInt(riderclob.ppt)) {
                riderclob.ppt = ppt_arr[ppt] + "";
                break;
              }
            }
          }
        }
      }

    }
  };

  UWR_ACT.validateAlteredParmRider = function (index, la_rider) {
    for (var la_rid_index = 0; la_rid_index < la_rider.length - 1; la_rid_index++) {
      var rider_name = UWR_ACT.identifyRider(la_rider[la_rid_index]['name']);
      if (!QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, rider_name) && la_rider[la_rid_index]['deleteflg'] === "N" && (la_rider[la_rid_index].altsumassured !== "" || la_rider[la_rid_index].altterm !== "")) {
        var rider_name_next = UWR_ACT.identifyRider(la_rider[la_rid_index + 1]['name']);
        if (!QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, rider_name_next) && la_rider[la_rid_index + 1]['deleteflg'] === "N" && (la_rider[la_rid_index].altsumassured !== la_rider[la_rid_index + 1].altsumassured) && la_rider[la_rid_index + 1].altsumassured !== "") {
          QNIAPP.ERR.push("Altered Sumassured Of Riders Should Be Equal.");
          //return false;
        }
        if (!QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, rider_name_next) && la_rider[la_rid_index + 1]['deleteflg'] === "N" && (la_rider[la_rid_index].altterm !== la_rider[la_rid_index + 1].altterm) && la_rider[la_rid_index + 1].altterm !== "") {
          QNIAPP.ERR.push("Altered Term Of Riders Should Be Equal.");
          //return false;
        }
      };
    }
    if (QNIAPP.ERR.length) {
      return false;
    }
    else {
      return true;
    }
  };

  UWR_ACT.validateAlteredParmMB = function (index, rider_obj) {
    for (var la_rid_index = 0; la_rid_index < rider_obj.length; la_rid_index++) {
      var rider_name = UWR_ACT.identifyRider(rider_obj[la_rid_index]['name']);
      if (!QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, rider_name) && rider_obj[la_rid_index]['deleteflg'] === "N") {
        if (rider_obj[la_rid_index].altsumassured !== "" && (rider_obj[la_rid_index].altsumassured !== QNIAPP.lifeassured[index].altsumassured) && QNIAPP.lifeassured[index].altsumassured !== "") {
          QNIAPP.ERR.push("Altered Sumassured Of Riders and Main Benefit Should be equal.");
          //return false;
        }
        if (rider_obj[la_rid_index].altterm !== "" && (rider_obj[la_rid_index].altterm !== QNIAPP.lifeassured[index].altterm) && QNIAPP.lifeassured[index].altterm !== "") {
          QNIAPP.ERR.push("Altered Term Of Riders and Main Benefit Should be equal.");
          //return false;
        }
      };
    }
    if (QNIAPP.ERR.length) {
      return false;
    }
    else {
      return true;
    }
  };

  UWR_ACT.checkAltparmriderUlip = function (index, rider_obj) {
    if (rider_obj && rider_obj.length > 0) {
      var count = 0;
      for (var la_rid_index = 0; la_rid_index < rider_obj.length; la_rid_index++) {
        var rider_name = UWR_ACT.identifyRider(rider_obj[la_rid_index]['name']);
        if (rider_obj[la_rid_index]['deleteflg'] === "N" && !QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, rider_name)) {
          if ((rider_obj[la_rid_index].altsumassured || rider_obj[la_rid_index].altterm) && (rider_obj[la_rid_index].altsumassured !== "" || rider_obj[la_rid_index].altterm !== "")) {
            count++;
          }
        };

      }
      /*	if(UWR_ACT.identifyRider(rider_obj[la_rid_index]['name']) === (QNIAPP.IN.Qt.qtdtls.rider[la_rid_index]['name'])){
    QNIAPP.IN.Qt.qtdtls.rider[la_rid_index].deleteflg = rider_obj[la_rid_index]['deleteflg'];
  }*/
      for (var i = 0; i < rider_obj.length; i++) {
        var rider_name = UWR_ACT.identifyRider(rider_obj[i]['name']);
        if (rider_obj[i].deleteflg == "Y" && !QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, rider_name)) {
          for (var k = 0; k < QNIAPP.IN.Qt.qtdtls.rider.length; k++) {
            if (QNIAPP.IN.Qt.qtdtls.rider[k].name_cd == rider_obj[i].name) {
              QNIAPP.IN.Qt.qtdtls.rider[k].deleteflg = "Y";
              break;
            }
          }
        }
      }

      if (count) {
        return true;
      }
      else {
        return false;
      }
    }
    return false;
  };

  UWR_ACT.checkandSetAlteredSAForULIP = function (index) {
    if (QNIAPP.UWR_ACT.checkAltparmriderUlip(index, QNIAPP.lifeassured[index].rider)) {
      if (QNIAPP.UWR_ACT.validateAlteredParmRider(index, QNIAPP.lifeassured[index].rider) && QNIAPP.UWR_ACT.validateAlteredParmMB(index, QNIAPP.lifeassured[index].rider)) {
        QNIAPP.UWR_ACT.setSAaltered(index);
        return true;
      }
      else {
        return false;
      }
    }
    else {
      if (QNIAPP.UWR_ACT.checkandSetAlteredInputs(0) && QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider > 0) {
        for (var x = 0; x < QNIAPP.IN.Qt.qtdtls.rider.length; x++) {
          var rider_elem = QNIAPP.IN.Qt.qtdtls.rider[x];
          if (rider_elem.deleteflg === "N" && !QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[x]['name'])) {
            if (QNIAPP.IN.Qt.qtdtls.sumAssured != rider_elem.sumAssured) {
              rider_elem.sumAssured = QNIAPP.IN.Qt.qtdtls.sumAssured;
            }
            if (QNIAPP.IN.Qt.qtdtls.term != rider_elem.term) {
              rider_elem.term = QNIAPP.IN.Qt.qtdtls.term;
            }
          }
        }
        return true;
      }
    }
    //QNIAPP.UWR_ACT.checkandSetAlteredInputs(0);
    logger.info("After Rider Processing --->" + JSON.stringify(QNIAPP.IN.Qt.qtdtls.rider));
    return true;
  };

  UWR_ACT.setSAaltered = function (index) {
    for (var la_rid_index = 0; la_rid_index < QNIAPP.lifeassured[index].rider.length; la_rid_index++) {
      var la_rider_rec = QNIAPP.lifeassured[index].rider[la_rid_index];
      var rider_name = UWR_ACT.identifyRider(la_rider_rec.name);
      if (!QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, rider_name)) {
        for (var x = 0; x < QNIAPP.IN.Qt.qtdtls.rider.length; x++) {
          var rider_elem = QNIAPP.IN.Qt.qtdtls.rider[x];
          if (UWR_ACT.identifyRider(la_rider_rec.name) === (rider_elem.name)) {
            if (la_rider_rec.deleteflg === "N") {
              QNIAPP.IN.Qt.qtdtls.sumAssured = la_rider_rec.altsumassured;
              if (la_rider_rec.altsumassured !== "" && la_rider_rec.altsumassured !== rider_elem.sumAssured) {
                rider_elem.sumAssured = la_rider_rec.altsumassured;
              }
              if (la_rider_rec.altterm !== "" && la_rider_rec.altterm !== rider_elem.term) {
                rider_elem.term = la_rider_rec.altterm;
              }
            }
            else {
              rider_elem.deleteflg = 'Y';
            }
          }
        }
      }
    }
    logger.info("After Rider Alteration--->" + JSON.stringify(QNIAPP.IN.Qt.qtdtls.rider));
  };
  UWR_ACT.checkandSetAlteredInputsforSplRider = function (riderobj, riderclob) { //For ULIP IB and CI Rider
    if (riderobj.altsumassured && riderobj.altsumassured !== "") {
      riderclob.sumAssured = riderobj.altsumassured;
      riderclob.sumassured = riderobj.altsumassured;
    }
    if (riderobj.altterm && riderobj.altterm !== "") {
      riderclob.term = riderobj.altterm; // To verify alt term scenarioos of ib and ci------
      if (riderclob.name == 'PPR_PAC' || riderclob.name == 'PPR_ADC') {
        if (riderclob.pptopt && riderclob.pptopt == "Regular") {
          riderclob.ppt = riderclob.term;
        }
      }
      else {
        if (riderclob.pptopt && riderclob.pptopt == "Regular") {
          riderclob.ppt = riderclob.term;
        }
        else {
          ppt_arr = eval('QNIAPP.' + riderclob.name + '_TERM.getPPT(' + riderclob.term + ');');
          if (ppt_arr.length == 1) {
            riderclob.ppt = ppt_arr[0] + "";
          } else {
            for (var ppt in ppt_arr) {
              if (parseInt(ppt_arr[ppt]) >= parseInt(riderclob.ppt)) {
                riderclob.ppt = ppt_arr[ppt] + "";
                break;
              }
            }
          }
        }
      }
    }
  };

  UWR_ACT.createEMRPMAObject = function (iteration, emr_iteration, pma_iteration) {
    var iteration_loop = QNIAPP.IN.Qt.qtdtls.term;
    var la_index = 0; // single life
    //var iteration_loop_emr=0;
    //var iteration_loop_pma =0;
    for (var x = 0; x < iteration_loop; x++) {
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][x] = [];
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][x][0] = (QNIAPP.lifeassured[la_index].emr) ? QNIAPP.lifeassured[la_index].emr : 0;
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][x][1] = (QNIAPP.IN.Qt.excesspremium_emr[la_index]) ? QNIAPP.IN.Qt.excesspremium_emr[la_index] : 0;
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][x][2] = (QNIAPP.lifeassured[la_index].pma) ? QNIAPP.lifeassured[la_index].pma : 0;
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][x][3] = (QNIAPP.IN.Qt.excesspremium_pma[la_index]) ? QNIAPP.IN.Qt.excesspremium_pma[la_index] : 0;
      if (QNIAPP.IN.Qt.qtdtls.emr && QNIAPP.IN.Qt.qtdtls.emrduration) {
        if (!QNIAPP.UWR_ACT.isEmrDurationSameAsTerm(QNIAPP.lifeassured[la_index].emr, QNIAPP.lifeassured[la_index].emrduration)) {
          //iteration_loop_emr = QNIAPP.IN.Qt.qtdtls.emrduration;
          if (x >= QNIAPP.lifeassured[la_index].emrduration) {
            QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][x][0] = 0;
            QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][x][2] = 0;
          }
        }
      }
      if (QNIAPP.IN.Qt.qtdtls.pma && QNIAPP.IN.Qt.qtdtls.pmaduration) {
        if (!QNIAPP.UWR_ACT.isPmaDurationSameAsTerm(QNIAPP.lifeassured[la_index].pma, QNIAPP.lifeassured[la_index].pmaduration)) {
          //iteration_loop_pma = QNIAPP.IN.Qt.qtdtls.pmaduration;
          if (x >= QNIAPP.lifeassured[la_index].pmaduration) {
            QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][x][1] = 0;
            QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'][x][3] = 0;
          }
        }
      }
    }
  };

  UWR_ACT.createEMRPMAObject_JL = function () {
    var iteration_loop = QNIAPP.IN.Qt.qtdtls.term;
    var la_index = 1;
    for (var x = 0; x < iteration_loop; x++) {
      QNIAPP.IN.Qt['qtdtls']['rateup']['JL']['yrwise'][x] = [];
      QNIAPP.IN.Qt['qtdtls']['rateup']['JL']['yrwise'][x][0] = (QNIAPP.lifeassured[la_index].emr) ? QNIAPP.lifeassured[la_index].emr : 0;
      QNIAPP.IN.Qt['qtdtls']['rateup']['JL']['yrwise'][x][1] = (QNIAPP.IN.Qt.excesspremium_emr[la_index]) ? QNIAPP.IN.Qt.excesspremium_emr[la_index] : 0;
      QNIAPP.IN.Qt['qtdtls']['rateup']['JL']['yrwise'][x][2] = (QNIAPP.lifeassured[la_index].pma) ? QNIAPP.lifeassured[la_index].pma : 0;
      QNIAPP.IN.Qt['qtdtls']['rateup']['JL']['yrwise'][x][3] = (QNIAPP.IN.Qt.excesspremium_pma[la_index]) ? QNIAPP.IN.Qt.excesspremium_pma[la_index] : 0;
    }
  };

  //currently for c2pp only (IB rider)
  UWR_ACT.createEMRPMAObject_IB_rider = function (rider_index) {
    var iteration_loop = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].term;
    var la_index = 0;
    // single life
    //var iteration_loop_emr=0;
    //var iteration_loop_pma =0;

    for (var x = 0; x < iteration_loop; x++) {
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x] = [];
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][0] = (QNIAPP.lifeassured[la_index]['rider'][rider_index].emr) ? QNIAPP.lifeassured[la_index]['rider'][rider_index].emr : 0;
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][1] = (QNIAPP.IN.Qt['rider'][rider_index].excesspremium_emr[la_index]) ? QNIAPP.IN.Qt['rider'][rider_index].excesspremium_emr[la_index] : 0;
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][2] = (QNIAPP.lifeassured[la_index]['rider'][rider_index].pma) ? QNIAPP.lifeassured[la_index]['rider'][rider_index].pma : 0;
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][3] = (QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma[la_index]) ? QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma[la_index] : 0;
      if (QNIAPP.IN.Qt.qtdtls['rider'][rider_index].emr && QNIAPP.IN.Qt.qtdtls['rider'][rider_index].emrduration) {
        if (!QNIAPP.UWR_ACT.isEmrDurationSameAsTerm(QNIAPP.lifeassured[la_index]['rider'][rider_index].emr, QNIAPP.lifeassured[la_index]['rider'][rider_index].emrduration)) {
          //iteration_loop_emr = QNIAPP.IN.Qt.qtdtls.emrduration;
          if (x >= QNIAPP.lifeassured[la_index]['rider'][rider_index].emrduration) {
            QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][0] = 0;
            QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][2] = 0;
          }
        }
      }
      if (QNIAPP.IN.Qt.qtdtls['rider'][rider_index].pma && QNIAPP.IN.Qt.qtdtls['rider'][rider_index].pmaduration) {
        if (!QNIAPP.UWR_ACT.isPmaDurationSameAsTerm(QNIAPP.lifeassured[la_index].pma, QNIAPP.lifeassured[la_index]['rider'][0].pmaduration)) {
          //iteration_loop_pma = QNIAPP.IN.Qt.qtdtls.pmaduration;
          if (x >= QNIAPP.lifeassured[la_index]['rider'][rider_index].pmaduration) {
            QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][1] = 0;
            QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][3] = 0;
          }
        }
      }
    }
  };

  UWR_ACT.createEMRPMAObject_ELRiders = function (rider_index) {
    var iteration_loop = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].term;
    var la_index = 0;
    // single life
    //var iteration_loop_emr=0;
    //var iteration_loop_pma =0;

    for (var x = 0; x < iteration_loop; x++) {
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x] = [];
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][0] = (QNIAPP.IN.Qt.qtdtls['rider'][rider_index].emr) ? QNIAPP.IN.Qt.qtdtls['rider'][rider_index].emr : 0;
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][1] = (QNIAPP.IN.Qt['rider'][rider_index].excesspremium_emr[la_index]) ? QNIAPP.IN.Qt['rider'][rider_index].excesspremium_emr[la_index] : 0;
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][2] = (QNIAPP.IN.Qt.qtdtls['rider'][rider_index].pma) ? QNIAPP.IN.Qt.qtdtls['rider'][rider_index].pma : 0;
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][3] = (QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma[la_index]) ? QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma[la_index] : 0;
      if (QNIAPP.IN.Qt.qtdtls['rider'][rider_index].emr && QNIAPP.IN.Qt.qtdtls['rider'][rider_index].emrduration) {
        if (!QNIAPP.UWR_ACT.isEmrDurationSameAsTerm(QNIAPP.IN.Qt.qtdtls['rider'][rider_index].emr, QNIAPP.IN.Qt.qtdtls.emrduration)) {
          //iteration_loop_emr = QNIAPP.IN.Qt.qtdtls.emrduration;
          if (x >= QNIAPP.IN.Qt.qtdtls.emrduration) {
            QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][0] = 0;
            QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][2] = 0;
          }
        }
      }
      if (QNIAPP.IN.Qt.qtdtls['rider'][rider_index].pma && QNIAPP.IN.Qt.qtdtls['rider'][rider_index].pmaduration) {
        if (!QNIAPP.UWR_ACT.isPmaDurationSameAsTerm(QNIAPP.lifeassured[la_index].pma, QNIAPP.lifeassured[la_index]['rider'][0].pmaduration)) {
          //iteration_loop_pma = QNIAPP.IN.Qt.qtdtls.pmaduration;
          if (x >= QNIAPP.IN.Qt.qtdtls.pmaduration) {
            QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][1] = 0;
            QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][x][3] = 0;
          }
        }
      }
    }
  };

  UWR_ACT.processEMRPMAForTraditional = function (applicable_prem) {
    var rateup_rt = 0;
    la_index = 0;// considering single life
    QNIAPP.IN.Qt.excessPremium = [];
    QNIAPP.IN.Qt.excesspremium_emr = [];
    QNIAPP.IN.Qt.excesspremium_pma = [];
    QNIAPP.IN.Qt.totpremium = 0;
    var is_success = false;
    //getting the applicable ratetable in case of emr and/or pma
    if (QNIAPP.IN.Qt.qtdtls.id !== 'YSUD') {
      rateup_rt = require("../master/" + (QNIAPP.IN.Qt.qtdtls.id) + "/qni_" + (QNIAPP.IN.Qt.qtdtls.id).toLowerCase() + "_nu_rates.js");
    } else {
      rateup_rt = require("../master/" + (QNIAPP.IN.Qt.qtdtls.id) + "/qni_" + QNIAPP.YSUD_PLNID_V8.get(QNIAPP.IN.Qt.qtdtls.plan).toLowerCase() + "_nu_rates.js");
    }
    for (var i = 0; i < QNIAPP.lifeassured.length; i++) {
      is_success = QNIAPP.UWR_ACT.calcExcessPremiumForTraditional(rateup_rt, i);
    } if (!is_success) {
      return false;
    }
    if (QNIAPP.IN.id == "SUPH") {
      QNIAPP.IN.Qt.excesspremium = 0;
      for (var i = 0; i < QNIAPP.lifeassured.length; i++) {
        if (i == 0) {
          UWR_ACT.createEMRPMAObject();
        }
        else {
          UWR_ACT.createEMRPMAObject_JL();
        }
        QNIAPP.IN.Qt.excessPremium[i] = Math.round(((QNIAPP.IN.Qt.excesspremium_emr[i]) ? parseFloat(QNIAPP.IN.Qt.excesspremium_emr[i]) : 0) + ((QNIAPP.IN.Qt.excesspremium_pma[i]) ? parseFloat(QNIAPP.IN.Qt.excesspremium_pma[i]) : 0));
        QNIAPP.UWR_ACT.calcTotalPremium_suph(QNIAPP.IN.Qt.excesspremium_emr[i], QNIAPP.IN.Qt.excesspremium_pma[i], i);
      }
      QNIAPP.IN.Qt.totpremium = QNIAPP.IN.Qt.totpremium + parseInt(applicable_prem);
      QNIAPP.IN.Qt.qtdtls.totPremium = QNIAPP.IN.Qt.totpremium;
      QNIAPP.IN.Qt.qtdtls.totpremium = QNIAPP.IN.Qt.totpremium;
    }
    else {
      UWR_ACT.createEMRPMAObject();
      QNIAPP.IN.Qt.excessPremium[la_index] = Math.round(((QNIAPP.IN.Qt.excesspremium_emr[la_index]) ? parseFloat(QNIAPP.IN.Qt.excesspremium_emr[la_index]) : 0) + ((QNIAPP.IN.Qt.excesspremium_pma[la_index]) ? parseFloat(QNIAPP.IN.Qt.excesspremium_pma[la_index]) : 0)) + "";
      QNIAPP.UWR_ACT.calcTotalPremium(QNIAPP.IN.Qt.excesspremium_emr[la_index], QNIAPP.IN.Qt.excesspremium_pma[la_index], applicable_prem);
    }
    QNIAPP.UWR_ACT.calcTaxes();
    return true;
  };

  UWR_ACT.calcTotalPremium_suph = function (excess_byemr, excess_bypma, index) {
    var tot_prem = ((excess_byemr) ? parseInt(excess_byemr) : 0) + ((excess_bypma) ? parseInt(excess_bypma) : 0);
    QNIAPP.IN.Qt.excesspremium = QNIAPP.IN.Qt.excesspremium + ((QNIAPP.IN.Qt.excessPremium && QNIAPP.IN.Qt.excessPremium[index]) ? QNIAPP.IN.Qt.excessPremium[index] : 0);
    QNIAPP.IN.Qt.totpremium = QNIAPP.IN.Qt.totpremium + tot_prem;
  };

  UWR_ACT.processEMRPMAForProtection = function (applicable_prem) {
    var rateup_rt = 0;
    la_index = 0;// considering single life
    QNIAPP.IN.Qt.excessPremium = [];
    QNIAPP.IN.Qt.excesspremium_emr = [];
    QNIAPP.IN.Qt.excesspremium_pma = [];
    QNIAPP.IN.Qt.totpremium = 0;
    var id = QNIAPP.IN.Qt.qtdtls.id == "C2PCK" ? "C2P3DP" : QNIAPP.IN.Qt.qtdtls.id;
    if (id == "C1C2PLH" || id == "C1C2PLHE" || id == "C2PCS" || id == "C2POS") {
      id = "P1C2PL";
    }
    //getting the applicable ratetable in case of emr and/or pma
    rateup_rt = require("../master/" + (id) + "/qni_" + (id).toLowerCase() + "_nu_rates.js");
    var is_success = QNIAPP.UWR_ACT.calcExcessPremiumForProtection(la_index);
    if (!is_success) {
      return false;
    }
    QNIAPP.UWR_ACT.createEMRPMAObject();
    QNIAPP.IN.Qt.excessPremium[la_index] = ((QNIAPP.IN.Qt.excesspremium_emr[la_index]) ? parseInt(QNIAPP.IN.Qt.excesspremium_emr[la_index]) : 0) + ((QNIAPP.IN.Qt.excesspremium_pma[la_index]) ? parseInt(QNIAPP.IN.Qt.excesspremium_pma[la_index]) : 0) + "";
    if (QNIAPP.IN.id == "C2PP" || QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE" || QNIAPP.IN.id == "SARJB" || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE" || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE" || QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
      QNIAPP.UWR_ACT.calcTotalPremium(QNIAPP.IN.Qt.excesspremium_emr[la_index], QNIAPP.IN.Qt.excesspremium_pma[la_index], applicable_prem);
      QNIAPP.UWR_ACT.calcTaxes();
    }
    return true;
  };

  //currently for c2pp only (IB rider)
  UWR_ACT.processEMRPMAForIB_rider = function (applicable_prem, rider_index) {
    var rider_rateup_rt = 0;
    la_index = 0;// considering single life
    var rider_name = QNIAPP.IN.Qt.qtdtls.rider[rider_index].name;
    var LOCAL_MAX_PREM_PERCENT_INAD = 0.30;
    var LOCAL_MAX_PREM_PERCENT_C4CI = 1.00;
    var base_prem = QNIAPP.IN.Qt.qtdtls.premium;
    var emr = 0;
    var pma = 0;
    if (rider_index == 0) {
      QNIAPP.IN.Qt['rider'] = [];
    }
    QNIAPP.IN.Qt['rider'][rider_index] = [];
    QNIAPP.IN.Qt['rider'][rider_index].excessPremium = [];
    QNIAPP.IN.Qt['rider'][rider_index].excesspremium_emr = [];
    QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma = [];
    QNIAPP.IN.Qt['rider'][rider_index].totpremium = 0;
    emr = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].emr;
    pma = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].pma;

    //getting the applicable ratetable in case of emr and/or pma
    if (QNIAPP.IN.Qt.qtdtls.rider[rider_index]['name'] == 'INAD') {
      rateup_rt = require("../master/" + "INAD" + "/qni_inad_nu_rates.js");
    }
    else if (QNIAPP.IN.Qt.qtdtls.rider[rider_index]['name'] == 'C4CI') {
      rateup_rt = require("../master/" + "C4CI" + "/qni_c4ci_nu_rates.js");
    }
    else if (QNIAPP.IN.Qt.qtdtls.rider[rider_index]['name'] == 'EP') {
      rateup_rt = require("../master/" + "ESTE" + "/qni_este_nu_rates.js");

    }
    var is_success = QNIAPP.UWR_ACT.calcExcessPremiumForIB_rider(la_index, rider_index, rider_name);
    if (!is_success) {
      return false;
    }
    if ((emr || pma) && (rider_name == "INAD" || rider_name == "C4CI")) {
      QNIAPP.UWR_ACT.createEMRPMAObject_IB_rider(rider_index);
    }
    else {
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][0] = [];
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][0][0] = (QNIAPP.IN.Qt.qtdtls['rider'][rider_index].emr) ? QNIAPP.IN.Qt.qtdtls['rider'][rider_index].emr : 0;
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][0][1] = (QNIAPP.IN.Qt['rider'][rider_index].excesspremium_emr[0]) ? QNIAPP.IN.Qt['rider'][rider_index].excesspremium_emr[0] : 0;
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][0][2] = (QNIAPP.IN.Qt.qtdtls['rider'][rider_index].pma) ? QNIAPP.IN.Qt.qtdtls['rider'][rider_index].pma : 0;
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['yrwise'][0][3] = (QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma[0]) ? QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma[0] : 0;
    }
    QNIAPP.IN.Qt['rider'][rider_index].excessPremium[la_index] = ((QNIAPP.IN.Qt['rider'][rider_index].excesspremium_emr[la_index]) ? parseInt(QNIAPP.IN.Qt['rider'][rider_index].excesspremium_emr[la_index]) : 0) + ((QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma[la_index]) ? parseInt(QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma[la_index]) : 0) + "";
    var rider_prem = parseInt(QNIAPP.IN.Qt['rider'][rider_index].excessPremium[la_index]) + parseInt(QNIAPP.IN.Qt.qtdtls.rider[rider_index].premium);
    if (rider_name == 'INAD' || rider_name == 'PPR_ADC') {
      if (parseInt(rider_prem) > (parseFloat(LOCAL_MAX_PREM_PERCENT_INAD) * parseInt(base_prem))) {
        QNIAPP['ERR'].push('Calculated rider premium is greater than 30% of the base premium ' + base_prem);
        return false;
      }
    }
    if (rider_name == 'C4CI' || rider_name == 'PPR_PAC') {
      if (parseInt(rider_prem) > (parseFloat(LOCAL_MAX_PREM_PERCENT_C4CI) * parseInt(base_prem))) {
        QNIAPP['ERR'].push('Calculated rider premium is greater than 100% of the base premium ' + base_prem);
        return false;
      }
    }
    return true;
  };

  UWR_ACT.processEMRPMAForEL_rider = function (applicable_prem, index) {
    var la_index = 0;// considering single life
    QNIAPP.IN.Qt['rider'][index].excessPremium = [];
    QNIAPP.IN.Qt['rider'][index].excesspremium_emr = [];
    QNIAPP.IN.Qt['rider'][index].excesspremium_pma = [];
    var id = QNIAPP.IN.Qt.qtdtls.id == "C2PCK" ? "C2P3DP" : QNIAPP.IN.Qt.qtdtls.id;
    //getting the applicable ratetable in case of emr and/or pma
    if (QNIAPP.IN.Qt.qtdtls.rider[index].name == QNIAPP.CONSTS.EL || QNIAPP.IN.Qt.qtdtls.rider[index].name == QNIAPP.CONSTS.ELI) {
      rateup_rt = require("../master/" + (id) + "/qni_" + (id).toLowerCase() + "_nu_rates.js");
    }
    else if (QNIAPP.IN.Qt.qtdtls.rider[index].name == 'INAD') {
      rateup_rt = require("../master/" + "INAD" + "/qni_inad_nu_rates.js");
    }
    else if (QNIAPP.IN.Qt.qtdtls.rider[index].name == 'C4CI') {
      rateup_rt = require("../master/" + "C4CI" + "/qni_c4ci_nu_rates.js");
    }
    var is_success = QNIAPP.UWR_ACT.calcExcessPremiumForEL_rider(applicable_prem, la_index, index);
    if (!is_success) {
      return false;
    }
    if ((QNIAPP.IN.Qt.qtdtls['rider'][index].emr || QNIAPP.IN.Qt.qtdtls['rider'][index].pma)) {
      if (!(QNIAPP.IN.Qt.qtdtls.rider[index].name == "PPR_PAC" || QNIAPP.IN.Qt.qtdtls.rider[index].name == "PPR_ADC")) {
        QNIAPP.UWR_ACT.createEMRPMAObject_ELRiders(index); //same for IB,CI,EL rider
      }
      else { // For PPR Riders
        QNIAPP.IN.Qt['qtdtls']['rider'][index]['rateup']['MB']['yrwise'][0] = [];
        QNIAPP.IN.Qt['qtdtls']['rider'][index]['rateup']['MB']['yrwise'][0][0] = (QNIAPP.IN.Qt.qtdtls['rider'][index].emr) ? QNIAPP.IN.Qt.qtdtls['rider'][index].emr : 0;
        QNIAPP.IN.Qt['qtdtls']['rider'][index]['rateup']['MB']['yrwise'][0][1] = (QNIAPP.IN.Qt['rider'][index].excesspremium_emr[0]) ? QNIAPP.IN.Qt['rider'][index].excesspremium_emr[0] : 0;
        QNIAPP.IN.Qt['qtdtls']['rider'][index]['rateup']['MB']['yrwise'][0][2] = (QNIAPP.IN.Qt.qtdtls['rider'][index].pma) ? QNIAPP.IN.Qt.qtdtls['rider'][index].pma : 0;
        QNIAPP.IN.Qt['qtdtls']['rider'][index]['rateup']['MB']['yrwise'][0][3] = (QNIAPP.IN.Qt['rider'][index].excesspremium_pma[0]) ? QNIAPP.IN.Qt['rider'][index].excesspremium_pma[0] : 0;
      }
    }
    QNIAPP.IN.Qt['rider'][index].excessPremium[la_index] = ((QNIAPP.IN.Qt['rider'][index].excesspremium_emr[la_index]) ? parseInt(QNIAPP.IN.Qt['rider'][index].excesspremium_emr[la_index]) : 0) + ((QNIAPP.IN.Qt['rider'][index].excesspremium_pma[la_index]) ? parseInt(QNIAPP.IN.Qt['rider'][index].excesspremium_pma[la_index]) : 0) + "";
    //QNIAPP.UWR_ACT.calcTotalPremium_IB_rider(QNIAPP.IN.Qt['rider'][rider_index].excesspremium_emr[la_index],QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma[la_index],applicable_prem,rider_index);
    //UWR_ACT.calcTaxesFor_IB_rider(rider_index);

    return true;
  };


  UWR_ACT.processEMRPMAForHealth = function () {
    //var rateup_rt=0;
    //getting the applicable ratetable in case of emr and/or pma
    //rateup_rt = require("health assure normal product rates"); // is it already download in product_props?

    //getting the excessPremium for each of the LA
    //assuming lifeassured details have been mapped to QNIAPP.IN.Qt.lifeassured
    var sel_array_elem = {};
    var each_la = {};
    var each_dep = {};
    var partyid = -1;
    var maxAgeIndex = eval("QNIAPP." + QNIAPP.IN.Qt.qtdtls.id + ".getMaxAgeIndex('" + QNIAPP.lifeassured + "')");
    QNIAPP.OUT.partyid = QNIAPP.lifeassured[maxAgeIndex].partyid;
    var to_rateup = false;
    for (var index = 0; index < QNIAPP.IN.Qt.qtdtls.deps.length; index++) {
      //assuming lifeassured obj will contain all dependents
      each_dep = QNIAPP.IN.Qt.qtdtls.deps[index];
      partyid = each_dep.partyid;// for the same dependent
      for (var sq = 0; sq < QNIAPP.lifeassured.length; sq++) {
        each_la = QNIAPP.lifeassured[sq];
        if (each_la.partyid == partyid) {
          sel_array_elem = each_la;
          sel_array_elem.premium = each_dep.premium;
          sel_array_elem.rbpremium = each_dep.rbpremium;
          sel_array_elem.rrepremium = each_dep.rrepremium;
          break;
        }
      }
      if (sel_array_elem.partyid == partyid) {
        if (sel_array_elem.deleteflg === "N") {
          to_rateup = false;
          if (!QNIAPP.UWR_ACT.calcExcessPremiumForHealth(sel_array_elem, index, maxAgeIndex)) {
            break;
          }
          each_dep['excesspremium'] = ((QNIAPP.IN.Qt.excesspremium_emr) ? parseInt(QNIAPP.IN.Qt.excesspremium_emr) : 0) + ((QNIAPP.IN.Qt.excesspremium_pma) ? parseInt(QNIAPP.IN.Qt.excesspremium_pma) : 0);
          each_dep['premium'] = ((each_dep['premium']) ? parseInt(each_dep['premium']) : 0) + ((each_dep['excesspremium']) ? parseInt(each_dep['excesspremium']) : 0);
          to_rateup = true;
        }
        else {
          each_dep['deleteflg'] = "Y";
        }
      }
      each_la = {};
      sel_array_elem = {};
    }
    QNIAPP.IN.Qt.qtdtls.rbpremium = Math.round(QNIAPP.OUT.rbpremium);
    QNIAPP.IN.Qt.qtdtls.rrepremium = Math.round(QNIAPP.OUT.rrepremium);
    logger.info("Modified Dependent Object --->" + JSON.stringify(QNIAPP.IN.Qt.qtdtls.deps));
    if (!to_rateup) {
      QNIAPP.ERR.push("No EMR PML found. Cannot Proceed!!!");
    }
    return to_rateup;
  };

  UWR_ACT.calcualteExtraPremium_Individual = function () {
    for (var i = 0; i < QNIAPP.extlifeassured.length; i++) {
      if (QNIAPP.extlifeassured[i].deleteflg == "N") {
        for (var k = 0; k < QNIAPP.IN.Qt.qtdtls.externallifeassured.length; k++) {
          if ((QNIAPP.extlifeassured[i].excess_premium && QNIAPP.extlifeassured[i].excess_premium != "") && (QNIAPP.extlifeassured[i].partyid == QNIAPP.IN.Qt.qtdtls.externallifeassured[k].partyid)) {
            QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_premium = parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_premium) + parseInt(QNIAPP.extlifeassured[i].excess_premium);
            QNIAPP.IN.Qt.qtdtls.externallifeassured[k].excess_premium = QNIAPP.extlifeassured[i].excess_premium;
            QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_tax = parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_tax) + parseInt(QNIAPP.extlifeassured[i].excess_tax);
            QNIAPP.IN.Qt.qtdtls.externallifeassured[k].excess_tax = QNIAPP.extlifeassured[i].excess_tax;
            break;
          }
        }
      }
    }
  };

  UWR_ACT.calcualteExtraPremium_Floater = function () {
    for (var i = 0; i < QNIAPP.extlifeassured.length; i++) {
      if ((QNIAPP.extlifeassured[i].deleteflg == "N") && (QNIAPP.extlifeassured[i].excess_premium && QNIAPP.extlifeassured[i].excess_premium != "")) {
        for (var k = 0; k < QNIAPP.IN.Qt.qtdtls.externallifeassured.length; k++) {
          if (QNIAPP.IN.Qt.qtdtls.externallifeassured[k].isPrimary == "1") {
            QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_premium = parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_premium) + parseInt(QNIAPP.extlifeassured[i].excess_premium);
            QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_tax = parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_tax) + parseInt(QNIAPP.extlifeassured[i].excess_tax);
          }
          if (QNIAPP.extlifeassured[i].partyid == QNIAPP.IN.Qt.qtdtls.externallifeassured[k].partyid) {
            QNIAPP.IN.Qt.qtdtls.externallifeassured[k].excess_premium = QNIAPP.extlifeassured[i].excess_premium;
            QNIAPP.IN.Qt.qtdtls.externallifeassured[k].excess_tax = QNIAPP.extlifeassured[i].excess_tax;
            break;

          }
        }
      }
    }
  };

  UWR_ACT.calcualteExtraPremium_Family = function () {
    for (var i = 0; i < QNIAPP.extlifeassured.length; i++) {
      if ((QNIAPP.extlifeassured[i].deleteflg == "N") && (QNIAPP.extlifeassured[i].excess_premium && QNIAPP.extlifeassured[i].excess_premium != "")) {
        for (var k = 0; k < QNIAPP.IN.Qt.qtdtls.externallifeassured.length; k++) {
          if (QNIAPP.IN.Qt.qtdtls.externallifeassured[k].isPrimary == "1") {
            QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_premium = parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_premium) + parseInt(QNIAPP.extlifeassured[i].excess_premium);
            QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_tax = parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_tax) + parseInt(QNIAPP.extlifeassured[i].excess_tax);
          }
          if (QNIAPP.extlifeassured[i].partyid == QNIAPP.IN.Qt.qtdtls.externallifeassured[k].partyid) {
            QNIAPP.IN.Qt.qtdtls.externallifeassured[k].excess_premium = QNIAPP.extlifeassured[i].excess_premium;
            QNIAPP.IN.Qt.qtdtls.externallifeassured[k].excess_tax = QNIAPP.extlifeassured[i].excess_tax;
            break;

          }
        }
      }

      /*else if(QNIAPP.extlifeassured[i].deleteflg == "Y"){
      for(var k=0;k<QNIAPP.IN.Qt.qtdtls.externallifeassured.length;k++){
        if(QNIAPP.extlifeassured[i].partyid == QNIAPP.IN.Qt.qtdtls.externallifeassured[k].partyid && QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_floaterpremium){
          QNIAPP.IN.Qt.qtdtls.externallifeassured[0].ext_premium = parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[0].ext_premium) - parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_floaterpremium);
        if(QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_floatertax){
          QNIAPP.IN.Qt.qtdtls.externallifeassured[0].ext_tax = parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[0].ext_tax)-parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[k].ext_floatertax);
        }
          break;
        }
      }
      }*/
    }
  };

  UWR_ACT.processEMRPMAForHealth_CDAC = function (applicable_prem) {
    var la_index = 0;
    QNIAPP.IN.Qt.excessPremium = [];
    QNIAPP.IN.Qt.excesspremium_emr = [];
    QNIAPP.IN.Qt.excesspremium_pma = [];
    QNIAPP.IN.Qt.totpremium = 0;
    var is_success = QNIAPP.UWR_ACT.calcExcessPremiumForHealth_CDAC(la_index);
    if (!is_success) {
      return false;
    }
    UWR_ACT.createEMRPMAObject();
    QNIAPP.IN.Qt.excessPremium[la_index] = ((QNIAPP.IN.Qt.excesspremium_emr[la_index]) ? parseInt(QNIAPP.IN.Qt.excesspremium_emr[la_index]) : 0) + ((QNIAPP.IN.Qt.excesspremium_pma[la_index]) ? parseInt(QNIAPP.IN.Qt.excesspremium_pma[la_index]) : 0) + "";
    QNIAPP.UWR_ACT.calcTotalPremium(QNIAPP.IN.Qt.excesspremium_emr[la_index], QNIAPP.IN.Qt.excesspremium_pma[la_index], applicable_prem);
    QNIAPP.UWR_ACT.calcTaxes();
    return true;
  };
  UWR_ACT.calcExcessPremiumForHealth_CDAC = function (la_index) {
    var rate_table_val_emr = 0;
    var disc_rt = 0;
    var PREM_CONV_FC = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
    if (QNIAPP.CDAC_DISCOUNT.isDiscountApplicable(QNIAPP.IN.chnlptnr) && !(QNIAPP.IN.useposrates && QNIAPP.IN.useposrates == 'Y')) {
      disc_rt = (QNIAPP.IN.Qt.qtdtls.pptopt == 'Regular') ? QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'dis_rt_regular') : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'dis_rt_single');
    }
    var band = QNIAPP.CDAC_BAND.get(QNIAPP.IN.Qt.qtdtls.sumAssured);
    if (QNIAPP.lifeassured[la_index].emr) {
      //emr rates/mort rate to be fetched from qni_cadc_rates.js
      rate_table_val_emr = QNIAPP.CDAC_MORT_RATE.getemr_Base(band, QNIAPP.IN.Qt.qtdtls.tobstatus);
      if (QNIAPP.IN.Qt.qtdtls.benefits.length > 0) {
        for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.benefits.length; i++) {
          rate_table_val_emr += eval('QNIAPP.CDAC_MORT_RATE.getemr_' + QNIAPP.IN.Qt.qtdtls.benefits[i] + '(band,QNIAPP.IN.Qt.qtdtls.tobstatus);');
        }
      }
      if (rate_table_val_emr && rate_table_val_emr !== 0) {
        var excesspremium_emr = (parseInt(QNIAPP.IN.Qt.qtdtls.sumAssured) * (QNIAPP.lifeassured[la_index].emr / 100) * (rate_table_val_emr / 1000) * PREM_CONV_FC);
        QNIAPP.IN.Qt.excesspremium_emr[la_index] = Math.round(excesspremium_emr - (excesspremium_emr * disc_rt));
      }
      else {
        QNIAPP.ERR.push("EMR Value not found in Table. Invalid !! Cannot Proceed");
        return false;
      }
    }
    if (QNIAPP.lifeassured[la_index].pma && QNIAPP.lifeassured[la_index].pma != "") {
      QNIAPP.ERR.push("PMA is not applicable to this product");
      return false;
    }
    //ading up the rates and storing it in Qniapp
    QNIAPP.IN.Qt.excessrate = parseFloat(rate_table_val_emr);
    return true;
  };


  // excess premium for traditional
  UWR_ACT.calcExcessPremiumForTraditional = function (rt_tbl, la_index) {
    var rate_table_val_emr = 0;
    var rate_table_val_pma = 0;
    var rate_table_val_emr_rateA = 0;
    var rate_table_val_emr_rateB = 0;
    var age1 = 0;
    var age2 = 0;
    if (la_index == 1) {
      QNIAPP.IN.Qt['qtdtls']['rateup']['JL'] = {};
      QNIAPP.IN.Qt['qtdtls']['rateup']['JL']['yrwise'] = {};
    }
    var PREM_CONV_FC = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_POL_PCF_PREM']['get'](QNIAPP.IN.Qt.qtdtls.freq, 'fac');
    if ((QNIAPP.IN.Qt.qtdtls.id == 'EGWP' || QNIAPP.IN.Qt.qtdtls.id == 'EGWPE' || QNIAPP.IN.Qt.qtdtls.id == 'EAGP' || QNIAPP.IN.Qt.qtdtls.id == 'EAGPE') && QNIAPP.IN.Qt.qtdtls.pptOption === 'Single') {
      PREM_CONV_FC = '1';
    }
    if (QNIAPP.lifeassured[la_index].emr) {
      if (la_index == 0) {
        QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['emr'] = QNIAPP.lifeassured[la_index].emr;
      }
      else {
        QNIAPP.IN.Qt['qtdtls']['rateup']['JL']['emr_jl'] = QNIAPP.lifeassured[la_index].emr;
      }
      if (QNIAPP.IN.id == "SUPH" && QNIAPP.IN.Qt.qtdtls.jlflag == "Y") {
        if (la_index == 0) {
          age1 = QNIAPP.IN.Qt.qtdtls.age;
          age2 = QNIAPP.IN.Qt.qtdtls.jlage;
        }
        else {
          age1 = QNIAPP.IN.Qt.qtdtls.jlage;
          age2 = QNIAPP.IN.Qt.qtdtls.age;
        }
        rate_table_val_emr = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_EMR_RATE']['getJL'](age1, age2);//rates are wrt per 1000SA
      }
      else if (QNIAPP.IN.Qt.qtdtls.id !== 'YSUD' && QNIAPP.IN.Qt.qtdtls.id !== 'SANCHP' && QNIAPP.IN.Qt.qtdtls.id !== 'SANCHPE') {
        rate_table_val_emr = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_EMR_RATE']['get']();//rates are wrt per 1000SA
      } else if (QNIAPP.IN.Qt.qtdtls.id == 'SANCHP' || QNIAPP.IN.Qt.qtdtls.id == 'SANCHPE') {

        rate_table_val_emr_rateA = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_EMR_RATE']['get']('rate_a');
        rate_table_val_emr_rateB = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_EMR_RATE']['get']('rate_b');

      }
      else {
        rate_table_val_emr = window['QNIAPP'][QNIAPP.YSUD_PLNID_V8.get(QNIAPP.IN.Qt.qtdtls.plan) + '_EMR_RATE']['get']();//rates are wrt per 1000SA
      }
      if (rate_table_val_emr && rate_table_val_emr !== 0) {
        if (QNIAPP.PRODUCT_DETAILS.isNewEMRPMALogicApplicable()) {
          QNIAPP.IN.Qt.excesspremium_emr[la_index] = Math.round(((QNIAPP.IN.Qt.qtdtls.premium / PREM_CONV_FC) * rate_table_val_emr / 1000) * (QNIAPP.lifeassured[la_index].emr / 25) * PREM_CONV_FC);
        }
        else if (QNIAPP.IN.Qt.qtdtls.id == 'EIAP' || QNIAPP.IN.Qt.qtdtls.id == 'EIAPE') {
          QNIAPP.IN.Qt.excesspremium_emr[la_index] = Math.round(Math.round(rate_table_val_emr * (parseInt(QNIAPP.IN.Qt.qtdtls.sumAssured))) * PREM_CONV_FC);
        }
        else if (QNIAPP.IN.Qt.qtdtls.id !== 'SANCHP' && QNIAPP.IN.Qt.qtdtls.id !== 'SANCHPE' && QNIAPP.IN.Qt.qtdtls.id !== 'SUPH' && QNIAPP.IN.Qt.qtdtls.id !== 'SUPHE') {
          QNIAPP.IN.Qt.excesspremium_emr[la_index] = ((rate_table_val_emr * (parseInt(QNIAPP.IN.Qt.qtdtls.sumAssured)) * PREM_CONV_FC));
        }
        else if (QNIAPP.IN.Qt.qtdtls.id == 'SUPH' || QNIAPP.IN.Qt.qtdtls.id == 'SUPHE') {

          if (rate_table_val_emr && rate_table_val_emr !== 0) {
            var annual_premium = parseFloat((parseInt(QNIAPP.IN.Qt.qtdtls.premium) / PREM_CONV_FC).toFixed(2));
            var SA_Death = (QNIAPP.IN.Qt.qtdtls.pptOption == "Single") ? (1.25 * annual_premium) : (7 * annual_premium);
            if (QNIAPP.IN.Qt.qtdtls.jlflag && QNIAPP.IN.Qt.qtdtls.jlflag == "N") {
              if ((QNIAPP.IN.Qt.qtdtls.pptOption == "Single" && QNIAPP.IN.Qt.qtdtls.deathBenefitMultiple == "LOW") || QNIAPP.IN.Qt.qtdtls.pptOption == "Regular" || QNIAPP.IN.Qt.qtdtls.pptOption == "Limited") {
                QNIAPP.IN.Qt.excesspremium_emr[la_index] = Math.round((rate_table_val_emr * ((QNIAPP.lifeassured[la_index].emr) / 100) / (25 / 100)) * SA_Death / 1000) * PREM_CONV_FC;
              }
              else {
                QNIAPP.IN.Qt.excesspremium_emr[la_index] = (rate_table_val_emr * SA_Death / 1000) * PREM_CONV_FC;
              }
            }
            else {
              QNIAPP.IN.Qt.excesspremium_emr[la_index] = Math.round((rate_table_val_emr * ((QNIAPP.lifeassured[la_index].emr) / 100) / (25 / 100)) * SA_Death / 1000) * PREM_CONV_FC;

            }
          }
          /*else if(QNIAPP.IN.Qt.qtdtls.sumAssured > 3000000 && rate_table_val_emr_rateA && rate_table_val_emr_rateA!== 0 && rate_table_val_emr_rateB && rate_table_val_emr_rateB!== 0)
          {
            QNIAPP.IN.Qt.excesspremium_emr[la_index] = (((rate_table_val_emr_rateA *(parseInt(QNIAPP.lifeassured[la_index].emr)/(25/100)))* 3000000) + (rate_table_val_emr_rateB *(parseInt(QNIAPP.lifeassured[la_index].emr)/(25/100))) *  (QNIAPP.IN.Qt.qtdtls.sumAssured- 3000000)/1000)* PREM_CONV_FC;
          }*/

          else {
            QNIAPP.ERR.push("EMR Value not found in Table. Invalid !! Cannot Proceed");
            return false;
          }
        }
        else {
          var annual_premium = parseFloat((parseInt(QNIAPP.IN.Qt.qtdtls.premium) / PREM_CONV_FC).toFixed(2));
          //var emr_rating = parseInt(QNIAPP.lifeassured[la_index].emr)/25;
          QNIAPP.IN.Qt.excesspremium_emr[la_index] = (rate_table_val_emr * annual_premium * PREM_CONV_FC);
        }
      }
      else if (QNIAPP.IN.Qt.qtdtls.id == 'SANCHP' || QNIAPP.IN.Qt.qtdtls.id == 'SANCHPE') {

        if (QNIAPP.IN.Qt.qtdtls.sumAssured <= 3000000 && rate_table_val_emr_rateA && rate_table_val_emr_rateA !== 0) {
          QNIAPP.IN.Qt.excesspremium_emr[la_index] = ((rate_table_val_emr_rateA * (parseInt(QNIAPP.lifeassured[la_index].emr) / 25)) * parseInt(QNIAPP.IN.Qt.qtdtls.sumAssured)) * PREM_CONV_FC;
        }
        else if (QNIAPP.IN.Qt.qtdtls.sumAssured > 3000000 && rate_table_val_emr_rateA && rate_table_val_emr_rateA !== 0 && rate_table_val_emr_rateB && rate_table_val_emr_rateB !== 0) {
          QNIAPP.IN.Qt.excesspremium_emr[la_index] = (((rate_table_val_emr_rateA * (parseInt(QNIAPP.lifeassured[la_index].emr) / 25)) * 3000000) + (rate_table_val_emr_rateB * (parseInt(QNIAPP.lifeassured[la_index].emr) / 25)) * (QNIAPP.IN.Qt.qtdtls.sumAssured - 3000000)) * PREM_CONV_FC;
        }

        else {
          QNIAPP.ERR.push("EMR Value not found in Table. Invalid !! Cannot Proceed");
          return false;
        }
      }
      else {
        QNIAPP.ERR.push("EMR Value not found in Table. Invalid !! Cannot Proceed");
        return false;
      }
    }
    if (QNIAPP.lifeassured[la_index].pma) {
      if (la_index == 0) {
        QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['pma'] = QNIAPP.lifeassured[la_index].pma;
      }
      else {
        QNIAPP.IN.Qt['qtdtls']['rateup']['JL']['pma_jl'] = QNIAPP.lifeassured[la_index].pma;
      }
      if (QNIAPP.IN.id == "SUPH" && QNIAPP.IN.Qt.qtdtls.jlflag == "Y") {
        if (la_index == 0) {
          age1 = QNIAPP.IN.Qt.qtdtls.age;
          age2 = QNIAPP.IN.Qt.qtdtls.jlage;
        }
        else {
          age1 = QNIAPP.IN.Qt.qtdtls.jlage;
          age2 = QNIAPP.IN.Qt.qtdtls.age;
        }
        rate_table_val_pma = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_PMA_RATE']['getJL'](age1, age2);//rates are wrt per 1000SA
      }
      else if (QNIAPP.IN.Qt.qtdtls.id !== 'YSUD') {
        rate_table_val_pma = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_PMA_RATE']['get']();
      } else {
        rate_table_val_pma = window['QNIAPP'][QNIAPP.YSUD_PLNID_V8.get(QNIAPP.IN.Qt.qtdtls.plan) + '_PMA_RATE']['get']();
      }
      if (rate_table_val_pma && rate_table_val_pma !== 0) {
        if (QNIAPP.PRODUCT_DETAILS.isNewEMRPMALogicApplicable()) {
          QNIAPP.IN.Qt.excesspremium_pma[la_index] = Math.round(((QNIAPP.IN.Qt.qtdtls.premium / PREM_CONV_FC) * rate_table_val_pma / 1000) * (QNIAPP.lifeassured[la_index].pma / 0.5) * PREM_CONV_FC);
        }
        else if (QNIAPP.IN.Qt.qtdtls.id == 'EIAP' || QNIAPP.IN.Qt.qtdtls.id == 'EIAPE') {
          QNIAPP.IN.Qt.excesspremium_pma[la_index] = Math.round(Math.round(rate_table_val_pma * (parseInt(QNIAPP.IN.Qt.qtdtls.sumAssured))) * PREM_CONV_FC);
        }
        else if (QNIAPP.IN.Qt.qtdtls.id !== 'SANCHP' && QNIAPP.IN.Qt.qtdtls.id !== 'SANCHPE' && QNIAPP.IN.Qt.qtdtls.id !== 'SUPH' && QNIAPP.IN.Qt.qtdtls.id !== 'SUPHE') {
          QNIAPP.IN.Qt.excesspremium_pma[la_index] = ((rate_table_val_pma * (parseInt(QNIAPP.IN.Qt.qtdtls.sumAssured)) * PREM_CONV_FC));
        }
        else if (QNIAPP.IN.Qt.qtdtls.id == 'SUPH' || QNIAPP.IN.Qt.qtdtls.id == 'SUPHE') {
          var annual_premium = parseFloat((parseInt(QNIAPP.IN.Qt.qtdtls.premium) / PREM_CONV_FC).toFixed(2));
          var SA_Death = (QNIAPP.IN.Qt.qtdtls.pptOption == "Single") ? (1.25 * annual_premium) : (7 * annual_premium);
          if (QNIAPP.IN.Qt.qtdtls.jlflag && QNIAPP.IN.Qt.qtdtls.jlflag == "N") {
            if ((QNIAPP.IN.Qt.qtdtls.pptOption == "Single" && QNIAPP.IN.Qt.qtdtls.deathBenefitMultiple == "LOW") || QNIAPP.IN.Qt.qtdtls.pptOption == "Regular" || QNIAPP.IN.Qt.qtdtls.pptOption == "Limited") {
              QNIAPP.IN.Qt.excesspremium_pma[la_index] = (SA_Death * rate_table_val_pma * (parseInt(QNIAPP.lifeassured[la_index].pma) / 0.5) / 1000) * PREM_CONV_FC;
            }
            else {
              QNIAPP.IN.Qt.excesspremium_pma[la_index] = (SA_Death * rate_table_val_pma / 1000) * PREM_CONV_FC;
            }
          }
          else {
            QNIAPP.IN.Qt.excesspremium_pma[la_index] = (SA_Death * rate_table_val_pma * (parseInt(QNIAPP.lifeassured[la_index].pma) / 0.5) / 1000) * PREM_CONV_FC;

          }
        }
        else {
          //var annual_premium = parseFloat((parseInt(QNIAPP.IN.Qt.qtdtls.premium)/PREM_CONV_FC).toFixed(2));
          //var pma_rating = parseInt(QNIAPP.lifeassured[la_index].pma)/0.5;
          //QNIAPP.IN.Qt.excesspremium_pma[la_index] = ((rate_table_val_pma * annual_premium * PREM_CONV_FC ));
          QNIAPP.IN.Qt.excesspremium_pma[la_index] = QNIAPP.IN.Qt.qtdtls.sumAssured * rate_table_val_pma * (parseInt(QNIAPP.lifeassured[la_index].pma) / 0.5) * PREM_CONV_FC;
        }
      }
      else {
        QNIAPP.ERR.push("PMA Value not found in Table. Invalid !! Cannot Proceed");
        return false;
      }
    }

    //adding up the rates and storing it in Qniapp
    QNIAPP.IN.Qt.excessrate = parseFloat(rate_table_val_emr) + parseFloat(rate_table_val_pma);
    return true;
  };

  // excess premium for Protection
  UWR_ACT.calcExcessPremiumForProtection = function (la_index) {
    var rate_table_val_emr = 0;
    QNIAPP.IN.Qt.excesspremium_emr = [];
    QNIAPP.IN.Qt.excesspremium_pma = [];
    var PREM_CONV_FAC = '';
    var id = QNIAPP.IN.Qt.qtdtls.id == "C2PCK" ? "C2P3DP" : QNIAPP.IN.Qt.qtdtls.id;
    if (id == "C2PCS") {
      id = "P1C2PL";
    }
    if (QNIAPP.IN.id == "C2PP" || QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
      PREM_CONV_FAC = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);//for excess premium due to PMA only
    }
    else if (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE") {
      PREM_CONV_FAC = window['QNIAPP']['P1C2PL_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);//for excess premium due to PMA only
    }
    else if (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE") {
      PREM_CONV_FAC = window['QNIAPP']['P1C2PS_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);//for excess premium due to PMA only
    }
    else if (QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE") {
      PREM_CONV_FAC = window['QNIAPP']['P2C2PEL_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);//for excess premium due to PMA only
    }
    else if (QNIAPP.IN.id == "SARJB") {
      PREM_CONV_FAC = window['QNIAPP']['SARJB_POL_PCF_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
    }
    else {
      PREM_CONV_FAC = window['QNIAPP']['C2P3DP_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);//for excess premium due to PMA only
    }
    if (QNIAPP.lifeassured[la_index].emr) {
      if (QNIAPP.IN.id == "SARJB" || QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
        rate_table_val_emr = window['QNIAPP'][id + '_MORT_RATE']['get']();// rate is taken in nu_rates file
      }
      else {
        rate_table_val_emr = window['QNIAPP'][id + '_MORT_RATE']['get'](QNIAPP.IN.Qt.qtdtls.option); // age is being taken from QNIAPP.IN.Qt.qtdtls.option in nu_rates file

      }//added div by 100 for emr as it is a percentage
      QNIAPP.IN.Qt.excesspremium_emr[la_index] = Math.round((QNIAPP.IN.Qt.qtdtls.premium * ((QNIAPP.lifeassured[la_index].emr) / 100) * rate_table_val_emr)); //do we need to do rate_table_val.QNIAPP.T2P_MORT_RATE.get?
      if (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE" || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE") {
        QNIAPP.OUT.excesspremium_emr_wodisc = Math.round((QNIAPP.OUT.premwodisc * ((QNIAPP.lifeassured[la_index].emr) / 100) * rate_table_val_emr));
      }

      if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
        QNIAPP.IN.Qt.excesspremium_emr[la_index] = Math.round(QNIAPP.IN.Qt.qtdtls.sumAssured * rate_table_val_emr * PREM_CONV_FAC); // rate_table_val_emr = emr rate* (emr value/25)/1000
      }
    }
    if (QNIAPP.lifeassured[la_index].pma) {
      if (QNIAPP.IN.id == "C2PP") {
        QNIAPP.IN.Qt.excesspremium_pma[la_index] = Math.round(QNIAPP.IN.Qt.qtdtls.sumAssured * ((QNIAPP.lifeassured[la_index].pma) / 1000) * PREM_CONV_FAC);
      }
      else if (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE") {
        //QNIAPP.IN.Qt.excesspremium_pma[la_index] =  Math.round(QNIAPP.IN.Qt.qtdtls.sumAssured * ((QNIAPP.lifeassured[la_index].pma)/1000));
        var ppt_conv_factor = 1;
        var opt = QNIAPP.IN.Qt.qtdtls.option + ' ' + QNIAPP.IN.Qt.qtdtls.suboption;
        if (QNIAPP.IN.Qt.qtdtls.pptopt != QNIAPP.CONSTS.REG && (QNIAPP.IN.Qt.qtdtls.option != "Income Plus" && (opt != "Life Protect Whole Life"))) {
          ppt_conv_factor = (QNIAPP.IN.Qt.qtdtls.option === QNIAPP.CONSTS.LIPR && QNIAPP.IN.Qt.qtdtls.suboption === QNIAPP.CONSTS.FT && QNIAPP.IN.Qt.qtdtls.pptopt == "Single" && QNIAPP.IN.Qt.qtdtls.term == "0") ? 1 : QNIAPP.P1C2PL_RATE.getConvRate();
        }
        var excesspremium_pma = (QNIAPP.IN.Qt.qtdtls.sumAssured * (QNIAPP.lifeassured[la_index].pma) * ppt_conv_factor * PREM_CONV_FAC);
        disc_rt = (QNIAPP.IN['spl'] === '-') ? QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "emp_dis_rt") : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['spl'], "emp_dis_rt");
        if (QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" && QNIAPP.IN['spl'] === '-' && QNIAPP.IN.Qt.qtdtls.pptopt == "Single") {
          disc_rt = 0.01;
        } else if (QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" && QNIAPP.IN['spl'] === '-' && QNIAPP.IN.Qt.qtdtls.pptopt != "Single") {
          disc_rt = 0.02;
        } else if (QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" && QNIAPP.IN['spl'] != '-' && QNIAPP.IN.Qt.qtdtls.pptopt == "Single") {
          disc_rt = 0.02;
        } else if (QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" && QNIAPP.IN['spl'] != '-' && QNIAPP.IN.Qt.qtdtls.pptopt != "Single") {
          disc_rt = 0.03;
        }

        if (QNIAPP.IN.Qt.qtdtls.isnpFlg == "Y" && QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" && QNIAPP.IN.Qt.qtdtls.pptopt == "Single") {
          disc_rt = 0.02;
        } else if (QNIAPP.IN.Qt.qtdtls.isnpFlg == "Y" && QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" && QNIAPP.IN.Qt.qtdtls.pptopt != "Single") {
          disc_rt = 0.03;
        } else if (QNIAPP.IN.Qt.qtdtls.isnpFlg == "Y") {
          disc_rt = 0.01;
        }

        QNIAPP.IN.Qt.excesspremium_pma[la_index] = Math.round((excesspremium_pma * (1 - disc_rt)) / 1000);
      }
      else if (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE") {
        var ppt_conv_factor = 1;
        ppt_conv_factor = (QNIAPP.IN.Qt.qtdtls.pptopt == "Regular") ? 1 : QNIAPP.P1C2PS_CONVRATE_PPT.get(QNIAPP.IN.Qt.qtdtls.ppt, QNIAPP.IN.Qt.qtdtls.term);
        var excesspremium_pma = (QNIAPP.IN.Qt.qtdtls.sumAssured * (QNIAPP.lifeassured[la_index].pma) * ppt_conv_factor * PREM_CONV_FAC);
        QNIAPP.OUT.excesspremium_pma_wodisc = excesspremium_pma / 1000;
        var disc_fac = (QNIAPP.IN['spl'] === '-') ? QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "emp_dis_rt") : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['spl'], "emp_dis_rt");
        disc_fac = (disc_fac == "" || disc_fac == undefined) ? 0 : disc_fac;
        if (QNIAPP.IN.Qt.qtdtls.isnpFlg == "Y") {
          disc_fac = QNIAPP.PRODUCT_DETAILS.get("P1C2PSE", "emp_dis_rt");
        }
        if (QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" || (QNIAPP.IN.Qt.qtdtls.isSpouse == "1" && QNIAPP.IN.Qt.qtdtls.isExCustomer == "0")) {
          disc_rt = (QNIAPP.IN.Qt.qtdtls.pptopt == "Single") ? 0.01 : 0.02;
          disc_fac = disc_fac + disc_rt;
        }
        if (QNIAPP.IN.Qt.qtdtls.isEmpOfHdfc == "1") {
          disc_fac = disc_fac + 0.02;
        }
        QNIAPP.IN.Qt.excesspremium_pma[la_index] = Math.round((excesspremium_pma * (1 - disc_fac)) / 1000);
      }
      else if (QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE") {
        var ppt_conv_factor = 1;
        ppt_conv_factor = (QNIAPP.IN.Qt.qtdtls.pptopt == "Regular") ? 1 : QNIAPP.P2C2PEL_CONVRATE_PPT.get(QNIAPP.IN.Qt.qtdtls.ppt, QNIAPP.IN.Qt.qtdtls.term);
        var excesspremium_pma = (QNIAPP.IN.Qt.qtdtls.sumAssured * (QNIAPP.lifeassured[la_index].pma) * ppt_conv_factor * PREM_CONV_FAC);
        QNIAPP.OUT.excesspremium_pma_wodisc = excesspremium_pma / 1000;
        var disc_fac = (QNIAPP.IN['spl'] === '-') ? QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "emp_dis_rt") : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['spl'], "emp_dis_rt");
        disc_fac = (disc_fac == "" || disc_fac == undefined) ? 0 : disc_fac;
        if (QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" || (QNIAPP.IN.Qt.qtdtls.isSpouse == "1" && QNIAPP.IN.Qt.qtdtls.isExCustomer == "0")) {
          disc_rt = (QNIAPP.IN.Qt.qtdtls.pptopt == "Single") ? 0.01 : 0.02;
          disc_fac = disc_fac + disc_rt;
        }
        if (QNIAPP.IN.Qt.qtdtls.isEmpOfHdfc == "1") {
          disc_fac = disc_fac + 0.02;
        }
        QNIAPP.IN.Qt.excesspremium_pma[la_index] = Math.round((excesspremium_pma * (1 - disc_fac)) / 1000);
      }
      else if (QNIAPP.IN.id == "SARJB") {
        QNIAPP.IN.Qt.excesspremium_pma[la_index] = Math.round(QNIAPP.IN.Qt.qtdtls.sumAssured * ((QNIAPP.lifeassured[la_index].pma) / 1000) * PREM_CONV_FAC);
      }
      else if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
        var disc_rt = (QNIAPP.IN['spl'] === '-') ? QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "emp_dis_rt") : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['spl'], "emp_dis_rt");
        //var ep_disc_rt = 0.02;
        QNIAPP.IN.Qt.excesspremium_pma[la_index] = Math.round(Math.round((QNIAPP.IN.Qt.qtdtls.sumAssured * QNIAPP.lifeassured[la_index].pma / 1000 * (1 - disc_rt) / 11.5)) * PREM_CONV_FAC);

      }
      else {
        var ppt_conv_factor = 1;
        var disc_rt = 0;
        if ((QNIAPP.IN.id == "C2P3DP") && (QNIAPP.C2P3DP_DISCOUNT.isDiscountApplicable(QNIAPP.IN.chnlptnr))) {
          disc_rt = (QNIAPP.IN.Qt.qtdtls.pptopt == QNIAPP.CONSTS.S) ? QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'disc_rt_s') : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'disc_rt_r');
        }
        if (QNIAPP.IN.id == "C2PH") { // In case of combi 5% discount
          disc_rt = QNIAPP.PRODUCT_DETAILS.get('C2PH', 'C2P_DISC');
        }
        if (QNIAPP.IN.Qt.qtdtls.pptopt == "Limited" && (!(QNIAPP.IN.Qt.qtdtls.option == QNIAPP.CONSTS.LLP || QNIAPP.IN.Qt.qtdtls.option == QNIAPP.CONSTS.TDLP))) {
          ppt_conv_factor = window['QNIAPP']['C2P3DP_PRATE_C']['getConvFactorForLimited'](QNIAPP.IN.Qt.qtdtls.term, QNIAPP.IN.Qt.qtdtls.ppt);
        }
        if (QNIAPP.IN.Qt.qtdtls.pptopt == "Single" && (!(QNIAPP.IN.Qt.qtdtls.option == QNIAPP.CONSTS.LLP || QNIAPP.IN.Qt.qtdtls.option == QNIAPP.CONSTS.TDLP))) {
          ppt_conv_factor = window['QNIAPP']['C2P3DP_PRATE_C']['getConvFactorForSingle'](QNIAPP.IN.Qt.qtdtls.term);
        }
        var excesspremium_pma = (QNIAPP.IN.Qt.qtdtls.sumAssured * (QNIAPP.lifeassured[la_index].pma) * ppt_conv_factor * PREM_CONV_FAC);
        QNIAPP.IN.Qt.excesspremium_pma[la_index] = Math.round((excesspremium_pma - (excesspremium_pma * disc_rt)) / 1000);
      }
    }

    //adding up the rates and storing it in Qniapp
    QNIAPP.IN.Qt.excessrate = parseFloat(rate_table_val_emr) + (QNIAPP.lifeassured[la_index].pma !== "" ? parseFloat((QNIAPP.lifeassured[la_index].pma / 1000)) : 0);
    return true;
  };

  // excess premium for IB rider in Protection
  UWR_ACT.calcExcessPremiumForIB_rider = function (la_index, rider_index, rider_name) {
    var rate_table_val_emr = 0;
    var rate_table_val_pma = 0;
    var emr = 0;
    var pma = 0;
    var PREM_CONV_FC = 0;
    var disc_rt = 0;
    var ppt_conv_factor = 1;
    var mon_conv_fac = 1;
    var rider_term = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].term;
    var rider_ppt = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].ppt;
    var pptoption = QNIAPP.CONSTS.REG;
    if ((rider_term != rider_ppt) && (rider_ppt != 1)) {
      pptoption = QNIAPP.CONSTS.LIM;
    }
    else if (rider_ppt == "1") {
      pptoption = QNIAPP.CONSTS.S;
    }
    if (rider_name == "INAD" || rider_name == "C4CI" || rider_name == "EP") {
      if (QNIAPP.IN.id == 'C2PP' || QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE" || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE" || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE" || QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
        PREM_CONV_FC = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
      } else if (QNIAPP.IN.id == 'SARJB') {
        PREM_CONV_FC = window['QNIAPP']['SARJB_POL_PCF_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
      } else if (QNIAPP.IN.id == 'EGII' || QNIAPP.IN.id == 'ESRB' || QNIAPP.IN.id == 'ESJ' || QNIAPP.IN.id == 'EGWP' || QNIAPP.IN.id == 'EIAP' || QNIAPP.IN.id == 'ESIP' || QNIAPP.IN.id == 'EAGP') {
        PREM_CONV_FC = window['QNIAPP'][rider_name + '_PREMIUM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
      }
      else {
        PREM_CONV_FC = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_POL_PCF_PREM']['get'](QNIAPP.IN.Qt.qtdtls.freq, 'fac');
      }
    }
    else if (rider_name == "PPR_PAC" || rider_name == "PPR_ADC") {
      PREM_CONV_FC = window['QNIAPP']['PPR_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
      ppt_conv_factor = window['QNIAPP']['PPR_OPTA_B_CONVFC']['get'](rider_name);
      if (QNIAPP.PPR_DISCOUNT.isDiscountApplicable(QNIAPP.IN.chnlptnr) && !(QNIAPP.IN.useposrates && QNIAPP.IN.useposrates == 'Y')) {
        disc_rt = QNIAPP.PPR_DISC.get(rider_name);
      }
      if ((pptoption == 'Regular' || pptoption == 'Limited') && rider_term < 12) {
        mon_conv_fac = 12 / rider_ppt;
      }
    }
    QNIAPP.IN.Qt['rider'][rider_index].excesspremium_emr = [];
    QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma = [];
    var prod_id = QNIAPP.IN.id;
    emr = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].emr;
    pma = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].pma;

    if (emr) {
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['emr'] = emr;
      if (rider_name == 'INAD') {
        rate_table_val_emr = window['QNIAPP'][rider_name + '_RIDER_EMR']['get'](emr, pptoption, rider_term, rider_ppt);
      }
      else if (rider_name == 'C4CI') { // For CI Rider -- Discounts are applied
        rate_table_val_emr = window['QNIAPP'][rider_name + '_RIDER_EMR']['get'](emr, rider_term, QNIAPP.IN.Qt.qtdtls.age, QNIAPP.IN.Qt.qtdtls.gender);
        if (QNIAPP.C4CI_DISCOUNT.isDiscountApplicable(QNIAPP.IN.chnlptnr) && !(QNIAPP.IN.useposrates && QNIAPP.IN.useposrates == 'Y')) {
          if (QNIAPP.IN.id != 'C2PP' && QNIAPP.IN.id != 'EGII' && QNIAPP.IN.id != 'EGWP' && QNIAPP.IN.id != 'EIAP' && QNIAPP.IN.id != 'ESIP' && QNIAPP.IN.id != 'EAGP') {
            rate_table_val_emr = rate_table_val_emr - rate_table_val_emr * QNIAPP.C4CI_DISC.get();  // Discounts are applicable - 3% for Other than C2PP
          } else if (QNIAPP.IN.id == 'EGII' || QNIAPP.IN.id == 'EGIIE') {
            rate_table_val_emr = rate_table_val_emr - rate_table_val_emr * QNIAPP.C4CI_EGII_EMP_DISC.get(QNIAPP.IN.Qt.qtdtls.ppt);
          }
          else if (QNIAPP.IN.id == 'EIAP' || QNIAPP.IN.id == 'ESIP' || QNIAPP.IN.id == "EAGP") {
            rate_table_val_emr = rate_table_val_emr - rate_table_val_emr * QNIAPP.C4CI_EXIDE_EMP_DISC.get(QNIAPP.IN.Qt.qtdtls.ppt);

          }
          else {
            rate_table_val_emr = rate_table_val_emr - rate_table_val_emr * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'disc_rt'); // Discounts are applicable - 5.5% for  C2PP
          }
        }
      }//rates are wrt per 1000SA
      else if (rider_name == "PPR_PAC") {
        var pac_rt = QNIAPP.PPR_PRATE_OPTA.get('rate');
        pac_rt = pac_rt - (pac_rt * disc_rt);
        rate_table_val_emr = pac_rt * (emr / 100);

      }
      else if (rider_name == "PPR_ADC") {
        var adc_rt = QNIAPP.PPR_PRATE_OPTB.get('rate');
        adc_rt = adc_rt - (adc_rt * disc_rt);
        rate_table_val_emr = adc_rt * (emr / 100);

      }
      else if (rider_name == "EP") {
        rate_table_val_emr = QNIAPP.EP_RIDER_EMR.get(emr); //window['QNIAPP'][rider_name+'_RIDER_EMR']['get()'];

      }

      if (rate_table_val_emr && rate_table_val_emr !== 0) {
        if (rider_name == "INAD" || rider_name == "C4CI" || rider_name == "EP") {
          QNIAPP.IN.Qt['rider'][rider_index].excesspremium_emr[la_index] = Math.round(((rate_table_val_emr * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][rider_index].sumAssured)) / 1000) * PREM_CONV_FC);
        }
        else if (rider_name == "PPR_PAC" || rider_name == "PPR_ADC") {
          QNIAPP.IN.Qt['rider'][rider_index].excesspremium_emr[la_index] = Math.round(((rate_table_val_emr * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][rider_index].sumAssured)) / 1000) * PREM_CONV_FC * ppt_conv_factor * mon_conv_fac);
        }
      }
      else {
        QNIAPP.ERR.push("EMR Value not found in Table. Invalid !! Cannot Proceed");
        return false;
      }
    }
    if (pma) {
      QNIAPP.IN.Qt['qtdtls']['rider'][rider_index]['rateup']['MB']['pma'] = pma;
      if (rider_name == 'INAD') {
        rate_table_val_pma = window['QNIAPP'][rider_name + '_RIDER_PMA']['get'](pma, pptoption, rider_term, rider_ppt);//rates are wrt per 1000SA
      }
      else if (rider_name == 'C4CI') {  // For CI Rider -- Discounts are applied
        rate_table_val_pma = window['QNIAPP'][rider_name + '_RIDER_PMA']['get'](pma, rider_term, QNIAPP.IN.Qt.qtdtls.age, QNIAPP.IN.Qt.qtdtls.gender);
        if (QNIAPP.C4CI_DISCOUNT.isDiscountApplicable(QNIAPP.IN.chnlptnr) && !(QNIAPP.IN.useposrates && QNIAPP.IN.useposrates == 'Y')) {
          if (QNIAPP.IN.id != 'C2PP' && QNIAPP.IN.id != 'EGII' && QNIAPP.IN.id != 'EGWP' && QNIAPP.IN.id != 'EIAP' && QNIAPP.IN.id != 'ESIP' && QNIAPP.IN.id != 'EAGP') {
            rate_table_val_pma = rate_table_val_pma - rate_table_val_pma * QNIAPP.C4CI_DISC.get();  // Discounts are applicable - 3% for Other than C2PP
          } else if (QNIAPP.IN.id == 'EGII' || QNIAPP.IN.id == 'EGIIE') {
            rate_table_val_pma = rate_table_val_pma - rate_table_val_pma * QNIAPP.C4CI_EGII_EMP_DISC.get(QNIAPP.IN.Qt.qtdtls.ppt);
          }
          else if (QNIAPP.IN.id == 'EIAP' || QNIAPP.IN.id == 'ESIP' || QNIAPP.IN.id == "EAGP") {
            rate_table_val_pma = rate_table_val_pma - rate_table_val_pma * QNIAPP.C4CI_EXIDE_EMP_DISC.get(QNIAPP.IN.Qt.qtdtls.ppt);

          }
          else {
            rate_table_val_pma = rate_table_val_pma - rate_table_val_pma * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'disc_rt'); // Discounts are applicable - 5.5% for  C2PP
          }
        }
      }
      else if (rider_name == "PPR_PAC" || rider_name == "PPR_ADC") {
        rate_table_val_pma = QNIAPP.IN.Qt.qtdtls.rider[rider_index].pma;
      }
      if (rate_table_val_pma && rate_table_val_pma !== 0) {
        if (rider_name == "INAD" || rider_name == "C4CI") {
          QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma[la_index] = Math.round(((rate_table_val_pma * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][rider_index].sumAssured)) / 1000) * PREM_CONV_FC); //((rate_table_val_pma * (parseInt(QNIAPP.IN.Qt.qtdtls['rider'][0].sumAssured))));
        }
        else if (rider_name == "PPR_PAC" || rider_name == "PPR_ADC") {
          QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma[la_index] = Math.round(((rate_table_val_pma * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][rider_index].sumAssured)) / 1000) * PREM_CONV_FC * ppt_conv_factor * mon_conv_fac);
        }


      }
      else if (rider_name == "EP") {
        var disc_rt = (QNIAPP.IN['spl'] === '-') ? QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "emp_dis_rt") : 0.02;
        QNIAPP.IN.Qt['rider'][rider_index].excesspremium_pma[la_index] = Math.round((parseInt(QNIAPP.IN.Qt.qtdtls['rider'][rider_index].sumAssured) * (pma / 1000) * (1 - disc_rt) / 11.5) * PREM_CONV_FC);
      }
      else {
        QNIAPP.ERR.push("PMA Value not found in Table. Invalid !! Cannot Proceed");
        return false;
      }
    }

    //adding up the rates and storing it in Qniapp
    QNIAPP.IN.Qt['rider'][rider_index].excessrate = parseFloat(rate_table_val_emr) + parseFloat(rate_table_val_pma);
    return true;
  };

  UWR_ACT.calcExcessPremiumForEL_rider = function (applicable_prem, la_index, index) {
    var rate_table_val_emr = 0;
    var rate_table_val_pma = 0;
    var PREM_CONV_FC = 0;
    var disc_rt = 0;
    var rider_name = QNIAPP.IN.Qt.qtdtls.rider[index].name;
    var ppt_conv_factor = 1;
    var rider_term = QNIAPP.IN.Qt.qtdtls.rider[index].term;
    var rider_ppt = QNIAPP.IN.Qt.qtdtls.rider[index].ppt;
    var pptoption = (QNIAPP.IN.Qt.qtdtls.rider[index].pptopt) ? (QNIAPP.IN.Qt.qtdtls.rider[index].pptopt) : "";
    var mon_conv_fac = 1;
    if (rider_name == "C4CI") {
      if (QNIAPP.C4CI_DISCOUNT.isDiscountApplicable(QNIAPP.IN.chnlptnr) && !(QNIAPP.IN.useposrates && QNIAPP.IN.useposrates == 'Y')) {
        disc_rt = QNIAPP.C4CI_DISC.get();
      }
      PREM_CONV_FC = window['QNIAPP']['C4CI_PREMIUM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
    }
    if (rider_name == QNIAPP.CONSTS.EL || rider_name == QNIAPP.CONSTS.ELI) {
      if ((QNIAPP.IN.id == "C2P3DP") && (QNIAPP.C2P3DP_DISCOUNT.isDiscountApplicable(QNIAPP.IN.chnlptnr))) {
        disc_rt = (QNIAPP.IN.Qt.qtdtls.pptopt == QNIAPP.CONSTS.S) ? QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'disc_rt_s') : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'disc_rt_r');
      }
      if (QNIAPP.IN.id == "C2PH") {
        disc_rt = QNIAPP.PRODUCT_DETAILS.get('C2PH', 'C2P_DISC');
      }
      if (QNIAPP.IN.Qt.qtdtls.pptopt == "Limited") {
        ppt_conv_factor = window['QNIAPP']['C2P3DP_PRATE_C']['getConvFactorForLimited'](QNIAPP.IN.Qt.qtdtls.term, QNIAPP.IN.Qt.qtdtls.ppt);
      }
      if (QNIAPP.IN.Qt.qtdtls.pptopt == "Single") {
        ppt_conv_factor = window['QNIAPP']['C2P3DP_PRATE_C']['getConvFactorForSingle'](QNIAPP.IN.Qt.qtdtls.term);
      }
      PREM_CONV_FC = window['QNIAPP']['C2P3DP_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
    }
    if (rider_name == "INAD") {
      PREM_CONV_FC = window['QNIAPP']['INAD_PREMIUM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
    }
    if (rider_name == "PPR_PAC" || rider_name == "PPR_ADC") {
      PREM_CONV_FC = window['QNIAPP']['PPR_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
      ppt_conv_factor = window['QNIAPP']['PPR_OPTA_B_CONVFC']['get'](rider_name);
      if (QNIAPP.PPR_DISCOUNT.isDiscountApplicable(QNIAPP.IN.chnlptnr) && !(QNIAPP.IN.useposrates && QNIAPP.IN.useposrates == 'Y')) {
        disc_rt = QNIAPP.PPR_DISC.get(rider_name);
      }
      if ((pptoption == 'Regular' || pptoption == 'Limited') && rider_term < 12) {
        mon_conv_fac = 12 / rider_ppt;
      }
    }
    //PREM_CONV_FC = window['QNIAPP']['C2P3DP_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
    QNIAPP.IN.Qt['rider'][index].excesspremium_emr = [];
    QNIAPP.IN.Qt['rider'][index].excesspremium_pma = [];
    var pma = QNIAPP.IN.Qt.qtdtls.rider[index].pma;
    var emr = QNIAPP.IN.Qt.qtdtls.rider[index].emr;
    var id = QNIAPP.IN.Qt.qtdtls.id == "C2PCK" ? "C2P3DP" : QNIAPP.IN.Qt.qtdtls.id;
    if (QNIAPP.IN.Qt.qtdtls.rider[index].emr && QNIAPP.IN.Qt.qtdtls.rider[index].emr != "") {
      if (rider_name == QNIAPP.CONSTS.EL || rider_name == QNIAPP.CONSTS.ELI) {
        rate_table_val_emr = window['QNIAPP'][id + '_MORT_RATE']['get'](QNIAPP.IN.Qt.qtdtls.option);
      }
      else if (rider_name == "INAD") {
        rate_table_val_emr = window['QNIAPP'][rider_name + '_RIDER_EMR']['get'](emr, pptoption, rider_term, rider_ppt);
      }
      else if (rider_name == "C4CI") {
        rate_table_val_emr = window['QNIAPP'][rider_name + '_RIDER_EMR']['get'](emr, rider_term, QNIAPP.IN.Qt.qtdtls.age, QNIAPP.IN.Qt.qtdtls.gender);
      }
      else if (rider_name == "PPR_PAC") {
        var pac_rt = QNIAPP.PPR_PRATE_OPTA.get('rate');
        pac_rt = pac_rt - (pac_rt * disc_rt);
        rate_table_val_emr = pac_rt * (emr / 100);

      }
      else if (rider_name == "PPR_ADC") {
        var adc_rt = QNIAPP.PPR_PRATE_OPTB.get('rate');
        adc_rt = adc_rt - (adc_rt * disc_rt);
        rate_table_val_emr = adc_rt * (emr / 100);

      }
      if (rate_table_val_emr && rate_table_val_emr !== 0) {
        if (rider_name == "INAD") {
          QNIAPP.IN.Qt['rider'][index].excesspremium_emr[la_index] = Math.round(((rate_table_val_emr * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][index].sumAssured)) / 1000) * PREM_CONV_FC);
        }
        else if (rider_name == "C4CI") {
          var excess_premium_emr = (((rate_table_val_emr * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][index].sumAssured)) / 1000) * PREM_CONV_FC);
          QNIAPP.IN.Qt['rider'][index].excesspremium_emr[la_index] = Math.round(excess_premium_emr - (excess_premium_emr * disc_rt));
        }
        else if (rider_name == "PPR_PAC" || rider_name == "PPR_ADC") {
          QNIAPP.IN.Qt['rider'][index].excesspremium_emr[la_index] = Math.round(((rate_table_val_emr * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][index].sumAssured)) / 1000) * PREM_CONV_FC * ppt_conv_factor * mon_conv_fac);
        }
        else if (rider_name == QNIAPP.CONSTS.EL || rider_name == QNIAPP.CONSTS.ELI) {
          QNIAPP.IN.Qt['rider'][index].excesspremium_emr[la_index] = Math.round(rate_table_val_emr * applicable_prem * (emr / 100));
        }
      }
      else {
        QNIAPP.ERR.push("EMR Value not found in Table. Invalid !! Cannot Proceed");
        return false;
      }
    }
    if (QNIAPP.IN.Qt.qtdtls.rider[index].pma && QNIAPP.IN.Qt.qtdtls.rider[index].pma != "") {
      if (QNIAPP.IN.Qt.qtdtls.rider[index].name == "INAD") {
        rate_table_val_pma = window['QNIAPP'][rider_name + '_RIDER_PMA']['get'](pma, pptoption, rider_term, rider_ppt);
      }
      else if (QNIAPP.IN.Qt.qtdtls.rider[index].name == "C4CI") {
        rate_table_val_pma = window['QNIAPP'][rider_name + '_RIDER_PMA']['get'](pma, rider_term, QNIAPP.IN.Qt.qtdtls.age, QNIAPP.IN.Qt.qtdtls.gender);
      }
      else {
        rate_table_val_pma = QNIAPP.IN.Qt.qtdtls.rider[index].pma;
      }
      if (rate_table_val_pma && rate_table_val_pma != "") {
        if (rider_name == "INAD") {
          QNIAPP.IN.Qt['rider'][index].excesspremium_pma[la_index] = Math.round(((rate_table_val_pma * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][index].sumAssured)) / 1000) * PREM_CONV_FC);
        }
        else if (rider_name == "C4CI") {
          var excess_premium_pma = (((rate_table_val_pma * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][index].sumAssured)) / 1000) * PREM_CONV_FC);
          QNIAPP.IN.Qt['rider'][index].excesspremium_pma[la_index] = Math.round(excess_premium_pma - (excess_premium_pma * disc_rt));
        }
        else if (rider_name == "PPR_PAC" || rider_name == "PPR_ADC") {
          QNIAPP.IN.Qt['rider'][index].excesspremium_pma[la_index] = Math.round(((rate_table_val_pma * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][index].sumAssured)) / 1000) * PREM_CONV_FC * ppt_conv_factor * mon_conv_fac);
        }
        else if (rider_name == QNIAPP.CONSTS.EL || rider_name == QNIAPP.CONSTS.ELI) {
          var excesspremium_pma = (rate_table_val_pma * QNIAPP.IN.Qt.qtdtls['rider'][index].sumAssured * ppt_conv_factor * PREM_CONV_FC);
          QNIAPP.IN.Qt['rider'][index].excesspremium_pma[la_index] = Math.round((excesspremium_pma - (excesspremium_pma * disc_rt)) / 1000);
        }
      }
      else {
        QNIAPP.ERR.push("PML Value not found in Table. Invalid !! Cannot Proceed");
        return false;
      }
    }
    //QNIAPP.IN.Qt['qtdtls']['rider'][0]['rateup']['MB']['pma'] = QNIAPP.lifeassured[la_index]['rider'][0].pma;

    //adding up the rates and storing it in Qniapp
    return true;
  };

  // excess premium for Health
  UWR_ACT.calcExcessPremiumForHealth = function (sel_array_elem, la_index, max_index) {
    QNIAPP.IN.Qt.excesspremium_emr = 0;
    QNIAPP.IN.Qt.excesspremium_pma = 0;
    var valid_emr = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 100, 125, 150]; //only applicable values
    var isvalid = false;
    //each dependent this will get called
    for (var i = 0; i < valid_emr.length; i++) {
      if (parseInt(sel_array_elem.emr) === valid_emr[i] && sel_array_elem.emr !== "") {
        isvalid = true;
      }
    }
    if (isvalid) {
      if (sel_array_elem.emr) {
        if (QNIAPP.IN.Qt.qtdtls.id == "HASP") {
          prem_rt = QNIAPP.HASP.calcPremiumRate(QNIAPP.IN.Qt.qtdtls.freq, QNIAPP.IN.Qt.qtdtls.option, QNIAPP.IN.Qt.qtdtls.sumAssured, max_index, QNIAPP.IN.Qt.qtdtls.deps, la_index);
        }
        else {
          QNIAPP.IN.Qt.excesspremium_emr = (sel_array_elem.emr / 100) * sel_array_elem.premium;
          var excess_rb_premium = (sel_array_elem.emr / 100) * (sel_array_elem.rbpremium ? sel_array_elem.rbpremium : 0);
          var excess_rre_premium = (sel_array_elem.emr / 100) * (sel_array_elem.rrepremium ? sel_array_elem.rrepremium : 0);
          QNIAPP.OUT.rbpremium += excess_rb_premium;
          sel_array_elem['rbpremium'] += excess_rb_premium;
          QNIAPP.OUT.rrepremium += excess_rre_premium;
          sel_array_elem['rrepremium'] += excess_rre_premium;
        }
      }
    }
    else if (!isvalid && sel_array_elem.emr !== "") {
      QNIAPP.ERR.push("EMR Value not applicable. Invalid !! Cannot Proceed");
      return false;
    }
    if (sel_array_elem.pma) {
      QNIAPP.IN.Qt.excesspremium_pma = 0;
    }
    return true;
  };

  UWR_ACT.calcTotalPremium = function (excess_byemr, excess_bypma, premium) {
    var tot_prem = ((premium) ? parseInt(premium) : 0) + ((excess_byemr) ? parseInt(excess_byemr) : 0) + ((excess_bypma) ? parseInt(excess_bypma) : 0);
    QNIAPP.IN.Qt.excesspremium = (QNIAPP.IN.Qt.excesspremium && QNIAPP.IN.Qt.excesspremium[0]) ? QNIAPP.IN.Qt.excesspremium[0] : "";
    QNIAPP.IN.Qt.premium = tot_prem;
    QNIAPP.IN.Qt.totpremium = QNIAPP.IN.Qt.totpremium + tot_prem;
    QNIAPP.IN.Qt.qtdtls.totPremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.IN.Qt.qtdtls.totpremium = QNIAPP.IN.Qt.totpremium;
  };

  //currently for c2pp only (IB rider)
  UWR_ACT.calcTotalPremium_IB_rider = function (excess_byemr, excess_bypma, premium, rider_index) {
    var tot_prem = ((premium) ? parseInt(premium) : 0) + ((excess_byemr) ? parseInt(excess_byemr) : 0) + ((excess_bypma) ? parseInt(excess_bypma) : 0);
    QNIAPP.IN.Qt['rider'][rider_index].excesspremium = (QNIAPP.IN.Qt['rider'][rider_index].excesspremium && QNIAPP.IN.Qt['rider'][rider_index].excesspremium[0]) ? QNIAPP.IN.Qt['rider'][rider_index].excesspremium[0] : "";
    QNIAPP.IN.Qt.qtdtls['rider'][rider_index].premium = tot_prem;
    QNIAPP.IN.Qt['rider'][rider_index].premium = QNIAPP.IN.Qt.qtdtls['rider'][rider_index].premium;
    QNIAPP.IN.Qt['rider'][rider_index].totpremium = QNIAPP.IN.Qt['rider'][rider_index].totpremium + tot_prem;
    QNIAPP.IN.Qt.qtdtls['rider'][rider_index].totPremium = QNIAPP.IN.Qt['rider'][rider_index].totpremium;
  };

  UWR_ACT.calcTotalPremiumForHealth = function () {
    var tot_base_premium = QNIAPP.OUT.premium + QNIAPP.OUT.benPremium;
    var tot_excess_premium = 0;
    for (var index = 0; index < QNIAPP.IN.Qt.qtdtls.deps.length; index++) {
      var dep_elem = QNIAPP.IN.Qt.qtdtls.deps[index];
      if (dep_elem.excesspremium) {
        tot_excess_premium = tot_excess_premium + parseInt(dep_elem.excesspremium);
      }
    }
    QNIAPP.IN.Qt.excesspremium = tot_excess_premium + "";
    QNIAPP.IN.Qt.totpremium = parseInt(tot_base_premium) + parseInt(tot_excess_premium)/* + ((QNIAPP.OUT.benPremium)?QNIAPP.OUT.benPremium:0)*/;
    QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.IN.Qt.qtdtls.totPremium = QNIAPP.IN.Qt.totpremium;
  };

  UWR_ACT.calcTaxes = function () {
    var pol_fee = 0;
    var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };
    prod_id = QNIAPP.IN.id;
    if (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ctg') == 'P' || QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ctg') == 'H') {
      pol_fee = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.id, 'policy_fee');
    }
    else {
      pol_fee = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_POL_PCF_PREM']['get'](QNIAPP.IN.Qt.qtdtls.freq, 'fee');
    }
    var st_rate = (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE" || QNIAPP.IN.id == "SUPH" || QNIAPP.IN.id == "SUPHE" || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE" || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE") ? window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'st_rt')]['get']().firstyearpremiumtax : QNIAPP.PRODUCT_DETAILS.get(prod_id, 'st_rt');
    var ST_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.totpremium - pol_fee) * st_rate) + Math.round(pol_fee * st_rate) : 0;
    var EC_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.totpremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) : 0;
    var GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? ((QNIAPP.IN.Qt.totpremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) : 0;
    var KTAX = ((QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0")) ? Math.round((QNIAPP.IN.Qt.totpremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) : 0;
    if (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE" || QNIAPP.IN.id == "SUPH" || QNIAPP.IN.id == "SUPHE") {
      GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? ((QNIAPP.IN.Qt.totpremium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) + (pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) : 0;
      KTAX = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((QNIAPP.IN.Qt.totpremium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ktax')]['get']().ktax)) + Math.round(pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'ktax')]['get']().ktax)) : 0;
    }
    if (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE") {
      GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? Math.round((QNIAPP.OUT.premium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) + Math.round(pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) : 0;
      KTAX = 0;
      QNIAPP.OUT.premwodisc = parseInt(QNIAPP.OUT.premwodisc) + parseInt(QNIAPP.OUT.excesspremium_emr_wodisc ? QNIAPP.OUT.excesspremium_emr_wodisc : 0) + parseInt(QNIAPP.OUT.excesspremium_pma_wodisc ? QNIAPP.OUT.excesspremium_pma_wodisc : 0);
    }
    if (QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE") {
      GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? Math.round((QNIAPP.OUT.premium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) + Math.round(pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) : 0;
      KTAX = 0;
      QNIAPP.OUT.premwodisc = parseInt(QNIAPP.OUT.premwodisc) + parseInt(QNIAPP.OUT.excesspremium_emr_wodisc ? QNIAPP.OUT.excesspremium_emr_wodisc : 0) + parseInt(QNIAPP.OUT.excesspremium_pma_wodisc ? QNIAPP.OUT.excesspremium_pma_wodisc : 0);
    }
    QNIAPP.IN.Qt.qtdtls.ST_RT = (ST_RT) ? Math.round(ST_RT) : 0;
    QNIAPP.IN.Qt.qtdtls.EC_RT = (EC_RT) ? Math.round(EC_RT) : 0;
    QNIAPP.IN.Qt.qtdtls.KTAX = (KTAX) ? Math.round(KTAX) : 0;
    QNIAPP.IN.Qt.tottax = Math.round(ST_RT + EC_RT + GST_RT + KTAX);
    QNIAPP.IN.Qt.qtdtls.tottax = QNIAPP.IN.Qt.tottax;

    if (QNIAPP.IN.Qt.qtdtls.backdtpremium) {
      QNIAPP.IN.Qt.totpremium = parseInt(QNIAPP.IN.Qt.totpremium) + parseInt(QNIAPP.IN.Qt.qtdtls.backdtpremium);
      QNIAPP.IN.Qt.backdtpremium = QNIAPP.IN.Qt.qtdtls.backdtpremium;
      QNIAPP.IN.Qt.backdtpremium = (QNIAPP.IN.Qt.rider && QNIAPP.IN.Qt.qtdtls.rider[0].riderBkdtPremium) ? (parseInt(QNIAPP.IN.Qt.backdtpremium) + parseInt(QNIAPP.IN.Qt.qtdtls.rider[0].riderBkdtPremium)) : QNIAPP.IN.Qt.backdtpremium;
      QNIAPP.IN.Qt.backdttax = QNIAPP.IN.Qt.qtdtls.backdttax;
      QNIAPP.IN.Qt.tottax = parseInt(QNIAPP.IN.Qt.tottax) + parseInt(QNIAPP.IN.Qt.backdttax);
    }

    QNIAPP.IN.Qt.totpremium = parseInt(QNIAPP.IN.Qt.totpremium) + parseInt(QNIAPP.IN.Qt.tottax);
    QNIAPP.IN.Qt.qtdtls.totPremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.IN.Qt.qtdtls.totpremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.IN.Qt.totannpremium = QNIAPP.IN.Qt.totpremium * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
    QNIAPP.IN.Qt.qtdtls.totAnnPremium = QNIAPP.IN.Qt.totannpremium;
  };

  UWR_ACT.calcTaxesFor_IB_rider = function (rider_index) {
    var pol_fee = 0;
    var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };
    pol_fee = QNIAPP.PRODUCT_DETAILS.get('INAD', 'policy_fee');
    var ST_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.qtdtls['rider'][rider_index].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get('INAD', 'st_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get('INAD', 'st_rt')) : 0;
    var EC_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.qtdtls['rider'][rider_index].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get('INAD', 'ec_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get('INAD', 'ec_rt')) : 0;
    var GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? ((QNIAPP.IN.Qt.qtdtls['rider'][rider_index].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get('INAD', 'gst_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get('INAD', 'gst_rt')) : 0;
    var KTAX = ((QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0")) ? Math.round((QNIAPP.IN.Qt.qtdtls['rider'][rider_index].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get('INAD', 'ktax')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get('INAD', 'ktax')) : 0;
    QNIAPP.IN.Qt.qtdtls.rider[rider_index].st_rt = (ST_RT) ? Math.round(ST_RT) : 0;
    QNIAPP.IN.Qt.qtdtls.rider[rider_index].ec_rt = (EC_RT) ? Math.round(EC_RT) : 0;
    QNIAPP.IN.Qt.qtdtls.rider[rider_index].ktax = (KTAX) ? Math.round(KTAX) : 0;
    QNIAPP.IN.Qt.qtdtls.rider[rider_index].tax = Math.round(ST_RT + EC_RT + GST_RT + KTAX);
    QNIAPP.IN.Qt.totpremium = parseInt(QNIAPP.IN.Qt.qtdtls.premium) + parseInt(QNIAPP.IN.Qt.qtdtls.tottax);
    QNIAPP.IN.Qt.tottax = parseInt(QNIAPP.IN.Qt.qtdtls.tottax);
    var ridertotpremium = 0;
    var ridertottax = 0;
    for (var i = 0; i <= rider_index; i++) {
      if (QNIAPP.IN.Qt.qtdtls['rider'][i] != '') {
        ridertotpremium = ridertotpremium + parseInt(QNIAPP.IN.Qt.qtdtls['rider'][i].premium);
        ridertottax = ridertottax + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].tax);
      }
    }

    QNIAPP.IN.Qt.totpremium = QNIAPP.IN.Qt.totpremium + ridertotpremium + ridertottax;

    QNIAPP.IN.Qt.tottax = parseInt(QNIAPP.IN.Qt.tottax) + parseInt(ridertottax);
    QNIAPP.IN.Qt.qtdtls.totpremium = parseInt(QNIAPP.IN.Qt.totpremium);
    QNIAPP.IN.Qt.qtdtls.totPremium = parseInt(QNIAPP.IN.Qt.totpremium);
    QNIAPP.IN.Qt.totannpremium = QNIAPP.IN.Qt.totpremium * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
    QNIAPP.IN.Qt.qtdtls.totAnnPremium = QNIAPP.IN.Qt.totannpremium;


  };

  UWR_ACT.calcTaxesForHealth = function () {
    var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };
    //if(QNIAPP.IN.Qt.qtdtls.nri =='0'){
    var SC_RT = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.id, 'sc_rt');
    var EC_RT = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.id, 'ec_rt');
    var gst_rt = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'gst_rt');
    var appTax = ((QNIAPP.IN.Qt.qtdtls.jnk == '1')) ? (gst_rt * QNIAPP.IN.Qt.totpremium) : (Math.round(SC_RT * QNIAPP.IN.Qt.totpremium) + Math.round(EC_RT * QNIAPP.IN.Qt.totpremium));
    QNIAPP.IN.Qt.tottax = appTax;
    QNIAPP.IN.Qt.qtdtls.tottax = QNIAPP.IN.Qt.tottax;
    QNIAPP.IN.Qt.qtdtls.SC_RT = Math.round(SC_RT * (QNIAPP.IN.Qt.totpremium));
    QNIAPP.IN.Qt.qtdtls.EC_RT = Math.round(EC_RT * (QNIAPP.IN.Qt.totpremium));
    QNIAPP.IN.Qt.totpremium = parseInt(QNIAPP.IN.Qt.totpremium) + parseInt(QNIAPP.IN.Qt.tottax);
    QNIAPP.IN.Qt.qtdtls.totPremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.IN.Qt.totannpremium = QNIAPP.IN.Qt.totpremium * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
    QNIAPP.IN.Qt.qtdtls.totAnnPremium = QNIAPP.IN.Qt.totannpremium;
    //	}
    /*else{
      QNIAPP.IN.Qt.tottax = 0;
      QNIAPP.IN.Qt.totannpremium = QNIAPP.IN.Qt.totpremium * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
      QNIAPP.IN.Qt.qtdtls.totAnnPremium = QNIAPP.IN.Qt.totannpremium ;
    }*/
  };

  UWR_ACT.calcTaxes_C2P3DP = function () {
    var pol_fee = 0;
    prod_id = QNIAPP.IN.id;
    var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };
    pol_fee = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.id, 'policy_fee');
    var premium = Math.round(parseFloat(QNIAPP.IN.Qt.qtdtls.premium));
    var ST_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((premium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'st_rt')]['get']().firstyearpremiumtax)) + (pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'st_rt')]['get']().firstyearpremiumtax)) : 0;
    var EC_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) : 0;
    var GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? ((premium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) + (pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) : 0;
    var KTAX = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((premium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get('C2P3DP', 'ktax')]['get']().ktax)) + Math.round(pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get('C2P3DP', 'ktax')]['get']().ktax)) : 0;
    QNIAPP.IN.Qt.qtdtls.ST_RT = (ST_RT) ? Math.round(ST_RT) : 0;
    QNIAPP.IN.Qt.qtdtls.EC_RT = (EC_RT) ? Math.round(EC_RT) : 0;
    QNIAPP.IN.Qt.qtdtls.KTAX = (KTAX) ? Math.round(KTAX) : 0;
    QNIAPP.IN.Qt.tottax = Math.round(ST_RT + EC_RT + GST_RT + KTAX);
    QNIAPP.IN.Qt.totpremium = premium + QNIAPP.IN.Qt.tottax;
    if (QNIAPP.IN.Qt.qtdtls.backdtpremium && QNIAPP.IN.Qt.qtdtls.backdtpremium != "") {
      QNIAPP.IN.Qt.tottax = QNIAPP.IN.Qt.tottax + ((QNIAPP.IN.Qt.qtdtls.backdttax && QNIAPP.IN.Qt.qtdtls.backdttax != "") ? parseInt(QNIAPP.IN.Qt.qtdtls.backdttax) : 0);
      QNIAPP.IN.Qt.backdttax = (QNIAPP.IN.Qt.qtdtls.backdttax && QNIAPP.IN.Qt.qtdtls.backdttax != "") ? (QNIAPP.IN.Qt.qtdtls.backdttax) : 0;
      QNIAPP.IN.Qt.backdtpremium = QNIAPP.IN.Qt.qtdtls.backdtpremium;
      QNIAPP.IN.Qt.totpremium = QNIAPP.IN.Qt.totpremium + parseInt(QNIAPP.IN.Qt.qtdtls.backdtpremium) + parseInt(QNIAPP.IN.Qt.qtdtls.backdttax);
    }
    QNIAPP.IN.Qt.qtdtls.combinedPremium = premium;
    QNIAPP.IN.Qt.qtdtls.tottax = QNIAPP.IN.Qt.tottax;
    QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.qtdtls.premium;
    QNIAPP.IN.Qt.qtdtls.totPremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.IN.Qt.qtdtls.totpremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.IN.Qt.totannpremium = QNIAPP.IN.Qt.totpremium * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
    QNIAPP.IN.Qt.qtdtls.totAnnPremium = QNIAPP.IN.Qt.totannpremium;
  };

  UWR_ACT.calcTaxes_C2P3DP_rider = function () {
    var pol_fee = 0;
    prod_id = QNIAPP.IN.id;
    var st_rt_rdr = 0;
    var ec_rt_rdr = 0;
    var gst_rt_rdr = 0;
    var ST_RT = 0;
    var EC_RT = 0;
    var GST_RT = 0;
    var KTAX = 0;
    pol_fee = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.id, 'policy_fee');
    var premium = Math.round(parseFloat(QNIAPP.IN.Qt.qtdtls.premium));
    ST_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((premium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'st_rt')]['get']().firstyearpremiumtax)) + (pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'st_rt')]['get']().firstyearpremiumtax)) : 0;
    EC_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) : 0;
    GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? ((premium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) + (pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) : 0;
    KTAX = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((premium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get('C2P3DP', 'ktax')]['get']().ktax)) + Math.round(pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get('C2P3DP', 'ktax')]['get']().ktax)) : 0;
    QNIAPP.IN.Qt.qtdtls.ST_RT = (ST_RT) ? Math.round(ST_RT) : 0;
    QNIAPP.IN.Qt.qtdtls.EC_RT = (EC_RT) ? Math.round(EC_RT) : 0;
    QNIAPP.IN.Qt.qtdtls.KTAX = (KTAX) ? Math.round(KTAX) : 0;
    QNIAPP.IN.Qt.qtdtls.tottax = Math.round(ST_RT + EC_RT + GST_RT + KTAX);
    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
      if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
        if (!(QNIAPP.COMM_CALC.isSplRider(prod_id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']))) {
          QNIAPP.IN.Qt.qtdtls.combinedPremium = Math.round(parseFloat(QNIAPP.IN.Qt.qtdtls.premium) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[i].premium)); //For rounding of el premium
          ST_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.qtdtls.combinedPremium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'st_rt')]['get']().firstyearpremiumtax)) + (pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'st_rt')]['get']().firstyearpremiumtax)) : 0;
          EC_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.qtdtls.combinedPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) : 0;
          GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? ((QNIAPP.IN.Qt.qtdtls.combinedPremium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) + (pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'gst_rt')]['get']().firstyeargst_rt)) : 0;
          KTAX = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((QNIAPP.IN.Qt.qtdtls.combinedPremium - pol_fee) * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get('C2P3DP', 'ktax')]['get']().ktax)) + Math.round(pol_fee * (window['QNIAPP'][QNIAPP.PRODUCT_DETAILS.get('C2P3DP', 'ktax')]['get']().ktax)) : 0;
          QNIAPP.IN.Qt.qtdtls.rider[i].tax = 0;
          QNIAPP.IN.Qt.qtdtls.ST_RT = Math.round(ST_RT);
          QNIAPP.IN.Qt.qtdtls.EC_RT = Math.round(EC_RT);
          QNIAPP.IN.Qt.qtdtls.KTAX = Math.round(KTAX);
          QNIAPP.IN.Qt.qtdtls.tottax = Math.round(ST_RT + EC_RT + GST_RT + KTAX);

        }
        else {
          st_rt_rdr = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'st_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'st_rt')) : 0;
          ec_rt_rdr = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'ec_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'ec_rt')) : 0;
          gst_rt_rdr = (QNIAPP.IN.Qt.qtdtls.jnk === '1') ? ((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'gst_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'gst_rt')) : 0;
          ktax_rdr = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'ktax')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'ktax')) : 0;
          QNIAPP.IN.Qt.qtdtls.rider[i].st_rt = (st_rt_rdr) ? Math.round(st_rt_rdr) : 0;
          QNIAPP.IN.Qt.qtdtls.rider[i].ec_rt = (ec_rt_rdr) ? Math.round(ec_rt_rdr) : 0;
          QNIAPP.IN.Qt.qtdtls.rider[i].ktax = (ktax_rdr) ? Math.round(ktax_rdr) : 0;
          QNIAPP.IN.Qt.qtdtls.rider[i].tax = Math.round(st_rt_rdr + ec_rt_rdr + gst_rt_rdr + ktax_rdr);
          /*if(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name == "INAD"){
            if(parseInt(QNIAPP.IN.Qt.qtdtls.rider[rider_index].premium) > ((0.30) * parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium))){
              QNIAPP['ERR'].push('Calculated rider premium is greater than 30% of the base premium '+QNIAPP.IN.Qt.qtdtls.combinedPremium);
              return QNIAPP.COMM_NODE.sendErrorResponseToService(response,"",0); //Error response to be returned
            }
            }
          if(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name == "C4CI"){
            if(parseInt(QNIAPP.IN.Qt.qtdtls.rider[rider_index].premium) > (parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium))){
              QNIAPP['ERR'].push('Calculated rider premium is greater than 100% of the base premium '+QNIAPP.IN.Qt.qtdtls.combinedPremium);
              return QNIAPP.COMM_NODE.sendErrorResponseToService(response,"",0); //Error response to be returned
            }
          }*/

        }
      }
    }
  };
  UWR_ACT.calcTaxes_UlipSplRider = function () {
    var pol_fee = 0;
    prod_id = QNIAPP.IN.id;
    var st_rt_rdr = 0;
    var ec_rt_rdr = 0;
    var gst_rt_rdr = 0;
    pol_fee = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.id, 'policy_fee');
    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
      if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N" && (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']))) {
        st_rt_rdr = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'st_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'st_rt')) : 0;
        ec_rt_rdr = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'ec_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'ec_rt')) : 0;
        gst_rt_rdr = (QNIAPP.IN.Qt.qtdtls.jnk === '1') ? ((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'gst_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'gst_rt')) : 0;
        ktax_rdr = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1') ? Math.round((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'ktax')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'ktax')) : 0;
        QNIAPP.IN.Qt.qtdtls.rider[i].st_rt = (st_rt_rdr) ? Math.round(st_rt_rdr) : 0;
        QNIAPP.IN.Qt.qtdtls.rider[i].ec_rt = (ec_rt_rdr) ? Math.round(ec_rt_rdr) : 0;
        QNIAPP.IN.Qt.qtdtls.rider[i].ktax = (ktax_rdr) ? Math.round(ktax_rdr) : 0;
        QNIAPP.IN.Qt.qtdtls.rider[i].tax = Math.round(st_rt_rdr + ec_rt_rdr + gst_rt_rdr + ktax_rdr);
      }
    }
  };

  UWR_ACT.calcTaxes_ibcippr_rider = function () {
    var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };
    var pol_fee = 0;
    prod_id = QNIAPP.IN.id;
    var st_rt_rdr = 0;
    var ec_rt_rdr = 0;
    var gst_rt_rdr = 0;
    var ridertottax = 0;
    var ridertotpremium = 0;
    pol_fee = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.id, 'policy_fee');
    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
      if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N" && (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']))) {
        st_rt_rdr = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'st_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'st_rt')) : 0;
        ec_rt_rdr = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'ec_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'ec_rt')) : 0;
        gst_rt_rdr = (QNIAPP.IN.Qt.qtdtls.jnk === '1') ? ((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'gst_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'gst_rt')) : 0;
        ktax_rdr = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1') ? Math.round((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'ktax')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'ktax')) : 0;
        QNIAPP.IN.Qt.qtdtls.rider[i].st_rt = (st_rt_rdr) ? Math.round(st_rt_rdr) : 0;
        QNIAPP.IN.Qt.qtdtls.rider[i].ec_rt = (ec_rt_rdr) ? Math.round(ec_rt_rdr) : 0;
        QNIAPP.IN.Qt.qtdtls.rider[i].ktax = (ktax_rdr) ? Math.round(ktax_rdr) : 0;
        QNIAPP.IN.Qt.qtdtls.rider[i].tax = Math.round(st_rt_rdr + ec_rt_rdr + gst_rt_rdr + ktax_rdr);
        ridertottax = ridertottax + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].tax);
        if ((QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") && QNIAPP.IN.Qt.qtdtls.option == "Comprehensive" && QNIAPP.IN.Qt.qtdtls.rider[0]['name'] == "EP") {
          QNIAPP.OUT.rider[i - 1].premium = parseInt(QNIAPP.IN.Qt.qtdtls['rider'][i].premium);
          QNIAPP.OUT.rider[i - 1].tax = parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].tax);
        } else {
          QNIAPP.OUT.rider[i].premium = parseInt(QNIAPP.IN.Qt.qtdtls['rider'][i].premium);
          QNIAPP.OUT.rider[i].tax = parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].tax);
        }
        ridertotpremium = ridertotpremium + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium);
      }
      else if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N" && (!QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) && QNIAPP.IN.Qt.qtdtls.rider[i]['name'] == "EP") {
        st_rt_rdr = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'st_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'st_rt')) : 0;

        ec_rt_rdr = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ec_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ec_rt')) : 0;
        gst_rt_rdr = (QNIAPP.IN.Qt.qtdtls.jnk === '1') ? ((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'gst_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'gst_rt')) : 0;
        ktax_rdr = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1') ? Math.round((QNIAPP.IN.Qt.qtdtls['rider'][i].premium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ktax')) + Math.round(pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ktax')) : 0;
        QNIAPP.IN.Qt.qtdtls.rider[i].st_rt = (st_rt_rdr) ? Math.round(st_rt_rdr) : 0;
        QNIAPP.IN.Qt.qtdtls.rider[i].ec_rt = (ec_rt_rdr) ? Math.round(ec_rt_rdr) : 0;
        QNIAPP.IN.Qt.qtdtls.rider[i].ktax = (ktax_rdr) ? Math.round(ktax_rdr) : 0;
        QNIAPP.IN.Qt.qtdtls.rider[i].tax = Math.round(st_rt_rdr + ec_rt_rdr + gst_rt_rdr + ktax_rdr);
        ridertottax = ridertottax + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].tax);

        QNIAPP.OUT['extPremium'] = (QNIAPP.IN.Qt.qtdtls['rider'][i].premium) ? parseInt(QNIAPP.IN.Qt.qtdtls['rider'][i].premium) : 0;

        //QNIAPP.OUT['extraProtSA'] = parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].tax);
        ridertotpremium = ridertotpremium + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium);
      }

    }
    QNIAPP.IN.Qt.tottax = parseInt(QNIAPP.IN.Qt.qtdtls.tottax) + (ridertottax);
    QNIAPP.IN.Qt.totpremium = parseInt(QNIAPP.IN.Qt.qtdtls.premium) + ridertotpremium + QNIAPP.IN.Qt.tottax;
    QNIAPP.IN.Qt.qtdtls.totPremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.IN.Qt.qtdtls.totpremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.IN.Qt.totannpremium = QNIAPP.IN.Qt.totpremium * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
    QNIAPP.IN.Qt.qtdtls.totAnnPremium = QNIAPP.IN.Qt.totannpremium;
    QNIAPP.OUT.totPremium = QNIAPP.IN.Qt.totpremium;
  };

  UWR_ACT.calctotalpremium_C2P3D = function () {
    var ridertottax = 0;
    var ridertotpremium = 0;
    var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };
    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
      if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N" && (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']))) {
        ridertottax = ridertottax + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].tax);
        ridertotpremium = ridertotpremium + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium);
      }
    }
    QNIAPP.IN.Qt.tottax = parseInt(QNIAPP.IN.Qt.qtdtls.tottax) + (ridertottax);
    QNIAPP.IN.Qt.totpremium = parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium) + ridertotpremium + QNIAPP.IN.Qt.tottax;
    QNIAPP.IN.Qt.qtdtls.totPremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.IN.Qt.qtdtls.totpremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.IN.Qt.totannpremium = QNIAPP.IN.Qt.totpremium * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
    QNIAPP.IN.Qt.qtdtls.totAnnPremium = QNIAPP.IN.Qt.totannpremium;

  };

  UWR_ACT.calcTotalPremiumForCombi = function () {
    var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };
    var ext_premium = 0;
    var ext_tax = 0;
    var ext_rider_tax = 0;
    var ext_rider_premium = 0;
    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.externallifeassured.length; i++) {
      if (QNIAPP.IN.Qt.qtdtls.externallifeassured[i].deleteflg == "N") {
        /*if(QNIAPP.IN.combID=="C2POS" && QNIAPP.IN.Qt.qtdtls.externaloption =="Family" && QNIAPP.IN.Qt.qtdtls.externallifeassured[i].ext_floaterpremium){
          ext_premium = ext_premium + parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[i].ext_floaterpremium);
        }
        else{*/
        ext_premium = ext_premium + parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[i].ext_premium);
        ext_tax = ext_tax + parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[i].ext_tax);
        ext_rider_premium = ext_rider_premium + parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[i].ext_rider_premium ? QNIAPP.IN.Qt.qtdtls.externallifeassured[i].ext_rider_premium : 0);
        ext_rider_tax = ext_rider_tax + parseInt(QNIAPP.IN.Qt.qtdtls.externallifeassured[i].ext_rider_tax ? QNIAPP.IN.Qt.qtdtls.externallifeassured[i].ext_rider_tax : 0);
      }
    }
    QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium = ext_premium;
    QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax = ext_tax;
    QNIAPP.IN.Qt.qtdtls.externalOBJ[0].riderpremium = ext_rider_premium;
    QNIAPP.IN.Qt.qtdtls.externalOBJ[0].ridertax = ext_rider_tax;
    QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.qtdtls.combinedPremium;
    if (QNIAPP.IN.combID === "C1C2PLH" || QNIAPP.IN.combID === "C1C2PLHE" || QNIAPP.IN.combID === "C2POS" || QNIAPP.IN.combID === "C2PCS") {
      QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.qtdtls.premium;
      QNIAPP.IN.Qt.totpremium = ext_premium + ext_tax + ext_rider_premium + ext_rider_tax + parseInt(QNIAPP.IN.Qt.qtdtls.premium) + parseInt(QNIAPP.IN.Qt.qtdtls.tottax);
    } else {
      QNIAPP.IN.Qt.totpremium = ext_premium + ext_tax + ext_rider_premium + ext_rider_tax + parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium) + parseInt(QNIAPP.IN.Qt.qtdtls.tottax);
    }
    QNIAPP.IN.Qt.qtdtls.totpremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.IN.Qt.qtdtls.totPremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.IN.Qt.totannpremium = QNIAPP.IN.Qt.totpremium * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
    QNIAPP.IN.Qt.qtdtls.totAnnPremium = QNIAPP.IN.Qt.totannpremium;
    QNIAPP.IN.Qt.addlprmamt = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium + QNIAPP.IN.Qt.qtdtls.externalOBJ[0].riderpremium;
    QNIAPP.IN.Qt.addltaxamt = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax + QNIAPP.IN.Qt.qtdtls.externalOBJ[0].ridertax;
  };

  UWR_ACT.generateMultipleCounterOfferForTraditional = function (counter_off_index) {
    QNIAPP.UWR_ACT.setBasicInputs();
    var issuccess = false;
    var la_index = 0;
    var premium_to_apply = QNIAPP.IN.Qt.qtdtls.premium;
    if ((QNIAPP.IN.id == "SANCHP" || QNIAPP.IN.id == "SANPAR")) {
      QNIAPP.IN.Qt.qtdtls.sumAssured = '0';
      premium_to_apply = UWR_ACT.calcAdjustPremium();
      QNIAPP.IN.Qt.qtdtls.premium = premium_to_apply;
      QNIAPP.IN.Qt.qtdtls.lifeassured[0].premium = premium_to_apply + "";
    }
    logger.info("Adjust Premium For Multiplecounter>>>>>" + QNIAPP.IN.Qt.qtdtls.premium);
    var isvalid = eval("QNIAPP." + QNIAPP.IN.id + ".validate('I')");
    logger.error("Process Traditional MultipleCounterOffer ---->" + QNIAPP.ERR);
    if (isvalid) {
      QNIAPP.IN.Qt['qtdtls']['rateup'] = {};
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB'] = {};
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'] = {};
      if (QNIAPP.IN.id == "SANCHP" || QNIAPP.IN.id == "SANPAR") {
        QNIAPP.IN.Qt.qtdtls.lifeassured[0].sumassured = QNIAPP.IN.Qt.qtdtls.sumAssured + "";
      }
      if (QNIAPP.lifeassured[la_index].emr || QNIAPP.lifeassured[la_index].pma) {
        if (UWR_ACT.processEMRPMAForTraditional(premium_to_apply)) {
          QNIAPP.IN.Qt.qtdtls.premium = parseInt(premium_to_apply) + parseInt(QNIAPP.IN.Qt.excessPremium[0]); //single life
          QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.qtdtls.premium;
          QNIAPP.UWR_ACT.resetOutxexcesspremium('T');
          logger.error("Process EMR/PML for MultipleCounterOffer ---->" + QNIAPP.ERR);
          QNIAPP.OUT.partyid = QNIAPP.lifeassured[0].partyid;
          QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
          QNIAPP.UWR_ACT.addLifeAssuredDetails(0);//assuming single life
          QNIAPP.UWR_ACT.storeINJsonArray(1);
          QNIAPP.UWR_ACT.storeOUTJsonArray(1);
          issuccess = true;
        }
      }
    }
    return issuccess;
  };

  UWR_ACT.generateMultipleCounterOfferForProtection = function (counteroff_index) {
    var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };
    QNIAPP.UWR_ACT.setBasicInputs();
    var issuccess = false;
    var multiple_counter = true;
    var la_index = 0;
    var bandCount = (QNIAPP.IN.Qt.qtdtls.option === QNIAPP.CONSTS.LICIR) ? 4 : 8;
    var adbRt = 0;
    var wopRate = 0;
    var ropRate = 0;
    var ppt_conv_fac = 1;
    var rate_table_val_emr = 0;
    var pma_loading = 0;
    var emr_loading = 0;
    var revisedSA = [];
    var finalRevisedSA = 0;
    var revisedSABand = 0;
    var isaltered = QNIAPP.UWR_ACT.checkandSetAlteredInputsForMultipleCounter(0);
    var EMP_DISC = (QNIAPP.IN['spl'] === '-') ? QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "emp_dis_rt") : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['spl'], "emp_dis_rt");

    if (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE") {
      var opt = QNIAPP.IN.Qt.qtdtls.option + ' ' + QNIAPP.IN.Qt.qtdtls.suboption;
      if (QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" && QNIAPP.IN['spl'] === '-' && QNIAPP.IN.Qt.qtdtls.pptopt == "Single") {
        EMP_DISC = 0.01;
      } else if (QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" && QNIAPP.IN['spl'] === '-' && QNIAPP.IN.Qt.qtdtls.pptopt != "Single") {
        EMP_DISC = 0.02;
      } else if (QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" && QNIAPP.IN['spl'] != '-' && QNIAPP.IN.Qt.qtdtls.pptopt == "Single") {
        EMP_DISC = 0.02;
      } else if (QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" && QNIAPP.IN['spl'] != '-' && QNIAPP.IN.Qt.qtdtls.pptopt != "Single") {
        EMP_DISC = 0.03;
      }

      if (QNIAPP.IN.Qt.qtdtls.isnpFlg == "Y" && QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" && QNIAPP.IN.Qt.qtdtls.pptopt == "Single") {
        EMP_DISC = 0.02;
      } else if (QNIAPP.IN.Qt.qtdtls.isnpFlg == "Y" && QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" && QNIAPP.IN.Qt.qtdtls.pptopt != "Single") {
        EMP_DISC = 0.03;
      } else if (QNIAPP.IN.Qt.qtdtls.isnpFlg == "Y") {
        EMP_DISC = 0.01;
      }

      if (QNIAPP.IN.Qt.qtdtls.option === QNIAPP.CONSTS.LIPR && QNIAPP.IN.Qt.qtdtls.suboption === QNIAPP.CONSTS.FT && QNIAPP.IN.Qt.qtdtls.adb == "Yes") {
        adbRt = 0.5;
      }
      if (QNIAPP.IN.Qt.qtdtls.option === QNIAPP.CONSTS.LIPR && QNIAPP.IN.Qt.qtdtls.suboption === QNIAPP.CONSTS.FT && QNIAPP.IN.Qt.qtdtls.wop == "Yes" && QNIAPP.IN.Qt.qtdtls.ppt >= 5) {
        wopRate = QNIAPP.P1C2PL_RATE.getWopRate();
      }

      if (QNIAPP.IN.Qt.qtdtls.option !== QNIAPP.CONSTS.INPL && QNIAPP.IN.Qt.qtdtls.rop === "Yes") {
        ropRate = QNIAPP.P1C2PL_RATE.getRopRate();
      }
      if (QNIAPP.IN.Qt.qtdtls.pptopt != QNIAPP.CONSTS.REG && (QNIAPP.IN.Qt.qtdtls.option != "Income Plus" && (opt != "Life Protect Whole Life"))) {
        ppt_conv_fac = (QNIAPP.IN.Qt.qtdtls.option === QNIAPP.CONSTS.LIPR && QNIAPP.IN.Qt.qtdtls.suboption === QNIAPP.CONSTS.FT && QNIAPP.IN.Qt.qtdtls.pptopt == "Single" && QNIAPP.IN.Qt.qtdtls.term == "0") ? 1 : QNIAPP.P1C2PL_RATE.getConvRate();

      }
      if (QNIAPP.lifeassured[la_index].emr) {
        rate_table_val_emr = window['QNIAPP'][QNIAPP.IN.id + '_MORT_RATE']['get'](QNIAPP.IN.Qt.qtdtls.option);
        emr_loading = ((QNIAPP.lifeassured[la_index].emr) / 100);
      }
      if (QNIAPP.lifeassured[la_index].pma) {
        pma_loading = QNIAPP.lifeassured[la_index].pma;
      }
      var PREM_CONV_FC = QNIAPP.P1C2PL_MIN_PREM.getConvFactor(QNIAPP.IN.Qt.qtdtls.freq);
      var BAND_SA_OTHOPT = {
        '1': {
          'Band Start': 50000,
          'Band End': 500000
        },
        '2': {
          'Band Start': 500001,
          'Band End': 1000000
        },
        '3': {
          'Band Start': 1000001,
          'Band End': 3000000
        },
        '4': {
          'Band Start': 3000001,
          'Band End': 4999999
        },
        '5': {
          'Band Start': 5000000,
          'Band End': 6000000
        },
        '6': {
          'Band Start': 6000001,
          'Band End': 7500000
        },
        '7': {
          'Band Start': 7500001,
          'Band End': 10000000
        },
        '8': {
          'Band Start': 10000001,
          'Band End': 999999999
        }

      };
      var BAND_SA_LICIR = {
        '1': {
          'Band Start': 2000000,
          'Band End': 4999999

        },
        '2': {
          'Band Start': 5000000,
          'Band End': 6000000
        },
        '3': {
          'Band Start': 6000000,
          'Band End': 999999999
        }

      };
      var iteration_sa_Range = (QNIAPP.IN.Qt.qtdtls.option == QNIAPP.CONSTS.LICIR) ? BAND_SA_LICIR : BAND_SA_OTHOPT;
      for (var key in iteration_sa_Range) {
        if (QNIAPP.IN.Qt.qtdtls.option == QNIAPP.CONSTS.LICIR) {
          band_start_sa = QNIAPP.P1C2PL_BANDMAP.getBand_multiplecounter(iteration_sa_Range[key]['Band Start']);
        }
        else if (QNIAPP.IN.Qt.qtdtls.option !== QNIAPP.CONSTS.LICIR && (iteration_sa_Range[key]['Band Start'] == 50000 || iteration_sa_Range[key]['Band Start'] == 5000000 || iteration_sa_Range[key]['Band Start'] == 10000001)) {
          band_start_sa = QNIAPP.P1C2PL_BANDMAP.getBand_multiplecounter(iteration_sa_Range[key]['Band Start']);
        }
        else {
          band_start_sa = QNIAPP.P1C2PL_BANDMAP.getBand_multiplecounter((iteration_sa_Range[key]['Band Start']) - 1);
        }
        var prate1 = QNIAPP.P1C2PL_RATE.getPrate(band_start_sa);
        var prem_rate1 = ((((prate1 + adbRt) * (1 + ropRate) * (1 + wopRate) * ppt_conv_fac) * (1 + (emr_loading * rate_table_val_emr))) + (pma_loading * ppt_conv_fac)) * (1 - EMP_DISC);
        var band_end_sa = QNIAPP.P1C2PL_BANDMAP.getBand_multiplecounter(iteration_sa_Range[key]['Band End']);
        var prate2 = QNIAPP.P1C2PL_RATE.getPrate(band_end_sa);
        var prem_rate2 = ((((prate2 + adbRt) * (1 + ropRate) * (1 + wopRate) * ppt_conv_fac) * (1 + (emr_loading * rate_table_val_emr))) + (pma_loading * ppt_conv_fac)) * (1 - EMP_DISC);
        var bandstart = iteration_sa_Range[key]['Band Start'];
        var bandend = iteration_sa_Range[key]['Band End'];
        var prem1 = bandstart * (prem_rate1 / 1000);
        var prem2 = bandend * (prem_rate2 / 1000);
        var oldAnnualPremium = parseInt(QNIAPP.IN.Qt.qtdtls.premium);
        oldAnnualPremium = (oldAnnualPremium / PREM_CONV_FC);
        var oldSA = parseInt(QNIAPP.IN.Qt.qtdtls.sumAssured);
        if (bandend == 999999999) {
          revisedSumAssured = ((oldAnnualPremium - ((bandstart * prem_rate1) / 1000)) / (prem_rate2 / 1000)) + bandstart;
        }
        else if (QNIAPP.IN.Qt.qtdtls.option == QNIAPP.CONSTS.LICIR) {
          revisedSumAssured = bandstart + ((oldAnnualPremium - prem1) / (prem2 - prem1)) * (bandend - bandstart);
        }
        else if (QNIAPP.IN.Qt.qtdtls.option !== QNIAPP.CONSTS.LICIR && (bandstart == 50000 || bandstart == 5000000)) {
          revisedSumAssured = bandstart + ((oldAnnualPremium - prem1) / (prem2 - prem1)) * (bandend - bandstart);
        }
        else {
          revisedSumAssured = (bandstart - 1) + ((oldAnnualPremium - prem1) / (prem2 - prem1)) * (bandend - (bandstart - 1));
        }
        //Revised SA Check = (Band Start < Revised SA) && (Revised SA < Band End) && (Revised SA < Orignal SA);
        if ((bandstart <= revisedSumAssured) && (revisedSumAssured <= bandend) && (revisedSumAssured < oldSA)) {
          if (revisedSumAssured > finalRevisedSA) {
            finalRevisedSA = revisedSumAssured;
          }
          //revisedSABand = bandrange;
        }
      }
    }
    else if (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE") {
      var optBrate = 1;
      var optCRate = 1;
      var wopTotDisRate = 0;
      var TobLoading = 0;
      var MedicalLoad = 0;
      var spouse_fac = 0;
      EMP_DISC = (EMP_DISC == "" || EMP_DISC == undefined) ? 0 : EMP_DISC;
      if (QNIAPP.IN.Qt.qtdtls.isnpFlg == "Y") {
        EMP_DISC = QNIAPP.PRODUCT_DETAILS.get("P1C2PSE", "emp_dis_rt");
      }
      if (QNIAPP.IN.Qt.qtdtls.isEmpOfHdfc == "1") {
        EMP_DISC = EMP_DISC + 0.02;
      }
      if (QNIAPP.IN.Qt.qtdtls.isExCustomer == "1" || (QNIAPP.IN.Qt.qtdtls.isSpouse == "1" && QNIAPP.IN.Qt.qtdtls.isExCustomer == "0")) {
        disc_rt = (QNIAPP.IN.Qt.qtdtls.pptopt == "Single") ? 0.01 : 0.02;
        EMP_DISC = EMP_DISC + disc_rt;
      }

      if (QNIAPP.IN.Qt.qtdtls.option == "Life" && QNIAPP.IN.Qt.qtdtls.SaFactor === "B") {
        var min_age = eval('QNIAPP.' + QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'age') + '.get("min_age")') / 12;
        var f_age = (parseInt(QNIAPP.IN.Qt.qtdtls.age) - 2) < min_age ? min_age : (parseInt(QNIAPP.IN.Qt.qtdtls.age) - 2);
        var age = 0;
        var versionDate = convertStrToDDMMYYYY(QNIAPP.CONSTS.P1C2PS_OLD_VDATE_F);
        var incpDt = convertStrToDDMMYYYY(QNIAPP.IN.Qt.qtdtls.incpDt);
        if (QNIAPP && QNIAPP.other && QNIAPP.other.touchpoint && QNIAPP.other.touchpoint === "UW" && incpDt < versionDate && QNIAPP.IN.Qt.qtdtls.gender == 'F') {
          age = f_age;
        }
        else {
          age = (QNIAPP.IN.Qt.qtdtls.gender === "R") ? f_age : QNIAPP.IN.Qt.qtdtls.age;
        }
        optBrate = QNIAPP.P1C2PS_INCFAC_OPTB.get(age, QNIAPP.IN.Qt.qtdtls.term);
      }
      if (QNIAPP.IN.Qt.qtdtls.option == "Life" && QNIAPP.IN.Qt.qtdtls.SaFactor === "C") {
        var min_age = eval('QNIAPP.' + QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'age') + '.get("min_age")') / 12;
        var f_age = (parseInt(QNIAPP.IN.Qt.qtdtls.age) - 2) < min_age ? min_age : (parseInt(QNIAPP.IN.Qt.qtdtls.age) - 2);
        var age = 0;
        var versionDate = convertStrToDDMMYYYY(QNIAPP.CONSTS.P1C2PS_OLD_VDATE_F);
        var incpDt = convertStrToDDMMYYYY(QNIAPP.IN.Qt.qtdtls.incpDt);
        if (QNIAPP && QNIAPP.other && QNIAPP.other.touchpoint && QNIAPP.other.touchpoint === "UW" && incpDt < versionDate && QNIAPP.IN.Qt.qtdtls.gender == 'F') {
          age = f_age;
        }
        else {
          age = (QNIAPP.IN.Qt.qtdtls.gender === "R") ? f_age : QNIAPP.IN.Qt.qtdtls.age;
        }
        optCRate = QNIAPP.P1C2PS_INCFAC_OPTC.get(age, QNIAPP.IN.Qt.qtdtls.term);
      }
      if (QNIAPP.IN.Qt.qtdtls.wopCI == "Yes") {
        wopRate = QNIAPP.P1C2PS_WOPCI_RATE.get(QNIAPP.IN.Qt.qtdtls.gender, QNIAPP.IN.Qt.qtdtls.age, QNIAPP.IN.Qt.qtdtls.ppt);
      }
      if (QNIAPP.IN.Qt.qtdtls.wopTotalDisability == "Yes") {
        wopTotDisRate = QNIAPP.P1C2PS_WOPDIS_RATE.get(QNIAPP.IN.Qt.qtdtls.gender, QNIAPP.IN.Qt.qtdtls.age, QNIAPP.IN.Qt.qtdtls.ppt);
      }
      if (QNIAPP.IN.Qt.qtdtls.rop === "Yes" && QNIAPP.IN.Qt.qtdtls.option != "Life Goal") {
        ropRate = QNIAPP.P1C2PS_ROPRATE.get(QNIAPP.IN.Qt.qtdtls.pptOption, QNIAPP.IN.Qt.qtdtls.age, QNIAPP.IN.Qt.qtdtls.term);
      }
      if (QNIAPP.IN.Qt.qtdtls.pptopt != QNIAPP.CONSTS.REG) {
        ppt_conv_fac = QNIAPP.P1C2PS_CONVRATE_PPT.get(QNIAPP.IN.Qt.qtdtls.ppt, QNIAPP.IN.Qt.qtdtls.term);
        ppt_conv_fac = (ppt_conv_fac < 1) ? 1 : ppt_conv_fac;
      }
      if (QNIAPP.IN.Qt.qtdtls.tobstatus == "1" && QNIAPP.IN.Qt.qtdtls.sumassured >= 5000000) {
        TobLoading = 1;
      }
      if (QNIAPP.IN.Qt.qtdtls.option != QNIAPP.CONSTS.LIFG && QNIAPP.IN.Qt.qtdtls.life_opt != "LIFE") {
        spouse_fac = (parseInt(QNIAPP.IN.Qt.qtdtls.spouseSa) / QNIAPP.IN.Qt.qtdtls.sumassured);
        spouse_fac = spouse_fac * 0.1;
      }
      /*if(QNIAPP.IN.Qt.qtdtls.LoadingPercentage  && QNIAPP.IN.Qt.qtdtls.LoadingPercentage !=''){
        var lPercent=QNIAPP.IN.Qt.qtdtls.LoadingPercentage;
        lPercent = parseInt(lPercent/100);
        MedicalLoad = lPercent;
      }*/
      if (QNIAPP.lifeassured[la_index].emr) {
        rate_table_val_emr = window['QNIAPP'][QNIAPP.IN.id + '_MORT_RATE']['get'](QNIAPP.IN.Qt.qtdtls.option);
        emr_loading = ((QNIAPP.lifeassured[la_index].emr) / 100);
      }
      if (QNIAPP.lifeassured[la_index].pma) {
        pma_loading = QNIAPP.lifeassured[la_index].pma;
      }
      var PREM_CONV_FC = QNIAPP.P1C2PS_MIN_PREM.getConvFactor(QNIAPP.IN.Qt.qtdtls.freq);

      var BAND_SA_OTHOPT = {
        '1': {
          'Band Start': 50000,
          'Band End': 500000
        },
        '2': {
          'Band Start': 500001,
          'Band End': 1000000
        },
        '3': {
          'Band Start': 1000001,
          'Band End': 3000000
        },
        '4': {
          'Band Start': 3000001,
          'Band End': 4999999
        },
        '5': {
          'Band Start': 5000000,
          'Band End': 6000000
        },
        '6': {
          'Band Start': 6000001,
          'Band End': 7500000
        },
        '7': {
          'Band Start': 7500001,
          'Band End': 10000000
        },
        '8': {
          'Band Start': 10000001,
          'Band End': 999999999
        }

      };

      var iteration_sa_Range = BAND_SA_OTHOPT;
      for (var key in iteration_sa_Range) {
        if ((iteration_sa_Range[key]['Band Start'] == 50000 || iteration_sa_Range[key]['Band Start'] == 5000000 || iteration_sa_Range[key]['Band Start'] == 10000001)) {
          band_start_sa = QNIAPP.P1C2PS_BANDMAP.getBand_multiplecounter(iteration_sa_Range[key]['Band Start']);
        }
        else {
          band_start_sa = QNIAPP.P1C2PS_BANDMAP.getBand_multiplecounter((iteration_sa_Range[key]['Band Start']) - 1);
        }
        var prate1 = QNIAPP.P1C2PS_RATE.getPrate(band_start_sa);
        var prem_rate1 = ((prate1 * (optBrate * optCRate) * ((1 + TobLoading) * (1 + MedicalLoad)) * ((1 + ropRate) * (1 + wopRate) * (1 + wopTotDisRate) * (1 + spouse_fac)) * ppt_conv_fac) * (1 + (emr_loading * rate_table_val_emr)) + (pma_loading * ppt_conv_fac));
        var band_end_sa = QNIAPP.P1C2PS_BANDMAP.getBand_multiplecounter(iteration_sa_Range[key]['Band End']);
        var prate2 = QNIAPP.P1C2PS_RATE.getPrate(band_end_sa);
        var prem_rate2 = ((prate2 * (optBrate * optCRate) * ((1 + TobLoading) * (1 + MedicalLoad)) * ((1 + ropRate) * (1 + wopRate) * (1 + wopTotDisRate) * (1 + spouse_fac)) * ppt_conv_fac) * (1 + (emr_loading * rate_table_val_emr)) + (pma_loading * ppt_conv_fac));
        var bandstart = iteration_sa_Range[key]['Band Start'];
        var bandend = iteration_sa_Range[key]['Band End'];
        var prem1 = bandstart * (prem_rate1 / 1000);
        var prem2 = bandend * (prem_rate2 / 1000);
        var oldPremium = parseInt(QNIAPP.IN.Qt.qtdtls.premium);
        var oldAnnualPremium = parseInt(oldPremium / (1 - EMP_DISC));
        oldAnnualPremium = (oldAnnualPremium / PREM_CONV_FC);
        var oldSA = parseInt(QNIAPP.IN.Qt.qtdtls.sumAssured);
        if (bandend == 999999999) {
          revisedSumAssured = ((oldAnnualPremium - ((bandstart * prem_rate1) / 1000)) / (prem_rate2 / 1000)) + bandstart;
        }
        else if (bandstart == 50000 || bandstart == 5000000) {
          revisedSumAssured = bandstart + ((oldAnnualPremium - prem1) / (prem2 - prem1)) * (bandend - bandstart);
        }
        else {
          revisedSumAssured = (bandstart - 1) + ((oldAnnualPremium - prem1) / (prem2 - prem1)) * (bandend - (bandstart - 1));
        }
        logger.info("Rivised SA======" + revisedSumAssured);
        //Revised SA Check = (Band Start < Revised SA) && (Revised SA < Band End) && (Revised SA < Orignal SA);
        if ((bandstart <= revisedSumAssured) && (revisedSumAssured <= bandend) && (revisedSumAssured < oldSA)) {
          if (revisedSumAssured > finalRevisedSA) {
            finalRevisedSA = revisedSumAssured;
          }
          //revisedSABand = bandrange;
        }
      }


    }
    logger.info("Decreased SA For BASE>>>>>" + Math.round(finalRevisedSA));
    if (QNIAPP.lifeassured[la_index].altsumassured && QNIAPP.lifeassured[la_index].altsumassured != "" && QNIAPP.lifeassured[la_index].altsumassured <= finalRevisedSA) {
      issuccess = false;
      return issuccess;
    }
    QNIAPP.IN.Qt.qtdtls.sumAssured = Math.round(finalRevisedSA);
    var isvalid = eval("QNIAPP." + QNIAPP.IN.id + ".validate('I')");
    var premium_to_apply = QNIAPP.IN.Qt.qtdtls.premium;
    QNIAPP.OUT.premwodisc = Math.round(QNIAPP.OUT.premwodisc);
    logger.error("Process Protection MultipleCounterOffer ---->" + QNIAPP.ERR);
    if (isvalid) {
      //in case of only rateup or if alterations are success
      QNIAPP.IN.Qt['qtdtls']['rateup'] = {};
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB'] = {};
      QNIAPP.IN.Qt['qtdtls']['rateup']['MB']['yrwise'] = {};
      if (QNIAPP.lifeassured[la_index].emr || QNIAPP.lifeassured[la_index].pma) {
        if (UWR_ACT.processEMRPMAForProtection(premium_to_apply)) {
          QNIAPP.IN.Qt.qtdtls.premium = parseInt(premium_to_apply) + parseInt(QNIAPP.IN.Qt.excessPremium[0]); //single life
          QNIAPP.UWR_ACT.resetOutxexcesspremium('P');
          logger.error("Process EMR/PML for MultipleCounterOffer ---->" + QNIAPP.ERR);
          //logger.info("Protection After Rateup Error FINAL_JSON ---->"+final_json.head["errors"]);
          QNIAPP.OUT.partyid = QNIAPP.lifeassured[0].partyid;
          QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
          QNIAPP.UWR_ACT.addLifeAssuredDetails(0);//assuming single life
          QNIAPP.UWR_ACT.storeINJsonArray(1);
          QNIAPP.UWR_ACT.storeOUTJsonArray(1);
          issuccess = true;
        }
      }
      else {
        QNIAPP.OUT.partyid = QNIAPP.lifeassured[0].partyid;
        QNIAPP.UWR_ACT.calcTotalPremium(0, 0, QNIAPP.IN.Qt.qtdtls.premium);
        QNIAPP.UWR_ACT.calcTaxes();
        QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
        QNIAPP.UWR_ACT.addLifeAssuredDetails(0);
        QNIAPP.UWR_ACT.storeINJsonArray(1);
        QNIAPP.UWR_ACT.storeOUTJsonArray(1);
        issuccess = true;
      }
    }
    return issuccess;
  };

  UWR_ACT.generateMultipleCounterOfferForRider = function (counteroff_index, is_multiplecounteroffer_base) {
    var FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1 }, 'Half Yearly': { "f": 2, "pd": 6 }, 'Quarterly': { "f": 4, "pd": 3 }, 'Annual': { "f": 1, "pd": 12 }, 'Single': { "f": 1, "pd": 12 } };
    QNIAPP.UWR_ACT.setBasicInputs();
    var rider_multiple_count = 0;
    var sumassured = 0;
    var isvalid_base = true;
    var is_valid_rider = true;
    var issuccess_rider = false;
    var rider_flg = false;
    if (!is_multiplecounteroffer_base) {
      isvalid_base = eval("QNIAPP." + QNIAPP.IN.id + ".validate('I')");
      QNIAPP.UWR_ACT.calcTotalPremium(0, 0, QNIAPP.IN.Qt.qtdtls.premium);
      QNIAPP.UWR_ACT.calcTaxes();
    }
    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
      if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N" && isvalid_base) {
        var new_premium_rider = parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium) + (QNIAPP.IN.Qt['rider'][i].excessPremium && QNIAPP.IN.Qt['rider'][i].excessPremium[0] ? parseInt(QNIAPP.IN.Qt['rider'][i].excessPremium[0]) : 0);
        if (new_premium_rider > QNIAPP.IN.Qt.qtdtls.rider[i].premium) {
          rider_multiple_count = rider_multiple_count + 1;
          var pptopt = QNIAPP.IN.Qt.qtdtls.rider[i].pptopt;
          var term = QNIAPP.IN.Qt.qtdtls.rider[i].term;
          var ppt = QNIAPP.IN.Qt.qtdtls.rider[i].ppt;
          var age = QNIAPP.IN.Qt.qtdtls.age;
          var rider_name = QNIAPP.IN.Qt.qtdtls.rider[i].name;
          var ppt_conv_factor = 1;
          var mon_conv_fac = 1;
          var PREM_CONV_FC = 1;
          var disc_rt = 0;
          var revised_sa = 0;
          var rdr_rate = 0;
          var emr = 0;
          var pma = 0;
          var rate_table_val_pma = 0;
          var rate_table_val_emr = 0;
          if (rider_name == "INAD" || rider_name == "C4CI") {
            if (QNIAPP.IN.id == 'C2PP' || QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE" || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE") {
              PREM_CONV_FC = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
            }
            else if (QNIAPP.IN.id == 'SARJB') {
              PREM_CONV_FC = window['QNIAPP']['SARJB_POL_PCF_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
            }
            else {
              PREM_CONV_FC = window['QNIAPP'][QNIAPP.IN.Qt['qtdtls']['id'] + '_POL_PCF_PREM']['get'](QNIAPP.IN.Qt.qtdtls.freq, 'fac');
            }
          }
          if (rider_name == "PPR_PAC" || rider_name == "PPR_ADC") {
            PREM_CONV_FC = window['QNIAPP']['PPR_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
            ppt_conv_factor = window['QNIAPP']['PPR_OPTA_B_CONVFC']['get'](rider_name);
            if (QNIAPP.PPR_DISCOUNT.isDiscountApplicable(QNIAPP.IN.chnlptnr) && !(QNIAPP.IN.useposrates && QNIAPP.IN.useposrates == 'Y')) {
              disc_rt = QNIAPP.PPR_DISC.get(rider_name);
            }
            if ((pptopt == 'Regular' || pptopt == 'Limited') && term < 12) {
              mon_conv_fac = 12 / ppt;
            }
          }
          if (rider_name == "C4CI") {
            rdr_rate = QNIAPP.C4CI_PRATE.get(pptopt, term, ppt, age, (QNIAPP.IN.Qt.qtdtls.gender === 'M') ? 'ratem' : 'ratef');
          }
          else if (rider_name == "INAD") {
            rdr_rate = QNIAPP.INAD_PRATE.get(term, ppt, pptopt);
          }
          emr = QNIAPP.IN.Qt.qtdtls['rider'][i].emr;
          pma = QNIAPP.IN.Qt.qtdtls['rider'][i].pma;
          if (emr) {
            if (rider_name == "INAD") {
              rate_table_val_emr = window['QNIAPP'][rider_name + '_RIDER_EMR']['get'](emr, pptopt, term, ppt);
            }
            if (rider_name == "C4CI") {
              rate_table_val_emr = window['QNIAPP'][rider_name + '_RIDER_EMR']['get'](emr, term, QNIAPP.IN.Qt.qtdtls.age, QNIAPP.IN.Qt.qtdtls.gender);
            }
            if (rider_name == "PPR_PAC") {
              var pac_rt = QNIAPP.PPR_PRATE_OPTA.get('rate');
              rdr_rate = pac_rt - (pac_rt * disc_rt);
              rate_table_val_emr = rdr_rate * (emr / 100);

            }
            if (rider_name == "PPR_ADC") {
              var adc_rt = QNIAPP.PPR_PRATE_OPTB.get('rate');
              rdr_rate = adc_rt - (adc_rt * disc_rt);
              rate_table_val_emr = rdr_rate * (emr / 100);

            }
          }
          if (pma) {
            if (rider_name == 'INAD') {
              rate_table_val_pma = window['QNIAPP'][rider_name + '_RIDER_PMA']['get'](pma, pptopt, term, ppt);//rates are wrt per 1000SA
            }
            if (rider_name == 'C4CI') {
              rate_table_val_pma = window['QNIAPP'][rider_name + '_RIDER_PMA']['get'](pma, term, QNIAPP.IN.Qt.qtdtls.age, QNIAPP.IN.Qt.qtdtls.gender);
            }
            if (rider_name == "PPR_PAC" || rider_name == "PPR_ADC") {
              rate_table_val_pma = parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].pma);
            }
          }
          var revised_rt = ((rdr_rate + rate_table_val_emr + rate_table_val_pma) * ppt_conv_factor * mon_conv_fac);
          if (rider_name == "C4CI") {
            if (QNIAPP.C4CI_DISCOUNT.isDiscountApplicable(QNIAPP.IN.chnlptnr) && !(QNIAPP.IN.useposrates && QNIAPP.IN.useposrates == 'Y')) {
              if (QNIAPP.IN.id != 'C2PP') {
                revised_rt = revised_rt - revised_rt * QNIAPP.C4CI_DISC.get();  // Discounts are applicable - 3% for Other than C2PP
              } else {
                revised_rt = revised_rt - revised_rt * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'disc_rt'); // Discounts are applicable - 5.5% for  C2PP
              }
            }
          }
          revised_sa = ((QNIAPP.IN.Qt.qtdtls.rider[i].premium / PREM_CONV_FC) * 1000) / revised_rt;
          logger.info("Decreased SA For Rider==>" + Math.round(revised_sa));
          if (revised_sa < QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured) {
            QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured = Math.round(revised_sa);
            QNIAPP.IN.Qt.qtdtls.rider[i].sumassured = QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured;
          }
          else {
            if (QNIAPP.body && QNIAPP.body.length > 1) {
              var temp_array = new Array();
              var temp_array_op = new Array();
              temp_array.push(QNIAPP.body[0]);
              temp_array_op.push(QNIAPP['OP'][0]);
              QNIAPP.body = [];
              QNIAPP['OP'] = [];
              QNIAPP.body = temp_array;
              QNIAPP['OP'] = temp_array_op;
            }
            issuccess_rider = false;
            return issuccess_rider;
          }
        }

      }
    }
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && QNIAPP.ERR.length == 0 && isvalid_base) {
      QNIAPP.IN.Qt.rider = [];
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
          QNIAPP.IN.Qt.rider[i] = [];
          var rider_premium_to_apply = 0;
          var todo_rateup_for_rider = false;
          if (parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured) > parseInt(QNIAPP.IN.Qt.qtdtls.sumAssured)) {
            QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured = QNIAPP.IN.Qt.qtdtls.sumAssured;
            QNIAPP.IN.Qt.qtdtls.rider[i].sumassured = QNIAPP.IN.Qt.qtdtls.rider[i].sumAssured;
          }
          is_valid_rider = eval("QNIAPP." + QNIAPP.IN.Qt.qtdtls.rider[i].name + ".validate('I')");
          logger.error("MultipleCounterOffer for Rider ---->" + QNIAPP.ERR);
          if (is_valid_rider) {
            if (QNIAPP.IN.Qt.qtdtls['rider'][i].emr || QNIAPP.IN.Qt.qtdtls['rider'][i].pma) {
              rider_premium_to_apply = QNIAPP.IN.Qt.qtdtls['rider'][i].premium; //For IB CI and PPR
              todo_rateup_for_rider = true;
            }
            if (todo_rateup_for_rider) {
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup'] = {};
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup']['MB'] = {};
              QNIAPP.IN.Qt['qtdtls']['rider'][i]['rateup']['MB']['yrwise'] = {};
              logger.error("Process Protection in todo_rateup for IB rider Error ---->" + QNIAPP.ERR);
              if (UWR_ACT.processEMRPMAForIB_rider(rider_premium_to_apply, i)) {
                QNIAPP.IN.Qt.qtdtls['rider'][i].premium = parseInt(rider_premium_to_apply) + parseInt(QNIAPP.IN.Qt['rider'][i].excessPremium[0]); //single life
              }
            }
          }
          if (QNIAPP.ERR && QNIAPP.ERR.length > 0) {
            break;
          }
        }
      }


    }
    if (QNIAPP.ERR.length == 0 && QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0 && is_valid_rider && isvalid_base) {
      QNIAPP.UWR_ACT.calcTaxes_ibcippr_rider();
      QNIAPP.UWR_ACT.resetOutxexcesspremium_ibcippr();
      QNIAPP.UWR_ACT.addLifeAssuredDetails(0);
      rider_flg = QNIAPP.UWR_ACT.deleteC2P3DRiders(); //for resetting the rider obj after checking decline condition
      QNIAPP.UWR_ACT.genJsonForQuoteInputs(false, 'Proposed_UW');
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N") {
          QNIAPP.IN.Qt.premium = QNIAPP.IN.Qt.premium + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium);
        }
      }
      index_storein = QNIAPP.IN.Qt.qtdtls.rider.length - 1;

    }

    if (rider_flg && (is_multiplecounteroffer_base || (rider_multiple_count > 0))) { //2nd quote to be genearted if base or any one rider premium is more than the old premium
      QNIAPP.UWR_ACT.storeINJsonArray(1); //After rider obj has been reset successfully without any error.
      QNIAPP.UWR_ACT.storeOUTJsonArray(1);
      issuccess_rider = true;

    }
    else {
      if (QNIAPP.body && QNIAPP.body.length > 1) {
        var temp_array = new Array();
        var temp_array_op = new Array();
        temp_array.push(QNIAPP.body[0]);
        temp_array_op.push(QNIAPP['OP'][0]);
        QNIAPP.body = [];
        QNIAPP['OP'] = [];
        QNIAPP.body = temp_array;
        QNIAPP['OP'] = temp_array_op;
      }
      issuccess_rider = false;
    }
    return issuccess_rider;
  };


  UWR_ACT.storeOriginalQuote = function () {
    QNIAPP['upsell'] = {};
    QNIAPP['upsell']['Q1'] = {};
    QNIAPP['upsell']['Q1']['IN'] = {};
    for (var key in QNIAPP.IN.Qt.qtdtls) {
      if (typeof (QNIAPP.IN.Qt.qtdtls[key]) == "String") {
        QNIAPP.upsell['Q1']['IN'][key] = QNIAPP.IN.Qt.qtdtls[key];
      } else {
        QNIAPP.upsell['Q1']['IN'][key] = $.parseJSON(JSON.stringify(QNIAPP.IN.Qt.qtdtls[key]));
      }

    }
    QNIAPP.upsell['Q1']['quoteid'] = QNIAPP.IN.Qt.quoteid;
  };

  UWR_ACT.resetQuoteInputs = function () {
    for (var key in QNIAPP.upsell.Q1.IN) {
      if (typeof (QNIAPP.upsell.Q1.IN[key]) == "String") {
        QNIAPP.IN.Qt.qtdtls[key] = QNIAPP.upsell.Q1.IN[key];
      }
      else {
        QNIAPP.IN.Qt.qtdtls[key] = $.parseJSON(JSON.stringify(QNIAPP.upsell.Q1.IN[key]));
      }
    }
    QNIAPP.IN.Qt.tottax = 0;
    QNIAPP.IN.Qt.totpremium = 0;
    QNIAPP.IN.Qt['quoteid'] = QNIAPP.upsell['Q1']['IN']['quoteid'];
    logger.info("Reset Quote Inputs--->" + JSON.stringify(QNIAPP.IN.Qt));
  };

  UWR_ACT.storeINJsonArray = function (index) {
    QNIAPP['body'][index] = {};
    QNIAPP['body'][index] = { 'qtdtls': {} };
    QNIAPP.IN.Qt.freq_cd = QNIAPP.COMM_NODE.getMstr_pk(GQNI_FREQ, QNIAPP.IN.Qt.qtdtls.freq);
    QNIAPP.IN.Qt.gender_cd = (QNIAPP.IN.Qt.qtdtls.gender === "M") ? "GEN_M" : "GEN_F";
    if (QNIAPP.IN.Qt.touchpoint == "UW") {
      if (index == 0) {
        QNIAPP.IN.Qt.rateupType = "First";
      }
      else if (index == 1) {
        QNIAPP.IN.Qt.rateupType = "Second";
      }

    }

    for (var key in QNIAPP.IN.Qt) {
      if (key !== "qtdtls") {
        if (key === "sumassured" || key === "premium" || key === "totpremium" || key === "tottax") {
          QNIAPP['body'][index][key] = (Math.round(QNIAPP.IN.Qt[key])).toString();
        }
        else {
          QNIAPP['body'][index][key] = QNIAPP.IN.Qt[key];
        }
      }
    }
    for (var key in QNIAPP.IN.Qt.qtdtls) {
      if (key === "sumAssured" || key === "premium" || key === "totPremium" || key === "elSumAssured" || key === "monthlyIncome" || key === "lumpsum") {
        QNIAPP['body'][index]['qtdtls'][key] = (Math.round(QNIAPP.IN.Qt['qtdtls'][key])).toString();
      }
      else if (key === "rider" && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
        QNIAPP['body'][index]['qtdtls'].rider = new Array();
        //QNIAPP['body'][index]['qtdtls'].rider[0]={};
        for (var i = 0; i <= index_storein; i++) {
          if (QNIAPP.IN.Qt.qtdtls.rider[i] && QNIAPP.IN.Qt.qtdtls.rider[i].length != 0) {
            QNIAPP['body'][index]['qtdtls'].rider[i] = {};
          }
        }
        for (var i = 0; i <= index_storein; i++) {

          for (var key in QNIAPP.IN.Qt.qtdtls.rider[i]) {
            if (key === "sumAssured" || key === "sumassured" || key === "premium" || key === "tax" || key === "ppt" || key === "term" || key === "st_rt" || key === "ec_rt") {
              QNIAPP['body'][index]['qtdtls'].rider[i][key] = (Math.round(QNIAPP.IN.Qt['qtdtls'].rider[i][key])).toString();
            }
            else {
              QNIAPP['body'][index]['qtdtls'].rider[i][key] = QNIAPP.IN.Qt['qtdtls'].rider[i][key];
            }

          }

        }
      }
      else {
        QNIAPP['body'][index]['qtdtls'][key] = QNIAPP.IN.Qt['qtdtls'][key];
      }
    }

    logger.info("Store In JSON Array--->" + JSON.stringify(QNIAPP.body[index]));
  };

  UWR_ACT.storeOUTJsonArray = function (index) {
    var incp_date;
    var regDate = /^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/((19|[2-9]\d)\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/((19|[2-9]\d)\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/((19|[2-9]\d)\d{2}))|(29\/02\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$/;
    dateString = QNIAPP.IN.Qt.qtdtls.incpDt;
    if (regDate.test(dateString)) {
      var dateObj = dateString.split("/");
      var day = dateObj[0];
      var month = dateObj[1];
      var year = dateObj[2];
      incp_date = new Date(year, month - 1, day);
    } else {
      incp_date = dateString;
    }

    if ((QNIAPP.IN.Qt.qtdtls.id === 'SANCH' || QNIAPP.IN.Qt.qtdtls.spl === 'SANCHE') && incp_date < new Date("10/13/2015")) {
      QNIAPP.OUT['uin'] = '101N097V01';
    }
    else if (QNIAPP.IN.Qt.qtdtls.spl && QNIAPP.IN.Qt.qtdtls.spl !== '-') {
      QNIAPP.OUT['uin'] = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.spl, 'uin');
    }
    else {
      QNIAPP.OUT['uin'] = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.id, 'uin');
    }

    if (QNIAPP.PRODUCT_DETAILS.isVersion8Applicable(QNIAPP.IN.Qt.qtdtls.product)) {
      QNIAPP.OUT['uin'] = QNIAPP.COMM_PARMS.getVersion8UIN(QNIAPP.IN.Qt.qtdtls.product);
    }

    if (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE") {
      var vdate = '05/06/2023';
      var version_date = convertStrToDDMMYYYY(vdate);
      if (incp_date <= version_date) {
        QNIAPP.OUT['uin'] = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'uin').substring(0, 9) + (parseInt(QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'uin').charAt(9)) - 1).toString();
      }
      else {
        QNIAPP.OUT['uin'] = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'uin');
      }
    }
    if (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE") {
      var incpDt = convertStrToDDMMYYYY(QNIAPP.IN.Qt.qtdtls.incpDt);
      var versionDate = convertStrToDDMMYYYY(QNIAPP.CONSTS.P1C2PS_OLD_VDATE_F);
      if (incpDt < versionDate) {
        QNIAPP.OUT['uin'] = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'uin').substring(0, 9) + (parseInt(QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'uin').charAt(9)) - 1).toString();
      }
      else {
        QNIAPP.OUT['uin'] = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'uin');
      }
    }

    QNIAPP['OP'][index] = {};
    for (var key in QNIAPP.OUT) {
      QNIAPP['OP'][index][key] = QNIAPP.OUT[key];
    }
    //adding the quote id to the output
    QNIAPP['OP'][index]['quoteid'] = QNIAPP.IN.Qt.qtdtls.quoteid;
    QNIAPP['OP'][index]['appnum'] = QNIAPP.IN.Qt.qtdtls.appnum;
    logger.info("Store OUT JSON Array--->" + JSON.stringify(QNIAPP['OP'][index]));
  };

  UWR_ACT.identifyRider = function (rider_nm_json) {
    if (QNIAPP.IN.Qt.qtdtls.id === "UL7EA") {
      if (rider_nm_json == "RIDER_EXTRA_HEALTH" || rider_nm_json == "RIDER_EXTRA_LIFE" || rider_nm_json == "RIDER_EXTRA_DISABLE" || rider_nm_json == "RIDER_INCOME_BENEFIT" || rider_nm_json == "RIDER_CRITICAL_ILLNESS" || rider_nm_json == "RIDER_PERSONAL_ACCIDENT_COVER" || rider_nm_json == "RIDER_ACCIDENTAL_DEATH_COVER" || rider_nm_json == "RIDER_CANCER_COVER") {
        var rider = { "RIDER_EXTRA_HEALTH": "Extra Health", "RIDER_EXTRA_LIFE": "Extra Life", "RIDER_EXTRA_DISABLE": "Extra Disability", "RIDER_INCOME_BENEFIT": "INAD", "RIDER_CRITICAL_ILLNESS": "C4CI", "RIDER_PERSONAL_ACCIDENT_COVER": "PPR_PAC", "RIDER_ACCIDENTAL_DEATH_COVER": "PPR_ADC", "RIDER_CANCER_COVER": "PPR_CC" };
        return rider[rider_nm_json];
      }
      else if (rider_nm_json == "EL" || rider_nm_json == "EH" || rider_nm_json == "ED") {
        return QNIAPP.CONSTS[rider_nm_json];
      }
    }
    else {
      if (rider_nm_json == "RIDER_EXTRA_HEALTH" || rider_nm_json == "RIDER_EXTRA_LIFE" || rider_nm_json == "RIDER_EXTRA_DISABILITY" || rider_nm_json == "RIDER_INCOME_BENEFIT" || rider_nm_json == "RIDER_CRITICAL_ILLNESS" || rider_nm_json == "RIDER_PERSONAL_ACCIDENT_COVER" || rider_nm_json == "RIDER_ACCIDENTAL_DEATH_COVER" || rider_nm_json == "RIDER_CANCER_COVER") {
        var rider = { "RIDER_EXTRA_HEALTH": "EH", "RIDER_EXTRA_LIFE": "EL", "RIDER_EXTRA_DISABILITY": "ED", "RIDER_INCOME_BENEFIT": "INAD", "RIDER_CRITICAL_ILLNESS": "C4CI", "RIDER_PERSONAL_ACCIDENT_COVER": "PPR_PAC", "RIDER_ACCIDENTAL_DEATH_COVER": "PPR_ADC", "RIDER_CANCER_COVER": "PPR_CC" };
        return rider[rider_nm_json];
      }
      else if (rider_nm_json == "Extra Life" || rider_nm_json == "Extra Health" || rider_nm_json == "Extra Disability") {
        var rider = { "Extra Health": "EH", "Extra Life": "EL", "Extra Disability": "ED" };
        return rider[rider_nm_json];
      }
    }
    return rider_nm_json;
  };

  UWR_ACT.checkAndSetDependentsNo = function () {
    var depsno = QNIAPP.IN.Qt.qtdtls.depsno;
    QNIAPP.ERR = [];
    for (var x = 0; x < QNIAPP.lifeassured.length; x++) {
      var la_elem = QNIAPP.lifeassured[x];
      if (la_elem.deleteflg == 'Y') {
        depsno = depsno - 1;
      }
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.deps.length; i++) {
        if (la_elem.partyid == QNIAPP.IN.Qt.qtdtls.deps[i].partyid) {
          QNIAPP.IN.Qt.qtdtls.deps[i].deleteflg = la_elem.deleteflg;
        }
      }
    }
    QNIAPP.IN.Qt.qtdtls.depsno = depsno;
  };

  UWR_ACT.checkAndSetexternallifeassured = function () {
    var depsno = QNIAPP.IN.Qt.qtdtls.depsno;
    var adult = 0;
    var child = 0;
    QNIAPP.ERR = [];
    for (var x = 0; x < QNIAPP.extlifeassured.length; x++) {
      var extla_elem = QNIAPP.extlifeassured[x];
      if (extla_elem.deleteflg == 'Y') {
        depsno = depsno - 1;
      }
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.externallifeassured.length; i++) {
        if (extla_elem.partyid == QNIAPP.IN.Qt.qtdtls.externallifeassured[i].partyid) {
          QNIAPP.IN.Qt.qtdtls.externallifeassured[i].deleteflg = extla_elem.deleteflg;
          break;
        }
      }
    }
    QNIAPP.IN.Qt.qtdtls.depsno = depsno;

    if (QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.FLOAT1 || QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.FLOAT2 || QNIAPP.IN.Qt.qtdtls.externaloption == QNIAPP.CONSTS.FLOAT || QNIAPP.IN.Qt.qtdtls.externaloption == "Family") {
      for (var k = 0; k < QNIAPP.IN.Qt.qtdtls.externallifeassured.length; k++) {
        if (QNIAPP.IN.Qt.qtdtls.externallifeassured[k].deleteflg == "N") {
          if (QNIAPP.IN.Qt.qtdtls.externallifeassured[k].laType == "A") {
            adult = adult + 1;
          }
          else if (QNIAPP.IN.Qt.qtdtls.externallifeassured[k].laType == "C") {
            child = child + 1;
          }
        }
      }
    }
    if (adult > 0) {
      QNIAPP.IN.Qt.noOflifeAssures = adult + 'A';
    }
    if (child > 0) {
      QNIAPP.IN.Qt.noOflifeAssures = adult + 'A' + '_' + child + 'C';
    }
    QNIAPP.IN.Qt.qtdtls.noOflifeAssures = QNIAPP.IN.Qt.noOflifeAssures;
  };

  UWR_ACT.checkAndSetRidersForC2P3D = function () {
    for (var i = 0; i < QNIAPP.lifeassured[0].rider.length; i++) {
      for (var k = 0; k < QNIAPP.IN.Qt.qtdtls.rider.length; k++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[k].name == "EP") {
          QNIAPP.IN.Qt.qtdtls.epSumAssured = QNIAPP.IN.Qt.qtdtls.rider[k].sumAssured;

        }
        if (QNIAPP.lifeassured[0].rider[i].name == QNIAPP.IN.Qt.qtdtls.rider[k].name_cd) {
          QNIAPP.IN.Qt.qtdtls.rider[k].deleteflg = QNIAPP.lifeassured[0].rider[i].deleteflg;
          if (QNIAPP.lifeassured[0].rider[i].emr && QNIAPP.lifeassured[0].rider[i].emr != "") {
            QNIAPP.IN.Qt.qtdtls.rider[k].emr = QNIAPP.lifeassured[0].rider[i].emr;
          }
          if (QNIAPP.lifeassured[0].rider[i].pma && QNIAPP.lifeassured[0].rider[i].pma != "") {
            QNIAPP.IN.Qt.qtdtls.rider[k].pma = QNIAPP.lifeassured[0].rider[i].pma;
          }
          UWR_ACT.checkandSetAlteredInputs_EL(QNIAPP.lifeassured[0].rider[i], QNIAPP.IN.Qt.qtdtls.rider[k]);
          break;
        }
      }
    }

  };

  UWR_ACT.resetOutxexcessbkdtpremium = function () {

    if (QNIAPP.IN.Qt.qtdtls.backdtpremium) {
      prod_id = QNIAPP.IN.id;
      QNIAPP.OUT.premium = QNIAPP.IN.Qt.qtdtls.premium;
      QNIAPP.OUT.appTax = QNIAPP.IN.Qt.tottax;
      QNIAPP.OUT.firstPremium = QNIAPP.IN.Qt.qtdtls.backdtpremium ? (parseInt(QNIAPP.OUT.premium) + parseInt(QNIAPP.IN.Qt.qtdtls.backdtpremium)) : 0;
      var pol_fee = 0;
      var firstPremium = parseInt(QNIAPP.OUT.premium) + parseInt(QNIAPP.IN.Qt.qtdtls.backdtpremium);
      var ST_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((firstPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'st_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'st_rt')) : 0;
      var EC_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((firstPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) : 0;
      var GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? ((firstPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) : 0;
      var KTAX = ((QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0")) ? ((firstPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) : 0;
      QNIAPP.OUT.txBkDt = Math.round(ST_RT + EC_RT + GST_RT + KTAX);
      QNIAPP.OUT.firstPremium = Math.round(firstPremium + QNIAPP.OUT.txBkDt);
      QNIAPP.IN.Qt.qtdtls.ST_RT = (ST_RT) ? Math.round(ST_RT) : 0;
      QNIAPP.IN.Qt.qtdtls.EC_RT = (EC_RT) ? Math.round(EC_RT) : 0;
      QNIAPP.IN.Qt.qtdtls.KTAX = (KTAX) ? Math.round(KTAX) : 0;
      QNIAPP.IN.Qt.tottax = QNIAPP.OUT.txBkDt;
      QNIAPP.IN.Qt.qtdtls.tottax = QNIAPP.IN.Qt.tottax;
      QNIAPP.IN.Qt.totpremium = QNIAPP.OUT.firstPremium;
      QNIAPP.OUT.totPremium = QNIAPP.IN.Qt.totpremium;
      QNIAPP.OUT.appTax = QNIAPP.IN.Qt.tottax;
      QNIAPP.IN.Qt.backdtpremium = QNIAPP.IN.Qt.qtdtls.backdtpremium;
      QNIAPP.IN.Qt.backdttax = QNIAPP.IN.Qt.qtdtls.backdttax;
    }


  };

  UWR_ACT.resetOutxexcessriderbkdtpremium = function (rider_index) {
    if (QNIAPP.IN.Qt.qtdtls.rider[0].riderBkdtPremium) {
      QNIAPP.OUT.prodname = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'name');
      prod_id = QNIAPP.IN.id;
      var pol_fee = 0;

      var firstriderPremium = 0;
      QNIAPP.OUT.appTaxRider = parseInt(QNIAPP.OUT.txBkDt) - parseInt(QNIAPP.IN.Qt.qtdtls.backdttax);//QNIAPP.OUT.appTax

      for (var i = 0; i <= rider_index; i++) {
        if (QNIAPP.IN.Qt.qtdtls['rider'][i] != '') {
          firstriderPremium = firstriderPremium + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium) + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].riderBkdtPremium);
          QNIAPP.IN.Qt.backdtpremium = parseInt(QNIAPP.IN.Qt.backdtpremium) + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].riderBkdtPremium);
          QNIAPP.OUT.appTaxRider = parseInt(QNIAPP.OUT.appTaxRider) + parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].tax);
        }
      }
      QNIAPP.OUT.totamtnt = parseInt(QNIAPP.OUT.premiumwithRider) + parseInt(QNIAPP.OUT.appTaxRider);
      //to calculate totpremium when backdate is choosen
      var ST_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((firstriderPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'st_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'st_rt')) : 0;
      var EC_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((firstriderPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'ec_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'ec_rt')) : 0;
      var GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? ((firstriderPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'gst_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'gst_rt')) : 0;
      var KTAX = ((QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0")) ? ((firstriderPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'ktax')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'ktax')) : 0;
      QNIAPP.OUT.ridertxBkDt = Math.round(ST_RT + EC_RT + GST_RT + KTAX);
      QNIAPP.OUT.firstriderPremium = Math.round(firstriderPremium + QNIAPP.OUT.ridertxBkDt);
      QNIAPP.IN.Qt.totpremium = QNIAPP.OUT.firstPremium + QNIAPP.OUT.firstriderPremium;
      QNIAPP.IN.Qt.totPremium = QNIAPP.IN.Qt.totpremium;
      QNIAPP.OUT.totPremium = QNIAPP.IN.Qt.totpremium;
      QNIAPP.IN.Qt.qtdtls.totpremium = QNIAPP.IN.Qt.totpremium;
      QNIAPP.IN.Qt.qtdtls.totPremium = QNIAPP.IN.Qt.totpremium;
      QNIAPP.IN.Qt.tottax = QNIAPP.OUT.txBkDt + QNIAPP.OUT.ridertxBkDt;

      QNIAPP.OUT.ridertax = QNIAPP.OUT.ridertxBkDt;
      //To calculate tax for each rider in backdate
      var riderPremium = parseInt(QNIAPP.OUT.rider[rider_index].premium) + parseInt(QNIAPP.IN.Qt.qtdtls.rider[rider_index].riderBkdtPremium);
      var ST_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((riderPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'st_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'st_rt')) : 0;
      var EC_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? ((riderPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'ec_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'ec_rt')) : 0;
      var GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? ((riderPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'gst_rt')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'gst_rt')) : 0;
      var KTAX = ((QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0")) ? ((riderPremium - pol_fee) * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'ktax')) + (pol_fee * QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.rider[rider_index].name, 'ktax')) : 0;
      QNIAPP.IN.Qt.qtdtls.rider[rider_index].st_rt = (ST_RT) ? Math.round(ST_RT) : 0;
      QNIAPP.IN.Qt.qtdtls.rider[rider_index].ec_rt = (EC_RT) ? Math.round(EC_RT) : 0;
      QNIAPP.IN.Qt.qtdtls.rider[rider_index].ktax = (KTAX) ? Math.round(KTAX) : 0;
      QNIAPP.IN.Qt.qtdtls.rider[rider_index].tax = Math.round(ST_RT + EC_RT + GST_RT + KTAX);

    }

  };

  UWR_ACT.resetOutxexcesspremium = function (ctg) {
    QNIAPP.OUT['rider'] = QNIAPP.IN.Qt.qtdtls['rider'];
    QNIAPP.OUT.premium = QNIAPP.IN.Qt.qtdtls.premium;
    QNIAPP.OUT.appTax = QNIAPP.IN.Qt.tottax;
    QNIAPP.OUT.firstPremium = QNIAPP.IN.Qt.qtdtls.backdtpremium ? (parseInt(QNIAPP.OUT.premium) + parseInt(QNIAPP.IN.Qt.qtdtls.backdtpremium) + parseInt(QNIAPP.OUT.txBkDt)) : 0;
    QNIAPP.OUT.ST_RT = QNIAPP.IN.Qt.qtdtls.ST_RT;
    QNIAPP.OUT.EC_RT = QNIAPP.IN.Qt.qtdtls.EC_RT;
    QNIAPP.OUT.KTAX = QNIAPP.IN.Qt.qtdtls.KTAX;
    QNIAPP.OUT.totPremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.OUT.sumAssured = parseInt(QNIAPP.OUT.sumAssured);
    QNIAPP.OUT.nxtYrTax = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == "1" && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.id, 'ktx_2yr_rt'))) : Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.id, 'tx_2yr_rt')));
    QNIAPP.OUT.prodname = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'name');
    if (QNIAPP.IN.Qt.qtdtls.backdttax && QNIAPP.IN.Qt.qtdtls.backdttax != 0) {
      QNIAPP.OUT.appTax = (parseInt(QNIAPP.OUT.appTax) - parseInt(QNIAPP.IN.Qt.qtdtls.backdttax));
      QNIAPP.OUT.totPremium = (parseInt(QNIAPP.OUT.totPremium) - parseInt(QNIAPP.IN.Qt.qtdtls.backdttax));
    }
    QNIAPP.COMM_CALC.calculateRiderPremiumandTax();
    QNIAPP.COMM_CALC.calcTotalPremium();
    arr = [];
    QNIAPP.OUT.PD = [];
    if (QNIAPP.IN.id == 'SANPAR' || QNIAPP.IN.id == 'SANPARE') {
      QNIAPP.OUT.PD.length = 0;
      arr.push("Instalment Premium without GST");
      arr.push(QNIAPP.OUT.premium);
      arr.push(0);
      arr.push(QNIAPP.OUT.premium);
      QNIAPP.OUT.PD.push(arr);
      arr = [];
      arr.push("Instalment Premium with First Year GST");
      arr.push(QNIAPP.OUT.premium + QNIAPP.OUT.appTax);
      arr.push(0);
      arr.push(QNIAPP.OUT.premium + QNIAPP.OUT.appTax);
      QNIAPP.OUT.PD.push(arr);
      arr = [];
      arr.push("Instalment Premium with GST 2nd Year Onwards");
      arr.push(QNIAPP.OUT.premium + QNIAPP.OUT.nxtYrTax);
      arr.push(0);
      arr.push(QNIAPP.OUT.premium + QNIAPP.OUT.nxtYrTax);
      QNIAPP.OUT.PD.push(arr);
      arr = [];
      QNIAPP.OUT.BD[6] = QNIAPP.OUT.premium;
    }
    else if (QNIAPP.IN.id == 'SUPH' || QNIAPP.IN.id == 'SUPHE') {
      if (QNIAPP.IN.Qt.qtdtls.plan == 'Fixed Maturity') {
        FREQ_PD_MAP = { 'Monthly': { "f": 12, "pd": 1, "pyout": 0.96 }, 'Half Yearly': { "f": 2, "pd": 6, "pyout": 0.98 }, 'Quarterly': { "f": 4, "pd": 3, "pyout": 0.97 }, 'Annual': { "f": 1, "pd": 12, "pyout": 1 }, 'Single': { "f": 1, "pd": 1, "pyout": 1 } };
        var totdb_val = 0, totdb_val1 = 0, totdb_val2 = 0, totdb_yarr = [], totdb_yarr1 = [], totdb_yarr2 = [];
        EMP_DISC = (QNIAPP.IN['spl'] === '-') ? QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, "emp_dis_rt") : QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['spl'], "emp_dis_rt");
        for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.term; i++) {
          var annual_premium = parseFloat(((QNIAPP.OUT.premium - QNIAPP.IN.Qt.excesspremium) / PREM_CONV_FC).toFixed(2));
          var death_sa = (QNIAPP.IN.Qt.qtdtls.pptOption == "Single") ? (1.25 * (annual_premium)) : (7 * (annual_premium));
          var modal_premium = (QNIAPP.OUT.premium - QNIAPP.IN.Qt.excesspremium) * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
          var prem_acc = ((i + 1) > QNIAPP.IN.Qt.qtdtls.ppt) ? 1.05 * (modal_premium) * QNIAPP.IN.Qt.qtdtls.ppt : 1.05 * (modal_premium) * (i + 1);
          var modal_premium1 = (QNIAPP.OUT.premium) * FREQ_PD_MAP[QNIAPP.IN.Qt.qtdtls.freq].f;
          var dbm_rt_sl = QNIAPP.SUPH_DBMRATE.get(Math.floor(QNIAPP.IN.Qt.qtdtls.age));
          if (QNIAPP.IN.Qt.qtdtls.jlflag && QNIAPP.IN.Qt.qtdtls.jlflag == "Y") {
            dbm_rt_jl = QNIAPP.SUPH_DBMRATE.get(Math.floor(QNIAPP.IN.Qt.qtdtls.jlage));
          }
          var prem1 = (QNIAPP.IN.Qt.qtdtls.pptOption == "Single") ? (dbm_rt_sl * modal_premium1) : (10 * modal_premium1);
          var gsv_prem_val = Math.round(QNIAPP.OUT.lout['gsb'][i]);
          var ssv_prem_val = Math.round(QNIAPP.OUT.lout['ngsb'][i]);
          var gsvssv = Math.max(gsv_prem_val, ssv_prem_val);
          if (QNIAPP.IN.Qt.qtdtls.jlflag && QNIAPP.IN.Qt.qtdtls.jlflag != "Y") {
            totdb_val = Math.round((Math.max(death_sa, prem1, prem_acc, gsvssv))) * EMP_DISC;
          } else {
            totdb_val = Math.round((Math.max(death_sa, prem_acc))) * EMP_DISC;
          }
          if (QNIAPP.IN.Qt.qtdtls.jlflag && QNIAPP.IN.Qt.qtdtls.jlflag == "Y") {
            var prem2 = (QNIAPP.IN.Qt.qtdtls.pptOption == "Single") ? (dbm_rt_jl * modal_premium1) : (10 * modal_premium1);
            totdb_val1 = Math.round((Math.max(death_sa, prem1, prem_acc, gsvssv))) * EMP_DISC;
            totdb_val2 = Math.round((Math.max(death_sa, prem2, prem_acc, gsvssv))) * EMP_DISC;
          }
          totdb_yarr.push(totdb_val);
          totdb_yarr1.push(totdb_val1);
          totdb_yarr2.push(totdb_val2);
        }
        QNIAPP.OUT.lout['totdb'] = totdb_yarr;
        QNIAPP.OUT.lout['totdb1'] = totdb_yarr1;
        QNIAPP.OUT.lout['totdb2'] = totdb_yarr2;
        QNIAPP.OUT.BT = [];
        var arr = [];
        var annual_premium = parseFloat(((QNIAPP.OUT.premium - QNIAPP.IN.Qt.excesspremium) / PREM_CONV_FC).toFixed(0));
        for (var cnt = 0; cnt < parseInt(QNIAPP.IN.Qt.qtdtls.term); cnt++) {
          arr.push(cnt + 1);
          if (cnt < parseInt(QNIAPP.IN.Qt.qtdtls.ppt)) {
            arr.push((annual_premium));
          } else {
            arr.push(0);
          }
          arr.push(0); //Survival Benefits
          arr.push(0); //Other Benefits
          if (cnt < parseInt(QNIAPP.IN.Qt.qtdtls.term) - 1) {
            arr.push(0);
          } else {
            arr.push(Math.round(QNIAPP.OUT.lout['ngmat']));
          }
          arr.push(Math.round(QNIAPP.OUT.lout['totdb'][cnt]));
          if (QNIAPP.IN.Qt.qtdtls.pptOption == "Single") {
            if (QNIAPP.IN.Qt.qtdtls.jlflag && QNIAPP.IN.Qt.qtdtls.jlflag == "Y") {
              arr.push(Math.round(QNIAPP.OUT.lout['totdb1'][cnt])); //LA1Death1 for JL
              arr.push(Math.round(QNIAPP.OUT.lout['totdb2'][cnt])); //LA2Death2 for JL
            }
            else {
              arr.push('NA');
              arr.push('NA');
            }
          }
          if ((cnt == 0 && QNIAPP.IN.Qt.qtdtls.pptOption != "Single") || (cnt == parseInt(QNIAPP.IN.Qt.qtdtls.term) - 1)) {
            arr.push(0);
          } else {
            arr.push(Math.round(QNIAPP.OUT.lout['gsb'][cnt]));
          } if ((cnt == 0 && QNIAPP.IN.Qt.qtdtls.pptOption != "Single") || (cnt == parseInt(QNIAPP.IN.Qt.qtdtls.term) - 1)) {
            arr.push(0);
          } else if (cnt < 3 && QNIAPP.IN.Qt.qtdtls.pptOption != "Single") {
            arr.push(Math.round(QNIAPP.OUT.lout['gsb'][cnt]));
          } else {
            arr.push(Math.round(QNIAPP.OUT.lout['ngsb'][cnt]));
          }
          QNIAPP.OUT.BT[cnt] = arr;
          arr = [];
        }
      }

      QNIAPP.OUT.POD['deathSA'] = Math.round(QNIAPP.OUT.lout['totdb'][0]);
      QNIAPP.OUT.POD['deathSA1'] = (QNIAPP.IN.Qt.qtdtls.jlflag && QNIAPP.IN.Qt.qtdtls.jlflag == "Y") ? Math.round(QNIAPP.OUT.lout['totdb1'][0]) : "NA";
      QNIAPP.OUT.POD['deathSA2'] = (QNIAPP.IN.Qt.qtdtls.jlflag && QNIAPP.IN.Qt.qtdtls.jlflag == "Y") ? Math.round(QNIAPP.OUT.lout['totdb2'][0]) : "NA";

    }
    else {
      arr.push((ctg == "T") ? (QNIAPP.IN.id == 'SANCHP' || QNIAPP.IN.id == 'SANCHPE') ? QNIAPP.IN.Qt.qtdtls.plan : QNIAPP.CONSTS.MB : QNIAPP.OUT['prodname']);
      ((QNIAPP.IN.id == 'SANCHP' || QNIAPP.IN.id == 'SANCHPE') && QNIAPP.IN.Qt.qtdtls.plan == "Guaranteed Maturity") ? arr.push(QNIAPP.OUT.SA_MAT) : arr.push(QNIAPP.OUT.sumAssured);
      if (QNIAPP.IN.id == 'SIPPAR' || QNIAPP.IN.id == 'SIPPARE' || QNIAPP.IN.id == 'SIPPARV9' || QNIAPP.IN.id == 'SIPPARV9E') {
        arr.push(QNIAPP.IN.Qt.qtdtls.ppt);
        arr.push(QNIAPP.IN.Qt.qtdtls.term);
        arr.push(QNIAPP.IN.Qt.qtdtls.pyout);
      } else {
        arr.push(QNIAPP.IN.Qt.qtdtls.term);
        arr.push(QNIAPP.IN.Qt.qtdtls.ppt);
      }
      if ((QNIAPP.IN.id == 'SANCHP' || QNIAPP.IN.id == 'SANCHPE') && QNIAPP.IN.Qt.qtdtls.plan != "Guaranteed Maturity") {
        arr.push(QNIAPP.OUT.py_term);
        arr.push(QNIAPP.OUT.gur_py_amt);
        arr.push(QNIAPP.IN.Qt.qtdtls.pyfrequency);
      }
      arr.push(QNIAPP.OUT.premium);
      if (QNIAPP.OUT.appTax !== 0) {
        arr.push(Math.round(QNIAPP.OUT.appTax));
        arr.push(Math.round(QNIAPP.OUT.totPremium));

      }
      QNIAPP.OUT.PD.push(arr);
      arr = [];
    }

    //for V09 BI Changes
    QNIAPP.OUT.POD['totalpremium'] = QNIAPP.OUT.totPremium;
    QNIAPP.OUT.POD['instapremium'] = QNIAPP.OUT.premium;
    var prem_const_arr = [], base_prem_arr = [], tot_inst_prem = [];
    var prod_id = QNIAPP.IN.id;
    var nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktx_2yr_rt'))) : Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'tx_2yr_rt')));
    if (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE") {
      nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premium * (QNIAPP.P1C2PL_GST_RT.get()['renewalgst_rt'] + QNIAPP.P1C2PL_KTAX.get()['ktax2yr'])) : Math.round(QNIAPP.OUT.premium * (QNIAPP.P1C2PL_GST_RT.get()['renewalgst_rt']));
    }
    if (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE") {
      nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premwodisc * (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt'] + QNIAPP.P1C2PS_KTAX.get()['ktax2yr'])) : Math.round(QNIAPP.OUT.premwodisc * (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt']));
      var prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
      var prod_id = QNIAPP.IN.id;
      //var nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1')? Math.round(Math.round(QNIAPP.OUT.premium)* (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt']  + QNIAPP.P1C2PS_KTAX.get()['ktax2yr'])) : Math.round(Math.round(QNIAPP.OUT.premium)* (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt']));
      var base_prem_arr = [];
      //var frstyr=Math.round(QNIAPP.OUT.premium * QNIAPP.P1C2PS_GST_RT.get()['firstyeargst_rt']);
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium));
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(QNIAPP.OUT.appTax));
      base_prem_arr.push(Math.round(QNIAPP.OUT.premwodisc));
      base_prem_arr.push((Math.round(QNIAPP.OUT.premwodisc)) + parseInt(nxtyrtaxbase));
    }
    if (QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE") {
      nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premwodisc * (QNIAPP.P2C2PEL_GST_RT.get()['renewalgst_rt'] + QNIAPP.P2C2PEL_KTAX.get()['ktax2yr'])) : Math.round(QNIAPP.OUT.premwodisc * (QNIAPP.P2C2PEL_GST_RT.get()['renewalgst_rt']));
      var prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
      var prod_id = QNIAPP.IN.id;
      //var nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1')? Math.round(Math.round(QNIAPP.OUT.premium)* (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt']  + QNIAPP.P1C2PS_KTAX.get()['ktax2yr'])) : Math.round(Math.round(QNIAPP.OUT.premium)* (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt']));
      var base_prem_arr = [];
      //var frstyr=Math.round(QNIAPP.OUT.premium * QNIAPP.P1C2PS_GST_RT.get()['firstyeargst_rt']);
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium));
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(QNIAPP.OUT.appTax));
      base_prem_arr.push(Math.round(QNIAPP.OUT.premwodisc));
      base_prem_arr.push((Math.round(QNIAPP.OUT.premwodisc)) + parseInt(nxtyrtaxbase));
    }
    if (QNIAPP.IN.id == "EGII" || QNIAPP.IN.id == "EGIIE") {
      var secondYrPrem = parseFloat(QNIAPP.IN.Qt.qtdtls.nonDiscpremium) + parseInt((QNIAPP.IN.Qt.excessPremium && QNIAPP.IN.Qt.excessPremium[0]) ? QNIAPP.IN.Qt.excessPremium[0] : 0) + ((QNIAPP.IN.Qt.excessPremium && QNIAPP.IN.Qt.excessPremium[1]) ? parseInt(QNIAPP.IN.Qt.excessPremium[1]) : 0);
      QNIAPP.OUT.POD['instapremium'] = secondYrPrem;
      var prod_id = QNIAPP.IN.id;
      nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(parseFloat(secondYrPrem) * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktx_2yr_rt'))) : Math.round(parseFloat(secondYrPrem) * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'tx_2yr_rt')));
      var prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
      //var nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1')? Math.round(Math.round(QNIAPP.OUT.premium)* (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt']  + QNIAPP.P1C2PS_KTAX.get()['ktax2yr'])) : Math.round(Math.round(QNIAPP.OUT.premium)* (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt']));
      var base_prem_arr = [];
      //var frstyr=Math.round(QNIAPP.OUT.premium * QNIAPP.P1C2PS_GST_RT.get()['firstyeargst_rt']);
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium));
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(QNIAPP.OUT.appTax));
      base_prem_arr.push(secondYrPrem);
      base_prem_arr.push(parseFloat(secondYrPrem) + parseInt(nxtyrtaxbase));
    }
    if (QNIAPP.IN.id == "SARJB") {
      nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'gst_rt') + QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ktax'))) : Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'gst_rt')));
    }
    if (QNIAPP.IN.id == "SUPH") {
      nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premium * (QNIAPP.SUPH_GST_RT.get()['renewalgst_rt'] + QNIAPP.SUPH_KTAX.get()['ktax2yr'])) : Math.round(QNIAPP.OUT.premium * (QNIAPP.SUPH_GST_RT.get()['renewalgst_rt']));
      if (QNIAPP.IN.Qt.qtdtls.pptOption != "Single") {
        prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
      } else {
        prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX + '*', QNIAPP.CONSTS.PREMWITH2YRTAX];
      }
      var base_prem_arr = [];
      base_prem_arr.push(QNIAPP.OUT.premium);
      base_prem_arr.push(QNIAPP.OUT.premium + QNIAPP.OUT.appTax);
      (QNIAPP.IN.Qt.qtdtls.pptOption != "Single") ? base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(nxtyrtaxbase)) : base_prem_arr.push(0);
    }
    if (QNIAPP.IN.id != "SUPH" && QNIAPP.IN.id != "P1C2PS" && QNIAPP.IN.id != "P1C2PSE" && QNIAPP.IN.id != "P2C2PEL" && QNIAPP.IN.id != "P2C2PELE" && QNIAPP.IN.id != "EGII" && QNIAPP.IN.id != "EGIIE") {
      prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
      var base_prem_arr = [];
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium));
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(QNIAPP.OUT.appTax));
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(nxtyrtaxbase));
    }
    var ps_arr = [];
    var ps_ci_arr = [];
    var ps_ib_arr = [];
    var ps_pac_arr = [];
    var ps_adc_arr = [];
    var ps_cc_arr = [];
    var ps_ci4_arr = [];
    var ps_ci25_arr = [];
    var ps_tr_arr = [];
    var ps_adddb_arr = [];
    QNIAPP.OUT.PS = [];
    if (QNIAPP.OUT.rider && QNIAPP.OUT.rider.length > 0) {
      if (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE" || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE" || QNIAPP.IN.id == "EGII" || QNIAPP.IN.id == "EGIIE") {
        for (var j = 0; j < QNIAPP.IN.Qt.qtdtls.rider.length; j++) {
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['deleteflg'] == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'C4CI') {
            ps_ci_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_ci_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_ci_arr.push(QNIAPP.OUT.c4ciPremWotDisc);
            ps_ci_arr.push(QNIAPP.OUT.c4ciPremWotDisc + QNIAPP.OUT.c4ciTaxWotDisc);
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['deleteflg'] == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'INAD') {
            ps_ib_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_ib_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_ib_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_ib_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['deleteflg'] == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'PPR_PAC') {
            ps_pac_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_pac_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_pac_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_pac_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }

          if (QNIAPP.IN.Qt.qtdtls.rider[j]['deleteflg'] == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'PPR_ADC') {
            ps_adc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_adc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_adc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_adc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['deleteflg'] == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'PPR_CC') {
            ps_cc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_cc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_cc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_cc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
        }
      }
      else {
        for (var j = 0; j < QNIAPP.OUT.rider.length; j++) {
          if (QNIAPP.OUT.rider[j]['name'] == 'C4CI') {
            ps_ci_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
            ps_ci_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
            ps_ci_arr.push((QNIAPP.IN.id == "SUPH" && QNIAPP.IN.Qt.qtdtls.pptOption == "Single") ? 0 : parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          }
          if (QNIAPP.OUT.rider[j]['name'] == 'INAD') {
            ps_ib_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
            ps_ib_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
            ps_ib_arr.push((QNIAPP.IN.id == "SUPH" && QNIAPP.IN.Qt.qtdtls.pptOption == "Single") || (QNIAPP.IN.id == "SARJB" && QNIAPP.OUT.rider[j]['ppt'] == '1') ? 0 : parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          }
          if (QNIAPP.OUT.rider[j].deleteflg == "N" && QNIAPP.OUT.rider[j]['name'] == 'PPR_PAC') {
            ps_pac_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
            ps_pac_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
            ps_pac_arr.push((QNIAPP.IN.id == "SUPH" && QNIAPP.IN.Qt.qtdtls.pptOption == "Single") ? 0 : parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          }
          if (QNIAPP.OUT.rider[j].deleteflg == "N" && QNIAPP.OUT.rider[j]['name'] == 'PPR_ADC') {
            ps_adc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
            ps_adc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
            ps_adc_arr.push((QNIAPP.IN.id == "SUPH" && QNIAPP.IN.Qt.qtdtls.pptOption == "Single") ? 0 : parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          }
          if (QNIAPP.OUT.rider[j].deleteflg == "N" && QNIAPP.OUT.rider[j]['name'] == 'PPR_CC') {
            ps_cc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
            ps_cc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
            ps_cc_arr.push((QNIAPP.IN.id == "SUPH" && QNIAPP.IN.Qt.qtdtls.pptOption == "Single") ? 0 : parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ECI4') {
            ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ECI25') {
            ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ETR') {
            ps_tr_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_tr_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_tr_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ADDDB') {
            ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
        }
      }
    }
    var count = ((QNIAPP.IN.id == "SARJB" || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE" || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE") && QNIAPP.IN.Qt.qtdtls.ppt == '1') ? 2 : ((QNIAPP.IN.id != "P1C2PS" && QNIAPP.IN.id != "P1C2PSE" && QNIAPP.IN.id != "P2C2PEL" && QNIAPP.IN.id != "P2C2PELE" && QNIAPP.IN.id != "EGII" && QNIAPP.IN.id != "EGIIE") ? 3 : 4);
    for (var i = 0; i < count; i++) {
      ps_arr.push(prem_const_arr[i]);
      ps_arr.push(base_prem_arr[i]);
      if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'C4CI') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'INAD')) {
        if (QNIAPP.IN.id == "SANCHP" || QNIAPP.IN.id == "SANPAR" || QNIAPP.IN.id == "SANCHV9" || QNIAPP.IN.id == "SIPPARV9" || QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == 'SUPH' || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == 'P1C2PSE' || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == 'P2C2PELE' || QNIAPP.IN.id == "EGII" || QNIAPP.IN.id == 'EGIIE' || QNIAPP.IN.id == "ESRB" || QNIAPP.IN.id == 'ESRBE' || QNIAPP.IN.id == 'ESJ' || QNIAPP.IN.id == 'ESJE' || QNIAPP.IN.id == "EGWP" || QNIAPP.IN.id == 'EGWPE' || QNIAPP.IN.id == 'EIAP' || QNIAPP.IN.id == 'EIAPE' || QNIAPP.IN.id == 'ESIP' || QNIAPP.IN.id == 'ESIPE' || QNIAPP.IN.id == 'EAGP' || QNIAPP.IN.id == 'EAGPE') {
          ps_ci_arr.length > 0 ? ps_arr.push(ps_ci_arr[i]) : ps_arr.push(0);
          ps_ib_arr.length > 0 ? ps_arr.push(ps_ib_arr[i]) : ps_arr.push(0);
          ps_pac_arr.length > 0 ? ps_arr.push(ps_pac_arr[i]) : ps_arr.push(0);
          ps_adc_arr.length > 0 ? ps_arr.push(ps_adc_arr[i]) : ps_arr.push(0);
          ps_cc_arr.length > 0 ? ps_arr.push(ps_cc_arr[i]) : ps_arr.push(0);
          ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3] + ps_arr[4] + ps_arr[5] + ps_arr[6]);
        }
        else if (QNIAPP.IN.id == "SARJB") {
          ps_ib_arr.length > 0 ? ps_arr.push(ps_ib_arr[i]) : ps_arr.push(0);
          ps_pac_arr.length > 0 ? ps_arr.push(ps_pac_arr[i]) : ps_arr.push(0);
          ps_adc_arr.length > 0 ? ps_arr.push(ps_adc_arr[i]) : ps_arr.push(0);
          ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3] + ps_arr[4]);
        }
        else {
          ps_ci_arr.length > 0 ? ps_arr.push(ps_ci_arr[i]) : ps_arr.push(0);
          ps_ib_arr.length > 0 ? ps_arr.push(ps_ib_arr[i]) : ps_arr.push(0);
          ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3]);
        }
      }
      else if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'ECI4') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'ECI25') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'ETR') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'ADDDB')) {
        if (QNIAPP.IN.id == "EGWP" || QNIAPP.IN.id == "EGWPE" || QNIAPP.IN.id == "EAGP" || QNIAPP.IN.id == "EAGPE") {
          ps_ci4_arr.length > 0 ? ps_arr.push(ps_ci4_arr[i]) : ps_arr.push(0);
          ps_ci25_arr.length > 0 ? ps_arr.push(ps_ci25_arr[i]) : ps_arr.push(0);
          ps_tr_arr.length > 0 ? ps_arr.push(ps_tr_arr[i]) : ps_arr.push(0);
          ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3] + ps_arr[4]);
        }
        else {
          ps_ci4_arr.length > 0 ? ps_arr.push(ps_ci4_arr[i]) : ps_arr.push(0);
          ps_ci25_arr.length > 0 ? ps_arr.push(ps_ci25_arr[i]) : ps_arr.push(0);
          ps_tr_arr.length > 0 ? ps_arr.push(ps_tr_arr[i]) : ps_arr.push(0);
          ps_adddb_arr.length > 0 ? ps_arr.push(ps_adddb_arr[i]) : ps_arr.push(0);
          ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3] + ps_arr[4] + ps_arr[5]);
        }
      }
      /*else if(QNIAPP.IN.id == 'EAGP' || QNIAPP.IN.id == 'EAGPE'){
        ps_arr.push(ps_arr[1]);
      }*/

      /*else if(QNIAPP.IN.id == 'EGII' || QNIAPP.IN.id == 'EGIIE'){
       ps_ci4_arr.length>0?ps_arr.push(ps_ci4_arr[i]):ps_arr.push(0);
       ps_ci25_arr.length>0?ps_arr.push(ps_ci25_arr[i]):ps_arr.push(0);
       ps_tr_arr.length>0?ps_arr.push(ps_tr_arr[i]):ps_arr.push(0);
       ps_adddb_arr.length>0?ps_arr.push(ps_adddb_arr[i]):ps_arr.push(0);
       ps_ci_arr.length>0?ps_arr.push(ps_ci_arr[i]):ps_arr.push(0);
       ps_ib_arr.length>0?ps_arr.push(ps_ib_arr[i]):ps_arr.push(0);
       ps_pac_arr.length>0?ps_arr.push(ps_pac_arr[i]):ps_arr.push(0);
       ps_adc_arr.length>0?ps_arr.push(ps_adc_arr[i]):ps_arr.push(0);
       ps_cc_arr.length>0?ps_arr.push(ps_cc_arr[i]):ps_arr.push(0);
       ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3]+ ps_arr[4]+ps_arr[5]+ps_arr[6]+ps_arr[7]+ps_arr[8]+ps_arr[9]+ps_arr[10]);
        ps_arr.push(ps_arr[1]);
      }*/
      /*else if(QNIAPP.IN.id == 'EIAP' || QNIAPP.IN.id == 'EIAPE' || QNIAPP.IN.id == 'ESIP' || QNIAPP.IN.id == 'ESIPE' || QNIAPP.IN.id == 'EAGP' || QNIAPP.IN.id == 'EAGPE' || QNIAPP.IN.id == "EGWP"||QNIAPP.IN.id == "EGWPE"){
        ps_arr.push(ps_arr[1]);
      }*/
      else {
        ps_arr.push(0);
        ps_arr.push(ps_arr[1] + ps_arr[2]);
      }
      QNIAPP.OUT.PS[i] = ps_arr;
      ps_arr = [];

    }
    if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
      var este_out = {};
      QNIAPP.OUT.extSA = (QNIAPP.OUT.extSA) ? QNIAPP.OUT.extSA : 0;
      QNIAPP.OUT.extPremium = (QNIAPP.OUT.extPremium) ? QNIAPP.OUT.extPremium : 0;

      QNIAPP.OUT.POD['extraProtSA'] = QNIAPP.OUT.extSA;

      QNIAPP.OUT.POD['extraProPrem'] = QNIAPP.OUT.extPremium;
      QNIAPP.OUT.POD['instapremium'] = addCommas(QNIAPP.OUT.premium + QNIAPP.OUT.extPremium);


      //premium summary
      //var prem_const_arr=[],base_prem_arr=[];
      prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
      base_prem_arr = [];
      var POL_FEE = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'policy_fee');
      var prod_id = QNIAPP.IN.id;
      var st_rate = QNIAPP.PRODUCT_DETAILS.get(prod_id, 'st_rt');
      var ST_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round(((QNIAPP.OUT.premium + QNIAPP.OUT.extPremium - POL_FEE)) * st_rate) + Math.round(POL_FEE * st_rate) : 0;
      var EC_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round(((QNIAPP.OUT.premium + QNIAPP.OUT.extPremium - POL_FEE)) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) + Math.round(POL_FEE * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) : 0;
      var GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? Math.round(((QNIAPP.OUT.premium + QNIAPP.OUT.extPremium - POL_FEE)) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) + Math.round(POL_FEE * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) : 0;
      var KTAX = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((QNIAPP.OUT.premium - POL_FEE) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) + Math.round(POL_FEE * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) : 0;
      var appTax = ST_RT + EC_RT + GST_RT + KTAX;
      var nxtyrtaxbase = Math.round((QNIAPP.OUT.premium + QNIAPP.OUT.extPremium) * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'tx_2yr_rt')));
      base_prem_arr.push(QNIAPP.OUT.premium + QNIAPP.OUT.extPremium);
      base_prem_arr.push(QNIAPP.OUT.premium + QNIAPP.OUT.extPremium + appTax);
      base_prem_arr.push(QNIAPP.OUT.premium + QNIAPP.OUT.extPremium + nxtyrtaxbase);
      este_out['prem_const'] = prem_const_arr;
      este_out['base_prem'] = base_prem_arr;
      var ps_arr = [];
      var ps_ci4_arr = [];
      var ps_ci25_arr = [];
      var ps_adddb_arr = [];
      QNIAPP.OUT.PS = [];

      if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
        for (var j = 0; j < QNIAPP.IN.Qt.qtdtls.rider.length; j++) {
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ECI4') {
            ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ECI25') {
            ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }

          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ADDDB') {
            ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }

        }
      }

      //var count = (QNIAPP.IN.Qt.qtdtls.ppt=='1')?2:3;
      for (var i = 0; i < 3; i++) {
        ps_arr.push(este_out['prem_const'][i]);
        ps_arr.push(Math.round(este_out['base_prem'][i]));
        ps_ci4_arr.length > 0 ? ps_arr.push(ps_ci4_arr[i]) : ps_arr.push(0);
        ps_ci25_arr.length > 0 ? ps_arr.push(ps_ci25_arr[i]) : ps_arr.push(0);
        //ps_tr_arr.length>0?ps_arr.push(ps_tr_arr[i]):ps_arr.push(0);
        ps_adddb_arr.length > 0 ? ps_arr.push(ps_adddb_arr[i]) : ps_arr.push(0);
        //ps_cc_arr.length>0?ps_arr.push(ps_cc_arr[i]):ps_arr.push(0);
        ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3] + ps_arr[4]);
        QNIAPP.OUT.PS[i] = ps_arr;
        ps_arr = [];
      }
    }
    /*if(QNIAPP.IN.Qt.qtdtls.id==="YSUD"){
      QNIAPP.OUT['uin']=QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.Qt.qtdtls.id,'uin');
      QNIAPP.OUT.POD={};
        QNIAPP.OUT.POD['incpDt']=QNIAPP.COMM_CALC.getDDMonYYYYStr(QNIAPP.IN.Qt.qtdtls.incpDt);
        QNIAPP.OUT.POD['term']=QNIAPP.IN.Qt.qtdtls.term;
        QNIAPP.OUT.POD['ppt']=QNIAPP.IN.Qt.qtdtls.ppt;
        QNIAPP.OUT.POD['freq']=QNIAPP.IN.Qt.qtdtls.freq;
        QNIAPP.OUT.POD['paymethod']=QNIAPP.IN.Qt.qtdtls.paymethod;
        QNIAPP.OUT.POD['benefit']=QNIAPP.IN.Qt.qtdtls.benefit+' Benefit';
        QNIAPP.OUT.POD['planopt']= QNIAPP.IN.Qt.qtdtls.plan;
        QNIAPP.OUT.POD['prodname']='HDFC Life YoungStar Udaan';
        QNIAPP.OUT.POD['uin']=QNIAPP.OUT.uin;
        QNIAPP.OUT.POD['sumAssured']=QNIAPP.OUT.sumAssured;
        QNIAPP.OUT.POD['premium']=QNIAPP.OUT.premium;
        QNIAPP.OUT.POD['premntax']= parseInt(QNIAPP.OUT.POD['premium']) + parseInt(QNIAPP.OUT.appTax);
        QNIAPP.OUT.POD['nxtYrTax']=QNIAPP.OUT.nxtYrTax;
        QNIAPP.OUT.POD['premnxtYrTax']=parseInt(QNIAPP.OUT.nxtYrTax) + parseInt(QNIAPP.OUT.POD['premium']);
        QNIAPP.OUT.POD['nextPremDDt']=QNIAPP.OUT.nextPremDDt;
    }*/

  };


  UWR_ACT.resetOutxexcesspremium_IB_rider = function (ctg, index) {
    QNIAPP.OUT['rider'] = QNIAPP.IN.Qt.qtdtls['rider'];
    if (QNIAPP.IN.Qt.qtdtls.rider[index].name == 'INAD') {
      QNIAPP.OUT.rider[index]['rider_name'] = 'HDFC Life ' + QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[index].name];
    }
    else {
      QNIAPP.OUT.rider[index]['rider_name'] = QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[index].name];
    }
    QNIAPP.OUT.rider[index]['rider_uin'] = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.OUT.rider[index]['name'], 'uin');
    if (QNIAPP.IN.id == "SANCH" || QNIAPP.IN.id == "EALPTP" || QNIAPP.IN.id == "SIPPAR" || QNIAPP.IN.id == "SAPLUSE") {
      QNIAPP.OUT.rider[index]['rider_uin'] = QNIAPP.COMM_PARMS.getVersion8UIN(QNIAPP.OUT.rider[index]['name']);
    }

    QNIAPP.OUT.rider[index]['riders_uin'] = ';' + QNIAPP.OUT.rider[index]['rider_name'] + '-' + QNIAPP.OUT.rider[index]['rider_uin'];

    if (index < (QNIAPP.IN.Qt.qtdtls.rider.length) - 1) {
      QNIAPP.OUT.rider[index]['rider_tnc_names'] = ' , ' + QNIAPP.OUT.rider[index]['rider_name'];
    } else {
      QNIAPP.OUT.rider[index]['rider_tnc_names'] = ' & ' + QNIAPP.OUT.rider[index]['rider_name'];
    }
    //Added the following for adding the riders_uin and rider_tnc_names only in OUT but not in Qtdtls -- Bhavani
    QNIAPP.OUT.rider = $.parseJSON(JSON.stringify(QNIAPP.IN.Qt.qtdtls.rider));
    $.each(QNIAPP.OUT.rider[index], function (key, value) {
      if (key == 'riders_uin' || key == 'rider_tnc_names' || key == 'rider_uin') {
        delete QNIAPP.IN.Qt.qtdtls.rider[index][key];
        QNIAPP.OUT.rider[index][key] = value;
      }
    });
    //Changes end
    QNIAPP.COMM_CALC.calculateRiderPremiumandTax();
    QNIAPP.COMM_CALC.calcTotalPremium();
    arr = [];
    if (ctg == 'T') {
      QNIAPP.OUT.PD = [];
      if (QNIAPP.IN.id == 'SIPPAR' || QNIAPP.IN.id == 'SIPPARE' || QNIAPP.IN.id == 'SIPPARV9' || QNIAPP.IN.id == 'SIPPARV9E') {
        arr.push('Main Benefit-' + eval('QNIAPP.' + QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN['id'], 'option') + '.get("' + QNIAPP.IN.Qt.qtdtls.term + '_' + QNIAPP.IN.Qt.qtdtls.ppt + '_' + QNIAPP.IN.Qt.qtdtls.pyout + '")'));
      }
      else {
        arr.push((QNIAPP.IN.id == 'SANCHP' || QNIAPP.IN.id == 'SANCHPE') ? QNIAPP.IN.Qt.qtdtls.plan : QNIAPP.CONSTS.MB);
      }
      ((QNIAPP.IN.id == 'SANCHP' || QNIAPP.IN.id == 'SANCHPE') && QNIAPP.IN.Qt.qtdtls.plan == "Guaranteed Maturity") ? arr.push(QNIAPP.OUT.SA_MAT) : arr.push(QNIAPP.OUT.sumAssured);
      if (QNIAPP.IN.id == 'SIPPAR' || QNIAPP.IN.id == 'SIPPARE' || QNIAPP.IN.id == 'SIPPARV9' || QNIAPP.IN.id == 'SIPPARV9E') {
        arr.push(QNIAPP.IN.Qt.qtdtls.ppt);
        arr.push(QNIAPP.IN.Qt.qtdtls.term);
        arr.push(QNIAPP.IN.Qt.qtdtls.pyout);
      } else {
        arr.push(QNIAPP.IN.Qt.qtdtls.term);
        arr.push(QNIAPP.IN.Qt.qtdtls.ppt);
      }
      if ((QNIAPP.IN.id == 'SANCHP' || QNIAPP.IN.id == 'SANCHPE') && QNIAPP.IN.Qt.qtdtls.plan != "Guaranteed Maturity") {
        arr.push(QNIAPP.OUT.py_term);
        arr.push(QNIAPP.OUT.gur_py_amt);
        arr.push(QNIAPP.IN.Qt.qtdtls.pyfrequency);
      }
      arr.push(Math.round(QNIAPP.IN.Qt.qtdtls.premium));
      if (QNIAPP.IN.Qt.qtdtls.tottax != 0) //when tax !=0
      {
        if (QNIAPP.IN.Qt.qtdtls.backdttax && QNIAPP.IN.Qt.qtdtls.backdttax != 0) {
          arr.push(Math.round(QNIAPP.IN.Qt.qtdtls.tottax - QNIAPP.IN.Qt.qtdtls.backdttax));
          arr.push(Math.round(QNIAPP.IN.Qt.qtdtls.premium) + Math.round(QNIAPP.IN.Qt.qtdtls.tottax - QNIAPP.IN.Qt.qtdtls.backdttax));
        } else {
          arr.push(Math.round(QNIAPP.IN.Qt.qtdtls.tottax));
          arr.push(Math.round(QNIAPP.IN.Qt.qtdtls.premium) + Math.round(QNIAPP.IN.Qt.qtdtls.tottax));
        }
      }
      else if (QNIAPP.OUT.rider && QNIAPP.OUT.rider.length > 0 && QNIAPP.IN.Qt.qtdtls.nri == '0') {  //When rider is present and it is non-nri case and tax !=0
        arr.push(0);
        arr.push(Math.round(QNIAPP.OUT.totPremium));
      }
      QNIAPP.OUT.PD.push(arr);
      arr = [];

      if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
        for (var i = 0; i <= index; i++) {
          if (QNIAPP.IN.Qt.qtdtls.rider[i] != "") {
            if (QNIAPP.IN.Qt.qtdtls.rider[i].name == 'INAD') {
              arr.push(QNIAPP.CONSTS.INADRIDER);
            } else {
              arr.push(QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i].name]);
            }
            arr.push(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name, 'sumAssured'));
            if (QNIAPP.IN.id == 'SIPPAR' || QNIAPP.IN.id == 'SIPPARE' || QNIAPP.IN.id == 'SIPPARV9' || QNIAPP.IN.id == 'SIPPARV9E') {
              arr.push(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name, 'ppt'));
              arr.push(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name, 'term'));
              arr.push('NA');
            } else {
              arr.push(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name, 'term'));
              arr.push(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name, 'ppt'));
            }
            if (QNIAPP.IN.id == 'SANCHP' || QNIAPP.IN.id == 'SANCHPE') {
              if (QNIAPP.IN.Qt.qtdtls.plan != 'Guaranteed Maturity') {
                arr.push('NA');
                arr.push('NA');
                arr.push('NA');
              }
            }
            arr.push(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name, 'premium'));
            if (QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name, 'tax') !== 0) //when rider tax !=0
            {
              if (QNIAPP.IN.Qt.qtdtls.bkdttax_rider && QNIAPP.IN.Qt.qtdtls.bkdttax_rider != 0) {
                arr.push(parseInt(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name, 'tax')) - parseInt(QNIAPP.IN.Qt.qtdtls.bkdttax_rider));
                arr.push(parseInt(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name, 'premium')) + (parseInt(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name, 'tax')) - parseInt(QNIAPP.IN.Qt.qtdtls.bkdttax_rider)));
              } else {
                arr.push(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name, 'tax'));
                arr.push(parseInt(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name, 'premium')) + parseInt(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name, 'tax')));
              }
            } else if (QNIAPP.OUT.rider && QNIAPP.OUT.rider.length > 0 && QNIAPP.IN.Qt.qtdtls.nri == '0') { //When rider is present and it is non-nri case and rider tax !=0
              arr.push(0);
              arr.push(Math.round(QNIAPP.OUT.totPremium));
            }
            //arr.push(Math.round(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name,'premium'))+Math.round(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i].name,'tax')));

            QNIAPP.OUT.PD.push(arr);
            arr = [];
          }
        }
      }
    }
    //for V09 BI Changes
    QNIAPP.OUT.POD['totalpremium'] = QNIAPP.OUT.totPremium;
    QNIAPP.OUT.POD['instapremium'] = QNIAPP.OUT.premium;
    var prem_const_arr = [], base_prem_arr = [], tot_inst_prem = [];
    var prod_id = QNIAPP.IN.id;
    var nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktx_2yr_rt'))) : Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'tx_2yr_rt')));
    if (QNIAPP.IN.id == "SARJB") {
      nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'gst_rt') + QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ktax'))) : Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'gst_rt')));
    }
    prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
    base_prem_arr = [];
    base_prem_arr.push(parseInt(QNIAPP.OUT.premium));
    base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(QNIAPP.OUT.appTax));
    base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(nxtyrtaxbase));

    var ps_arr = [];
    var ps_ci_arr = [];
    var ps_ib_arr = [];
    QNIAPP.OUT.PS = [];
    if (QNIAPP.OUT.rider && QNIAPP.OUT.rider.length > 0) {
      for (var j = 0; j < QNIAPP.OUT.rider.length; j++) {
        if (QNIAPP.OUT.rider[j]['name'] == 'C4CI') {
          ps_ci_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
          ps_ci_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          ps_ci_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
        }
        if (QNIAPP.OUT.rider[j]['name'] == 'INAD') {
          ps_ib_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
          ps_ib_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          ps_ib_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
        }
      }
    }

    for (var i = 0; i < 3; i++) {
      ps_arr.push(prem_const_arr[i]);
      ps_arr.push(base_prem_arr[i]);
      if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'C4CI') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'INAD')) {
        ps_ci_arr.length > 0 ? ps_arr.push(ps_ci_arr[i]) : ps_arr.push(0);
        ps_ib_arr.length > 0 ? ps_arr.push(ps_ib_arr[i]) : ps_arr.push(0);
        ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3]);
      } else {
        ps_arr.push(0);
        ps_arr.push(ps_arr[1] + ps_arr[2]);
      }
      QNIAPP.OUT.PS[i] = ps_arr;
      ps_arr = [];

    }
  };

  UWR_ACT.resetOutxexcesspremium_C2P3DP = function () {
    QNIAPP.OUT.premium = QNIAPP.IN.Qt.qtdtls.premium;
    QNIAPP.OUT.premiumWithRider = parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium);
    QNIAPP.OUT.appTax = QNIAPP.IN.Qt.qtdtls.tottax;
    QNIAPP.OUT.tax = parseInt(QNIAPP.OUT.appTax);
    QNIAPP.OUT.ST_RT = QNIAPP.IN.Qt.qtdtls.ST_RT;
    QNIAPP.OUT.EC_RT = QNIAPP.IN.Qt.qtdtls.EC_RT;
    QNIAPP.OUT.KTAX = QNIAPP.IN.Qt.qtdtls.KTAX;
    //QNIAPP.OUT.totTax = (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0)?(QNIAPP.IN.Qt.qtdtls.tottax + QNIAPP.IN.Qt.qtdtls.rider[0].tax):QNIAPP.IN.Qt.qtdtls.tottax;
    QNIAPP.OUT.totPremium = QNIAPP.IN.Qt.totpremium;
    if (QNIAPP.IN.Qt.qtdtls.freq === QNIAPP.CONSTS.M) {
      if (QNIAPP.IN.Qt.qtdtls.backdttax && QNIAPP.IN.Qt.qtdtls.backdttax != 0) {
        QNIAPP.OUT.threeMnthPrem = ((QNIAPP.OUT.premiumWithRider + QNIAPP.OUT.appTax) - parseInt(QNIAPP.IN.Qt.qtdtls.backdttax)) * 3;
      }
      else {
        QNIAPP.OUT.threeMnthPrem = QNIAPP.OUT.totPremium * 3;
        QNIAPP.OUT.twoMnthPrem = QNIAPP.OUT.totPremium * 2;

      }
    }
    if (QNIAPP.OUT.rider && QNIAPP.OUT.rider.length > 0) {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name']) && (QNIAPP.IN.Qt.qtdtls.rider[i].deleteflg == "N")) {
          for (var k = 0; k < QNIAPP.OUT.rider.length; k++) {
            if ((QNIAPP.IN.Qt.qtdtls.rider[i].name == QNIAPP.OUT.rider[k].name) && (QNIAPP.OUT.rider[k].deleteflg == "N")) {
              QNIAPP.OUT.rider[k].premium = parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].premium);
              QNIAPP.OUT.rider[k].tax = parseInt(QNIAPP.IN.Qt.qtdtls.rider[i].tax);
              break;
            }
          }
        }
      }
    }
    //V09 BI Chnages
    QNIAPP.OUT.instapremium = parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium);
    var prem_const_arr = [], base_prem_arr = [], tot_inst_prem = [];
    var prod_id = QNIAPP.IN.id;
    var nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium) * (QNIAPP.C2P3DP_GST_RT.get()['renewalgst_rt'] + QNIAPP.C2P3DP_KTAX.get()['ktax'])) : Math.round(parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium) * (QNIAPP.C2P3DP_GST_RT.get()['renewalgst_rt']));
    prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
    base_prem_arr = [];
    base_prem_arr.push(parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium));
    base_prem_arr.push(parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium) + parseInt(QNIAPP.OUT.appTax));
    base_prem_arr.push(parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium) + parseInt(nxtyrtaxbase));

    var ps_arr = [];
    var ps_ci_arr = [];
    var ps_ib_arr = [];
    var ps_pac_arr = [];
    var ps_adc_arr = [];
    var ps_cc_arr = [];
    var ps_ci4_arr = [];
    var ps_ci25_arr = [];
    var ps_tr_arr = [];
    var ps_adddb_arr = [];
    QNIAPP.OUT.PS = [];
    if (QNIAPP.OUT.rider && QNIAPP.OUT.rider.length > 0) {
      for (var j = 0; j < QNIAPP.OUT.rider.length; j++) {
        if (QNIAPP.OUT.rider[j].deleteflg == "N" && QNIAPP.OUT.rider[j]['name'] == 'C4CI') {
          ps_ci_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
          ps_ci_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          ps_ci_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
        }
        if (QNIAPP.OUT.rider[j].deleteflg == "N" && QNIAPP.OUT.rider[j]['name'] == 'INAD') {
          ps_ib_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
          ps_ib_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          ps_ib_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
        }
        if (QNIAPP.OUT.rider[j].deleteflg == "N" && QNIAPP.OUT.rider[j]['name'] == 'PPR_PAC') {
          ps_pac_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
          ps_pac_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          ps_pac_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
        }
        if (QNIAPP.OUT.rider[j].deleteflg == "N" && QNIAPP.OUT.rider[j]['name'] == 'PPR_ADC') {
          ps_adc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
          ps_adc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          ps_adc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
        }
        if (QNIAPP.OUT.rider[j].deleteflg == "N" && QNIAPP.OUT.rider[j]['name'] == 'PPR_CC') {
          ps_cc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
          ps_cc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          ps_cc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
        }
        if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ECI4') {
          ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
          ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
        }
        if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ECI25') {
          ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
          ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
        }
        if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ETR') {
          ps_tr_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
          ps_tr_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          ps_tr_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
        }
        if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ADDDB') {
          ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
          ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
        }
      }
    }

    for (var i = 0; i < 3; i++) {
      ps_arr.push(prem_const_arr[i]);
      ps_arr.push(base_prem_arr[i]);
      if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'C4CI') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'INAD') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'PPR_PAC') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'PPR_ADC') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'PPR_CC')) {
        ps_ci_arr.length > 0 ? ps_arr.push(ps_ci_arr[i]) : ps_arr.push(0);
        ps_ib_arr.length > 0 ? ps_arr.push(ps_ib_arr[i]) : ps_arr.push(0);
        ps_pac_arr.length > 0 ? ps_arr.push(ps_pac_arr[i]) : ps_arr.push(0);
        ps_adc_arr.length > 0 ? ps_arr.push(ps_adc_arr[i]) : ps_arr.push(0);
        ps_cc_arr.length > 0 ? ps_arr.push(ps_cc_arr[i]) : ps_arr.push(0);
        ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3] + ps_arr[4] + ps_arr[5] + ps_arr[6]);
      } else {
        ps_arr.push(0);
        ps_arr.push(ps_arr[1] + ps_arr[2]);
      }
      QNIAPP.OUT.PS[i] = ps_arr;
      ps_arr = [];

    }
  };
  UWR_ACT.resetOutxexcesspremium_ibcippr = function () {
    //v09 BI Chnages
    QNIAPP.OUT.POD['instapremium'] = QNIAPP.OUT.premium;
    QNIAPP.OUT.POD['totalpremium'] = QNIAPP.OUT.totPremium;
    var prem_const_arr = [], base_prem_arr = [], tot_inst_prem = [];
    var prod_id = QNIAPP.IN.id;
    var nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktx_2yr_rt'))) : Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'tx_2yr_rt')));
    if (QNIAPP.IN.id == "SARJB") {
      nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'gst_rt') + QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'ktax'))) : Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'gst_rt')));
    }
    else if (QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "P1C2PLE") {
      nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premium * (QNIAPP.P1C2PL_GST_RT.get()['renewalgst_rt'] + QNIAPP.P1C2PL_KTAX.get()['ktax2yr'])) : Math.round(QNIAPP.OUT.premium * (QNIAPP.P1C2PL_GST_RT.get()['renewalgst_rt']));
    }
    else if (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE") {
      nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premwodisc * (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt'] + QNIAPP.P1C2PS_KTAX.get()['ktax2yr'])) : Math.round(QNIAPP.OUT.premwodisc * (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt']));
      var prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
      var prod_id = QNIAPP.IN.id;
      var base_prem_arr = [];
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium));
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(QNIAPP.OUT.appTax));
      base_prem_arr.push(Math.round(QNIAPP.OUT.premwodisc));
      base_prem_arr.push((Math.round(QNIAPP.OUT.premwodisc)) + parseInt(nxtyrtaxbase));
    }
    else if (QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE") {
      nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premium * (QNIAPP.P2C2PEL_GST_RT.get()['renewalgst_rt'] + QNIAPP.P2C2PEL_KTAX.get()['ktax2yr'])) : Math.round(QNIAPP.OUT.premium * (QNIAPP.P2C2PEL_GST_RT.get()['renewalgst_rt']));
      var prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
      var prod_id = QNIAPP.IN.id;
      var base_prem_arr = [];
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium));
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(QNIAPP.OUT.appTax));
      base_prem_arr.push(Math.round(QNIAPP.OUT.premwodisc));
      base_prem_arr.push((Math.round(QNIAPP.OUT.premwodisc)) + parseInt(nxtyrtaxbase));
    }
    if (QNIAPP.IN.id == "EGII" || QNIAPP.IN.id == "EGIIE") {
      var secondYrPrem = parseFloat(QNIAPP.IN.Qt.qtdtls.nonDiscpremium) + parseInt((QNIAPP.IN.Qt.excessPremium && QNIAPP.IN.Qt.excessPremium[0]) ? QNIAPP.IN.Qt.excessPremium[0] : 0) + ((QNIAPP.IN.Qt.excessPremium && QNIAPP.IN.Qt.excessPremium[1]) ? parseInt(QNIAPP.IN.Qt.excessPremium[1]) : 0);
      QNIAPP.OUT.POD['instapremium'] = secondYrPrem;
      var prod_id = QNIAPP.IN.id;
      nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(parseFloat(secondYrPrem) * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktx_2yr_rt'))) : Math.round(parseFloat(secondYrPrem) * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'tx_2yr_rt')));
      var prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
      //var nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1')? Math.round(Math.round(QNIAPP.OUT.premium)* (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt']  + QNIAPP.P1C2PS_KTAX.get()['ktax2yr'])) : Math.round(Math.round(QNIAPP.OUT.premium)* (QNIAPP.P1C2PS_GST_RT.get()['renewalgst_rt']));
      var base_prem_arr = [];
      //var frstyr=Math.round(QNIAPP.OUT.premium * QNIAPP.P1C2PS_GST_RT.get()['firstyeargst_rt']);
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium));
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(QNIAPP.OUT.appTax));
      base_prem_arr.push(secondYrPrem);
      base_prem_arr.push(parseFloat(secondYrPrem) + parseInt(nxtyrtaxbase));
    }
    else if (QNIAPP.IN.id == "SUPH") {
      nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premium * (QNIAPP.SUPH_GST_RT.get()['renewalgst_rt'] + QNIAPP.SUPH_KTAX.get()['ktax2yr'])) : Math.round(QNIAPP.OUT.premium * (QNIAPP.SUPH_GST_RT.get()['renewalgst_rt']));
      if (QNIAPP.IN.Qt.qtdtls.pptOption != "Single") {
        prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
      } else {
        prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX + '*', QNIAPP.CONSTS.PREMWITH2YRTAX];
      }
      var base_prem_arr = [];
      base_prem_arr.push(QNIAPP.OUT.premium);
      base_prem_arr.push(QNIAPP.OUT.premium + QNIAPP.OUT.appTax);
      (QNIAPP.IN.Qt.qtdtls.pptOption != "Single") ? base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(nxtyrtaxbase)) : base_prem_arr.push(0);
    }

    if (QNIAPP.IN.id != "SUPH" && QNIAPP.IN.id != "P1C2PS" && QNIAPP.IN.id != "P1C2PSE" && QNIAPP.IN.id != "P2C2PEL" && QNIAPP.IN.id != "P2C2PELE" && QNIAPP.IN.id != "ESTE" && QNIAPP.IN.id != "ESTEE" && QNIAPP.IN.id != "EGII" && QNIAPP.IN.id != "EGIIE") {
      prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
      var base_prem_arr = [];
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium));
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(QNIAPP.OUT.appTax));
      base_prem_arr.push(parseInt(QNIAPP.OUT.premium) + parseInt(nxtyrtaxbase));
    }
    var ps_arr = [];
    var ps_ci_arr = [];
    var ps_ib_arr = [];
    var ps_pac_arr = [];
    var ps_adc_arr = [];
    var ps_cc_arr = [];
    var ps_ci4_arr = [];
    var ps_ci25_arr = [];
    var ps_tr_arr = [];
    var ps_adddb_arr = [];
    QNIAPP.OUT.PS = [];
    var ps_sum = 0;
    if (QNIAPP.OUT.rider && QNIAPP.OUT.rider.length > 0) {
      if (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE" || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE" || QNIAPP.IN.id == "EGII" || QNIAPP.IN.id == "EGIIE") {
        for (var j = 0; j < QNIAPP.IN.Qt.qtdtls.rider.length; j++) {
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['deleteflg'] == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'C4CI') {
            if (QNIAPP.IN.id == "EGII" || QNIAPP.IN.id == "EGIIE") {
              var c4ciTaxWotDisc = Math.round((QNIAPP.OUT.c4ciPremWotDisc + parseInt((QNIAPP.IN.Qt['rider'][j].excessPremium && QNIAPP.IN.Qt['rider'][j].excessPremium[0]) ? QNIAPP.IN.Qt['rider'][j].excessPremium[0] : 0)) * QNIAPP.PRODUCT_DETAILS.get('C4CI', 'st_rt'));
              ps_ci_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
              ps_ci_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
              ps_ci_arr.push(QNIAPP.OUT.c4ciPremWotDisc + parseInt((QNIAPP.IN.Qt['rider'][j].excessPremium && QNIAPP.IN.Qt['rider'][j].excessPremium[0]) ? QNIAPP.IN.Qt['rider'][j].excessPremium[0] : 0));
              ps_ci_arr.push(QNIAPP.OUT.c4ciPremWotDisc + parseInt((QNIAPP.IN.Qt['rider'][j].excessPremium && QNIAPP.IN.Qt['rider'][j].excessPremium[0]) ? QNIAPP.IN.Qt['rider'][j].excessPremium[0] : 0) + c4ciTaxWotDisc);

            }
            else if (QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE") {
              var disc_rt = 0;
              if ((QNIAPP.C4CI_DISCOUNT.isDiscountApplicable(QNIAPP.IN.chnlptnr) && !(QNIAPP.IN.useposrates && QNIAPP.IN.useposrates == 'Y'))) {
                var disc_rt = QNIAPP.C4CI_DISC.get();
              }
              var c4ciTaxWotDisc = Math.round((QNIAPP.OUT.c4ciPremWotDisc + parseInt((QNIAPP.IN.Qt['rider'][j].excessPremium && QNIAPP.IN.Qt['rider'][j].excessPremium[0]) ? QNIAPP.IN.Qt['rider'][j].excessPremium[0] / (1 - disc_rt) : 0)) * QNIAPP.PRODUCT_DETAILS.get('C4CI', 'st_rt'));
              ps_ci_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
              ps_ci_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
              ps_ci_arr.push(QNIAPP.OUT.c4ciPremWotDisc + parseInt((QNIAPP.IN.Qt['rider'][j].excessPremium && QNIAPP.IN.Qt['rider'][j].excessPremium[0]) ? QNIAPP.IN.Qt['rider'][j].excessPremium[0] / (1 - disc_rt) : 0));
              ps_ci_arr.push(QNIAPP.OUT.c4ciPremWotDisc + parseInt((QNIAPP.IN.Qt['rider'][j].excessPremium && QNIAPP.IN.Qt['rider'][j].excessPremium[0]) ? QNIAPP.IN.Qt['rider'][j].excessPremium[0] / (1 - disc_rt) : 0) + c4ciTaxWotDisc);
            }
            else {
              ps_ci_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
              ps_ci_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
              ps_ci_arr.push(QNIAPP.OUT.c4ciPremWotDisc);
              ps_ci_arr.push(QNIAPP.OUT.c4ciPremWotDisc + QNIAPP.OUT.c4ciTaxWotDisc);
            }

          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['deleteflg'] == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'INAD') {
            ps_ib_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_ib_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_ib_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_ib_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['deleteflg'] == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'PPR_PAC') {
            ps_pac_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_pac_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_pac_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_pac_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }

          if (QNIAPP.IN.Qt.qtdtls.rider[j]['deleteflg'] == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'PPR_ADC') {
            ps_adc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_adc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_adc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_adc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['deleteflg'] == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'PPR_CC') {
            ps_cc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_cc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_cc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_cc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
        }
      }
      else {
        for (var j = 0; j < QNIAPP.OUT.rider.length; j++) {
          if (QNIAPP.OUT.rider[j].deleteflg == "N" && QNIAPP.OUT.rider[j]['name'] == 'C4CI') {
            ps_ci_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
            ps_ci_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
            ps_ci_arr.push((QNIAPP.IN.id == "SUPH" && QNIAPP.IN.Qt.qtdtls.pptOption == "Single") ? 0 : parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          }
          if (QNIAPP.OUT.rider[j].deleteflg == "N" && QNIAPP.OUT.rider[j]['name'] == 'INAD') {
            ps_ib_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
            ps_ib_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
            ps_ib_arr.push((QNIAPP.IN.id == "SUPH" && QNIAPP.IN.Qt.qtdtls.pptOption == "Single") || (QNIAPP.IN.id == "SARJB" && QNIAPP.OUT.rider[j]['ppt'] == '1') ? 0 : parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          }
          if (QNIAPP.OUT.rider[j].deleteflg == "N" && QNIAPP.OUT.rider[j]['name'] == 'PPR_PAC') {
            ps_pac_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
            ps_pac_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
            ps_pac_arr.push((QNIAPP.IN.id == "SUPH" && QNIAPP.IN.Qt.qtdtls.pptOption == "Single") ? 0 : parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          }
          if (QNIAPP.OUT.rider[j].deleteflg == "N" && QNIAPP.OUT.rider[j]['name'] == 'PPR_ADC') {
            ps_adc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
            ps_adc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
            ps_adc_arr.push((QNIAPP.IN.id == "SUPH" && QNIAPP.IN.Qt.qtdtls.pptOption == "Single") ? 0 : parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          }
          if (QNIAPP.OUT.rider[j].deleteflg == "N" && QNIAPP.OUT.rider[j]['name'] == 'PPR_CC') {
            ps_cc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']));
            ps_cc_arr.push(parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
            ps_cc_arr.push((QNIAPP.IN.id == "SUPH" && QNIAPP.IN.Qt.qtdtls.pptOption == "Single") ? 0 : parseFloat(QNIAPP.OUT.rider[j]['premium']) + parseFloat(QNIAPP.OUT.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ECI4') {
            ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ECI25') {
            ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ETR') {
            ps_tr_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_tr_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_tr_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ADDDB') {
            ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
        }
      }
    }
    var count = ((QNIAPP.IN.id == "SARJB" || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE" || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE") && QNIAPP.IN.Qt.qtdtls.ppt == '1') ? 2 : ((QNIAPP.IN.id != "P1C2PS" && QNIAPP.IN.id != "P1C2PSE" && QNIAPP.IN.id != "P2C2PEL" && QNIAPP.IN.id != "P2C2PELE" && QNIAPP.IN.id != "EGII" && QNIAPP.IN.id != "EGIIE") ? 3 : 4);
    for (var i = 0; i < count; i++) {
      ps_arr.push(prem_const_arr[i]);
      ps_arr.push(base_prem_arr[i]);
      if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'C4CI') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'INAD') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'PPR_PAC') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'PPR_ADC') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'PPR_CC')) {
        if (QNIAPP.IN.id == "SANCHP" || QNIAPP.IN.id == "SANPAR" || QNIAPP.IN.id == "SANCHV9" || QNIAPP.IN.id == "SIPPARV9" || QNIAPP.IN.id == "P1C2PL" || QNIAPP.IN.id == "SUPH" || QNIAPP.IN.id == "P1C2PS" || QNIAPP.IN.id == "P1C2PSE" || QNIAPP.IN.id == "P2C2PEL" || QNIAPP.IN.id == "P2C2PELE" || QNIAPP.IN.id == "EGII" || QNIAPP.IN.id == 'EGIIE' || QNIAPP.IN.id == "ESRB" || QNIAPP.IN.id == 'ESRBE' || QNIAPP.IN.id == 'ESJ' || QNIAPP.IN.id == 'ESJE' || QNIAPP.IN.id == "EGWP" || QNIAPP.IN.id == 'EGWPE' || QNIAPP.IN.id == 'EIAP' || QNIAPP.IN.id == 'EIAPE' || QNIAPP.IN.id == 'ESIP' || QNIAPP.IN.id == 'ESIPE' || QNIAPP.IN.id == 'EAGP' || QNIAPP.IN.id == 'EAGPE') {
          ps_ci_arr.length > 0 ? ps_arr.push(ps_ci_arr[i]) : ps_arr.push(0);
          ps_ib_arr.length > 0 ? ps_arr.push(ps_ib_arr[i]) : ps_arr.push(0);
          ps_pac_arr.length > 0 ? ps_arr.push(ps_pac_arr[i]) : ps_arr.push(0);
          ps_adc_arr.length > 0 ? ps_arr.push(ps_adc_arr[i]) : ps_arr.push(0);
          ps_cc_arr.length > 0 ? ps_arr.push(ps_cc_arr[i]) : ps_arr.push(0);
          ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3] + ps_arr[4] + ps_arr[5] + ps_arr[6]);
        }
        else if (QNIAPP.IN.id == "SARJB") {
          ps_ib_arr.length > 0 ? ps_arr.push(ps_ib_arr[i]) : ps_arr.push(0);
          ps_pac_arr.length > 0 ? ps_arr.push(ps_pac_arr[i]) : ps_arr.push(0);
          ps_adc_arr.length > 0 ? ps_arr.push(ps_adc_arr[i]) : ps_arr.push(0);
          ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3] + ps_arr[4]);
        }
        else {
          ps_ci_arr.length > 0 ? ps_arr.push(ps_ci_arr[i]) : ps_arr.push(0);
          ps_ib_arr.length > 0 ? ps_arr.push(ps_ib_arr[i]) : ps_arr.push(0);
          ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3]);
        }
      }
      else if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'ECI4') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'ECI25') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'ETR') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'ADDDB')) {
        if (QNIAPP.IN.id == "EGWP" || QNIAPP.IN.id == "EGWPE" || QNIAPP.IN.id == "EAGP" || QNIAPP.IN.id == "EAGPE") {
          ps_ci4_arr.length > 0 ? ps_arr.push(ps_ci4_arr[i]) : ps_arr.push(0);
          ps_ci25_arr.length > 0 ? ps_arr.push(ps_ci25_arr[i]) : ps_arr.push(0);
          ps_tr_arr.length > 0 ? ps_arr.push(ps_tr_arr[i]) : ps_arr.push(0);
          ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3] + ps_arr[4]);
        }
        else {
          ps_ci4_arr.length > 0 ? ps_arr.push(ps_ci4_arr[i]) : ps_arr.push(0);
          ps_ci25_arr.length > 0 ? ps_arr.push(ps_ci25_arr[i]) : ps_arr.push(0);
          ps_tr_arr.length > 0 ? ps_arr.push(ps_tr_arr[i]) : ps_arr.push(0);
          ps_adddb_arr.length > 0 ? ps_arr.push(ps_adddb_arr[i]) : ps_arr.push(0);
          ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3] + ps_arr[4] + ps_arr[5]);
        }
      }
      /*else if(QNIAPP.IN.id == 'EAGP' || QNIAPP.IN.id == 'EAGPE'){
        ps_arr.push(ps_arr[1]);
      }*/
      /*else if(QNIAPP.IN.id == 'EGII' || QNIAPP.IN.id == 'EGIIE'){
       ps_ci4_arr.length>0?ps_arr.push(ps_ci4_arr[i]):ps_arr.push(0);
       ps_ci25_arr.length>0?ps_arr.push(ps_ci25_arr[i]):ps_arr.push(0);
       ps_tr_arr.length>0?ps_arr.push(ps_tr_arr[i]):ps_arr.push(0);
       ps_adddb_arr.length>0?ps_arr.push(ps_adddb_arr[i]):ps_arr.push(0);
       ps_ci_arr.length>0?ps_arr.push(ps_ci_arr[i]):ps_arr.push(0);
       ps_ib_arr.length>0?ps_arr.push(ps_ib_arr[i]):ps_arr.push(0);
       ps_pac_arr.length>0?ps_arr.push(ps_pac_arr[i]):ps_arr.push(0);
       ps_adc_arr.length>0?ps_arr.push(ps_adc_arr[i]):ps_arr.push(0);
       ps_cc_arr.length>0?ps_arr.push(ps_cc_arr[i]):ps_arr.push(0);
       ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3]+ ps_arr[4]+ps_arr[5]+ps_arr[6]+ps_arr[7]+ps_arr[8]+ps_arr[9]+ps_arr[10]);
        ps_arr.push(ps_arr[1]);
      }*/
      /*else if(QNIAPP.IN.id == 'EIAP' || QNIAPP.IN.id == 'EIAPE' || QNIAPP.IN.id == 'ESIP' || QNIAPP.IN.id == 'ESIPE' || QNIAPP.IN.id == 'EAGP' || QNIAPP.IN.id == 'EAGPE' || QNIAPP.IN.id == "EGWP"||QNIAPP.IN.id == "EGWPE"){
        ps_arr.push(ps_arr[1]);
      }*/
      else {
        ps_arr.push(0);
        ps_arr.push(ps_arr[1] + ps_arr[2]);
      }
      QNIAPP.OUT.PS[i] = ps_arr;
      ps_arr = [];

    }
    if (QNIAPP.IN.id == "ESTE" || QNIAPP.IN.id == "ESTEE") {
      var este_out = {};
      QNIAPP.OUT.extSA = (QNIAPP.OUT.extSA) ? QNIAPP.OUT.extSA : 0;
      QNIAPP.OUT.extPremium = (QNIAPP.OUT.extPremium) ? QNIAPP.OUT.extPremium : 0;

      QNIAPP.OUT.POD['extraProtSA'] = QNIAPP.OUT.extSA;

      QNIAPP.OUT.POD['extraProPrem'] = QNIAPP.OUT.extPremium;
      QNIAPP.OUT.POD['instapremium'] = addCommas(QNIAPP.OUT.premium + QNIAPP.OUT.extPremium);


      //premium summary
      //var prem_const_arr=[],base_prem_arr=[];
      prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
      base_prem_arr = [];
      var POL_FEE = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'policy_fee');
      var prod_id = QNIAPP.IN.id;
      var st_rate = QNIAPP.PRODUCT_DETAILS.get(prod_id, 'st_rt');
      var ST_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round(((QNIAPP.OUT.premium + QNIAPP.OUT.extPremium - POL_FEE)) * st_rate) + Math.round(POL_FEE * st_rate) : 0;
      var EC_RT = (QNIAPP.IN.Qt.qtdtls.jnk === '0') ? Math.round(((QNIAPP.OUT.premium + QNIAPP.OUT.extPremium - POL_FEE)) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) + Math.round(POL_FEE * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ec_rt')) : 0;
      var GST_RT = ((QNIAPP.IN.Qt.qtdtls.jnk === '1')) ? Math.round(((QNIAPP.OUT.premium + QNIAPP.OUT.extPremium - POL_FEE)) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) + Math.round(POL_FEE * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'gst_rt')) : 0;
      var KTAX = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag === '1' && QNIAPP.IN.Qt.qtdtls.nri == "0") ? Math.round((QNIAPP.OUT.premium - POL_FEE) * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) + Math.round(POL_FEE * QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktax')) : 0;
      var appTax = ST_RT + EC_RT + GST_RT + KTAX;
      var nxtyrtaxbase = Math.round((QNIAPP.OUT.premium + QNIAPP.OUT.extPremium) * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'tx_2yr_rt')));
      base_prem_arr.push(QNIAPP.OUT.premium + QNIAPP.OUT.extPremium);
      base_prem_arr.push(QNIAPP.OUT.premium + QNIAPP.OUT.extPremium + appTax);
      base_prem_arr.push(QNIAPP.OUT.premium + QNIAPP.OUT.extPremium + nxtyrtaxbase);
      este_out['prem_const'] = prem_const_arr;
      este_out['base_prem'] = base_prem_arr;
      var ps_arr = [];
      var ps_ci4_arr = [];
      var ps_ci25_arr = [];
      var ps_adddb_arr = [];
      QNIAPP.OUT.PS = [];

      if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
        for (var j = 0; j < QNIAPP.IN.Qt.qtdtls.rider.length; j++) {
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ECI4') {
            ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_ci4_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }
          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ECI25') {
            ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_ci25_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }

          if (QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'ADDDB') {
            ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
            ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
            ps_adddb_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          }

        }
      }

      //var count = (QNIAPP.IN.Qt.qtdtls.ppt=='1')?2:3;
      for (var i = 0; i < 3; i++) {
        ps_arr.push(este_out['prem_const'][i]);
        ps_arr.push(Math.round(este_out['base_prem'][i]));
        ps_ci4_arr.length > 0 ? ps_arr.push(ps_ci4_arr[i]) : ps_arr.push(0);
        ps_ci25_arr.length > 0 ? ps_arr.push(ps_ci25_arr[i]) : ps_arr.push(0);
        //ps_tr_arr.length>0?ps_arr.push(ps_tr_arr[i]):ps_arr.push(0);
        ps_adddb_arr.length > 0 ? ps_arr.push(ps_adddb_arr[i]) : ps_arr.push(0);
        //ps_cc_arr.length>0?ps_arr.push(ps_cc_arr[i]):ps_arr.push(0);
        ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3] + ps_arr[4]);
        QNIAPP.OUT.PS[i] = ps_arr;
        ps_arr = [];
      }
    }

  };
  UWR_ACT.resetOutobjectHealth = function () {
    QNIAPP.OUT['prodname'] = QNIAPP.PRODUCT_DETAILS.get(QNIAPP.IN.id, 'name');
    QNIAPP.OUT.premium = QNIAPP.IN.Qt.qtdtls.premium;
    QNIAPP.OUT.apptax = Math.round(QNIAPP.IN.Qt.tottax);
    QNIAPP.OUT.ST_RT = QNIAPP.IN.Qt.qtdtls.ST_RT;
    QNIAPP.OUT.EC_RT = QNIAPP.IN.Qt.qtdtls.EC_RT;
    QNIAPP.OUT.totPremium = QNIAPP.IN.Qt.totpremium;
    QNIAPP.OUT.despno = QNIAPP.IN.Qt.qtdtls.depsno;
    QNIAPP.OUT.rrepremium = Math.round(QNIAPP.OUT.rrepremium);
    QNIAPP.OUT.rbpremium = Math.round(QNIAPP.OUT.rbpremium);
    QNIAPP.OUT.term = "Whole Life";
    QNIAPP.OUT.ppt = "Whole Life";
    QNIAPP.OUT.chMap = "Agency";

    QNIAPP.OUT.BD = [];
    QNIAPP.OUT.BD['PName'] = QNIAPP.IN.Qt.qtdtls.pfname + ' ' + QNIAPP.IN.Qt.qtdtls.plname;
    QNIAPP.OUT.BD['PReln'] = QNIAPP.CONSTS.SELF;
    QNIAPP.OUT.BD['PAge'] = QNIAPP.IN.Qt.qtdtls.age;
    QNIAPP.OUT.BD['PGender'] = QNIAPP.IN.Qt.qtdtls.gender;

    for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.deps.length; i++) {
      var fname = QNIAPP.IN.Qt.qtdtls.deps[i].fname != undefined ? QNIAPP.IN.Qt.qtdtls.deps[i].fname : "";
      var lname = QNIAPP.IN.Qt.qtdtls.deps[i].lname != undefined ? QNIAPP.IN.Qt.qtdtls.deps[i].lname : "";
      QNIAPP.OUT.BD.push({ "Name": fname + ' ' + lname, "name": QNIAPP.OUT.BD['PName'], "Reln": QNIAPP.IN.Qt.qtdtls.deps[i].rel, "Age": QNIAPP.IN.Qt.qtdtls.deps[i].age, "Gender": QNIAPP.IN.Qt.qtdtls.deps[i].gender });
    };

    QNIAPP.OUT.POD = {};
    QNIAPP.OUT.POD['incpDt'] = QNIAPP.COMM_CALC.getDDMonYYYYStr(QNIAPP.IN.Qt.qtdtls.incpDt);
    QNIAPP.OUT.POD['term'] = QNIAPP.IN.Qt.qtdtls.term;
    QNIAPP.OUT.POD['ppt'] = QNIAPP.IN.Qt.qtdtls.ppt;
    QNIAPP.OUT.POD['freq'] = QNIAPP.IN.Qt.qtdtls.freq;
    QNIAPP.OUT.POD['paymethod'] = QNIAPP.IN.Qt.qtdtls.paymethod;

    var arr = [];
    QNIAPP.OUT.PD = [];
    arr.push(QNIAPP.OUT['prodname'] + ' ' + QNIAPP.IN.Qt.qtdtls.plan + ' ' + QNIAPP.IN.Qt.qtdtls.option + " Plan");
    arr.push(Math.round(QNIAPP.OUT.sumAssured));
    arr.push(QNIAPP.IN.Qt.qtdtls.term);
    arr.push(QNIAPP.IN.Qt.qtdtls.ppt);
    arr.push(Math.round(QNIAPP.OUT.premium));
    arr.push(Math.round(QNIAPP.OUT.apptax));
    arr.push(Math.round(QNIAPP.OUT.totPremium));
    QNIAPP.OUT.PD.push(arr);
    arr = [];

    if (QNIAPP.IN.Qt.qtdtls.plan == QNIAPP.CONSTS['SL'] && QNIAPP.OUT.isInsured == "0") {
      QNIAPP.OUT.deps = [];
      QNIAPP.OUT.deps[0] = QNIAPP.IN.Qt.qtdtls.deps[0];
    }

    //Dependant Details in Family Floater
    if (QNIAPP.IN.Qt.qtdtls.plan == QNIAPP.CONSTS['FF']) {
      QNIAPP.OUT.deps = [];
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.deps.length; i++) {
        if (QNIAPP.IN.Qt.qtdtls.deps[i].deleteflg === "N") {
          QNIAPP.OUT.deps.push(QNIAPP.IN.Qt.qtdtls.deps[i]);
        }
      }
    }
  };

  UWR_ACT.resetOutobjectCombi = function () {
    if (QNIAPP.IN.combID === "C1C2PLH" || QNIAPP.IN.combID === "C1C2PLHE") {
      QNIAPP.OUT.COMB['ext_premium'] = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium;
      QNIAPP.OUT.COMB['totPrem_without_tax'] = parseInt(QNIAPP.IN.Qt.qtdtls.premium) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].riderpremium);
      QNIAPP.OUT.COMB['ext_tax'] = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax;
      QNIAPP.OUT.COMB['total_tax'] = parseInt(QNIAPP.OUT.appTax) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].ridertax);
      QNIAPP.OUT.COMB['ext_prem_with_tx'] = Math.round(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium) + Math.round(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax);
      QNIAPP.OUT.COMB['final_tot_prem'] = parseInt(QNIAPP.IN.Qt.qtdtls.totPremium);
    }
    else if (QNIAPP.IN.combID === "C2POS") {
      QNIAPP.OUT.COMB['ext_premium'] = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium;
      QNIAPP.OUT.COMB['totPrem_without_tax'] = parseInt(QNIAPP.IN.Qt.qtdtls.premium) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].riderpremium);
      QNIAPP.OUT.COMB['ext_tax'] = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax;
      QNIAPP.OUT.COMB['total_tax'] = parseInt(QNIAPP.OUT.appTax) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].ridertax);
      QNIAPP.OUT.COMB['ext_prem_with_tx'] = Math.round(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium) + Math.round(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax);
      QNIAPP.OUT.COMB['final_tot_prem'] = parseInt(QNIAPP.IN.Qt.qtdtls.totPremium);
    }
    else {
      QNIAPP.OUT.PD['ext_premium'] = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium;
      QNIAPP.OUT.PD['ext_tax'] = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax;
      QNIAPP.OUT.PD['riderpremium'] = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].riderpremium;
      QNIAPP.OUT.PD['ridertax'] = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].ridertax;
      QNIAPP.OUT.PD['rider_prm_tx'] = parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].riderpremium) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].ridertax);
      QNIAPP.OUT.PD['totPrem_without_tax'] = parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].riderpremium);
      QNIAPP.OUT.PD['total_tax'] = parseInt(QNIAPP.IN.Qt.qtdtls.tottax) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].ridertax);
      QNIAPP.OUT.PD['ext_prem_with_tx'] = Math.round(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium) + Math.round(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax);
      QNIAPP.OUT.PD['final_tot_prem'] = parseInt(QNIAPP.IN.Qt.totpremium);
      if (QNIAPP.PRODUCT_DETAILS.isCombiApplicable(QNIAPP.IN.Qt.qtdtls.id)) {
        QNIAPP.OUT.PD['tot_premium_3d'] = Math.round(QNIAPP.IN.Qt.qtdtls.combinedPremium) + Math.round(QNIAPP.IN.Qt.qtdtls.tottax);
        QNIAPP.OUT.COMB['premium'] = Math.round(QNIAPP.IN.Qt.qtdtls.combinedPremium);
        QNIAPP.OUT.COMB['tot_premium_3d'] = Math.round(QNIAPP.IN.Qt.qtdtls.combinedPremium) + Math.round(QNIAPP.IN.Qt.qtdtls.tottax);
        QNIAPP.OUT.COMB['ext_premium'] = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium;
        QNIAPP.OUT.COMB['riderpremium'] = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].riderpremium;
        QNIAPP.OUT.COMB['ridertax'] = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].ridertax;
        QNIAPP.OUT.COMB['rider_prm_tx'] = parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].riderpremium) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].ridertax);
        QNIAPP.OUT.COMB['totPrem_without_tax'] = parseInt(QNIAPP.IN.Qt.qtdtls.combinedPremium) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].riderpremium);
        QNIAPP.OUT.COMB['ext_tax'] = QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax;
        QNIAPP.OUT.COMB['total_tax'] = parseInt(QNIAPP.OUT.appTax) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax) + parseInt(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].ridertax);
        QNIAPP.OUT.COMB['ext_prem_with_tx'] = Math.round(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].premium) + Math.round(QNIAPP.IN.Qt.qtdtls.externalOBJ[0].tax);
        QNIAPP.OUT.COMB['final_tot_prem'] = parseInt(QNIAPP.IN.Qt.qtdtls.totPremium);
      }
    }

  };

  UWR_ACT.setPartyidDeps = function () {
    QNIAPP.IN.Qt.qtdtls.deps = [];
    QNIAPP.IN.Qt.qtdtls.deps = QNIAPP.IN.Qt.qtdtls.lifeassured;
  };
  UWR_ACT.resetoutxexcesspremiumforULIP = function () {
    QNIAPP.OUT.POD['instpremium'] = QNIAPP.IN.Qt.qtdtls.premium;
    arr = [];
    QNIAPP.OUT.PD = [];
    arr.push(QNIAPP.OUT['prodname']);
    arr.push(QNIAPP.OUT.sumAssured);
    arr.push(QNIAPP.IN.Qt.qtdtls.term);
    arr.push(QNIAPP.IN.Qt.qtdtls.ppt);
    arr.push(QNIAPP.OUT.premium);
    if (QNIAPP.OUT.inad || QNIAPP.OUT.c4ci) {
      arr.push('-');
      arr.push(QNIAPP.OUT.premium);
    }
    QNIAPP.OUT.PD.push(arr);
    arr = [];
    //Riders Display
    if (QNIAPP.IN.Qt.qtdtls.rider) {
      for (var i = 0; i < QNIAPP.IN.Qt.qtdtls.rider.length; i++) {
        if (!QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) {
          if (QNIAPP.IN.Qt.qtdtls.rider[i]['name'] !== 'Life' && QNIAPP.IN.Qt.qtdtls.rider[i]['deleteflg'] === "N") {
            arr.push(QNIAPP.IN.Qt.qtdtls.rider[i]['name']);
            arr.push(QNIAPP.IN.Qt.qtdtls.rider[i]['sumAssured']);
            arr.push(QNIAPP.IN.Qt.qtdtls.term);
            arr.push(QNIAPP.IN.Qt.qtdtls.ppt);
            arr.push('-');
            if (QNIAPP.OUT.inad || QNIAPP.OUT.c4ci) {
              arr.push('-');
              arr.push('-');
            }
            QNIAPP.OUT.PD.push(arr);
            arr = [];
          }
        }
        else if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, QNIAPP.IN.Qt.qtdtls.rider[i]['name'])) {
          arr.push(QNIAPP.CONSTS[QNIAPP.IN.Qt.qtdtls.rider[i]['name']]);
          arr.push(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'sumAssured'));
          arr.push(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'term'));
          arr.push(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'ppt'));
          arr.push(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'premium'));
          arr.push(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'tax'));
          arr.push(Math.round(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'premium')) + Math.round(QNIAPP.COMM_CALC.getRiderDetailsbyCode(QNIAPP.IN.Qt.qtdtls.rider[i]['name'], 'tax')));
          QNIAPP.OUT.PD.push(arr);
          arr = [];
        }
      }
    }



    QNIAPP.OUT.POD['instapremium'] = QNIAPP.OUT.premium;
    var prem_const_arr = [], base_prem_arr = [], tot_inst_prem = [];
    var prod_id = QNIAPP.IN.id;
    var nxtyrtaxbase = (QNIAPP.IN.Qt.qtdtls.keralaFlag && QNIAPP.IN.Qt.qtdtls.keralaFlag == '1') ? Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'ktx_2yr_rt'))) : Math.round(QNIAPP.OUT.premium * (QNIAPP.PRODUCT_DETAILS.get(prod_id, 'tx_2yr_rt')));
    prem_const_arr = [QNIAPP.CONSTS.PREM, QNIAPP.CONSTS.PREMWITHTAX, QNIAPP.CONSTS.PREMWITH2YRTAX];
    base_prem_arr = [];
    base_prem_arr.push(parseInt(QNIAPP.OUT.premium));
    base_prem_arr.push(parseInt(QNIAPP.OUT.premium));
    base_prem_arr.push(parseInt(QNIAPP.OUT.premium));

    var ps_arr = [];
    var ps_ci_arr = [];
    var ps_ib_arr = [];
    var ps_pac_arr = [];
    var ps_adc_arr = [];
    var ps_cc_arr = [];
    QNIAPP.OUT.PS = [];
    if (QNIAPP.IN.Qt.qtdtls.rider && QNIAPP.IN.Qt.qtdtls.rider.length > 0) {
      for (var j = 0; j < QNIAPP.IN.Qt.qtdtls.rider.length; j++) {
        if (QNIAPP.IN.Qt.qtdtls.rider[j].deleteflg == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'C4CI') {
          ps_ci_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
          ps_ci_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          ps_ci_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
        }
        if (QNIAPP.IN.Qt.qtdtls.rider[j].deleteflg == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'INAD') {
          ps_ib_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
          ps_ib_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          ps_ib_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
        }
        if (QNIAPP.IN.Qt.qtdtls.rider[j].deleteflg == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'PPR_PAC') {
          ps_pac_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
          ps_pac_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          ps_pac_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
        }
        if (QNIAPP.IN.Qt.qtdtls.rider[j].deleteflg == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'PPR_ADC') {
          ps_adc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
          ps_adc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          ps_adc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
        }
        if (QNIAPP.IN.Qt.qtdtls.rider[j].deleteflg == "N" && QNIAPP.IN.Qt.qtdtls.rider[j]['name'] == 'PPR_CC') {
          ps_cc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']));
          ps_cc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
          ps_cc_arr.push(parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['premium']) + parseFloat(QNIAPP.IN.Qt.qtdtls.rider[j]['tax']));
        }
      }
    }
    if (QNIAPP.IN.id == 'UL9SPP') {
      var prem_const = [];
      prem_const = [QNIAPP.CONSTS.PREM, 'Instalment Premium with GST'];
      for (var i = 0; i < 2; i++) {
        ps_arr.push(prem_const[i]);
        ps_arr.push(Math.round(QNIAPP.OUT.premium));
        (ps_ci_arr.length > 0) ? ps_arr.push(ps_ci_arr[i]) : ps_arr.push(0);
        (ps_ib_arr.length > 0) ? ps_arr.push(ps_ib_arr[i]) : ps_arr.push(0);
				   /*(ps_pac_arr.length>0)?ps_arr.push(ps_pac_arr[i]):*/ps_arr.push(0);
        (ps_adc_arr.length > 0) ? ps_arr.push(ps_adc_arr[i]) : ps_arr.push(0);
        (ps_cc_arr.length > 0) ? ps_arr.push(ps_cc_arr[i]) : ps_arr.push(0);
        ps_arr.push(addCommas(ps_arr[1] + ps_arr[2] + ps_arr[3] + ps_arr[4] + ps_arr[5] + ps_arr[6]));
        QNIAPP.OUT.PS[i] = ps_arr;
        ps_arr = [];
      }
    }
    else {
      for (var i = 0; i < 3; i++) {
        ps_arr.push(prem_const_arr[i]);
        ps_arr.push(base_prem_arr[i]);
        if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'C4CI') || QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, 'INAD')) {
          if (QNIAPP.IN.id == "UL7EA2" || QNIAPP.IN.id == "UL7EA" || QNIAPP.IN.id == "UL8C2I" || QNIAPP.IN.id == "UL7EA1" || QNIAPP.IN.id == "UL8NIV") {
            ps_ci_arr.length > 0 ? ps_arr.push(ps_ci_arr[i]) : ps_arr.push(0);
            ps_ib_arr.length > 0 ? ps_arr.push(ps_ib_arr[i]) : ps_arr.push(0);
            ps_pac_arr.length > 0 ? ps_arr.push(ps_pac_arr[i]) : ps_arr.push(0);
            ps_adc_arr.length > 0 ? ps_arr.push(ps_adc_arr[i]) : ps_arr.push(0);
            ps_cc_arr.length > 0 ? ps_arr.push(ps_cc_arr[i]) : ps_arr.push(0);
            ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3] + ps_arr[4] + ps_arr[5] + ps_arr[6]);
          }
          else {
            ps_ci_arr.length > 0 ? ps_arr.push(ps_ci_arr[i]) : ps_arr.push(0);
            ps_ib_arr.length > 0 ? ps_arr.push(ps_ib_arr[i]) : ps_arr.push(0);
            ps_arr.push(ps_arr[1] + ps_arr[2] + ps_arr[3]);
          }
        } else {
          ps_arr.push(0);
          ps_arr.push(ps_arr[1] + ps_arr[2]);
        }
        QNIAPP.OUT.PS[i] = ps_arr;
        ps_arr = [];

      }
    }
  };
  UWR_ACT.checkAndSetSplRidersForUlip = function () {
    for (var i = 0; i < QNIAPP.lifeassured[0].rider.length; i++) {
      var rider_name = UWR_ACT.identifyRider(QNIAPP.lifeassured[0].rider[i].name);
      if (QNIAPP.COMM_CALC.isSplRider(QNIAPP.IN.id, rider_name)) {
        for (var k = 0; k < QNIAPP.IN.Qt.qtdtls.rider.length; k++) {
          if (QNIAPP.lifeassured[0].rider[i].name == QNIAPP.IN.Qt.qtdtls.rider[k].name_cd) {
            QNIAPP.IN.Qt.qtdtls.rider[k].deleteflg = QNIAPP.lifeassured[0].rider[i].deleteflg;
            if (QNIAPP.lifeassured[0].rider[i].emr && QNIAPP.lifeassured[0].rider[i].emr != "") {
              QNIAPP.IN.Qt.qtdtls.rider[k].emr = QNIAPP.lifeassured[0].rider[i].emr;
            }
            if (QNIAPP.lifeassured[0].rider[i].pma && QNIAPP.lifeassured[0].rider[i].pma != "") {
              QNIAPP.IN.Qt.qtdtls.rider[k].pma = QNIAPP.lifeassured[0].rider[i].pma;
            }
            UWR_ACT.checkandSetAlteredInputsforSplRider(QNIAPP.lifeassured[0].rider[i], QNIAPP.IN.Qt.qtdtls.rider[k]);
            break;
          }
        }
      }
    }

  };
  UWR_ACT.processEMRPMAForUlipSplRider = function (applicable_prem, index) {
    var LOCAL_MAX_PREM_PERCENT_INAD = 0.30;
    var LOCAL_MAX_PREM_PERCENT_C4CI = 1.00;
    var base_prem = QNIAPP.IN.Qt.qtdtls.premium;
    var la_index = 0;// considering single life
    QNIAPP.IN.Qt['rider'][index].excessPremium = [];
    QNIAPP.IN.Qt['rider'][index].excesspremium_emr = [];
    QNIAPP.IN.Qt['rider'][index].excesspremium_pma = [];
    //getting the applicable ratetable in case of emr and/or pma
    if (QNIAPP.IN.Qt.qtdtls.rider[index].name == 'INAD') {
      rateup_rt = require("../master/" + "INAD" + "/qni_inad_nu_rates.js");
    }
    else if (QNIAPP.IN.Qt.qtdtls.rider[index].name == 'C4CI') {
      rateup_rt = require("../master/" + "C4CI" + "/qni_c4ci_nu_rates.js");
    }
    var is_success = QNIAPP.UWR_ACT.calcExcessPremiumForUlipSplRider(applicable_prem, la_index, index);
    if (!is_success) {
      return false;
    }
    if ((QNIAPP.IN.Qt.qtdtls['rider'][index].emr || QNIAPP.IN.Qt.qtdtls['rider'][index].pma) && (QNIAPP.IN.Qt.qtdtls.rider[index].name == 'INAD' || QNIAPP.IN.Qt.qtdtls.rider[index].name == 'C4CI')) {
      QNIAPP.UWR_ACT.createEMRPMAObject_ELRiders(index); //same for IB,CI,EL rider
    }
    else {
      QNIAPP.IN.Qt['qtdtls']['rider'][index]['rateup']['MB']['yrwise'][0] = [];
      QNIAPP.IN.Qt['qtdtls']['rider'][index]['rateup']['MB']['yrwise'][0][0] = (QNIAPP.IN.Qt.qtdtls['rider'][index].emr) ? QNIAPP.IN.Qt.qtdtls['rider'][index].emr : 0;
      QNIAPP.IN.Qt['qtdtls']['rider'][index]['rateup']['MB']['yrwise'][0][1] = (QNIAPP.IN.Qt['rider'][index].excesspremium_emr[0]) ? QNIAPP.IN.Qt['rider'][index].excesspremium_emr[0] : 0;
      QNIAPP.IN.Qt['qtdtls']['rider'][index]['rateup']['MB']['yrwise'][0][2] = (QNIAPP.IN.Qt.qtdtls['rider'][index].pma) ? QNIAPP.IN.Qt.qtdtls['rider'][index].pma : 0;
      QNIAPP.IN.Qt['qtdtls']['rider'][index]['rateup']['MB']['yrwise'][0][3] = (QNIAPP.IN.Qt['rider'][index].excesspremium_pma[0]) ? QNIAPP.IN.Qt['rider'][index].excesspremium_pma[0] : 0;
    }
    QNIAPP.IN.Qt['rider'][index].excessPremium[la_index] = ((QNIAPP.IN.Qt['rider'][index].excesspremium_emr[la_index]) ? parseInt(QNIAPP.IN.Qt['rider'][index].excesspremium_emr[la_index]) : 0) + ((QNIAPP.IN.Qt['rider'][index].excesspremium_pma[la_index]) ? parseInt(QNIAPP.IN.Qt['rider'][index].excesspremium_pma[la_index]) : 0) + "";
    var rider_prem = parseInt(QNIAPP.IN.Qt['rider'][index].excessPremium[la_index]) + parseInt(QNIAPP.IN.Qt.qtdtls.rider[index].premium);
    var rider_name = QNIAPP.IN.Qt.qtdtls.rider[index].name;
    if (rider_name == 'INAD' || rider_name == 'PPR_ADC') {
      if (parseInt(rider_prem) > (parseFloat(LOCAL_MAX_PREM_PERCENT_INAD) * parseInt(base_prem))) {
        QNIAPP['ERR'].push('Calculated rider premium is greater than 30% of the base premium ' + base_prem);
        return false;
      }
    }
    if (rider_name == 'C4CI' || rider_name == 'PPR_PAC') {
      if (parseInt(rider_prem) > (parseFloat(LOCAL_MAX_PREM_PERCENT_C4CI) * parseInt(base_prem))) {
        QNIAPP['ERR'].push('Calculated rider premium is greater than 100% of the base premium ' + base_prem);
        return false;
      }
    }

    return true;
  };
  UWR_ACT.calcExcessPremiumForUlipSplRider = function (applicable_prem, la_index, index) {
    var rate_table_val_emr = 0;
    var rate_table_val_pma = 0;
    var PREM_CONV_FC = 0;
    var disc_rt = 0;
    var rider_name = QNIAPP.IN.Qt.qtdtls.rider[index].name;
    var mon_conv_fac = 1;
    var ppt_conv_factor = 1;
    var rider_term = QNIAPP.IN.Qt.qtdtls.rider[index].term;
    var rider_ppt = QNIAPP.IN.Qt.qtdtls.rider[index].ppt;
    var pptoption = (QNIAPP.IN.Qt.qtdtls.rider[index].pptopt) ? (QNIAPP.IN.Qt.qtdtls.rider[index].pptopt) : "";
    if (rider_name == "C4CI") {
      if (QNIAPP.C4CI_DISCOUNT.isDiscountApplicable(QNIAPP.IN.chnlptnr) && !(QNIAPP.IN.useposrates && QNIAPP.IN.useposrates == 'Y')) {
        disc_rt = QNIAPP.C4CI_DISC.get();
      }
      PREM_CONV_FC = window['QNIAPP']['C4CI_PREMIUM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
    }
    else if (rider_name == "INAD") {
      PREM_CONV_FC = window['QNIAPP']['INAD_PREMIUM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
    }
    else if (rider_name == "PPR_PAC" || rider_name == "PPR_ADC") {
      PREM_CONV_FC = window['QNIAPP']['PPR_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
      ppt_conv_factor = window['QNIAPP']['PPR_OPTA_B_CONVFC']['get'](rider_name);
      if (QNIAPP.PPR_DISCOUNT.isDiscountApplicable(QNIAPP.IN.chnlptnr) && !(QNIAPP.IN.useposrates && QNIAPP.IN.useposrates == 'Y')) {
        disc_rt = QNIAPP.PPR_DISC.get(rider_name);
      }
      if ((pptoption == 'Regular' || pptoption == 'Limited') && rider_term < 12) {
        mon_conv_fac = 12 / rider_ppt;
      }
    }

    //PREM_CONV_FC = window['QNIAPP']['C2P3DP_MIN_PREM']['getConvFactor'](QNIAPP.IN.Qt.qtdtls.freq);
    QNIAPP.IN.Qt['rider'][index].excesspremium_emr = [];
    QNIAPP.IN.Qt['rider'][index].excesspremium_pma = [];
    var pma = QNIAPP.IN.Qt.qtdtls.rider[index].pma;
    var emr = QNIAPP.IN.Qt.qtdtls.rider[index].emr;

    if (QNIAPP.IN.Qt.qtdtls.rider[index].emr && QNIAPP.IN.Qt.qtdtls.rider[index].emr != "") {
      if (rider_name == "INAD") {
        rate_table_val_emr = window['QNIAPP'][rider_name + '_RIDER_EMR']['get'](emr, pptoption, rider_term, rider_ppt);
      }
      else if (rider_name == "C4CI") {
        rate_table_val_emr = window['QNIAPP'][rider_name + '_RIDER_EMR']['get'](emr, rider_term, QNIAPP.IN.Qt.qtdtls.age, QNIAPP.IN.Qt.qtdtls.gender);
      }
      else if (rider_name == "PPR_PAC") {
        var pac_rt = QNIAPP.PPR_PRATE_OPTA.get('rate');
        pac_rt = pac_rt - (pac_rt * disc_rt);
        rate_table_val_emr = pac_rt * (emr / 100);

      }
      else if (rider_name == "PPR_ADC") {
        var adc_rt = QNIAPP.PPR_PRATE_OPTB.get('rate');
        adc_rt = adc_rt - (adc_rt * disc_rt);
        rate_table_val_emr = adc_rt * (emr / 100);

      }
      if (rate_table_val_emr && rate_table_val_emr !== 0) {
        if (rider_name == "INAD") {
          QNIAPP.IN.Qt['rider'][index].excesspremium_emr[la_index] = Math.round(((rate_table_val_emr * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][index].sumAssured)) / 1000) * PREM_CONV_FC);
        }
        else if (rider_name == "C4CI") {
          var excess_premium_emr = (((rate_table_val_emr * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][index].sumAssured)) / 1000) * PREM_CONV_FC);
          QNIAPP.IN.Qt['rider'][index].excesspremium_emr[la_index] = Math.round(excess_premium_emr - (excess_premium_emr * disc_rt));
        }
        else if (rider_name == "PPR_PAC" || rider_name == "PPR_ADC") {
          QNIAPP.IN.Qt['rider'][index].excesspremium_emr[la_index] = Math.round(((rate_table_val_emr * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][index].sumAssured)) / 1000) * PREM_CONV_FC * ppt_conv_factor * mon_conv_fac);
        }
      }
      else {
        QNIAPP.ERR.push("EMR Value not found in Table. Invalid !! Cannot Proceed");
        return false;
      }
    }
    if (QNIAPP.IN.Qt.qtdtls.rider[index].pma && QNIAPP.IN.Qt.qtdtls.rider[index].pma != "") {
      if (QNIAPP.IN.Qt.qtdtls.rider[index].name == "INAD") {
        rate_table_val_pma = window['QNIAPP'][rider_name + '_RIDER_PMA']['get'](pma, pptoption, rider_term, rider_ppt);
      }
      else if (QNIAPP.IN.Qt.qtdtls.rider[index].name == "C4CI") {
        rate_table_val_pma = window['QNIAPP'][rider_name + '_RIDER_PMA']['get'](pma, rider_term, QNIAPP.IN.Qt.qtdtls.age, QNIAPP.IN.Qt.qtdtls.gender);
      }
      else {
        rate_table_val_pma = QNIAPP.IN.Qt.qtdtls.rider[index].pma;
      }

      if (rate_table_val_pma && rate_table_val_pma != "") {
        if (rider_name == "INAD") {
          QNIAPP.IN.Qt['rider'][index].excesspremium_pma[la_index] = Math.round(((rate_table_val_pma * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][index].sumAssured)) / 1000) * PREM_CONV_FC);
        }
        else if (rider_name == "C4CI") {
          var excess_premium_pma = (((rate_table_val_pma * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][index].sumAssured)) / 1000) * PREM_CONV_FC);
          QNIAPP.IN.Qt['rider'][index].excesspremium_pma[la_index] = Math.round(excess_premium_pma - (excess_premium_pma * disc_rt));
        }
        else if (rider_name == "PPR_PAC" || rider_name == "PPR_ADC") {
          QNIAPP.IN.Qt['rider'][index].excesspremium_pma[la_index] = Math.round(((rate_table_val_pma * parseInt(QNIAPP.IN.Qt.qtdtls['rider'][index].sumAssured)) / 1000) * PREM_CONV_FC * ppt_conv_factor * mon_conv_fac);
        }

      }
      else {
        QNIAPP.ERR.push("PML Value not found in Table. Invalid !! Cannot Proceed");
        return false;
      }
    }
    //QNIAPP.IN.Qt['qtdtls']['rider'][0]['rateup']['MB']['pma'] = QNIAPP.lifeassured[la_index]['rider'][0].pma;

    //adding up the rates and storing it in Qniapp
    return true;
  };

  UWR_ACT.getCounterSA = function (base_premium, base_sa, pma_rt, emr_rt, cat) {
    logger.log("base_premium ------->" + base_premium + "--------------base_sa " + base_sa + "------------pma_rt " + pma_rt + "-----------emr_rt " + emr_rt);
    var assume_sa = base_sa;
    var tot_prm = 0;
    var decPrem = true;
    var x = parseInt(base_premium);
    var factor = Math.pow(10, x.toString().length - 2);
    var count = 0;
    do {
      count++;
      assume_sa = decPrem ? (assume_sa - factor) : (assume_sa + factor);
      var excesspremium = 0;
      QNIAPP.IN.Qt.qtdtls.sumAssured = assume_sa;
      eval("QNIAPP." + QNIAPP.IN.Qt.qtdtls.id + ".calcQuote()");
      if (cat === "T") {
        excesspremium = Math.round((parseInt(assume_sa) * emr_rt) + (pma_rt * (parseInt(assume_sa))));
      } else if (cat === "P") {
        excesspremium = (QNIAPP.OUT.premium * (QNIAPP.lifeassured[la_index].emr / 100) * emr_rt) + (pma_rt * (parseInt(assume_sa)));
      }
      tot_prm = (QNIAPP.OUT.premium) + parseInt(excesspremium);
      if ((tot_prm > base_premium) && !decPrem) {
        decPrem = true;
        factor = factor / 10;
      } else if ((tot_prm < base_premium) && decPrem) {
        decPrem = false;
        factor = factor / 10;
      }
      if (count > 100000) { break; }
      //console.log('P---> '+QNIAPP.OUT.premium+"   Ep ----> "+parseInt(excesspremium)+"   Tp ---->"+tot_prm  + "  S2----->"+assume_sa);
    } while (!((base_premium - tot_prm < 1 ? -1 * (base_premium - tot_prm) : (base_premium - tot_prm)) <= 1));
    logger.log("Count ------>" + count);
    return assume_sa;
  };

  return UWR_ACT;
}();
// var jsFlutterMap = {}
function msgprint() {
  // Print.postMessage("From JS :- " + JSON.stringify(jsFlutterMap));
  return FLUTTER_JS_ENGINE.postMessage(QNIAPP['IN']['Qt']['qtdtls']['prodcat']);
  //    QNIAPP["IN"]["Qt"]["qtdtls"]["dob"] = param["dob"];
  //    QNIAPP["IN"]["Qt"]["dob"] = param["dob"];
    //  QNIAPP['SANCHP'].validate('I');
  //    console.log(QNIAPP.OUT);
  //    Print.postMessage("QNIAPP.OUT");
  //    Print.postMessage(QNIAPP.OUT);
}
